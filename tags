!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	lib/armadillo-9.800.2/include/armadillo_bits/GlueCube_bones.hpp	/^  const T1& A;  \/\/!< first operand;  must be derived from BaseCube$/;"	m	class:GlueCube
A	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^  const T1&   A;          \/\/!< first operand;  must be derived from Base$/;"	m	class:Glue
A	lib/armadillo-9.800.2/include/armadillo_bits/SpGlue_bones.hpp	/^  const T1&       A;    \/\/!< first operand;  must be derived from SpBase$/;"	m	class:SpGlue
A	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^    const T1& A;$/;"	m	class:arma_str::basic_format
A	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^    const std::string A;$/;"	m	class:arma_str::format
A	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  mutable podarray<eT> A;$/;"	m	class:mat_injector_row
A	lib/armadillo-9.800.2/include/armadillo_bits/mtGlueCube_bones.hpp	/^  arma_aligned const T1&   A;         \/\/!< first operand;  must be derived from BaseCube$/;"	m	class:mtGlueCube
A	lib/armadillo-9.800.2/include/armadillo_bits/mtGlue_bones.hpp	/^  arma_aligned const T1&   A;         \/\/!< first operand;  must be derived from Base$/;"	m	class:mtGlue
A	lib/armadillo-9.800.2/include/armadillo_bits/mtSpGlue_bones.hpp	/^  const T1& A;    \/\/!< first operand;  must be derived from SpBase$/;"	m	class:mtSpGlue
AA	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  mutable field<oT>* AA;$/;"	m	class:field_injector_row
AA	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  mutable podarray< field_injector_row<object_type>* >* AA;$/;"	m	class:field_injector
AA	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  mutable podarray< mat_injector_row<elem_type>* >* AA;$/;"	m	class:mat_injector
AND_THEN	lib/armadillo-9.800.2/tests/catch.hpp	11587;"	d
AND_WHEN	lib/armadillo-9.800.2/tests/catch.hpp	11585;"	d
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	425;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	428;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	431;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	434;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	438;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	440;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	442;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	446;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	449;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	452;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	457;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	460;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	463;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	468;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	471;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	474;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	477;"	d	file:
ARMA_64BIT_WORD	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	87;"	d
ARMA_64BIT_WORD	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	88;"	d
ARMA_64BIT_WORD	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	94;"	d
ARMA_64BIT_WORD	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	269;"	d
ARMA_ALLOW_LONG	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	81;"	d
ARMA_ATLAS_INCLUDE_DIR	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	235;"	d
ARMA_AUX_INCDIRS	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	299;"	d
ARMA_AUX_LIBS	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	298;"	d
ARMA_BLAS_SDOT_BUG	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	139;"	d
ARMA_BLAS_SDOT_BUG	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	140;"	d
ARMA_BLAS_UNDERSCORE	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	67;"	d
ARMA_CBLAS	lib/armadillo-9.800.2/include/armadillo_bits/include_atlas.hpp	28;"	d
ARMA_CBLAS	lib/armadillo-9.800.2/include/armadillo_bits/include_atlas.hpp	39;"	d
ARMA_CERR_STREAM	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	196;"	d
ARMA_CERR_STREAM	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	198;"	d
ARMA_CLAPACK	lib/armadillo-9.800.2/include/armadillo_bits/include_atlas.hpp	29;"	d
ARMA_CLAPACK	lib/armadillo-9.800.2/include/armadillo_bits/include_atlas.hpp	40;"	d
ARMA_COUT_STREAM	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	187;"	d
ARMA_COUT_STREAM	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	189;"	d
ARMA_DETECTED_FAKE_CLANG	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	266;"	d
ARMA_DETECTED_FAKE_CLANG	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	267;"	d
ARMA_DETECTED_FAKE_GCC	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	173;"	d
ARMA_DETECTED_FAKE_GCC	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	174;"	d
ARMA_DONT_PRINT_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_extra.hpp	28;"	d
ARMA_DONT_PRINT_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_extra.hpp	29;"	d
ARMA_EXTRA_DEBUG	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1239;"	d
ARMA_FAKE_CLANG	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	548;"	d
ARMA_FAKE_GCC	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	547;"	d
ARMA_FNSIG	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	156;"	d
ARMA_FNSIG	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	159;"	d
ARMA_FNSIG	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	161;"	d
ARMA_FNSIG	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	163;"	d
ARMA_FNSIG	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	165;"	d
ARMA_FNSIG	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	167;"	d
ARMA_FORTRAN_CHARLEN_TYPE	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	171;"	d
ARMA_FORTRAN_CHARLEN_TYPE	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	173;"	d
ARMA_FORTRAN_CHARLEN_TYPE	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	177;"	d
ARMA_GCC_VERSION	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	187;"	d
ARMA_GCC_VERSION	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	188;"	d
ARMA_GCC_VERSION	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	549;"	d
ARMA_GOOD_COMPILER	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	112;"	d
ARMA_GOOD_COMPILER	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	204;"	d
ARMA_GOOD_COMPILER	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	280;"	d
ARMA_HAS_SPMAT	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	718;"	d
ARMA_HAVE_ALIGNED_ATTRIBUTE	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	226;"	d
ARMA_HAVE_ALIGNED_ATTRIBUTE	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	227;"	d
ARMA_HAVE_ALIGNED_ATTRIBUTE	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	293;"	d
ARMA_HAVE_ALIGNED_ATTRIBUTE	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	294;"	d
ARMA_HAVE_GCC_ASSUME_ALIGNED	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	243;"	d
ARMA_HAVE_GCC_ASSUME_ALIGNED	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	336;"	d
ARMA_HAVE_GCC_ASSUME_ALIGNED	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	337;"	d
ARMA_HAVE_GCC_ASSUME_ALIGNED	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	361;"	d
ARMA_HAVE_GETTIMEOFDAY	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	115;"	d
ARMA_HAVE_GETTIMEOFDAY	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	124;"	d
ARMA_HAVE_ICC_ASSUME_ALIGNED	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	362;"	d
ARMA_HAVE_ICC_ASSUME_ALIGNED	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	363;"	d
ARMA_HAVE_ISFINITE	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	117;"	d
ARMA_HAVE_ISFINITE	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	255;"	d
ARMA_HAVE_ISFINITE	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	342;"	d
ARMA_HAVE_ISINF	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	119;"	d
ARMA_HAVE_ISINF	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	257;"	d
ARMA_HAVE_ISINF	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	344;"	d
ARMA_HAVE_ISNAN	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	120;"	d
ARMA_HAVE_ISNAN	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	258;"	d
ARMA_HAVE_ISNAN	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	345;"	d
ARMA_HAVE_LOG1P	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	118;"	d
ARMA_HAVE_LOG1P	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	256;"	d
ARMA_HAVE_LOG1P	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	343;"	d
ARMA_HAVE_POSIX_MEMALIGN	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	133;"	d
ARMA_HAVE_POSIX_MEMALIGN	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	134;"	d
ARMA_HAVE_POSIX_MEMALIGN	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	152;"	d
ARMA_HAVE_SNPRINTF	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	116;"	d
ARMA_HAVE_SNPRINTF	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	254;"	d
ARMA_HAVE_SNPRINTF	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	341;"	d
ARMA_HAVE_TR1	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	114;"	d
ARMA_HAVE_TR1	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	238;"	d
ARMA_HDF5_HEADER	lib/armadillo-9.800.2/include/armadillo_bits/include_hdf5.hpp	24;"	d
ARMA_HDF5_HEADER	lib/armadillo-9.800.2/include/armadillo_bits/include_hdf5.hpp	30;"	d
ARMA_INCFILE_WRAP	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	78;"	d
ARMA_INCFILE_WRAP	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	79;"	d
ARMA_MAT_PREALLOC	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	147;"	d
ARMA_MAX_BLAS_INT	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	121;"	d
ARMA_MAX_BLAS_INT	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	124;"	d
ARMA_MAX_BLAS_INT	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	127;"	d
ARMA_MAX_UHWORD	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	106;"	d
ARMA_MAX_UHWORD	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	97;"	d
ARMA_MAX_UWORD	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	105;"	d
ARMA_MAX_UWORD	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	96;"	d
ARMA_OPENMP_THREADS	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	161;"	d
ARMA_OPENMP_THRESHOLD	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	155;"	d
ARMA_OPTIMISE_SOLVE_BAND	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	129;"	d
ARMA_OPTIMISE_SOLVE_BAND	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	278;"	d
ARMA_OPTIMISE_SOLVE_SYMPD	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	134;"	d
ARMA_OPTIMISE_SOLVE_SYMPD	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	282;"	d
ARMA_PRINT_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	231;"	d
ARMA_PRINT_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	232;"	d
ARMA_PRINT_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	367;"	d
ARMA_PRINT_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	368;"	d
ARMA_PRINT_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	388;"	d
ARMA_PRINT_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	389;"	d
ARMA_PRINT_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	460;"	d
ARMA_PRINT_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	461;"	d
ARMA_PRINT_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	474;"	d
ARMA_PRINT_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	475;"	d
ARMA_PRINT_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	551;"	d
ARMA_PRINT_CXX98_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	195;"	d
ARMA_PRINT_CXX98_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	196;"	d
ARMA_PRINT_CXX98_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	382;"	d
ARMA_PRINT_CXX98_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	383;"	d
ARMA_PRINT_CXX98_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	550;"	d
ARMA_PRINT_ERRORS	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	204;"	d
ARMA_PRINT_ERRORS	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	286;"	d
ARMA_PRINT_HDF5_ERRORS	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	290;"	d
ARMA_PRINT_OPENMP_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	515;"	d
ARMA_PRINT_OPENMP_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	516;"	d
ARMA_PRINT_OPENMP_CXX11_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	553;"	d
ARMA_PRINT_OPENMP_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	498;"	d
ARMA_PRINT_OPENMP_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	499;"	d
ARMA_PRINT_OPENMP_WARNING	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	552;"	d
ARMA_SIMPLE_LOOPS	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	109;"	d
ARMA_SIMPLE_LOOPS	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	110;"	d
ARMA_SIMPLE_LOOPS	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	247;"	d
ARMA_SIMPLE_LOOPS	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	250;"	d
ARMA_SLU_STR	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	85;"	d
ARMA_SLU_STR2	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	86;"	d
ARMA_SLU_SUPERLU_ENUM_CONSTS_H	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	89;"	d
ARMA_SLU_SUPERLU_ENUM_CONSTS_H	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	92;"	d
ARMA_SLU_SUPERLU_ENUM_CONSTS_H	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	99;"	d
ARMA_SLU_SUPERMATRIX_H	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	88;"	d
ARMA_SLU_SUPERMATRIX_H	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	91;"	d
ARMA_SLU_SUPERMATRIX_H	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	98;"	d
ARMA_STR1	lib/armadillo-9.800.2/include/armadillo_bits/include_atlas.hpp	25;"	d
ARMA_STR1	lib/armadillo-9.800.2/include/armadillo_bits/include_atlas.hpp	37;"	d
ARMA_STR1	lib/armadillo-9.800.2/include/armadillo_bits/include_hdf5.hpp	21;"	d
ARMA_STR1	lib/armadillo-9.800.2/include/armadillo_bits/include_hdf5.hpp	28;"	d
ARMA_STR2	lib/armadillo-9.800.2/include/armadillo_bits/include_atlas.hpp	26;"	d
ARMA_STR2	lib/armadillo-9.800.2/include/armadillo_bits/include_atlas.hpp	38;"	d
ARMA_STR2	lib/armadillo-9.800.2/include/armadillo_bits/include_hdf5.hpp	22;"	d
ARMA_STR2	lib/armadillo-9.800.2/include/armadillo_bits/include_hdf5.hpp	29;"	d
ARMA_SUPERLU_INCLUDE_DIR	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	230;"	d
ARMA_U64_IS_LONG	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	70;"	d
ARMA_USE_ARPACK	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	225;"	d
ARMA_USE_ATLAS	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	234;"	d
ARMA_USE_BLAS	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	217;"	d
ARMA_USE_BLAS	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	26;"	d
ARMA_USE_CXX11	lib/armadillo-9.800.2/include/armadillo_bits/compiler_extra.hpp	19;"	d
ARMA_USE_CXX11	lib/armadillo-9.800.2/include/armadillo_bits/compiler_extra.hpp	20;"	d
ARMA_USE_CXX11	lib/armadillo-9.800.2/include/armadillo_bits/compiler_extra.hpp	26;"	d
ARMA_USE_CXX11	lib/armadillo-9.800.2/include/armadillo_bits/compiler_extra.hpp	27;"	d
ARMA_USE_CXX11	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	248;"	d
ARMA_USE_CXX11	lib/armadillo-9.800.2/src/wrapper1.cpp	22;"	d	file:
ARMA_USE_CXX11	lib/armadillo-9.800.2/src/wrapper1.cpp	23;"	d	file:
ARMA_USE_CXX11	lib/armadillo-9.800.2/src/wrapper2.cpp	22;"	d	file:
ARMA_USE_CXX11	lib/armadillo-9.800.2/src/wrapper2.cpp	23;"	d	file:
ARMA_USE_EXTERN_CXX11_RNG	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	22;"	d
ARMA_USE_EXTERN_CXX11_RNG	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	27;"	d
ARMA_USE_EXTERN_CXX11_RNG	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	249;"	d
ARMA_USE_EXTERN_CXX11_RNG	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	265;"	d
ARMA_USE_FORTRAN_HIDDEN_ARGS	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	244;"	d
ARMA_USE_FORTRAN_HIDDEN_ARGS	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	77;"	d
ARMA_USE_FORTRAN_HIDDEN_ARGS	lib/armadillo-9.800.2/src/wrapper1.cpp	29;"	d	file:
ARMA_USE_FORTRAN_HIDDEN_ARGS	lib/armadillo-9.800.2/src/wrapper2.cpp	30;"	d	file:
ARMA_USE_FORTRAN_HIDDEN_ARGS	lib/armadillo-9.800.2/src/wrapper2.cpp	31;"	d	file:
ARMA_USE_HDF5	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	140;"	d
ARMA_USE_HDF5	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	141;"	d
ARMA_USE_HDF5	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	273;"	d
ARMA_USE_HDF5	lib/armadillo-9.800.2/include/armadillo_bits/include_hdf5.hpp	35;"	d
ARMA_USE_HDF5_ALT	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	240;"	d
ARMA_USE_HDF5_ALT	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	274;"	d
ARMA_USE_HDF5_ALT	lib/armadillo-9.800.2/include/armadillo_bits/include_hdf5.hpp	36;"	d
ARMA_USE_HDF5_ALT	lib/armadillo-9.800.2/src/wrapper1.cpp	57;"	d	file:
ARMA_USE_LAPACK	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	19;"	d
ARMA_USE_LAPACK	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	213;"	d
ARMA_USE_NEWARP	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	221;"	d
ARMA_USE_NEWARP	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	34;"	d
ARMA_USE_OPENMP	lib/armadillo-9.800.2/include/armadillo_bits/compiler_extra.hpp	34;"	d
ARMA_USE_OPENMP	lib/armadillo-9.800.2/include/armadillo_bits/compiler_extra.hpp	35;"	d
ARMA_USE_OPENMP	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	497;"	d
ARMA_USE_OPENMP	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	529;"	d
ARMA_USE_OPENMP	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	253;"	d
ARMA_USE_SUPERLU	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	229;"	d
ARMA_USE_U64S64	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	102;"	d
ARMA_USE_U64S64	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	103;"	d
ARMA_USE_U64S64	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	83;"	d
ARMA_USE_U64S64	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	84;"	d
ARMA_USE_WRAPPER	lib/armadillo-9.800.2/include/armadillo_bits/config.hpp	239;"	d
ARMA_USE_WRAPPER	lib/armadillo-9.800.2/src/wrapper1.cpp	28;"	d	file:
ARMA_USE_WRAPPER	lib/armadillo-9.800.2/src/wrapper2.cpp	28;"	d	file:
ARMA_VERSION_MAJOR	lib/armadillo-9.800.2/include/armadillo_bits/arma_version.hpp	22;"	d
ARMA_VERSION_MINOR	lib/armadillo-9.800.2/include/armadillo_bits/arma_version.hpp	23;"	d
ARMA_VERSION_NAME	lib/armadillo-9.800.2/include/armadillo_bits/arma_version.hpp	25;"	d
ARMA_VERSION_PATCH	lib/armadillo-9.800.2/include/armadillo_bits/arma_version.hpp	24;"	d
AllOf	lib/armadillo-9.800.2/tests/catch.hpp	/^    Impl::MatchAllOf<T> AllOf( Impl::MatcherBase<T> const& m1, Impl::MatcherBase<T> const& m2 ) {$/;"	f	namespace:Catch::Matchers
AllOf	lib/armadillo-9.800.2/tests/catch.hpp	/^    Impl::MatchAllOf<T> AllOf( Impl::MatcherBase<T> const& m1, Impl::MatcherBase<T> const& m2, Impl::MatcherBase<T> const& m3 ) {$/;"	f	namespace:Catch::Matchers
AnyOf	lib/armadillo-9.800.2/tests/catch.hpp	/^    Impl::MatchAnyOf<T> AnyOf( Impl::MatcherBase<T> const& m1, Impl::MatcherBase<T> const& m2 ) {$/;"	f	namespace:Catch::Matchers
AnyOf	lib/armadillo-9.800.2/tests/catch.hpp	/^    Impl::MatchAnyOf<T> AnyOf( Impl::MatcherBase<T> const& m1, Impl::MatcherBase<T> const& m2, Impl::MatcherBase<T> const& m3 ) {$/;"	f	namespace:Catch::Matchers
Arg	include/catch.hpp	/^    class Arg : public ParserRefImpl<Arg> {$/;"	c	namespace:Catch
AssertionInfo	include/catch.hpp	/^    struct AssertionInfo$/;"	s	namespace:Catch
AssertionInfo	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct AssertionInfo$/;"	s	namespace:Catch
AssertionResult	lib/armadillo-9.800.2/tests/catch.hpp	/^    class AssertionResult {$/;"	c	namespace:Catch
AssertionResultData	lib/armadillo-9.800.2/tests/catch.hpp	/^        AssertionResultData() : decomposedExpression( CATCH_NULL )$/;"	f	struct:Catch::AssertionResultData
AssertionResultData	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct AssertionResultData$/;"	s	namespace:Catch
AutoReg	include/catch.hpp	/^struct AutoReg : NonCopyable {$/;"	s	namespace:Catch
AutoReg	lib/armadillo-9.800.2/tests/catch.hpp	/^    AutoReg$/;"	f	struct:Catch::AutoReg
AutoReg	lib/armadillo-9.800.2/tests/catch.hpp	/^struct AutoReg {$/;"	s	namespace:Catch
B	lib/armadillo-9.800.2/include/armadillo_bits/GlueCube_bones.hpp	/^  const T2& B;  \/\/!< second operand; must be derived from BaseCube$/;"	m	class:GlueCube
B	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^  const T2&   B;          \/\/!< second operand; must be derived from Base$/;"	m	class:Glue
B	lib/armadillo-9.800.2/include/armadillo_bits/SpGlue_bones.hpp	/^  const T2&       B;    \/\/!< second operand; must be derived from SpBase$/;"	m	class:SpGlue
B	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^    const T2& B;$/;"	m	class:arma_str::basic_format
B	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  mutable podarray<eT> B;$/;"	m	class:mat_injector_row
B	lib/armadillo-9.800.2/include/armadillo_bits/mtGlueCube_bones.hpp	/^  arma_aligned const T2&   B;         \/\/!< second operand; must be derived from BaseCube$/;"	m	class:mtGlueCube
B	lib/armadillo-9.800.2/include/armadillo_bits/mtGlue_bones.hpp	/^  arma_aligned const T2&   B;         \/\/!< second operand; must be derived from Base$/;"	m	class:mtGlue
B	lib/armadillo-9.800.2/include/armadillo_bits/mtSpGlue_bones.hpp	/^  const T2& B;    \/\/!< second operand; must be derived from SpBase$/;"	m	class:mtSpGlue
BB	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  mutable field<oT>* BB;$/;"	m	class:field_injector_row
BB	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  mutable podarray< field_injector_row<object_type>* >* BB;$/;"	m	class:field_injector
BB	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  mutable podarray< mat_injector_row<elem_type>* >* BB;$/;"	m	class:mat_injector
BOTH_ENDS	lib/armadillo-9.800.2/include/armadillo_bits/newarp_EigsSelect.hpp	/^    BOTH_ENDS          \/\/!< Select eigenvalues half from each end of the spectrum.$/;"	e	enum:newarp::EigsSelect::SELECT_EIGENVALUE
Base	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base$/;"	s
BaseCube	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_bones.hpp	/^struct BaseCube$/;"	s
BaseCube_eval	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_bones.hpp	/^struct BaseCube_eval {};$/;"	s
BaseCube_eval	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_bones.hpp	/^struct BaseCube_eval<elem_type, derived, false> { typedef BaseCube_eval_expr<elem_type, derived> result; };$/;"	s
BaseCube_eval	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_bones.hpp	/^struct BaseCube_eval<elem_type, derived, true>  { typedef BaseCube_eval_Cube<elem_type, derived>  result; };$/;"	s
BaseCube_eval_Cube	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_bones.hpp	/^struct BaseCube_eval_Cube$/;"	s
BaseCube_eval_expr	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_bones.hpp	/^struct BaseCube_eval_expr$/;"	s
Base_eval	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_eval {};$/;"	s
Base_eval	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_eval<elem_type, derived, false> { typedef Base_eval_expr<elem_type, derived> result; };$/;"	s
Base_eval	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_eval<elem_type, derived, true>  { typedef Base_eval_Mat<elem_type, derived>  result; };$/;"	s
Base_eval_Mat	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_eval_Mat$/;"	s
Base_eval_expr	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_eval_expr$/;"	s
Base_extra	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_extra {};$/;"	s
Base_extra	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_extra<elem_type, derived, false> { typedef Base_extra_no<elem_type, derived>  result; };$/;"	s
Base_extra	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_extra<elem_type, derived, true>  { typedef Base_extra_yes<elem_type, derived> result; };$/;"	s
Base_extra_no	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_extra_no$/;"	s
Base_extra_yes	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_extra_yes$/;"	s
Base_trans	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_trans {};$/;"	s
Base_trans	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_trans<derived, false> { typedef Base_trans_default<derived> result; };$/;"	s
Base_trans	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_trans<derived, true>  { typedef Base_trans_cx<derived>      result; };$/;"	s
Base_trans_cx	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_trans_cx$/;"	s
Base_trans_default	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_trans_default$/;"	s
BorgType	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct BorgType {$/;"	s	namespace:Catch::Detail
CATCH_AND_THEN	lib/armadillo-9.800.2/tests/catch.hpp	11501;"	d
CATCH_AND_WHEN	lib/armadillo-9.800.2/tests/catch.hpp	11499;"	d
CATCH_ANON_TEST_CASE	lib/armadillo-9.800.2/tests/catch.hpp	11482;"	d
CATCH_ARC_ENABLED	include/catch.hpp	1505;"	d
CATCH_ARC_ENABLED	lib/armadillo-9.800.2/tests/catch.hpp	1442;"	d
CATCH_ARC_STRONG	include/catch.hpp	1523;"	d
CATCH_ARC_STRONG	include/catch.hpp	1539;"	d
CATCH_ARC_STRONG	lib/armadillo-9.800.2/tests/catch.hpp	1460;"	d
CATCH_ARC_STRONG	lib/armadillo-9.800.2/tests/catch.hpp	1476;"	d
CATCH_AUTO_PTR	lib/armadillo-9.800.2/tests/catch.hpp	366;"	d
CATCH_AUTO_PTR	lib/armadillo-9.800.2/tests/catch.hpp	368;"	d
CATCH_BREAK_INTO_DEBUGGER	include/catch.hpp	7834;"	d
CATCH_BREAK_INTO_DEBUGGER	lib/armadillo-9.800.2/tests/catch.hpp	2080;"	d
CATCH_CAPTURE	lib/armadillo-9.800.2/tests/catch.hpp	11460;"	d
CATCH_CATCH_ALL	include/catch.hpp	432;"	d
CATCH_CATCH_ANON	include/catch.hpp	433;"	d
CATCH_CHECK	lib/armadillo-9.800.2/tests/catch.hpp	11438;"	d
CATCH_CHECKED_ELSE	lib/armadillo-9.800.2/tests/catch.hpp	11441;"	d
CATCH_CHECKED_IF	lib/armadillo-9.800.2/tests/catch.hpp	11440;"	d
CATCH_CHECK_FALSE	lib/armadillo-9.800.2/tests/catch.hpp	11439;"	d
CATCH_CHECK_NOFAIL	lib/armadillo-9.800.2/tests/catch.hpp	11442;"	d
CATCH_CHECK_NOTHROW	lib/armadillo-9.800.2/tests/catch.hpp	11447;"	d
CATCH_CHECK_THAT	lib/armadillo-9.800.2/tests/catch.hpp	11449;"	d
CATCH_CHECK_THROWS	lib/armadillo-9.800.2/tests/catch.hpp	11444;"	d
CATCH_CHECK_THROWS_AS	lib/armadillo-9.800.2/tests/catch.hpp	11445;"	d
CATCH_CHECK_THROWS_WITH	lib/armadillo-9.800.2/tests/catch.hpp	11446;"	d
CATCH_CLARA_CONFIG_CONSOLE_WIDTH	include/catch.hpp	8309;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	include/catch.hpp	8286;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	include/catch.hpp	8288;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	include/catch.hpp	8313;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	include/catch.hpp	8343;"	d
CATCH_CONFIG_ALL_PARTS	include/catch.hpp	51;"	d
CATCH_CONFIG_ANDROID_LOGWRITE	include/catch.hpp	393;"	d
CATCH_CONFIG_COLOUR_NONE	include/catch.hpp	187;"	d
CATCH_CONFIG_COLOUR_NONE	include/catch.hpp	237;"	d
CATCH_CONFIG_COLOUR_NONE	include/catch.hpp	292;"	d
CATCH_CONFIG_COLOUR_NONE	lib/armadillo-9.800.2/tests/catch.hpp	150;"	d
CATCH_CONFIG_COLOUR_WINDOWS	lib/armadillo-9.800.2/tests/catch.hpp	7854;"	d
CATCH_CONFIG_CONSOLE_WIDTH	include/catch.hpp	5251;"	d
CATCH_CONFIG_CONSOLE_WIDTH	lib/armadillo-9.800.2/tests/catch.hpp	3889;"	d
CATCH_CONFIG_COUNTER	include/catch.hpp	334;"	d
CATCH_CONFIG_COUNTER	lib/armadillo-9.800.2/tests/catch.hpp	316;"	d
CATCH_CONFIG_CPP11_GENERATED_METHODS	lib/armadillo-9.800.2/tests/catch.hpp	292;"	d
CATCH_CONFIG_CPP11_IS_ENUM	lib/armadillo-9.800.2/tests/catch.hpp	295;"	d
CATCH_CONFIG_CPP11_LONG_LONG	lib/armadillo-9.800.2/tests/catch.hpp	304;"	d
CATCH_CONFIG_CPP11_NOEXCEPT	lib/armadillo-9.800.2/tests/catch.hpp	289;"	d
CATCH_CONFIG_CPP11_NULLPTR	lib/armadillo-9.800.2/tests/catch.hpp	286;"	d
CATCH_CONFIG_CPP11_OVERRIDE	lib/armadillo-9.800.2/tests/catch.hpp	307;"	d
CATCH_CONFIG_CPP11_SHUFFLE	lib/armadillo-9.800.2/tests/catch.hpp	319;"	d
CATCH_CONFIG_CPP11_TO_STRING	include/catch.hpp	349;"	d
CATCH_CONFIG_CPP11_TUPLE	lib/armadillo-9.800.2/tests/catch.hpp	298;"	d
CATCH_CONFIG_CPP11_TYPE_TRAITS	lib/armadillo-9.800.2/tests/catch.hpp	322;"	d
CATCH_CONFIG_CPP11_UNIQUE_PTR	lib/armadillo-9.800.2/tests/catch.hpp	310;"	d
CATCH_CONFIG_CPP17_BYTE	include/catch.hpp	369;"	d
CATCH_CONFIG_CPP17_OPTIONAL	include/catch.hpp	353;"	d
CATCH_CONFIG_CPP17_STRING_VIEW	include/catch.hpp	361;"	d
CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS	include/catch.hpp	357;"	d
CATCH_CONFIG_CPP17_VARIANT	include/catch.hpp	365;"	d
CATCH_CONFIG_DEFAULT_REPORTER	include/catch.hpp	5291;"	d
CATCH_CONFIG_DEFAULT_REPORTER	include/catch.hpp	5294;"	d
CATCH_CONFIG_DEFAULT_REPORTER	lib/armadillo-9.800.2/tests/catch.hpp	6968;"	d
CATCH_CONFIG_DISABLE_EXCEPTIONS	include/catch.hpp	381;"	d
CATCH_CONFIG_DISABLE_MATCHERS	include/catch.hpp	59;"	d
CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER	include/catch.hpp	1875;"	d
CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER	include/catch.hpp	62;"	d
CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER	include/catch.hpp	1876;"	d
CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER	include/catch.hpp	1872;"	d
CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER	include/catch.hpp	1873;"	d
CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER	include/catch.hpp	1874;"	d
CATCH_CONFIG_EXTERNAL_INTERFACES	include/catch.hpp	57;"	d
CATCH_CONFIG_GLOBAL_NEXTAFTER	include/catch.hpp	397;"	d
CATCH_CONFIG_MAIN	test/test_main.cpp	1;"	d	file:
CATCH_CONFIG_NEW_CAPTURE	include/catch.hpp	377;"	d
CATCH_CONFIG_NO_CPP17_VARIANT	include/catch.hpp	323;"	d
CATCH_CONFIG_POLYFILL_ISNAN	include/catch.hpp	385;"	d
CATCH_CONFIG_POSIX_SIGNALS	include/catch.hpp	341;"	d
CATCH_CONFIG_POSIX_SIGNALS	lib/armadillo-9.800.2/tests/catch.hpp	329;"	d
CATCH_CONFIG_RUNNER	lib/armadillo-9.800.2/tests/main.cpp	20;"	d	file:
CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR	include/catch.hpp	441;"	d
CATCH_CONFIG_USE_ASYNC	include/catch.hpp	389;"	d
CATCH_CONFIG_VARIADIC_MACROS	lib/armadillo-9.800.2/tests/catch.hpp	301;"	d
CATCH_CONFIG_WCHAR	include/catch.hpp	345;"	d
CATCH_CONFIG_WINDOWS_SEH	include/catch.hpp	337;"	d
CATCH_CONFIG_WINDOWS_SEH	lib/armadillo-9.800.2/tests/catch.hpp	325;"	d
CATCH_CPP11_OR_GREATER	lib/armadillo-9.800.2/tests/catch.hpp	103;"	d
CATCH_CPP14_OR_GREATER	include/catch.hpp	126;"	d
CATCH_CPP14_OR_GREATER	lib/armadillo-9.800.2/tests/catch.hpp	107;"	d
CATCH_CPP17_OR_GREATER	include/catch.hpp	130;"	d
CATCH_DEFER	include/catch.hpp	723;"	d
CATCH_DEFINED_NOMINMAX	include/catch.hpp	7850;"	d
CATCH_DEFINED_WIN32_LEAN_AND_MEAN	include/catch.hpp	7854;"	d
CATCH_EMPTY	include/catch.hpp	722;"	d
CATCH_ENFORCE	include/catch.hpp	3878;"	d
CATCH_ERROR	include/catch.hpp	3872;"	d
CATCH_FAIL	lib/armadillo-9.800.2/tests/catch.hpp	11469;"	d
CATCH_FAIL_CHECK	lib/armadillo-9.800.2/tests/catch.hpp	11470;"	d
CATCH_GENERATE	lib/armadillo-9.800.2/tests/catch.hpp	11487;"	d
CATCH_GIVEN	lib/armadillo-9.800.2/tests/catch.hpp	11497;"	d
CATCH_IMPL	include/catch.hpp	50;"	d
CATCH_IMPL	lib/armadillo-9.800.2/tests/catch.hpp	49;"	d
CATCH_INFO	lib/armadillo-9.800.2/tests/catch.hpp	11457;"	d
CATCH_INTERNAL_CONFIG_ANDROID_LOGWRITE	include/catch.hpp	194;"	d
CATCH_INTERNAL_CONFIG_COUNTER	include/catch.hpp	281;"	d
CATCH_INTERNAL_CONFIG_COUNTER	lib/armadillo-9.800.2/tests/catch.hpp	231;"	d
CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	lib/armadillo-9.800.2/tests/catch.hpp	207;"	d
CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	lib/armadillo-9.800.2/tests/catch.hpp	250;"	d
CATCH_INTERNAL_CONFIG_CPP11_IS_ENUM	lib/armadillo-9.800.2/tests/catch.hpp	254;"	d
CATCH_INTERNAL_CONFIG_CPP11_LONG_LONG	lib/armadillo-9.800.2/tests/catch.hpp	266;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	lib/armadillo-9.800.2/tests/catch.hpp	119;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	lib/armadillo-9.800.2/tests/catch.hpp	206;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	lib/armadillo-9.800.2/tests/catch.hpp	246;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	lib/armadillo-9.800.2/tests/catch.hpp	115;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	lib/armadillo-9.800.2/tests/catch.hpp	186;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	lib/armadillo-9.800.2/tests/catch.hpp	201;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	lib/armadillo-9.800.2/tests/catch.hpp	242;"	d
CATCH_INTERNAL_CONFIG_CPP11_OVERRIDE	lib/armadillo-9.800.2/tests/catch.hpp	270;"	d
CATCH_INTERNAL_CONFIG_CPP11_SHUFFLE	lib/armadillo-9.800.2/tests/catch.hpp	208;"	d
CATCH_INTERNAL_CONFIG_CPP11_SHUFFLE	lib/armadillo-9.800.2/tests/catch.hpp	276;"	d
CATCH_INTERNAL_CONFIG_CPP11_TUPLE	lib/armadillo-9.800.2/tests/catch.hpp	258;"	d
CATCH_INTERNAL_CONFIG_CPP11_TYPE_TRAITS	lib/armadillo-9.800.2/tests/catch.hpp	209;"	d
CATCH_INTERNAL_CONFIG_CPP11_TYPE_TRAITS	lib/armadillo-9.800.2/tests/catch.hpp	279;"	d
CATCH_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	lib/armadillo-9.800.2/tests/catch.hpp	202;"	d
CATCH_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	lib/armadillo-9.800.2/tests/catch.hpp	273;"	d
CATCH_INTERNAL_CONFIG_CPP17_BYTE	include/catch.hpp	313;"	d
CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL	include/catch.hpp	308;"	d
CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW	include/catch.hpp	303;"	d
CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS	include/catch.hpp	136;"	d
CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS	include/catch.hpp	231;"	d
CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED	include/catch.hpp	258;"	d
CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER	include/catch.hpp	296;"	d
CATCH_INTERNAL_CONFIG_NEW_CAPTURE	include/catch.hpp	373;"	d
CATCH_INTERNAL_CONFIG_NO_ASYNC	include/catch.hpp	291;"	d
CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING	include/catch.hpp	193;"	d
CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING	include/catch.hpp	221;"	d
CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE	include/catch.hpp	206;"	d
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS	include/catch.hpp	182;"	d
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS	include/catch.hpp	186;"	d
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS	lib/armadillo-9.800.2/tests/catch.hpp	143;"	d
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS	lib/armadillo-9.800.2/tests/catch.hpp	149;"	d
CATCH_INTERNAL_CONFIG_NO_WCHAR	include/catch.hpp	264;"	d
CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH	include/catch.hpp	200;"	d
CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH	include/catch.hpp	290;"	d
CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN	include/catch.hpp	270;"	d
CATCH_INTERNAL_CONFIG_POSIX_SIGNALS	include/catch.hpp	176;"	d
CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR	include/catch.hpp	246;"	d
CATCH_INTERNAL_CONFIG_USE_ASYNC	include/catch.hpp	252;"	d
CATCH_INTERNAL_CONFIG_VARIADIC_MACROS	lib/armadillo-9.800.2/tests/catch.hpp	222;"	d
CATCH_INTERNAL_CONFIG_VARIADIC_MACROS	lib/armadillo-9.800.2/tests/catch.hpp	262;"	d
CATCH_INTERNAL_CONFIG_WINDOWS_SEH	lib/armadillo-9.800.2/tests/catch.hpp	198;"	d
CATCH_INTERNAL_ERROR	include/catch.hpp	3869;"	d
CATCH_INTERNAL_ERROR	lib/armadillo-9.800.2/tests/catch.hpp	501;"	d
CATCH_INTERNAL_LINEINFO	include/catch.hpp	520;"	d
CATCH_INTERNAL_LINEINFO	lib/armadillo-9.800.2/tests/catch.hpp	500;"	d
CATCH_INTERNAL_STRINGIFY	include/catch.hpp	2660;"	d
CATCH_INTERNAL_STRINGIFY	lib/armadillo-9.800.2/tests/catch.hpp	2098;"	d
CATCH_INTERNAL_SUPPRESS_ETD_WARNINGS	lib/armadillo-9.800.2/tests/catch.hpp	123;"	d
CATCH_INTERNAL_SUPPRESS_ETD_WARNINGS	lib/armadillo-9.800.2/tests/catch.hpp	337;"	d
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS	include/catch.hpp	141;"	d
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS	include/catch.hpp	405;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	include/catch.hpp	148;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	include/catch.hpp	401;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	lib/armadillo-9.800.2/tests/catch.hpp	129;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	lib/armadillo-9.800.2/tests/catch.hpp	333;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS	include/catch.hpp	166;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS	include/catch.hpp	418;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS	include/catch.hpp	426;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS	include/catch.hpp	154;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS	include/catch.hpp	409;"	d
CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS	include/catch.hpp	160;"	d
CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS	include/catch.hpp	413;"	d
CATCH_INTERNAL_UNSUPPRESS_ETD_WARNINGS	lib/armadillo-9.800.2/tests/catch.hpp	126;"	d
CATCH_INTERNAL_UNSUPPRESS_ETD_WARNINGS	lib/armadillo-9.800.2/tests/catch.hpp	338;"	d
CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS	include/catch.hpp	145;"	d
CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS	include/catch.hpp	406;"	d
CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS	include/catch.hpp	151;"	d
CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS	include/catch.hpp	402;"	d
CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS	lib/armadillo-9.800.2/tests/catch.hpp	132;"	d
CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS	lib/armadillo-9.800.2/tests/catch.hpp	334;"	d
CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS	include/catch.hpp	169;"	d
CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS	include/catch.hpp	419;"	d
CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS	include/catch.hpp	427;"	d
CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS	include/catch.hpp	157;"	d
CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS	include/catch.hpp	410;"	d
CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS	include/catch.hpp	163;"	d
CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS	include/catch.hpp	414;"	d
CATCH_MAKE_MSG	include/catch.hpp	3866;"	d
CATCH_METHOD_AS_TEST_CASE	lib/armadillo-9.800.2/tests/catch.hpp	11466;"	d
CATCH_NOEXCEPT	lib/armadillo-9.800.2/tests/catch.hpp	/^        virtual const char* what() const CATCH_NOEXCEPT;$/;"	m	class:Catch::NotImplementedException
CATCH_NOEXCEPT	lib/armadillo-9.800.2/tests/catch.hpp	343;"	d
CATCH_NOEXCEPT	lib/armadillo-9.800.2/tests/catch.hpp	346;"	d
CATCH_NOEXCEPT_IS	lib/armadillo-9.800.2/tests/catch.hpp	344;"	d
CATCH_NOEXCEPT_IS	lib/armadillo-9.800.2/tests/catch.hpp	347;"	d
CATCH_NOT_IMPLEMENTED	lib/armadillo-9.800.2/tests/catch.hpp	522;"	d
CATCH_NULL	lib/armadillo-9.800.2/tests/catch.hpp	352;"	d
CATCH_NULL	lib/armadillo-9.800.2/tests/catch.hpp	354;"	d
CATCH_OVERRIDE	lib/armadillo-9.800.2/tests/catch.hpp	/^        virtual void reconstructExpression( std::string& dest ) const CATCH_OVERRIDE;$/;"	m	class:Catch::ResultBuilder
CATCH_OVERRIDE	lib/armadillo-9.800.2/tests/catch.hpp	359;"	d
CATCH_OVERRIDE	lib/armadillo-9.800.2/tests/catch.hpp	361;"	d
CATCH_PLATFORM_IPHONE	include/catch.hpp	74;"	d
CATCH_PLATFORM_LINUX	include/catch.hpp	78;"	d
CATCH_PLATFORM_MAC	include/catch.hpp	72;"	d
CATCH_PLATFORM_MAC	lib/armadillo-9.800.2/tests/catch.hpp	2026;"	d
CATCH_PLATFORM_WINDOWS	include/catch.hpp	81;"	d
CATCH_PLATFORM_WINDOWS	include/catch.hpp	8673;"	d
CATCH_RECURSE	include/catch.hpp	714;"	d
CATCH_RECURSE	include/catch.hpp	716;"	d
CATCH_RECURSION_LEVEL0	include/catch.hpp	703;"	d
CATCH_RECURSION_LEVEL1	include/catch.hpp	704;"	d
CATCH_RECURSION_LEVEL2	include/catch.hpp	705;"	d
CATCH_RECURSION_LEVEL3	include/catch.hpp	706;"	d
CATCH_RECURSION_LEVEL4	include/catch.hpp	707;"	d
CATCH_RECURSION_LEVEL5	include/catch.hpp	708;"	d
CATCH_RECURSION_LEVEL6	include/catch.hpp	713;"	d
CATCH_REC_END	include/catch.hpp	719;"	d
CATCH_REC_GET_END	include/catch.hpp	727;"	d
CATCH_REC_GET_END1	include/catch.hpp	726;"	d
CATCH_REC_GET_END2	include/catch.hpp	725;"	d
CATCH_REC_LIST	include/catch.hpp	745;"	d
CATCH_REC_LIST0	include/catch.hpp	732;"	d
CATCH_REC_LIST0_UD	include/catch.hpp	736;"	d
CATCH_REC_LIST1	include/catch.hpp	733;"	d
CATCH_REC_LIST1_UD	include/catch.hpp	737;"	d
CATCH_REC_LIST2	include/catch.hpp	734;"	d
CATCH_REC_LIST2_UD	include/catch.hpp	738;"	d
CATCH_REC_LIST_UD	include/catch.hpp	743;"	d
CATCH_REC_NEXT	include/catch.hpp	730;"	d
CATCH_REC_NEXT0	include/catch.hpp	728;"	d
CATCH_REC_NEXT1	include/catch.hpp	729;"	d
CATCH_REC_OUT	include/catch.hpp	720;"	d
CATCH_REGISTER_ENUM	include/catch.hpp	2174;"	d
CATCH_REGISTER_LEGACY_REPORTER	lib/armadillo-9.800.2/tests/catch.hpp	11485;"	d
CATCH_REGISTER_LISTENER	include/catch.hpp	6075;"	d
CATCH_REGISTER_LISTENER	lib/armadillo-9.800.2/tests/catch.hpp	9893;"	d
CATCH_REGISTER_REPORTER	include/catch.hpp	6070;"	d
CATCH_REGISTER_REPORTER	lib/armadillo-9.800.2/tests/catch.hpp	11484;"	d
CATCH_REGISTER_TAG_ALIAS	include/catch.hpp	532;"	d
CATCH_REGISTER_TAG_ALIAS	lib/armadillo-9.800.2/tests/catch.hpp	3069;"	d
CATCH_REGISTER_TEST_CASE	lib/armadillo-9.800.2/tests/catch.hpp	11467;"	d
CATCH_REQUIRE	lib/armadillo-9.800.2/tests/catch.hpp	11426;"	d
CATCH_REQUIRE_FALSE	lib/armadillo-9.800.2/tests/catch.hpp	11427;"	d
CATCH_REQUIRE_NOTHROW	lib/armadillo-9.800.2/tests/catch.hpp	11436;"	d
CATCH_REQUIRE_THAT	lib/armadillo-9.800.2/tests/catch.hpp	11452;"	d
CATCH_REQUIRE_THROWS	lib/armadillo-9.800.2/tests/catch.hpp	11433;"	d
CATCH_REQUIRE_THROWS_AS	lib/armadillo-9.800.2/tests/catch.hpp	11434;"	d
CATCH_REQUIRE_THROWS_WITH	lib/armadillo-9.800.2/tests/catch.hpp	11435;"	d
CATCH_RUNTIME_ERROR	include/catch.hpp	3875;"	d
CATCH_SCENARIO	lib/armadillo-9.800.2/tests/catch.hpp	11491;"	d
CATCH_SCENARIO_METHOD	lib/armadillo-9.800.2/tests/catch.hpp	11492;"	d
CATCH_SCOPED_CAPTURE	lib/armadillo-9.800.2/tests/catch.hpp	11461;"	d
CATCH_SCOPED_INFO	lib/armadillo-9.800.2/tests/catch.hpp	11459;"	d
CATCH_SECTION	lib/armadillo-9.800.2/tests/catch.hpp	11468;"	d
CATCH_SUCCEED	lib/armadillo-9.800.2/tests/catch.hpp	11471;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	include/catch.hpp	8285;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	lib/armadillo-9.800.2/tests/catch.hpp	4036;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	lib/armadillo-9.800.2/tests/catch.hpp	5068;"	d
CATCH_TEST_CASE	lib/armadillo-9.800.2/tests/catch.hpp	11464;"	d
CATCH_TEST_CASE_METHOD	lib/armadillo-9.800.2/tests/catch.hpp	11465;"	d
CATCH_THEN	lib/armadillo-9.800.2/tests/catch.hpp	11500;"	d
CATCH_TRANSLATE_EXCEPTION	lib/armadillo-9.800.2/tests/catch.hpp	11573;"	d
CATCH_TRAP	include/catch.hpp	7813;"	d
CATCH_TRAP	lib/armadillo-9.800.2/tests/catch.hpp	2054;"	d
CATCH_TRY	include/catch.hpp	431;"	d
CATCH_UNSAFE_UNRETAINED	include/catch.hpp	1522;"	d
CATCH_UNSAFE_UNRETAINED	include/catch.hpp	1538;"	d
CATCH_UNSAFE_UNRETAINED	lib/armadillo-9.800.2/tests/catch.hpp	1459;"	d
CATCH_UNSAFE_UNRETAINED	lib/armadillo-9.800.2/tests/catch.hpp	1475;"	d
CATCH_VERSION_MAJOR	include/catch.hpp	16;"	d
CATCH_VERSION_MINOR	include/catch.hpp	17;"	d
CATCH_VERSION_PATCH	include/catch.hpp	18;"	d
CATCH_WARN	lib/armadillo-9.800.2/tests/catch.hpp	11458;"	d
CATCH_WHEN	lib/armadillo-9.800.2/tests/catch.hpp	11498;"	d
CLARA_AUTO_PTR	lib/armadillo-9.800.2/tests/catch.hpp	4348;"	d
CLARA_CONFIG_CONSOLE_WIDTH	lib/armadillo-9.800.2/tests/catch.hpp	4037;"	d
CLARA_CONFIG_CONSOLE_WIDTH	lib/armadillo-9.800.2/tests/catch.hpp	4039;"	d
CLARA_CONFIG_CONSOLE_WIDTH	lib/armadillo-9.800.2/tests/catch.hpp	5067;"	d
CLARA_CONFIG_CPP11_GENERATED_METHODS	lib/armadillo-9.800.2/tests/catch.hpp	4314;"	d
CLARA_CONFIG_CPP11_NOEXCEPT	lib/armadillo-9.800.2/tests/catch.hpp	4311;"	d
CLARA_CONFIG_CPP11_NULLPTR	lib/armadillo-9.800.2/tests/catch.hpp	4308;"	d
CLARA_CONFIG_CPP11_OVERRIDE	lib/armadillo-9.800.2/tests/catch.hpp	4317;"	d
CLARA_CONFIG_CPP11_UNIQUE_PTR	lib/armadillo-9.800.2/tests/catch.hpp	4320;"	d
CLARA_CONFIG_MAIN	include/catch.hpp	89;"	d
CLARA_CONFIG_MAIN	lib/armadillo-9.800.2/tests/catch.hpp	11417;"	d
CLARA_CONFIG_MAIN	lib/armadillo-9.800.2/tests/catch.hpp	55;"	d
CLARA_CONFIG_MAIN_NOT_DEFINED	include/catch.hpp	88;"	d
CLARA_CONFIG_MAIN_NOT_DEFINED	lib/armadillo-9.800.2/tests/catch.hpp	54;"	d
CLARA_CONFIG_OPTIONAL_TYPE	include/catch.hpp	8320;"	d
CLARA_CPP11_OR_GREATER	lib/armadillo-9.800.2/tests/catch.hpp	4283;"	d
CLARA_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	lib/armadillo-9.800.2/tests/catch.hpp	4272;"	d
CLARA_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	lib/armadillo-9.800.2/tests/catch.hpp	4294;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	lib/armadillo-9.800.2/tests/catch.hpp	4243;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	lib/armadillo-9.800.2/tests/catch.hpp	4271;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	lib/armadillo-9.800.2/tests/catch.hpp	4290;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	lib/armadillo-9.800.2/tests/catch.hpp	4239;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	lib/armadillo-9.800.2/tests/catch.hpp	4253;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	lib/armadillo-9.800.2/tests/catch.hpp	4266;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	lib/armadillo-9.800.2/tests/catch.hpp	4286;"	d
CLARA_INTERNAL_CONFIG_CPP11_OVERRIDE	lib/armadillo-9.800.2/tests/catch.hpp	4298;"	d
CLARA_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	lib/armadillo-9.800.2/tests/catch.hpp	4267;"	d
CLARA_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	lib/armadillo-9.800.2/tests/catch.hpp	4301;"	d
CLARA_NOEXCEPT	lib/armadillo-9.800.2/tests/catch.hpp	4325;"	d
CLARA_NOEXCEPT_IS	lib/armadillo-9.800.2/tests/catch.hpp	4326;"	d
CLARA_NULL	lib/armadillo-9.800.2/tests/catch.hpp	4334;"	d
CLARA_OVERRIDE	lib/armadillo-9.800.2/tests/catch.hpp	4341;"	d
CLARA_PLATFORM_WINDOWS	lib/armadillo-9.800.2/tests/catch.hpp	4363;"	d
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	lib/armadillo-9.800.2/tests/catch.hpp	5307;"	d
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	lib/armadillo-9.800.2/tests/catch.hpp	5466;"	d
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/coelschl\/PhD\/code\/cpp\/quaca\/build$/;"	m
CMAKE_BINARY_DIR	build/app/Friction/Makefile	/^CMAKE_BINARY_DIR = \/home\/coelschl\/PhD\/code\/cpp\/quaca\/build$/;"	m
CMAKE_BINARY_DIR	build/app/Makefile	/^CMAKE_BINARY_DIR = \/home\/coelschl\/PhD\/code\/cpp\/quaca\/build$/;"	m
CMAKE_BINARY_DIR	build/src/Makefile	/^CMAKE_BINARY_DIR = \/home\/coelschl\/PhD\/code\/cpp\/quaca\/build$/;"	m
CMAKE_BINARY_DIR	build/test/Makefile	/^CMAKE_BINARY_DIR = \/home\/coelschl\/PhD\/code\/cpp\/quaca\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/app/Friction/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/app/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/test/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/coelschl\/PhD\/code\/cpp\/quaca$/;"	m
CMAKE_SOURCE_DIR	build/app/Friction/Makefile	/^CMAKE_SOURCE_DIR = \/home\/coelschl\/PhD\/code\/cpp\/quaca$/;"	m
CMAKE_SOURCE_DIR	build/app/Makefile	/^CMAKE_SOURCE_DIR = \/home\/coelschl\/PhD\/code\/cpp\/quaca$/;"	m
CMAKE_SOURCE_DIR	build/src/Makefile	/^CMAKE_SOURCE_DIR = \/home\/coelschl\/PhD\/code\/cpp\/quaca$/;"	m
CMAKE_SOURCE_DIR	build/test/Makefile	/^CMAKE_SOURCE_DIR = \/home\/coelschl\/PhD\/code\/cpp\/quaca$/;"	m
COLAMD	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  typedef enum {NATURAL, MMD_ATA, MMD_AT_PLUS_A, COLAMD} permutation_type;$/;"	e	enum:superlu_opts::__anon3
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	123;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	153;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	166;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	173;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	222;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	240;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	249;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	258;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	291;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	297;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	62;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	254;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	116;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	154;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	162;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	168;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	183;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	198;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	210;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	212;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	224;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	251;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	261;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	266;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	276;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	281;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	132;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	141;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	147;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	163;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	169;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	199;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	215;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	225;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	252;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	262;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	267;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	277;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	282;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	127;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	148;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	185;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	200;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	218;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	245;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	263;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	268;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	278;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	128;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	191;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	236;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
CXX_STD	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	558;"	d	file:
CXX_STD	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	560;"	d	file:
CaseSensitive	include/catch.hpp	/^    struct CaseSensitive { enum Choice {$/;"	s	namespace:Catch
CaseSensitive	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct CaseSensitive { enum Choice {$/;"	s	namespace:Catch
Catch	include/catch.hpp	/^namespace Catch {$/;"	n
Catch	lib/armadillo-9.800.2/tests/catch.hpp	/^namespace Catch {$/;"	n
Catch_global_namespace_dummy	include/catch.hpp	/^struct Catch_global_namespace_dummy {};$/;"	s
CheckMatrices	lib/armadillo-9.800.2/tests/spmat.cpp	/^void CheckMatrices(const T1& a, const T2& b)$/;"	f
Choice	include/catch.hpp	/^    struct CaseSensitive { enum Choice {$/;"	g	struct:Catch::CaseSensitive
Choice	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct CaseSensitive { enum Choice {$/;"	g	struct:Catch::CaseSensitive
Col	lib/armadillo-9.800.2/docs.html	/^<a name="Col"><\/a><b>Col&lt;<\/b><i>type<\/i><b>&gt;<\/b>$/;"	a
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^class Col : public Mat<eT>$/;"	c
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^  Col<eT>::Col(Col<eT>&& X)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^  Col<eT>::Col(const std::initializer_list<eT>& list)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col()$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const Base<eT,T1>& X)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const BaseCube<eT,T1>& X)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const Col<eT>& X)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const SizeMat& s)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const SizeMat& s, const fill::fill_class<fill_type>& f)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const SpBase<eT,T1>& X)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const arma_fixed_indicator&, const uword in_n_elem, const eT* in_mem)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const char* text)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const eT* aux_mem, const uword aux_length)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const std::string& text)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const std::vector<eT>& x)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const subview_cube<eT>& X)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const uword in_n_elem)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const uword in_n_elem, const fill::fill_class<fill_type>& f)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(const uword in_n_rows, const uword in_n_cols, const fill::fill_class<fill_type>& f)$/;"	f	class:Col
Col	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::Col(eT* aux_mem, const uword aux_length, const bool copy_aux_mem, const bool strict)$/;"	f	class:Col
ColPerm	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    colperm_t     ColPerm;$/;"	m	struct:arma::superlu::__anon6
Col_fixed_type	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  typedef fixed<fixed_n_elem>               Col_fixed_type;$/;"	t	class:Col::fixed
ConditionNumber	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    yes_no_t      ConditionNumber;$/;"	m	struct:arma::superlu::__anon6
ContinueOnFailure	include/catch.hpp	/^        ContinueOnFailure = 0x02,   \/\/ Failures fail test, but execution continues$/;"	e	enum:Catch::ResultDisposition::Flags
ContinueOnFailure	lib/armadillo-9.800.2/tests/catch.hpp	/^        ContinueOnFailure = 0x02,   \/\/ Failures fail test, but execution continues$/;"	e	enum:Catch::ResultDisposition::Flags
CopyableStream	lib/armadillo-9.800.2/tests/catch.hpp	/^        CopyableStream( CopyableStream const& other ) {$/;"	f	struct:Catch::CopyableStream
CopyableStream	lib/armadillo-9.800.2/tests/catch.hpp	/^        CopyableStream() {}$/;"	f	struct:Catch::CopyableStream
CopyableStream	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct CopyableStream {$/;"	s	namespace:Catch
Cube	lib/armadillo-9.800.2/docs.html	/^<a name="Cube"><\/a>$/;"	a
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^class Cube : public BaseCube< eT, Cube<eT> >$/;"	c
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^  Cube<eT>::Cube(Cube<eT>&& in_cube)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube()$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const Cube<eT>& x)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const GenCube<eT, gen_type>& X)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const GlueCube<T1, T2, glue_type>& X)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const OpCube<T1, op_type>& X)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const SizeCube& s)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const SizeCube& s, const fill::fill_class<fill_type>&)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const eGlueCube<T1, T2, eglue_type>& X)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const eOpCube<T1, eop_type>& X)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const eT* aux_mem, const uword aux_n_rows, const uword aux_n_cols, const uword aux_n_slices)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const mtGlueCube<eT, T1, T2, glue_type>& X)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const mtOpCube<eT, T1, op_type>& X)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const subview_cube<eT>& X)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const subview_cube_slices<eT,T1>& X)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const uword in_n_rows, const uword in_n_cols, const uword in_n_slices)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(const uword in_n_rows, const uword in_n_cols, const uword in_n_slices, const fill::fill_class<fill_type>&)$/;"	f	class:Cube
Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::Cube(eT* aux_mem, const uword aux_n_rows, const uword aux_n_cols, const uword aux_n_slices, const bool copy_aux_mem, const bool strict, const bool prealloc_mat)$/;"	f	class:Cube
CubeToMatOp	lib/armadillo-9.800.2/include/armadillo_bits/CubeToMatOp_bones.hpp	/^class CubeToMatOp : public Base<typename T1::elem_type, CubeToMatOp<T1, op_type> >$/;"	c
CubeToMatOp	lib/armadillo-9.800.2/include/armadillo_bits/CubeToMatOp_meat.hpp	/^CubeToMatOp<T1, op_type>::CubeToMatOp(const T1& in_m)$/;"	f	class:CubeToMatOp
CubeToMatOp	lib/armadillo-9.800.2/include/armadillo_bits/CubeToMatOp_meat.hpp	/^CubeToMatOp<T1, op_type>::CubeToMatOp(const T1& in_m, const typename T1::elem_type in_aux)$/;"	f	class:CubeToMatOp
Cube_aux	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^class Cube_aux$/;"	c
Cube_prealloc	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^struct Cube_prealloc$/;"	s
DEC	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	481;"	d	file:
Datum	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^class Datum$/;"	c
Datum_helper	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  class Datum_helper$/;"	c	namespace:priv
DecomposedExpression	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct DecomposedExpression$/;"	s	namespace:Catch
DenseGenMatProd	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DenseGenMatProd_bones.hpp	/^class DenseGenMatProd$/;"	c	namespace:newarp
DenseGenMatProd	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DenseGenMatProd_meat.hpp	/^DenseGenMatProd<eT>::DenseGenMatProd(const Mat<eT>& mat_obj)$/;"	f	class:newarp::DenseGenMatProd
Detail	include/catch.hpp	/^    namespace Detail {$/;"	n	namespace:Catch
Detail	lib/armadillo-9.800.2/tests/catch.hpp	/^namespace Detail {$/;"	n	namespace:Catch
DiagPivotThresh	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    double        DiagPivotThresh;$/;"	m	struct:arma::superlu::__anon6
DidntThrowException	include/catch.hpp	/^        DidntThrowException = Exception | 2,$/;"	e	enum:Catch::ResultWas::OfType
DidntThrowException	lib/armadillo-9.800.2/tests/catch.hpp	/^        DidntThrowException = Exception | 2,$/;"	e	enum:Catch::ResultWas::OfType
DoubleShiftQR	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_bones.hpp	/^class DoubleShiftQR$/;"	c	namespace:newarp
DoubleShiftQR	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_meat.hpp	/^DoubleShiftQR<eT>::DoubleShiftQR(const Mat<eT>& mat_obj, eT s, eT t)$/;"	f	class:newarp::DoubleShiftQR
DoubleShiftQR	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_meat.hpp	/^DoubleShiftQR<eT>::DoubleShiftQR(uword size)$/;"	f	class:newarp::DoubleShiftQR
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/app/Friction/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/app/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/test/Makefile	/^EQUALS = =$/;"	m
EigsSelect	lib/armadillo-9.800.2/include/armadillo_bits/newarp_EigsSelect.hpp	/^struct EigsSelect$/;"	s	namespace:newarp
EnumInfo	include/catch.hpp	/^        struct EnumInfo {$/;"	s	namespace:Catch::Detail
EnumStringMaker	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct EnumStringMaker$/;"	s	namespace:Catch::Detail
EnumStringMaker	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct EnumStringMaker<T,true>$/;"	s	namespace:Catch::Detail
Equil	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    yes_no_t      Equil;$/;"	m	struct:arma::superlu::__anon6
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator<T* const&, int const&, IsEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator<T* const&, int const&, IsNotEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator<T* const&, long const&, IsEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator<T* const&, long const&, IsNotEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsGreaterThan> {$/;"	s	namespace:Catch::Internal
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsGreaterThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsLessThan> {$/;"	s	namespace:Catch::Internal
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsLessThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsNotEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator<int const&, T* const&, IsEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator<int const&, T* const&, IsNotEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator<long const&, T* const&, IsEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator<long const&, T* const&, IsNotEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct Evaluator{};$/;"	s	namespace:Catch::Internal
Exception	include/catch.hpp	/^        Exception = 0x100 | FailureBit,$/;"	e	enum:Catch::ResultWas::OfType
Exception	lib/armadillo-9.800.2/tests/catch.hpp	/^        Exception = 0x100 | FailureBit,$/;"	e	enum:Catch::ResultWas::OfType
ExeName	include/catch.hpp	/^        ExeName() : m_name( std::make_shared<std::string>( "<executable>" ) ) {}$/;"	f	class:Catch::ExeName
ExeName	include/catch.hpp	/^        explicit ExeName( LambdaT const& lambda ) : ExeName() {$/;"	f	class:Catch::ExeName
ExeName	include/catch.hpp	/^        explicit ExeName( std::string &ref ) : ExeName() {$/;"	f	class:Catch::ExeName
ExeName	include/catch.hpp	/^    class ExeName : public ComposableParserImpl<ExeName> {$/;"	c	namespace:Catch
ExpHeader	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    } ExpHeader;$/;"	t	namespace:arma::superlu	typeref:struct:arma::superlu::e_node
ExplicitFailure	include/catch.hpp	/^        ExplicitFailure = FailureBit | 2,$/;"	e	enum:Catch::ResultWas::OfType
ExplicitFailure	lib/armadillo-9.800.2/tests/catch.hpp	/^        ExplicitFailure = FailureBit | 2,$/;"	e	enum:Catch::ResultWas::OfType
ExpressionFailed	include/catch.hpp	/^        ExpressionFailed = FailureBit | 1,$/;"	e	enum:Catch::ResultWas::OfType
ExpressionFailed	lib/armadillo-9.800.2/tests/catch.hpp	/^        ExpressionFailed = FailureBit | 1,$/;"	e	enum:Catch::ResultWas::OfType
F	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT F;         \/\/!< Faraday constant (in coulombs)$/;"	m	class:Datum
F	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::F         = eT(96485.33289);$/;"	m	class:Datum
F	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT F()         { return eT(96485.33289); }$/;"	f	class:Phy
Fact	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    fact_t        Fact;$/;"	m	struct:arma::superlu::__anon6
FailureBit	include/catch.hpp	/^        FailureBit = 0x10,$/;"	e	enum:Catch::ResultWas::OfType
FailureBit	lib/armadillo-9.800.2/tests/catch.hpp	/^        FailureBit = 0x10,$/;"	e	enum:Catch::ResultWas::OfType
FalseTest	include/catch.hpp	/^        FalseTest = 0x04,           \/\/ Prefix expression with !$/;"	e	enum:Catch::ResultDisposition::Flags
FalseTest	lib/armadillo-9.800.2/tests/catch.hpp	/^        FalseTest = 0x04,           \/\/ Prefix expression with !$/;"	e	enum:Catch::ResultDisposition::Flags
FalseType	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct FalseType { char sizer[2]; };$/;"	s	namespace:Catch::Detail
FatalErrorCondition	include/catch.hpp	/^        FatalErrorCondition = 0x200 | FailureBit$/;"	e	enum:Catch::ResultWas::OfType
FatalErrorCondition	lib/armadillo-9.800.2/tests/catch.hpp	/^        FatalErrorCondition = 0x200 | FailureBit$/;"	e	enum:Catch::ResultWas::OfType
Flags	include/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	g	struct:Catch::ResultDisposition
Flags	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	g	struct:Catch::ResultDisposition
G	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT G;         \/\/!< Newtonian constant of gravitation (in newton square meters per kilogram squared)$/;"	m	class:Datum
G	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::G         = eT(6.67408e-11);$/;"	m	class:Datum
G	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT G()         { return eT(6.67408e-11); }$/;"	f	class:Phy
GENERATE	include/catch.hpp	4073;"	d
GENERATE_COPY	include/catch.hpp	4075;"	d
GENERATE_REF	include/catch.hpp	4077;"	d
GIVEN	lib/armadillo-9.800.2/tests/catch.hpp	11583;"	d
GREENSTENSOR_H	src/GreensTensor/GreensTensor.h	2;"	d
G_0	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT G_0;       \/\/!< conductance quantum (in siemens)$/;"	m	class:Datum
G_0	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::G_0       = eT(7.7480917310e-5);$/;"	m	class:Datum
G_0	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT G_0()       { return eT(7.7480917310e-5); }$/;"	f	class:Phy
Gen	lib/armadillo-9.800.2/include/armadillo_bits/Gen_bones.hpp	/^class Gen$/;"	c
Gen	lib/armadillo-9.800.2/include/armadillo_bits/Gen_meat.hpp	/^Gen<T1, gen_type>::Gen(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:Gen
GenCube	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_bones.hpp	/^class GenCube$/;"	c
GenCube	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_meat.hpp	/^GenCube<eT, gen_type>::GenCube(const uword in_n_rows, const uword in_n_cols, const uword in_n_slices)$/;"	f	class:GenCube
GenEigsSolver	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^class GenEigsSolver$/;"	c	namespace:newarp
GenEigsSolver	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_meat.hpp	/^GenEigsSolver<eT, SelectionRule, OpType>::GenEigsSolver(const OpType& op_, uword nev_, uword ncv_)$/;"	f	class:newarp::GenEigsSolver
GenSpecialiser	lib/armadillo-9.800.2/include/armadillo_bits/GenSpecialiser.hpp	/^struct GenSpecialiser$/;"	s
GenSpecialiser	lib/armadillo-9.800.2/include/armadillo_bits/GenSpecialiser.hpp	/^struct GenSpecialiser<elem_type, false, false, false, true>$/;"	s
GenSpecialiser	lib/armadillo-9.800.2/include/armadillo_bits/GenSpecialiser.hpp	/^struct GenSpecialiser<elem_type, false, false, true, false>$/;"	s
GenSpecialiser	lib/armadillo-9.800.2/include/armadillo_bits/GenSpecialiser.hpp	/^struct GenSpecialiser<elem_type, false, true, false, false>$/;"	s
GenSpecialiser	lib/armadillo-9.800.2/include/armadillo_bits/GenSpecialiser.hpp	/^struct GenSpecialiser<elem_type, true, false, false, false>$/;"	s
GlobalLU_t	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    } GlobalLU_t;$/;"	t	namespace:arma::superlu	typeref:struct:arma::superlu::__anon9
Glue	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^class Glue$/;"	c
Glue	lib/armadillo-9.800.2/include/armadillo_bits/Glue_meat.hpp	/^Glue<T1,T2,glue_type>::Glue(const T1& in_A, const T2& in_B)$/;"	f	class:Glue
Glue	lib/armadillo-9.800.2/include/armadillo_bits/Glue_meat.hpp	/^Glue<T1,T2,glue_type>::Glue(const T1& in_A, const T2& in_B, const uword in_aux_uword)$/;"	f	class:Glue
GlueCube	lib/armadillo-9.800.2/include/armadillo_bits/GlueCube_bones.hpp	/^class GlueCube : public BaseCube<typename T1::elem_type, GlueCube<T1, T2, glue_type> >$/;"	c
GlueCube	lib/armadillo-9.800.2/include/armadillo_bits/GlueCube_meat.hpp	/^GlueCube<T1,T2,glue_type>::GlueCube(const BaseCube<typename T1::elem_type, T1>& in_A, const BaseCube<typename T1::elem_type, T2>& in_B)$/;"	f	class:GlueCube
Glue_traits	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^struct Glue_traits {};$/;"	s
Glue_traits	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^struct Glue_traits<T1, T2, glue_type, false>$/;"	s
Glue_traits	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^struct Glue_traits<T1, T2, glue_type, true>$/;"	s
GreensTensor	src/GreensTensor/GreensTensor.h	/^class GreensTensor$/;"	c
H5check_version	lib/armadillo-9.800.2/src/wrapper1.cpp	/^  herr_t H5check_version(unsigned majnum, unsigned minnum, unsigned relnum)$/;"	f	namespace:arma
H5open	lib/armadillo-9.800.2/src/wrapper1.cpp	/^  herr_t H5open()$/;"	f	namespace:arma
HEX	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	492;"	d	file:
Help	include/catch.hpp	/^        Help( bool &showHelpFlag )$/;"	f	struct:Catch::Help
Help	include/catch.hpp	/^    struct Help : Opt {$/;"	s	namespace:Catch
IContext	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct IContext$/;"	s	namespace:Catch
IGeneratorInfo	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct IGeneratorInfo {$/;"	s	namespace:Catch
IGeneratorsForTest	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct IGeneratorsForTest {$/;"	s	namespace:Catch
ILU_DropRule	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int           ILU_DropRule;$/;"	m	struct:arma::superlu::__anon6
ILU_DropTol	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    double        ILU_DropTol;$/;"	m	struct:arma::superlu::__anon6
ILU_FillFactor	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    double        ILU_FillFactor;$/;"	m	struct:arma::superlu::__anon6
ILU_FillTol	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    double        ILU_FillTol;$/;"	m	struct:arma::superlu::__anon6
ILU_MILU	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    milu_t        ILU_MILU;$/;"	m	struct:arma::superlu::__anon6
ILU_MILU_Dim	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    double        ILU_MILU_Dim;$/;"	m	struct:arma::superlu::__anon6
ILU_Norm	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    norm_t        ILU_Norm;$/;"	m	struct:arma::superlu::__anon6
IMutableContext	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct IMutableContext : IContext$/;"	s	namespace:Catch
IMutableEnumValuesRegistry	include/catch.hpp	/^    struct IMutableEnumValuesRegistry {$/;"	s	namespace:Catch
INTERNAL_CATCH_BENCHMARK	include/catch.hpp	7331;"	d
INTERNAL_CATCH_BENCHMARK_ADVANCED	include/catch.hpp	7335;"	d
INTERNAL_CATCH_CAPTURE	include/catch.hpp	2765;"	d
INTERNAL_CATCH_CATCH	include/catch.hpp	2671;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST	include/catch.hpp	913;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST	include/catch.hpp	923;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST0	include/catch.hpp	840;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST1	include/catch.hpp	841;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD	include/catch.hpp	909;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD	include/catch.hpp	919;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0	include/catch.hpp	884;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1	include/catch.hpp	885;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X	include/catch.hpp	891;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_X	include/catch.hpp	844;"	d
INTERNAL_CATCH_DEF	include/catch.hpp	749;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST	include/catch.hpp	912;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST	include/catch.hpp	922;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST0	include/catch.hpp	848;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST1	include/catch.hpp	849;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD	include/catch.hpp	908;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD	include/catch.hpp	918;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0	include/catch.hpp	897;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1	include/catch.hpp	898;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X	include/catch.hpp	901;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_X	include/catch.hpp	852;"	d
INTERNAL_CATCH_DYNAMIC_SECTION	include/catch.hpp	2914;"	d
INTERNAL_CATCH_ELSE	include/catch.hpp	2701;"	d
INTERNAL_CATCH_ELSE	lib/armadillo-9.800.2/tests/catch.hpp	2170;"	d
INTERNAL_CATCH_EXPAND1	include/catch.hpp	747;"	d
INTERNAL_CATCH_EXPAND2	include/catch.hpp	748;"	d
INTERNAL_CATCH_EXPAND_VARGS	include/catch.hpp	711;"	d
INTERNAL_CATCH_GENERATE	lib/armadillo-9.800.2/tests/catch.hpp	2601;"	d
INTERNAL_CATCH_GET_1_ARG	include/catch.hpp	7328;"	d
INTERNAL_CATCH_GET_2_ARG	include/catch.hpp	7329;"	d
INTERNAL_CATCH_IF	include/catch.hpp	2696;"	d
INTERNAL_CATCH_IF	lib/armadillo-9.800.2/tests/catch.hpp	2165;"	d
INTERNAL_CATCH_INFO	include/catch.hpp	2770;"	d
INTERNAL_CATCH_INFO	lib/armadillo-9.800.2/tests/catch.hpp	2245;"	d
INTERNAL_CATCH_LINESTR	lib/armadillo-9.800.2/tests/catch.hpp	2599;"	d
INTERNAL_CATCH_LINESTR2	lib/armadillo-9.800.2/tests/catch.hpp	2598;"	d
INTERNAL_CATCH_MAKE_NAMESPACE	include/catch.hpp	763;"	d
INTERNAL_CATCH_MAKE_NAMESPACE2	include/catch.hpp	762;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST	include/catch.hpp	769;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST	include/catch.hpp	772;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST2	include/catch.hpp	768;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST2	include/catch.hpp	771;"	d
INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES	include/catch.hpp	775;"	d
INTERNAL_CATCH_METHOD_AS_TEST_CASE	include/catch.hpp	1056;"	d
INTERNAL_CATCH_METHOD_AS_TEST_CASE	lib/armadillo-9.800.2/tests/catch.hpp	785;"	d
INTERNAL_CATCH_MSG	include/catch.hpp	2757;"	d
INTERNAL_CATCH_MSG	lib/armadillo-9.800.2/tests/catch.hpp	2227;"	d
INTERNAL_CATCH_NOINTERNAL_CATCH_DEF	include/catch.hpp	750;"	d
INTERNAL_CATCH_NO_THROW	include/catch.hpp	2706;"	d
INTERNAL_CATCH_NO_THROW	lib/armadillo-9.800.2/tests/catch.hpp	2175;"	d
INTERNAL_CATCH_NTTP_0	include/catch.hpp	906;"	d
INTERNAL_CATCH_NTTP_0	include/catch.hpp	916;"	d
INTERNAL_CATCH_NTTP_1	include/catch.hpp	825;"	d
INTERNAL_CATCH_NTTP_GEN	include/catch.hpp	907;"	d
INTERNAL_CATCH_NTTP_GEN	include/catch.hpp	917;"	d
INTERNAL_CATCH_NTTP_REGISTER	include/catch.hpp	863;"	d
INTERNAL_CATCH_NTTP_REGISTER0	include/catch.hpp	856;"	d
INTERNAL_CATCH_NTTP_REGISTER_METHOD	include/catch.hpp	877;"	d
INTERNAL_CATCH_NTTP_REGISTER_METHOD0	include/catch.hpp	870;"	d
INTERNAL_CATCH_NTTP_REG_GEN	include/catch.hpp	911;"	d
INTERNAL_CATCH_NTTP_REG_GEN	include/catch.hpp	921;"	d
INTERNAL_CATCH_NTTP_REG_METHOD_GEN	include/catch.hpp	910;"	d
INTERNAL_CATCH_NTTP_REG_METHOD_GEN	include/catch.hpp	920;"	d
INTERNAL_CATCH_REACT	include/catch.hpp	2680;"	d
INTERNAL_CATCH_REACT	lib/armadillo-9.800.2/tests/catch.hpp	2108;"	d
INTERNAL_CATCH_REGISTER_ENUM	include/catch.hpp	2164;"	d
INTERNAL_CATCH_REGISTER_LEGACY_REPORTER	lib/armadillo-9.800.2/tests/catch.hpp	9883;"	d
INTERNAL_CATCH_REGISTER_LISTENER	lib/armadillo-9.800.2/tests/catch.hpp	9890;"	d
INTERNAL_CATCH_REGISTER_REPORTER	lib/armadillo-9.800.2/tests/catch.hpp	9886;"	d
INTERNAL_CATCH_REGISTER_TESTCASE	include/catch.hpp	1076;"	d
INTERNAL_CATCH_REGISTER_TESTCASE	lib/armadillo-9.800.2/tests/catch.hpp	805;"	d
INTERNAL_CATCH_REMOVE_PARENS	include/catch.hpp	765;"	d
INTERNAL_CATCH_REMOVE_PARENS_10_ARG	include/catch.hpp	787;"	d
INTERNAL_CATCH_REMOVE_PARENS_11_ARG	include/catch.hpp	788;"	d
INTERNAL_CATCH_REMOVE_PARENS_1_ARG	include/catch.hpp	778;"	d
INTERNAL_CATCH_REMOVE_PARENS_2_ARG	include/catch.hpp	779;"	d
INTERNAL_CATCH_REMOVE_PARENS_3_ARG	include/catch.hpp	780;"	d
INTERNAL_CATCH_REMOVE_PARENS_4_ARG	include/catch.hpp	781;"	d
INTERNAL_CATCH_REMOVE_PARENS_5_ARG	include/catch.hpp	782;"	d
INTERNAL_CATCH_REMOVE_PARENS_6_ARG	include/catch.hpp	783;"	d
INTERNAL_CATCH_REMOVE_PARENS_7_ARG	include/catch.hpp	784;"	d
INTERNAL_CATCH_REMOVE_PARENS_8_ARG	include/catch.hpp	785;"	d
INTERNAL_CATCH_REMOVE_PARENS_9_ARG	include/catch.hpp	786;"	d
INTERNAL_CATCH_REMOVE_PARENS_GEN	include/catch.hpp	914;"	d
INTERNAL_CATCH_REMOVE_PARENS_GEN	include/catch.hpp	924;"	d
INTERNAL_CATCH_SECTION	include/catch.hpp	2909;"	d
INTERNAL_CATCH_SECTION	lib/armadillo-9.800.2/tests/catch.hpp	2417;"	d
INTERNAL_CATCH_STRINGIFY	lib/armadillo-9.800.2/tests/catch.hpp	380;"	d
INTERNAL_CATCH_STRINGIFY2	lib/armadillo-9.800.2/tests/catch.hpp	379;"	d
INTERNAL_CATCH_STRINGIZE	include/catch.hpp	751;"	d
INTERNAL_CATCH_STRINGIZE2	include/catch.hpp	753;"	d
INTERNAL_CATCH_STRINGIZE2	include/catch.hpp	757;"	d
INTERNAL_CATCH_STRINGIZE3	include/catch.hpp	758;"	d
INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS	include/catch.hpp	754;"	d
INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS	include/catch.hpp	759;"	d
INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE	include/catch.hpp	1205;"	d
INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2	include/catch.hpp	1178;"	d
INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD	include/catch.hpp	1337;"	d
INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2	include/catch.hpp	1307;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE	include/catch.hpp	1163;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2	include/catch.hpp	1128;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD	include/catch.hpp	1292;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2	include/catch.hpp	1254;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG	include/catch.hpp	1300;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG	include/catch.hpp	1171;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE	include/catch.hpp	1113;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_2	include/catch.hpp	1082;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD	include/catch.hpp	1239;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2	include/catch.hpp	1208;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION	include/catch.hpp	1029;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2	include/catch.hpp	1004;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG	include/catch.hpp	1247;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION	include/catch.hpp	1037;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION	include/catch.hpp	1013;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2	include/catch.hpp	1002;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG	include/catch.hpp	1121;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION	include/catch.hpp	1021;"	d
INTERNAL_CATCH_TEST	include/catch.hpp	2683;"	d
INTERNAL_CATCH_TEST	lib/armadillo-9.800.2/tests/catch.hpp	2149;"	d
INTERNAL_CATCH_TESTCASE	include/catch.hpp	1052;"	d
INTERNAL_CATCH_TESTCASE	lib/armadillo-9.800.2/tests/catch.hpp	781;"	d
INTERNAL_CATCH_TESTCASE2	include/catch.hpp	1046;"	d
INTERNAL_CATCH_TESTCASE2	lib/armadillo-9.800.2/tests/catch.hpp	775;"	d
INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION	include/catch.hpp	995;"	d
INTERNAL_CATCH_TESTCASE_NO_REGISTRATION	include/catch.hpp	993;"	d
INTERNAL_CATCH_TEST_CASE_METHOD	include/catch.hpp	1072;"	d
INTERNAL_CATCH_TEST_CASE_METHOD	lib/armadillo-9.800.2/tests/catch.hpp	801;"	d
INTERNAL_CATCH_TEST_CASE_METHOD2	include/catch.hpp	1062;"	d
INTERNAL_CATCH_TEST_CASE_METHOD2	lib/armadillo-9.800.2/tests/catch.hpp	791;"	d
INTERNAL_CATCH_TEST_NO_TRY	lib/armadillo-9.800.2/tests/catch.hpp	2116;"	d
INTERNAL_CATCH_THROWS	include/catch.hpp	2720;"	d
INTERNAL_CATCH_THROWS	lib/armadillo-9.800.2/tests/catch.hpp	2189;"	d
INTERNAL_CATCH_THROWS_AS	include/catch.hpp	2737;"	d
INTERNAL_CATCH_THROWS_AS	lib/armadillo-9.800.2/tests/catch.hpp	2206;"	d
INTERNAL_CATCH_THROWS_MATCHES	include/catch.hpp	3786;"	d
INTERNAL_CATCH_THROWS_STR_MATCHES	include/catch.hpp	2779;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION	include/catch.hpp	3040;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION	lib/armadillo-9.800.2/tests/catch.hpp	2708;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION2	include/catch.hpp	3033;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION2	lib/armadillo-9.800.2/tests/catch.hpp	2703;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG	include/catch.hpp	2973;"	d
INTERNAL_CATCH_TRY	include/catch.hpp	2670;"	d
INTERNAL_CATCH_TYPE_GEN	include/catch.hpp	792;"	d
INTERNAL_CATCH_UNIQUE_NAME	include/catch.hpp	448;"	d
INTERNAL_CATCH_UNIQUE_NAME	lib/armadillo-9.800.2/tests/catch.hpp	374;"	d
INTERNAL_CATCH_UNIQUE_NAME	lib/armadillo-9.800.2/tests/catch.hpp	376;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE	include/catch.hpp	446;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE	lib/armadillo-9.800.2/tests/catch.hpp	372;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE2	include/catch.hpp	445;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE2	lib/armadillo-9.800.2/tests/catch.hpp	371;"	d
INTERNAL_CATCH_UNSCOPED_INFO	include/catch.hpp	2774;"	d
INTERNAL_CATCH_VA_NARGS_IMPL	include/catch.hpp	790;"	d
INTERNAL_CHECK_THAT	include/catch.hpp	3776;"	d
INTERNAL_CHECK_THAT	lib/armadillo-9.800.2/tests/catch.hpp	2249;"	d
INTERNAL_CHECK_THAT_NO_TRY	lib/armadillo-9.800.2/tests/catch.hpp	2128;"	d
IShared	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct IShared : NonCopyable {$/;"	s	namespace:Catch
IStream	include/catch.hpp	/^    struct IStream {$/;"	s	namespace:Catch
ITestCase	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct ITestCase : IShared {$/;"	s	namespace:Catch
ITestCaseRegistry	include/catch.hpp	/^    struct ITestCaseRegistry {$/;"	s	namespace:Catch
ITestCaseRegistry	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct ITestCaseRegistry {$/;"	s	namespace:Catch
ITestInvoker	include/catch.hpp	/^    struct ITestInvoker {$/;"	s	namespace:Catch
Impl	lib/armadillo-9.800.2/tests/catch.hpp	/^    namespace Impl {$/;"	n	namespace:Catch::Matchers
Info	include/catch.hpp	/^        Info = 1,$/;"	e	enum:Catch::ResultWas::OfType
Info	lib/armadillo-9.800.2/tests/catch.hpp	/^        Info = 1,$/;"	e	enum:Catch::ResultWas::OfType
Internal	lib/armadillo-9.800.2/tests/catch.hpp	/^namespace Internal {$/;"	n	namespace:Catch
IsEqualTo	lib/armadillo-9.800.2/tests/catch.hpp	/^        IsEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsGreaterThan	lib/armadillo-9.800.2/tests/catch.hpp	/^        IsGreaterThan,$/;"	e	enum:Catch::Internal::Operator
IsGreaterThanOrEqualTo	lib/armadillo-9.800.2/tests/catch.hpp	/^        IsGreaterThanOrEqualTo$/;"	e	enum:Catch::Internal::Operator
IsLessThan	lib/armadillo-9.800.2/tests/catch.hpp	/^        IsLessThan,$/;"	e	enum:Catch::Internal::Operator
IsLessThanOrEqualTo	lib/armadillo-9.800.2/tests/catch.hpp	/^        IsLessThanOrEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsNotEqualTo	lib/armadillo-9.800.2/tests/catch.hpp	/^        IsNotEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsStreamInsertable	include/catch.hpp	/^        class IsStreamInsertable {$/;"	c	namespace:Catch::Detail
IsStreamInsertable	lib/armadillo-9.800.2/tests/catch.hpp	/^    class IsStreamInsertable {$/;"	c	namespace:Catch::Detail
IsStreamInsertable	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct IsStreamInsertable {$/;"	s	namespace:Catch::Detail
IterRefine	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    IterRefine_t  IterRefine;$/;"	m	struct:arma::superlu::__anon6
K_J	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT K_J;       \/\/!< Josephson constant$/;"	m	class:Datum
K_J	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::K_J       = eT(483597.8525e9);$/;"	m	class:Datum
K_J	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT K_J()       { return eT(483597.8525e9); }$/;"	f	class:Phy
LARGEST_ALGE	lib/armadillo-9.800.2/include/armadillo_bits/newarp_EigsSelect.hpp	/^    LARGEST_ALGE,      \/\/!< Select eigenvalues with largest algebraic value, considering any negative sign. Only for symmetric eigen solvers.$/;"	e	enum:newarp::EigsSelect::SELECT_EIGENVALUE
LARGEST_IMAG	lib/armadillo-9.800.2/include/armadillo_bits/newarp_EigsSelect.hpp	/^    LARGEST_IMAG,      \/\/!< Select eigenvalues with largest imaginary part (in magnitude). Only for general eigen solvers.$/;"	e	enum:newarp::EigsSelect::SELECT_EIGENVALUE
LARGEST_MAGN	lib/armadillo-9.800.2/include/armadillo_bits/newarp_EigsSelect.hpp	/^    LARGEST_MAGN = 0,  \/\/!< Select eigenvalues with largest magnitude.$/;"	e	enum:newarp::EigsSelect::SELECT_EIGENVALUE
LARGEST_REAL	lib/armadillo-9.800.2/include/armadillo_bits/newarp_EigsSelect.hpp	/^    LARGEST_REAL,      \/\/!< Select eigenvalues with largest real part. Only for general eigen solvers.$/;"	e	enum:newarp::EigsSelect::SELECT_EIGENVALUE
LU_stack_t	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    } LU_stack_t;$/;"	t	namespace:arma::superlu	typeref:struct:arma::superlu::__anon8
M	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned Mat<eT>* M;$/;"	m	class:Mat::row_col_iterator
M	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned Mat<eT>* M;$/;"	m	class:Mat::row_iterator
M	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned const Mat<eT>* M;$/;"	m	class:Mat::const_row_col_iterator
M	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned const Mat<eT>* M;$/;"	m	class:Mat::const_row_iterator
M	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    arma_aligned const SpMat* M;$/;"	m	class:SpMat::iterator_base
M	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    arma_aligned const SpSubview* M;$/;"	m	class:SpSubview::iterator_base
M	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^    arma_aligned const field<oT>& M;$/;"	m	class:field::const_iterator
M	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^    arma_aligned field<oT>& M;$/;"	m	class:field::iterator
M	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  const T1& M;$/;"	m	struct:strip_diagmat
M	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  const T1& M;$/;"	m	struct:strip_inv
M	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  const T1& M;$/;"	m	struct:strip_trimat
M	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned Mat<eT>* M;$/;"	m	class:subview::iterator
M	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned Mat<eT>* M;$/;"	m	class:subview::row_iterator
M	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned const Mat<eT>* M;$/;"	m	class:subview::const_iterator
M	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned const Mat<eT>* M;$/;"	m	class:subview::const_row_iterator
M	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned Cube<eT>* M;$/;"	m	class:subview_cube::iterator
M	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned const Cube<eT>* M;$/;"	m	class:subview_cube::const_iterator
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  Mat<eT> M;$/;"	m	struct:quasi_unwrap_default
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  Mat<out_eT> M;$/;"	m	struct:quasi_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  Row<eT> M;$/;"	m	struct:quasi_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT1>& M;$/;"	m	struct:unwrap_check_mixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT>  M;$/;"	m	struct:partial_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT>  M;$/;"	m	struct:quasi_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT>  M;$/;"	m	struct:quasi_unwrap_Row_htrans
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT> M;$/;"	m	struct:partial_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT> M;$/;"	m	struct:partial_unwrap_check
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT>& M;$/;"	m	struct:partial_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT>& M;$/;"	m	struct:partial_unwrap_check
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT>& M;$/;"	m	struct:quasi_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT>& M;$/;"	m	struct:unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT>& M;$/;"	m	struct:unwrap_check
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT1> M;$/;"	m	struct:unwrap_check_mixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT1>& M;$/;"	m	struct:unwrap_check_mixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>          M;$/;"	m	struct:quasi_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>         M;$/;"	m	struct:quasi_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>      M;$/;"	m	struct:partial_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>      M;$/;"	m	struct:quasi_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>    M;$/;"	m	struct:quasi_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT> M;$/;"	m	struct:partial_unwrap_check_default
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT> M;$/;"	m	struct:partial_unwrap_check_htrans2_default
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT> M;$/;"	m	struct:partial_unwrap_check_htrans_default
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT> M;$/;"	m	struct:partial_unwrap_check_neg_default
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT> M;$/;"	m	struct:partial_unwrap_check_scalar_times_default
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT> M;$/;"	m	struct:partial_unwrap_default
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT> M;$/;"	m	struct:partial_unwrap_htrans2_default
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT> M;$/;"	m	struct:partial_unwrap_htrans_default
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT> M;$/;"	m	struct:partial_unwrap_neg_default
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT> M;$/;"	m	struct:partial_unwrap_scalar_times_default
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT> M;$/;"	m	struct:unwrap_check_default
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT> M;$/;"	m	struct:unwrap_default
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>& M;$/;"	m	struct:partial_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>& M;$/;"	m	struct:partial_unwrap_check
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>& M;$/;"	m	struct:quasi_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>& M;$/;"	m	struct:unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>& M;$/;"	m	struct:unwrap_check
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<out_eT> M;$/;"	m	struct:unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT1>& M;$/;"	m	struct:unwrap_check_mixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT>  M;$/;"	m	struct:quasi_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT>  M;$/;"	m	struct:quasi_unwrap_Col_htrans
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT>  M;$/;"	m	struct:quasi_unwrap_subview_col_htrans
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT> M;$/;"	m	struct:partial_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT>& M;$/;"	m	struct:partial_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT>& M;$/;"	m	struct:partial_unwrap_check
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT>& M;$/;"	m	struct:quasi_unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT>& M;$/;"	m	struct:unwrap
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT>& M;$/;"	m	struct:unwrap_check
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1& M;$/;"	m	struct:partial_unwrap_check_fixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1& M;$/;"	m	struct:partial_unwrap_check_htrans2_fixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1& M;$/;"	m	struct:partial_unwrap_check_htrans_fixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1& M;$/;"	m	struct:partial_unwrap_check_neg_fixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1& M;$/;"	m	struct:partial_unwrap_check_scalar_times_fixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1& M;$/;"	m	struct:partial_unwrap_fixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1& M;$/;"	m	struct:partial_unwrap_htrans2_fixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1& M;$/;"	m	struct:partial_unwrap_htrans_fixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1& M;$/;"	m	struct:partial_unwrap_neg_fixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1& M;$/;"	m	struct:partial_unwrap_scalar_times_fixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1& M;$/;"	m	struct:quasi_unwrap_fixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1& M;$/;"	m	struct:unwrap_check_fixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1& M;$/;"	m	struct:unwrap_fixed
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^  const Cube<eT> M;$/;"	m	struct:unwrap_cube
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^  const Cube<eT> M;$/;"	m	struct:unwrap_cube_check
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^  const Cube<eT>& M;$/;"	m	struct:unwrap_cube
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^  const Cube<eT>& M;$/;"	m	struct:unwrap_cube_check
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  const SpCol<eT>& M;$/;"	m	struct:unwrap_spmat
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  const SpMat<eT> M;$/;"	m	struct:unwrap_spmat
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  const SpMat<eT>& M;$/;"	m	struct:unwrap_spmat
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  const SpMat<out_eT> M;$/;"	m	struct:unwrap_spmat
M	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  const SpRow<eT>& M;$/;"	m	struct:unwrap_spmat
MEMORYKERNELFACTORY_H	src/Polarizability/MemoryKernelFactory.h	2;"	d
MEMORYKERNEL_H	src/Polarizability/MemoryKernel.h	2;"	d
MMD_ATA	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  typedef enum {NATURAL, MMD_ATA, MMD_AT_PLUS_A, COLAMD} permutation_type;$/;"	e	enum:superlu_opts::__anon3
MMD_AT_PLUS_A	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  typedef enum {NATURAL, MMD_ATA, MMD_AT_PLUS_A, COLAMD} permutation_type;$/;"	e	enum:superlu_opts::__anon3
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT1>* M_local;$/;"	m	struct:unwrap_check_mixed
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT>* M_local;$/;"	m	struct:partial_unwrap_check
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT>* M_local;$/;"	m	struct:unwrap_check
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT1>* M_local;$/;"	m	struct:unwrap_check_mixed
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>* M_local;$/;"	m	struct:partial_unwrap_check
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>* M_local;$/;"	m	struct:unwrap_check
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT1>* M_local;$/;"	m	struct:unwrap_check_mixed
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT>* M_local;$/;"	m	struct:partial_unwrap_check
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT>* M_local;$/;"	m	struct:unwrap_check
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1* M_local;$/;"	m	struct:partial_unwrap_check_fixed
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1* M_local;$/;"	m	struct:partial_unwrap_check_htrans2_fixed
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1* M_local;$/;"	m	struct:partial_unwrap_check_htrans_fixed
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1* M_local;$/;"	m	struct:partial_unwrap_check_neg_fixed
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1* M_local;$/;"	m	struct:partial_unwrap_check_scalar_times_fixed
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const T1* M_local;$/;"	m	struct:unwrap_check_fixed
M_local	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^  const Cube<eT>* M_local;$/;"	m	struct:unwrap_cube_check
MapMat	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^class MapMat$/;"	c
MapMat	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^  MapMat<eT>::MapMat(MapMat<eT>&& x)$/;"	f	class:MapMat
MapMat	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::MapMat()$/;"	f	class:MapMat
MapMat	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::MapMat(const MapMat<eT>& x)$/;"	f	class:MapMat
MapMat	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::MapMat(const SizeMat& s)$/;"	f	class:MapMat
MapMat	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::MapMat(const SpMat<eT>& x)$/;"	f	class:MapMat
MapMat	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::MapMat(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:MapMat
MapMat_val	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^class MapMat_val$/;"	c
MapMat_val	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat_val<eT>::MapMat_val(MapMat<eT>& in_parent, const uword in_index)$/;"	f	class:MapMat_val
Mat	lib/armadillo-9.800.2/docs.html	/^<a name="Mat"><\/a><b>Mat&lt;<\/b><i>type<\/i><b>&gt;<\/b>$/;"	a
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^class Mat : public Base< eT, Mat<eT> >$/;"	c
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::Mat(Mat<eT>&& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::Mat(const std::initializer_list< std::initializer_list<eT> >& list)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::Mat(const std::initializer_list<eT>& list)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat()$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const BaseCube<eT,T1>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const CubeToMatOp<T1, op_type>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const Gen<T1, gen_type>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const Glue<T1, T2, glue_type>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const Mat<eT>& in_mat)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const Op<T1, op_type>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const SizeMat& s)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const SizeMat& s, const fill::fill_class<fill_type>& f)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const SpBase<eT, T1>& m)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const SpToDOp<T1, op_type>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const arma_fixed_indicator&, const uword in_n_rows, const uword in_n_cols, const uhword in_vec_state, const eT* in_mem)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const arma_vec_indicator&, const uhword in_vec_state)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const arma_vec_indicator&, const uword in_n_rows, const uword in_n_cols, const uhword in_vec_state)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const char junk, const eT* aux_mem, const uword aux_n_rows, const uword aux_n_cols)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const char* text)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const diagview<eT>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const eGlue<T1, T2, eglue_type>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const eOp<T1, eop_type>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const eT* aux_mem, const uword aux_n_rows, const uword aux_n_cols)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const mtGlue<eT, T1, T2, glue_type>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const mtOp<eT, T1, op_type>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const spdiagview<eT>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const std::string& text)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const std::vector<eT>& x)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const subview<eT>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const subview<eT>& X, const bool use_colmem)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const subview_cube<eT>& x)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const subview_elem1<eT,T1>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const subview_elem2<eT,T1,T2>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const subview_row_htrans<eT>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const subview_row_strans<eT>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const uword in_n_rows, const uword in_n_cols, const fill::fill_class<fill_type>& f)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const xtrans_mat<eT,do_conj>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(const xvec_htrans<eT>& X)$/;"	f	class:Mat
Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::Mat(eT* aux_mem, const uword aux_n_rows, const uword aux_n_cols, const bool copy_aux_mem, const bool strict)$/;"	f	class:Mat
Mat_aux	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^class Mat_aux$/;"	c
Mat_fixed_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  typedef fixed<fixed_n_rows, fixed_n_cols> Mat_fixed_type;$/;"	t	class:Mat::fixed
MatchAllOf	lib/armadillo-9.800.2/tests/catch.hpp	/^        struct MatchAllOf : MatcherBase<ArgT> {$/;"	s	namespace:Catch::Matchers::Impl
MatchAnyOf	lib/armadillo-9.800.2/tests/catch.hpp	/^        struct MatchAnyOf : MatcherBase<ArgT> {$/;"	s	namespace:Catch::Matchers::Impl
MatchNotOf	lib/armadillo-9.800.2/tests/catch.hpp	/^            MatchNotOf( MatcherBase<ArgT> const& underlyingMatcher ) : m_underlyingMatcher( underlyingMatcher ) {}$/;"	f	struct:Catch::Matchers::Impl::MatchNotOf
MatchNotOf	lib/armadillo-9.800.2/tests/catch.hpp	/^        struct MatchNotOf : MatcherBase<ArgT> {$/;"	s	namespace:Catch::Matchers::Impl
MatcherBase	lib/armadillo-9.800.2/tests/catch.hpp	/^        struct MatcherBase : MatcherUntypedBase, MatcherMethod<ObjectT> {$/;"	s	namespace:Catch::Matchers::Impl
MatcherMethod	lib/armadillo-9.800.2/tests/catch.hpp	/^        struct MatcherMethod {$/;"	s	namespace:Catch::Matchers::Impl
MatcherMethod	lib/armadillo-9.800.2/tests/catch.hpp	/^        struct MatcherMethod<PtrT*> {$/;"	s	namespace:Catch::Matchers::Impl
MatcherUntypedBase	lib/armadillo-9.800.2/tests/catch.hpp	/^        class MatcherUntypedBase {$/;"	c	namespace:Catch::Matchers::Impl
Matchers	lib/armadillo-9.800.2/tests/catch.hpp	/^namespace Matchers {$/;"	n	namespace:Catch
Math	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^class Math$/;"	c
MemModel	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    LU_space_t MemModel;$/;"	m	struct:arma::superlu::__anon9
MemoryKernel	src/Polarizability/MemoryKernel.h	/^class MemoryKernel$/;"	c
MemoryKernelFactory	src/Polarizability/MemoryKernelFactory.h	/^class MemoryKernelFactory$/;"	c
MethodTestCase	lib/armadillo-9.800.2/tests/catch.hpp	/^    MethodTestCase( void (C::*method)() ) : m_method( method ) {}$/;"	f	class:Catch::MethodTestCase
MethodTestCase	lib/armadillo-9.800.2/tests/catch.hpp	/^class MethodTestCase : public SharedImpl<ITestCase> {$/;"	c	namespace:Catch
N	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  const uword N;$/;"	m	struct:fft_store
N	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  static const uword N = fixed_N;$/;"	m	struct:fft_store
NATURAL	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  typedef enum {NATURAL, MMD_ATA, MMD_AT_PLUS_A, COLAMD} permutation_type;$/;"	e	enum:superlu_opts::__anon3
NOMINMAX	include/catch.hpp	7851;"	d
NOMINMAX	include/catch.hpp	7865;"	d
NOMINMAX	lib/armadillo-9.800.2/tests/catch.hpp	6340;"	d
NOMINMAX	lib/armadillo-9.800.2/tests/catch.hpp	6353;"	d
N_A	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT N_A;       \/\/!< Avogadro constant$/;"	m	class:Datum
N_A	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::N_A       = eT(6.022140857e23);$/;"	m	class:Datum
N_A	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT N_A()       {  return eT(6.022140857e23); }$/;"	f	class:Phy
NameAndDesc	lib/armadillo-9.800.2/tests/catch.hpp	/^    NameAndDesc( const char* _name = "", const char* _description= "" )$/;"	f	struct:Catch::NameAndDesc
NameAndDesc	lib/armadillo-9.800.2/tests/catch.hpp	/^struct NameAndDesc {$/;"	s	namespace:Catch
NameAndTags	include/catch.hpp	/^struct NameAndTags {$/;"	s	namespace:Catch
No	include/catch.hpp	/^        No$/;"	e	enum:Catch::CaseSensitive::Choice
No	lib/armadillo-9.800.2/tests/catch.hpp	/^        No$/;"	e	enum:Catch::CaseSensitive::Choice
NonCopyable	include/catch.hpp	/^    class NonCopyable {$/;"	c	namespace:Catch
NonCopyable	lib/armadillo-9.800.2/tests/catch.hpp	/^        NonCopyable() {}$/;"	f	class:Catch::NonCopyable
NonCopyable	lib/armadillo-9.800.2/tests/catch.hpp	/^    class NonCopyable {$/;"	c	namespace:Catch
Normal	include/catch.hpp	/^        Normal = 0x01,$/;"	e	enum:Catch::ResultDisposition::Flags
Normal	lib/armadillo-9.800.2/tests/catch.hpp	/^        Normal = 0x01,$/;"	e	enum:Catch::ResultDisposition::Flags
Not	lib/armadillo-9.800.2/tests/catch.hpp	/^    Impl::MatchNotOf<T> Not( Impl::MatcherBase<T> const& underlyingMatcher ) {$/;"	f	namespace:Catch::Matchers
NotImplementedException	lib/armadillo-9.800.2/tests/catch.hpp	/^    class NotImplementedException : public std::exception$/;"	c	namespace:Catch
OC_MAKE_UNIQUE_NAME	include/catch.hpp	5005;"	d
OC_TEST_CASE	include/catch.hpp	5017;"	d
OC_TEST_CASE	lib/armadillo-9.800.2/tests/catch.hpp	3426;"	d
OC_TEST_CASE2	include/catch.hpp	5006;"	d
OHMICMEMORYKERNEL_H	src/Polarizability/OhmicMemoryKernel.h	2;"	d
OfType	include/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	g	struct:Catch::ResultWas
OfType	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	g	struct:Catch::ResultWas
OhmicMemoryKernel	src/Polarizability/OhmicMemoryKernel.cpp	/^OhmicMemoryKernel::OhmicMemoryKernel(double a)$/;"	f	class:OhmicMemoryKernel
OhmicMemoryKernel	src/Polarizability/OhmicMemoryKernel.cpp	/^OhmicMemoryKernel::OhmicMemoryKernel(std::string input_file)$/;"	f	class:OhmicMemoryKernel
OhmicMemoryKernel	src/Polarizability/OhmicMemoryKernel.h	/^class OhmicMemoryKernel : public MemoryKernel$/;"	c
Ok	include/catch.hpp	/^        Ok = 0,$/;"	e	enum:Catch::ResultWas::OfType
Ok	lib/armadillo-9.800.2/tests/catch.hpp	/^        Ok = 0,$/;"	e	enum:Catch::ResultWas::OfType
Op	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^class Op$/;"	c
Op	lib/armadillo-9.800.2/include/armadillo_bits/Op_meat.hpp	/^Op<T1, op_type>::Op(const T1& in_m)$/;"	f	class:Op
Op	lib/armadillo-9.800.2/include/armadillo_bits/Op_meat.hpp	/^Op<T1, op_type>::Op(const T1& in_m, const typename T1::elem_type in_aux)$/;"	f	class:Op
Op	lib/armadillo-9.800.2/include/armadillo_bits/Op_meat.hpp	/^Op<T1, op_type>::Op(const T1& in_m, const typename T1::elem_type in_aux, const uword in_aux_uword_a, const uword in_aux_uword_b)$/;"	f	class:Op
Op	lib/armadillo-9.800.2/include/armadillo_bits/Op_meat.hpp	/^Op<T1, op_type>::Op(const T1& in_m, const uword in_aux_uword_a, const uword in_aux_uword_b)$/;"	f	class:Op
Op	lib/armadillo-9.800.2/include/armadillo_bits/Op_meat.hpp	/^Op<T1, op_type>::Op(const T1& in_m, const uword in_aux_uword_a, const uword in_aux_uword_b, const uword in_aux_uword_c, const char)$/;"	f	class:Op
OpCube	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_bones.hpp	/^class OpCube : public BaseCube<typename T1::elem_type, OpCube<T1, op_type> >$/;"	c
OpCube	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_meat.hpp	/^OpCube<T1, op_type>::OpCube(const BaseCube<typename T1::elem_type, T1>& in_m)$/;"	f	class:OpCube
OpCube	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_meat.hpp	/^OpCube<T1, op_type>::OpCube(const BaseCube<typename T1::elem_type, T1>& in_m, const typename T1::elem_type in_aux)$/;"	f	class:OpCube
OpCube	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_meat.hpp	/^OpCube<T1, op_type>::OpCube(const BaseCube<typename T1::elem_type, T1>& in_m, const typename T1::elem_type in_aux, const uword in_aux_uword_a, const uword in_aux_uword_b, const uword in_aux_uword_c)$/;"	f	class:OpCube
OpCube	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_meat.hpp	/^OpCube<T1, op_type>::OpCube(const BaseCube<typename T1::elem_type, T1>& in_m, const uword in_aux_uword_a, const uword in_aux_uword_b)$/;"	f	class:OpCube
OpCube	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_meat.hpp	/^OpCube<T1, op_type>::OpCube(const BaseCube<typename T1::elem_type, T1>& in_m, const uword in_aux_uword_a, const uword in_aux_uword_b, const uword in_aux_uword_c)$/;"	f	class:OpCube
OpCube	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_meat.hpp	/^OpCube<T1, op_type>::OpCube(const BaseCube<typename T1::elem_type, T1>& in_m, const uword in_aux_uword_a, const uword in_aux_uword_b, const uword in_aux_uword_c, const uword in_aux_uword_d, const char)$/;"	f	class:OpCube
Op_traits	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^struct Op_traits {};$/;"	s
Op_traits	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^struct Op_traits<T1, op_type, false>$/;"	s
Op_traits	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^struct Op_traits<T1, op_type, true>$/;"	s
Operator	lib/armadillo-9.800.2/tests/catch.hpp	/^    enum Operator {$/;"	g	namespace:Catch::Internal
OperatorTraits	lib/armadillo-9.800.2/tests/catch.hpp	/^    template<> struct OperatorTraits<IsEqualTo>             { static const char* getName(){ return "=="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	lib/armadillo-9.800.2/tests/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThan>         { static const char* getName(){ return ">"; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	lib/armadillo-9.800.2/tests/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThanOrEqualTo>{ static const char* getName(){ return ">="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	lib/armadillo-9.800.2/tests/catch.hpp	/^    template<> struct OperatorTraits<IsLessThan>            { static const char* getName(){ return "<"; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	lib/armadillo-9.800.2/tests/catch.hpp	/^    template<> struct OperatorTraits<IsLessThanOrEqualTo>   { static const char* getName(){ return "<="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	lib/armadillo-9.800.2/tests/catch.hpp	/^    template<> struct OperatorTraits<IsNotEqualTo>          { static const char* getName(){ return "!="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	lib/armadillo-9.800.2/tests/catch.hpp	/^    template<Operator Op> struct OperatorTraits             { static const char* getName(){ return "*error*"; } };$/;"	s	namespace:Catch::Internal
Opt	include/catch.hpp	/^        Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}$/;"	f	class:Catch::Opt
Opt	include/catch.hpp	/^        Opt( T &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}$/;"	f	class:Catch::Opt
Opt	include/catch.hpp	/^        explicit Opt( LambdaT const &ref ) : ParserRefImpl( std::make_shared<BoundFlagLambda<LambdaT>>( ref ) ) {}$/;"	f	class:Catch::Opt
Opt	include/catch.hpp	/^        explicit Opt( bool &ref ) : ParserRefImpl( std::make_shared<BoundFlagRef>( ref ) ) {}$/;"	f	class:Catch::Opt
Opt	include/catch.hpp	/^    class Opt : public ParserRefImpl<Opt> {$/;"	c	namespace:Catch
P	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const Col<eT> P;$/;"	m	class:diagmat_proxy_check
P	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const Col<eT>& P;$/;"	m	class:diagmat_proxy
P	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const Col<eT>& P;$/;"	m	class:diagmat_proxy_check
P	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const Mat<eT> P;  \/\/ TODO: why not just store X directly as T1& ?  test with fixed size vectors and matrices$/;"	m	class:diagmat_proxy_check_fixed
P	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const Mat<eT>& P;$/;"	m	class:diagmat_proxy
P	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const Mat<eT>& P;$/;"	m	class:diagmat_proxy_check
P	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const Mat<elem_type> P;$/;"	m	class:diagmat_proxy_check_default
P	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const Proxy<T1> P;$/;"	m	class:diagmat_proxy_default
P	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const Row<eT> P;$/;"	m	class:diagmat_proxy_check
P	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const Row<eT>& P;$/;"	m	class:diagmat_proxy
P	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const Row<eT>& P;$/;"	m	class:diagmat_proxy_check
P	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const T1& P;$/;"	m	class:diagmat_proxy_fixed
P	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const subview_col<eT>& P;$/;"	m	class:diagmat_proxy
P	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const subview_row<eT>& P;$/;"	m	class:diagmat_proxy
P	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_bones.hpp	/^  arma_aligned const ProxyCube<T1> P;$/;"	m	class:eOpCube
P	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^  arma_aligned const Proxy<T1> P;$/;"	m	class:eOp
P	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_bones.hpp	/^  const Cube<eT>& P;$/;"	m	class:subview_cube_each_common
P	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_bones.hpp	/^  const parent& P;$/;"	m	class:subview_each_common
P1	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_bones.hpp	/^  arma_aligned const ProxyCube<T1> P1;$/;"	m	class:eGlueCube
P1	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_bones.hpp	/^  arma_aligned const Proxy<T1> P1;$/;"	m	class:eGlue
P2	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_bones.hpp	/^  arma_aligned const ProxyCube<T2> P2;$/;"	m	class:eGlueCube
P2	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_bones.hpp	/^  arma_aligned const Proxy<T2> P2;$/;"	m	class:eGlue
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	322;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	325;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	328;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	331;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	334;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	337;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	340;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	343;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	346;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	349;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	352;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	355;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	358;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	361;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	364;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	367;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	370;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	373;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	376;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	379;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	382;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	385;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	388;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	391;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	394;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	398;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	401;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	404;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	407;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	410;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	414;"	d	file:
POLARIZABILITYBATH_H	src/Polarizability/PolarizabilityBath.h	2;"	d
POLARIZABILITY_H	src/Polarizability/Polarizability.h	2;"	d
P_is_col	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const bool      P_is_col;$/;"	m	class:diagmat_proxy_default
P_is_vec	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const bool           P_is_vec;$/;"	m	class:diagmat_proxy_check_default
P_is_vec	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const bool      P_is_vec;$/;"	m	class:diagmat_proxy_default
P_is_vec	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const bool     P_is_vec;$/;"	m	class:diagmat_proxy
P_is_vec	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const bool     P_is_vec;$/;"	m	class:diagmat_proxy_check
P_is_vec	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  static const bool  P_is_vec = (T1::n_rows == 1) || (T1::n_cols == 1);$/;"	m	class:diagmat_proxy_check_fixed
P_is_vec	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  static const bool  P_is_vec = (T1::n_rows == 1) || (T1::n_cols == 1);$/;"	m	class:diagmat_proxy_fixed
P_is_vec	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  static const bool P_is_vec = true;$/;"	m	class:diagmat_proxy
P_is_vec	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  static const bool P_is_vec = true;$/;"	m	class:diagmat_proxy_check
P_local	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const Col<eT>* P_local;$/;"	m	class:diagmat_proxy_check
P_local	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const Mat<eT>* P_local;$/;"	m	class:diagmat_proxy_check
P_local	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const Row<eT>* P_local;$/;"	m	class:diagmat_proxy_check
PairComparator	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^struct PairComparator$/;"	s	namespace:newarp
PairType	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^  typedef std::pair<TargetType, uword>      PairType;    \/\/ type of the sorting pair, including the sorting target and the index$/;"	t	class:newarp::SortEigenvalue
ParSymbFact	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    yes_no_t      ParSymbFact;$/;"	m	struct:arma::superlu::__anon6
Parser	include/catch.hpp	/^        auto operator+( T const &other ) const -> Parser;$/;"	m	namespace:Catch::Detail
Parser	include/catch.hpp	/^    struct Parser : ParserBase {$/;"	s	namespace:Catch
ParserRefImpl	include/catch.hpp	/^        ParserRefImpl( LambdaT const &ref, std::string const &hint )$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	include/catch.hpp	/^        ParserRefImpl( T &ref, std::string const &hint )$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	include/catch.hpp	/^        explicit ParserRefImpl( std::shared_ptr<BoundRef> const &ref ) : m_ref( ref ) {}$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	include/catch.hpp	/^    class ParserRefImpl : public ComposableParserImpl<DerivedT> {$/;"	c	namespace:Catch
Phy	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^class Phy$/;"	c
PivotGrowth	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    yes_no_t      PivotGrowth;$/;"	m	struct:arma::superlu::__anon6
Polarizability	src/Polarizability/Polarizability.h	/^class Polarizability$/;"	c
PolarizabilityBath	src/Polarizability/PolarizabilityBath.cpp	/^PolarizabilityBath::PolarizabilityBath(std::string input_file)$/;"	f	class:PolarizabilityBath
PolarizabilityBath	src/Polarizability/PolarizabilityBath.h	/^class PolarizabilityBath : public Polarizability$/;"	c
PrintStat	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    yes_no_t      PrintStat;$/;"	m	struct:arma::superlu::__anon6
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline Proxy(const T1& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Col<eT>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const CubeToMatOp<T1, op_type>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const CubeToMatOp<T1, op_vectorise_cube_col>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Gen<T1, gen_randn>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Gen<T1, gen_randu>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Gen<T1, gen_type>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Glue<T1, T2, glue_type>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Mat<eT>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Op< Col< std::complex<T> >, op_htrans>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Op< Row< std::complex<T> >, op_htrans>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Op< subview_col< std::complex<T> >, op_htrans>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Op<T1, op_diagvec>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Op<T1, op_htrans2>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Op<T1, op_htrans>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Op<T1, op_strans>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Op<T1, op_type>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Op<T1, op_vectorise_col>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Op<subview_row<eT>, op_htrans>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Op<subview_row<eT>, op_strans>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const Row<eT>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const SpToDOp<T1, op_nonzeros_spmat>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const SpToDOp<T1, op_type>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const diagview<eT>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const eGlue<T1, T2, eglue_type>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const eOp<T1, eop_type>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const mtGlue<out_eT, T1, T2, glue_type>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const mtOp<out_eT, T1, op_type>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const subview<eT>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const subview_col<eT>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const subview_elem1<eT,T1>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const subview_elem2<eT,T1,T2>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const subview_row<eT>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const subview_row_htrans<eT>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const subview_row_strans<eT>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const xtrans_mat<eT, do_conj>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy(const xvec_htrans<eT>& A)$/;"	f	class:Proxy
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy : public Proxy_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Col<eT> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< CubeToMatOp<T1, op_type> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< CubeToMatOp<T1, op_vectorise_cube_col> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Gen<T1, gen_randn> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Gen<T1, gen_randu> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Gen<T1, gen_type> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Glue<T1, T2, glue_type> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Mat<eT> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Op< Col< std::complex<T> >, op_htrans> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Op< Row< std::complex<T> >, op_htrans> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Op< subview_col< std::complex<T> >, op_htrans> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Op<T1, op_diagvec> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Op<T1, op_htrans2> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Op<T1, op_htrans> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Op<T1, op_strans> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Op<T1, op_type> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Op<T1, op_vectorise_col> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Op<subview_row<eT>, op_htrans> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Op<subview_row<eT>, op_strans> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< Row<eT> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< SpToDOp<T1, op_nonzeros_spmat> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< SpToDOp<T1, op_type> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< diagview<eT> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< eGlue<T1, T2, eglue_type> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< eOp<T1, eop_type> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< mtGlue<out_eT, T1, T2, glue_type> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< mtOp<out_eT, T1, op_type> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< subview<eT> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< subview_col<eT> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< subview_elem1<eT,T1> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< subview_elem2<eT,T1,T2> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< subview_row<eT> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< subview_row_htrans<eT> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< subview_row_strans<eT> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< xtrans_mat<eT, do_conj> >$/;"	c
Proxy	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy< xvec_htrans<eT> >$/;"	c
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  inline ProxyCube(const T1&)$/;"	f	class:ProxyCube
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  inline explicit ProxyCube(const Cube<eT>& A)$/;"	f	class:ProxyCube
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  inline explicit ProxyCube(const GenCube<eT, gen_randn>& A)$/;"	f	class:ProxyCube
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  inline explicit ProxyCube(const GenCube<eT, gen_randu>& A)$/;"	f	class:ProxyCube
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  inline explicit ProxyCube(const GenCube<eT, gen_type>& A)$/;"	f	class:ProxyCube
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  inline explicit ProxyCube(const GlueCube<T1, T2, glue_type>& A)$/;"	f	class:ProxyCube
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  inline explicit ProxyCube(const OpCube<T1, op_type>& A)$/;"	f	class:ProxyCube
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  inline explicit ProxyCube(const eGlueCube<T1, T2, eglue_type>& A)$/;"	f	class:ProxyCube
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  inline explicit ProxyCube(const eOpCube<T1, eop_type>& A)$/;"	f	class:ProxyCube
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  inline explicit ProxyCube(const mtGlueCube<out_eT, T1, T2, glue_type>& A)$/;"	f	class:ProxyCube
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  inline explicit ProxyCube(const mtOpCube<out_eT, T1, op_type>& A)$/;"	f	class:ProxyCube
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  inline explicit ProxyCube(const subview_cube<eT>& A)$/;"	f	class:ProxyCube
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  inline explicit ProxyCube(const subview_cube_slices<eT,T1>& A)$/;"	f	class:ProxyCube
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^class ProxyCube$/;"	c
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^class ProxyCube< Cube<eT> >$/;"	c
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^class ProxyCube< GenCube<eT, gen_randn> >$/;"	c
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^class ProxyCube< GenCube<eT, gen_randu> >$/;"	c
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^class ProxyCube< GenCube<eT, gen_type> >$/;"	c
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^class ProxyCube< GlueCube<T1, T2, glue_type> >$/;"	c
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^class ProxyCube< OpCube<T1, op_type> >$/;"	c
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^class ProxyCube< eGlueCube<T1, T2, eglue_type > >$/;"	c
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^class ProxyCube< eOpCube<T1, eop_type > >$/;"	c
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^class ProxyCube< mtGlueCube<out_eT, T1, T2, glue_type > >$/;"	c
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^class ProxyCube< mtOpCube<out_eT, T1, op_type> >$/;"	c
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^class ProxyCube< subview_cube<eT> >$/;"	c
ProxyCube	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^class ProxyCube< subview_cube_slices<eT,T1> >$/;"	c
Proxy_default	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline Proxy_default(const T1&)$/;"	f	struct:Proxy_default
Proxy_default	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_default$/;"	s
Proxy_diagvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename Proxy_diagvec_redirect< Op<T1, op_diagvec>, is_Mat<T1>::value >::result Proxy_diagvec;$/;"	t	class:Proxy
Proxy_diagvec_expr	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline Proxy_diagvec_expr(const T1&) {}$/;"	f	class:Proxy_diagvec_expr
Proxy_diagvec_expr	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy_diagvec_expr(const Op<T1, op_diagvec>& A)$/;"	f	class:Proxy_diagvec_expr
Proxy_diagvec_expr	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy_diagvec_expr$/;"	c
Proxy_diagvec_expr	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy_diagvec_expr< Op<T1, op_diagvec> >$/;"	c
Proxy_diagvec_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline Proxy_diagvec_mat(const T1&) {}$/;"	f	class:Proxy_diagvec_mat
Proxy_diagvec_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy_diagvec_mat(const Op<T1, op_diagvec>& A)$/;"	f	class:Proxy_diagvec_mat
Proxy_diagvec_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy_diagvec_mat$/;"	c
Proxy_diagvec_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy_diagvec_mat< Op<T1, op_diagvec> >$/;"	c
Proxy_diagvec_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_diagvec_redirect {};$/;"	s
Proxy_diagvec_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_diagvec_redirect< Op<T1, op_diagvec>, false> { typedef Proxy_diagvec_expr< Op<T1, op_diagvec> > result; };$/;"	s
Proxy_diagvec_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_diagvec_redirect< Op<T1, op_diagvec>, true > { typedef Proxy_diagvec_mat < Op<T1, op_diagvec> > result; };$/;"	s
Proxy_fixed	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy_fixed(const T1& A)$/;"	f	struct:Proxy_fixed
Proxy_fixed	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_fixed$/;"	s
Proxy_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_redirect {};$/;"	s
Proxy_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_redirect<T1, false> { typedef Proxy_default<T1> result; };$/;"	s
Proxy_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_redirect<T1, true>  { typedef Proxy_fixed<T1>   result; };$/;"	s
Proxy_subview_row_htrans_cx	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy_subview_row_htrans_cx(const Op<subview_row<eT>, op_htrans>& A)$/;"	f	struct:Proxy_subview_row_htrans_cx
Proxy_subview_row_htrans_cx	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_subview_row_htrans_cx$/;"	s
Proxy_subview_row_htrans_non_cx	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy_subview_row_htrans_non_cx(const Op<subview_row<eT>, op_htrans>& A)$/;"	f	struct:Proxy_subview_row_htrans_non_cx
Proxy_subview_row_htrans_non_cx	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_subview_row_htrans_non_cx$/;"	s
Proxy_subview_row_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_subview_row_htrans_redirect {};$/;"	s
Proxy_subview_row_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_subview_row_htrans_redirect<eT, false> { typedef Proxy_subview_row_htrans_non_cx<eT>  result; };$/;"	s
Proxy_subview_row_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_subview_row_htrans_redirect<eT, true>  { typedef Proxy_subview_row_htrans_cx<eT>      result; };$/;"	s
Proxy_sv_row_ht	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  Proxy_sv_row_ht;$/;"	t	class:Proxy
Proxy_vectorise_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename Proxy_vectorise_col_redirect< Op<T1, op_vectorise_col>, (Proxy<T1>::use_at) >::result Proxy_vectorise_col;$/;"	t	class:Proxy
Proxy_vectorise_col_expr	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline Proxy_vectorise_col_expr(const T1&) {}$/;"	f	class:Proxy_vectorise_col_expr
Proxy_vectorise_col_expr	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy_vectorise_col_expr(const Op<T1, op_vectorise_col>& A)$/;"	f	class:Proxy_vectorise_col_expr
Proxy_vectorise_col_expr	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy_vectorise_col_expr$/;"	c
Proxy_vectorise_col_expr	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy_vectorise_col_expr< Op<T1, op_vectorise_col> >$/;"	c
Proxy_vectorise_col_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline Proxy_vectorise_col_mat(const T1&) {}$/;"	f	class:Proxy_vectorise_col_mat
Proxy_vectorise_col_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy_vectorise_col_mat(const Op<T1, op_vectorise_col>& A)$/;"	f	class:Proxy_vectorise_col_mat
Proxy_vectorise_col_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy_vectorise_col_mat$/;"	c
Proxy_vectorise_col_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^class Proxy_vectorise_col_mat< Op<T1, op_vectorise_col> >$/;"	c
Proxy_vectorise_col_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_vectorise_col_redirect {};$/;"	s
Proxy_vectorise_col_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_vectorise_col_redirect< Op<T1, op_vectorise_col>, false> { typedef Proxy_vectorise_col_expr< Op<T1, op_vectorise_col> > result; };$/;"	s
Proxy_vectorise_col_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_vectorise_col_redirect< Op<T1, op_vectorise_col>, true > { typedef Proxy_vectorise_col_mat < Op<T1, op_vectorise_col> > result; };$/;"	s
Proxy_xtrans	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  Proxy_xtrans;$/;"	t	class:Proxy
Proxy_xtrans_default	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline Proxy_xtrans_default(const T1&) {}$/;"	f	struct:Proxy_xtrans_default
Proxy_xtrans_default	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy_xtrans_default(const Op<T1, op_htrans>& A)$/;"	f	struct:Proxy_xtrans_default
Proxy_xtrans_default	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline explicit Proxy_xtrans_default(const Op<T1, op_strans>& A)$/;"	f	struct:Proxy_xtrans_default
Proxy_xtrans_default	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_xtrans_default$/;"	s
Proxy_xtrans_default	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_xtrans_default< Op<T1, op_htrans> >$/;"	s
Proxy_xtrans_default	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_xtrans_default< Op<T1, op_strans> >$/;"	s
Proxy_xtrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_xtrans_redirect {};$/;"	s
Proxy_xtrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_xtrans_redirect<T1, false> { typedef Proxy_xtrans_default<T1> result; };$/;"	s
Proxy_xtrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_xtrans_redirect<T1, true>  { typedef Proxy_xtrans_vector<T1>  result; };$/;"	s
Proxy_xtrans_vector	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline Proxy_xtrans_vector(const Op<T1, op_htrans>& A)$/;"	f	struct:Proxy_xtrans_vector
Proxy_xtrans_vector	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline Proxy_xtrans_vector(const Op<T1, op_strans>& A)$/;"	f	struct:Proxy_xtrans_vector
Proxy_xtrans_vector	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  inline Proxy_xtrans_vector(const T1&) {}$/;"	f	struct:Proxy_xtrans_vector
Proxy_xtrans_vector	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_xtrans_vector$/;"	s
Proxy_xtrans_vector	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_xtrans_vector< Op<T1, op_htrans> >$/;"	s
Proxy_xtrans_vector	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_xtrans_vector< Op<T1, op_strans> >$/;"	s
Ptr	lib/armadillo-9.800.2/tests/catch.hpp	/^        Ptr( Ptr const& other ) : m_p( other.m_p ){$/;"	f	class:Catch::Ptr
Ptr	lib/armadillo-9.800.2/tests/catch.hpp	/^        Ptr( T* p ) : m_p( p ){$/;"	f	class:Catch::Ptr
Ptr	lib/armadillo-9.800.2/tests/catch.hpp	/^        Ptr() : m_p( CATCH_NULL ){}$/;"	f	class:Catch::Ptr
Ptr	lib/armadillo-9.800.2/tests/catch.hpp	/^    class Ptr {$/;"	c	namespace:Catch
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Col<eT>& Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Gen<T1, gen_type>& Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Mat<eT> Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Mat<eT>& Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Mat<elem_type>   Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Mat<elem_type>   Q;$/;"	m	struct:Proxy_xtrans_vector
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Mat<elem_type>  Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Mat<elem_type> Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Mat<elem_type> Q;$/;"	m	class:Proxy_diagvec_expr
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Mat<elem_type> Q;$/;"	m	class:Proxy_vectorise_col_mat
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Mat<out_eT> Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Op<T1, op_vectorise_col>& Q;$/;"	m	class:Proxy_vectorise_col_expr
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Row<eT>& Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const T1& Q;$/;"	m	struct:Proxy_fixed
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const diagview<eT>& Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const diagview<elem_type> Q;$/;"	m	class:Proxy_diagvec_mat
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const eGlue<T1, T2, eglue_type>& Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const eOp< Op<T1, op_htrans>, eop_scalar_times > Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const eOp<T1, eop_type>& Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const subview<eT>& Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const subview_col<eT>& Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const subview_elem1<eT,T1>& Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const subview_row<eT>& Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const subview_row_htrans<eT> Q;$/;"	m	struct:Proxy_subview_row_htrans_cx
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const subview_row_htrans<eT>& Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const subview_row_strans<eT> Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const subview_row_strans<eT> Q;$/;"	m	struct:Proxy_subview_row_htrans_non_cx
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const subview_row_strans<eT>& Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  const xtrans_mat<elem_type,false> Q;$/;"	m	struct:Proxy_xtrans_default
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  const xtrans_mat<elem_type,true> Q;$/;"	m	struct:Proxy_xtrans_default
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  const xvec_htrans<eT>  Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  const xvec_htrans<eT> Q;$/;"	m	class:Proxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_aligned const Cube<eT> Q;$/;"	m	class:ProxyCube
Q	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_aligned const Cube<eT>& Q;$/;"	m	class:ProxyCube
Q	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_aligned const Cube<elem_type> Q;$/;"	m	class:ProxyCube
Q	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_aligned const Cube<out_eT> Q;$/;"	m	class:ProxyCube
Q	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_aligned const GenCube<eT, gen_type>& Q;$/;"	m	class:ProxyCube
Q	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_aligned const eGlueCube<T1, T2, eglue_type>& Q;$/;"	m	class:ProxyCube
Q	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_aligned const eOpCube<T1, eop_type>& Q;$/;"	m	class:ProxyCube
Q	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_aligned const subview_cube<eT>& Q;$/;"	m	class:ProxyCube
Q	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_aligned const SpCol<eT>& Q;$/;"	m	class:SpProxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_aligned const SpMat<eT> Q;$/;"	m	class:SpProxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_aligned const SpMat<eT>& Q;$/;"	m	class:SpProxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_aligned const SpMat<out_eT> Q;$/;"	m	class:SpProxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_aligned const SpRow<eT>& Q;$/;"	m	class:SpProxy
Q	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_aligned const SpSubview<eT>& Q;$/;"	m	class:SpProxy
QUACA_H	include/Quaca.h	2;"	d
Q_is_generated	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool Q_is_generated = false;$/;"	m	class:SpProxy
Q_is_generated	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool Q_is_generated = true;$/;"	m	class:SpProxy
R	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const      Op<T1, op_htrans>                     R;$/;"	m	class:Proxy
R	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Mat<elem_type>&     R;$/;"	m	class:Proxy_diagvec_mat
R	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Proxy<T1>                 R;$/;"	m	class:Proxy_vectorise_col_expr
R	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const Proxy<T1>             R;$/;"	m	class:Proxy
R	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT R;         \/\/!< molar gas constant (in joules per mole kelvin)$/;"	m	class:Datum
R	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::R         = eT(8.3144598);$/;"	m	class:Datum
R	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT R()         { return eT(8.3144598); }$/;"	f	class:Phy
REF_DOUBLE	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  typedef enum {REF_NONE, REF_SINGLE, REF_DOUBLE, REF_EXTRA} refine_type;$/;"	e	enum:superlu_opts::__anon4
REF_EXTRA	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  typedef enum {REF_NONE, REF_SINGLE, REF_DOUBLE, REF_EXTRA} refine_type;$/;"	e	enum:superlu_opts::__anon4
REF_NONE	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  typedef enum {REF_NONE, REF_SINGLE, REF_DOUBLE, REF_EXTRA} refine_type;$/;"	e	enum:superlu_opts::__anon4
REF_SINGLE	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  typedef enum {REF_NONE, REF_SINGLE, REF_DOUBLE, REF_EXTRA} refine_type;$/;"	e	enum:superlu_opts::__anon4
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/app/Friction/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/app/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/src/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/test/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
R_inf	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT R_inf;     \/\/!< Rydberg constant (in reciprocal meters)$/;"	m	class:Datum
R_inf	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::R_inf     = eT(10973731.568508);$/;"	m	class:Datum
R_inf	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT R_inf()     { return eT(10973731.568508); }$/;"	f	class:Phy
R_k	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT R_k;       \/\/!< von Klitzing constant (in ohms)$/;"	m	class:Datum
R_k	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::R_k       = eT(25812.8074555);$/;"	m	class:Datum
R_k	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT R_k()       { return eT(25812.8074555); }$/;"	f	class:Phy
RefineInitialized	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    yes_no_t      RefineInitialized;$/;"	m	struct:arma::superlu::__anon6
RefineSteps	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int     RefineSteps;$/;"	m	struct:arma::superlu::__anon5
RegistrarForTagAliases	include/catch.hpp	/^    struct RegistrarForTagAliases {$/;"	s	namespace:Catch
ReplaceTinyPivot	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    yes_no_t      ReplaceTinyPivot;$/;"	m	struct:arma::superlu::__anon6
ResultBuilder	lib/armadillo-9.800.2/tests/catch.hpp	/^    class ResultBuilder : public DecomposedExpression {$/;"	c	namespace:Catch
ResultDisposition	include/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	s	namespace:Catch
ResultDisposition	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	s	namespace:Catch
ResultWas	include/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	s	namespace:Catch
ResultWas	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	s	namespace:Catch
ReusableStringStream	include/catch.hpp	/^    class ReusableStringStream {$/;"	c	namespace:Catch
Row	lib/armadillo-9.800.2/docs.html	/^<a name="Row"><\/a>$/;"	a
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^class Row : public Mat<eT>$/;"	c
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^  Row<eT>::Row(Row<eT>&& X)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^  Row<eT>::Row(const std::initializer_list<eT>& list)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row()$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const Base<eT,T1>& X)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const BaseCube<eT,T1>& X)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const Row<eT>& X)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const SizeMat& s)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const SizeMat& s, const fill::fill_class<fill_type>& f)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const SpBase<eT,T1>& X)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const arma_fixed_indicator&, const uword in_n_elem, const eT* in_mem)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const char* text)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const eT* aux_mem, const uword aux_length)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const std::string& text)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const std::vector<eT>& x)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const subview_cube<eT>& X)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const uword in_n_elem)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const uword in_n_elem, const fill::fill_class<fill_type>& f)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(const uword in_n_rows, const uword in_n_cols, const fill::fill_class<fill_type>& f)$/;"	f	class:Row
Row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::Row(eT* aux_mem, const uword aux_length, const bool copy_aux_mem, const bool strict)$/;"	f	class:Row
RowPerm	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    rowperm_t     RowPerm;$/;"	m	struct:arma::superlu::__anon6
Row_fixed_type	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  typedef fixed<fixed_n_elem>               Row_fixed_type;$/;"	t	class:Row::fixed
SCENARIO	lib/armadillo-9.800.2/tests/catch.hpp	11577;"	d
SCENARIO_METHOD	lib/armadillo-9.800.2/tests/catch.hpp	11578;"	d
SELECT_EIGENVALUE	lib/armadillo-9.800.2/include/armadillo_bits/newarp_EigsSelect.hpp	/^  enum SELECT_EIGENVALUE$/;"	g	struct:newarp::EigsSelect
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/app/Friction/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/app/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/test/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	181;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	188;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	203;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	189;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	204;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
SMALLEST_ALGE	lib/armadillo-9.800.2/include/armadillo_bits/newarp_EigsSelect.hpp	/^    SMALLEST_ALGE,     \/\/!< Select eigenvalues with smallest algebraic value. Only for symmetric eigen solvers.$/;"	e	enum:newarp::EigsSelect::SELECT_EIGENVALUE
SMALLEST_IMAG	lib/armadillo-9.800.2/include/armadillo_bits/newarp_EigsSelect.hpp	/^    SMALLEST_IMAG,     \/\/!< Select eigenvalues with smallest imaginary part (in magnitude). Only for general eigen solvers.$/;"	e	enum:newarp::EigsSelect::SELECT_EIGENVALUE
SMALLEST_MAGN	lib/armadillo-9.800.2/include/armadillo_bits/newarp_EigsSelect.hpp	/^    SMALLEST_MAGN,     \/\/!< Select eigenvalues with smallest magnitude. Applies to both symmetric and general eigen solvers.$/;"	e	enum:newarp::EigsSelect::SELECT_EIGENVALUE
SMALLEST_REAL	lib/armadillo-9.800.2/include/armadillo_bits/newarp_EigsSelect.hpp	/^    SMALLEST_REAL,     \/\/!< Select eigenvalues with smallest real part. Only for general eigen solvers.$/;"	e	enum:newarp::EigsSelect::SELECT_EIGENVALUE
STITCH_CLARA_CLOSE_NAMESPACE	lib/armadillo-9.800.2/tests/catch.hpp	4053;"	d
STITCH_CLARA_CLOSE_NAMESPACE	lib/armadillo-9.800.2/tests/catch.hpp	5060;"	d
STITCH_CLARA_OPEN_NAMESPACE	lib/armadillo-9.800.2/tests/catch.hpp	4042;"	d
STITCH_CLARA_OPEN_NAMESPACE	lib/armadillo-9.800.2/tests/catch.hpp	4052;"	d
STITCH_CLARA_OPEN_NAMESPACE	lib/armadillo-9.800.2/tests/catch.hpp	5059;"	d
STITCH_CLARA_OPEN_NAMESPACE	lib/armadillo-9.800.2/tests/catch.hpp	5063;"	d
STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE	lib/armadillo-9.800.2/tests/catch.hpp	4058;"	d
STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE	lib/armadillo-9.800.2/tests/catch.hpp	4209;"	d
STRINGIFY	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	318;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	317;"	d	file:
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/app/Friction/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/app/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/test/Makefile	/^SUFFIXES =$/;"	m
SafeBool	lib/armadillo-9.800.2/tests/catch.hpp	/^    class SafeBool {$/;"	c	namespace:Catch
SharedImpl	lib/armadillo-9.800.2/tests/catch.hpp	/^        SharedImpl() : m_rc( 0 ){}$/;"	f	struct:Catch::SharedImpl
SharedImpl	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct SharedImpl : T {$/;"	s	namespace:Catch
SizeCube	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_bones.hpp	/^class SizeCube$/;"	c
SizeCube	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_meat.hpp	/^SizeCube::SizeCube(const uword in_n_rows, const uword in_n_cols, const uword in_n_slices)$/;"	f	class:SizeCube
SizeMat	lib/armadillo-9.800.2/include/armadillo_bits/SizeMat_bones.hpp	/^class SizeMat$/;"	c
SizeMat	lib/armadillo-9.800.2/include/armadillo_bits/SizeMat_meat.hpp	/^SizeMat::SizeMat(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:SizeMat
SolveInitialized	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    yes_no_t      SolveInitialized;$/;"	m	struct:arma::superlu::__anon6
SortEigenvalue	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^  SortEigenvalue(const eT* start, const uword size)$/;"	f	class:newarp::SortEigenvalue
SortEigenvalue	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^class SortEigenvalue$/;"	c	namespace:newarp
SortingTarget	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^struct SortingTarget$/;"	s	namespace:newarp
SortingTarget	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^struct SortingTarget<eT, EigsSelect::BOTH_ENDS>$/;"	s	namespace:newarp
SortingTarget	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^struct SortingTarget<eT, EigsSelect::LARGEST_ALGE>$/;"	s	namespace:newarp
SortingTarget	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^struct SortingTarget<eT, EigsSelect::LARGEST_MAGN>$/;"	s	namespace:newarp
SortingTarget	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^struct SortingTarget<eT, EigsSelect::SMALLEST_ALGE>$/;"	s	namespace:newarp
SortingTarget	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^struct SortingTarget<eT, EigsSelect::SMALLEST_MAGN>$/;"	s	namespace:newarp
SortingTarget	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^struct SortingTarget<std::complex<T>, EigsSelect::LARGEST_IMAG>$/;"	s	namespace:newarp
SortingTarget	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^struct SortingTarget<std::complex<T>, EigsSelect::LARGEST_REAL>$/;"	s	namespace:newarp
SortingTarget	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^struct SortingTarget<std::complex<T>, EigsSelect::SMALLEST_IMAG>$/;"	s	namespace:newarp
SortingTarget	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^struct SortingTarget<std::complex<T>, EigsSelect::SMALLEST_REAL>$/;"	s	namespace:newarp
SourceLineInfo	include/catch.hpp	/^    struct SourceLineInfo {$/;"	s	namespace:Catch
SourceLineInfo	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct SourceLineInfo {$/;"	s	namespace:Catch
SpBase	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_bones.hpp	/^struct SpBase$/;"	s
SpBase_eval	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_bones.hpp	/^struct SpBase_eval {};$/;"	s
SpBase_eval	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_bones.hpp	/^struct SpBase_eval<elem_type, derived, false> { typedef SpBase_eval_expr<elem_type, derived>  result; };$/;"	s
SpBase_eval	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_bones.hpp	/^struct SpBase_eval<elem_type, derived, true>  { typedef SpBase_eval_SpMat<elem_type, derived> result; };$/;"	s
SpBase_eval_SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_bones.hpp	/^struct SpBase_eval_SpMat$/;"	s
SpBase_eval_expr	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_bones.hpp	/^struct SpBase_eval_expr$/;"	s
SpCol	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_bones.hpp	/^class SpCol : public SpMat<eT>$/;"	c
SpCol	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::SpCol$/;"	f	class:SpCol
SpCol	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::SpCol()$/;"	f	class:SpCol
SpCol	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::SpCol(const Base<eT,T1>& X)$/;"	f	class:SpCol
SpCol	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::SpCol(const SizeMat& s)$/;"	f	class:SpCol
SpCol	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::SpCol(const SpBase<eT,T1>& X)$/;"	f	class:SpCol
SpCol	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::SpCol(const char* text)$/;"	f	class:SpCol
SpCol	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::SpCol(const std::string& text)$/;"	f	class:SpCol
SpCol	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::SpCol(const uword in_n_elem)$/;"	f	class:SpCol
SpCol	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::SpCol(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:SpCol
SpGlue	lib/armadillo-9.800.2/include/armadillo_bits/SpGlue_bones.hpp	/^class SpGlue : public SpBase<typename T1::elem_type, SpGlue<T1, T2, spglue_type> >$/;"	c
SpGlue	lib/armadillo-9.800.2/include/armadillo_bits/SpGlue_meat.hpp	/^SpGlue<T1,T2,spglue_type>::SpGlue(const T1& in_A, const T2& in_B)$/;"	f	class:SpGlue
SpGlue	lib/armadillo-9.800.2/include/armadillo_bits/SpGlue_meat.hpp	/^SpGlue<T1,T2,spglue_type>::SpGlue(const T1& in_A, const T2& in_B, const typename T1::elem_type in_aux)$/;"	f	class:SpGlue
SpMat	lib/armadillo-9.800.2/docs.html	/^<a name="SpMat"><\/a><b>SpMat&lt;<\/b><i>type<\/i><b>&gt;<\/b>$/;"	a
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^class SpMat : public SpBase< eT, SpMat<eT> >$/;"	c
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^  SpMat<eT>::SpMat(SpMat<eT>&& in_mat)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat()$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const Base<eT, T1>& x)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const Base<uword,T1>& locations_expr, const Base<eT,T2>& vals_expr, const bool sort_locations)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const Base<uword,T1>& locations_expr, const Base<eT,T2>& vals_expr, const uword in_n_rows, const uword in_n_cols, const bool sort_locations, const bool check_for_zeros)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const MapMat<eT>& x)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const Op<T1, op_diagmat>& expr)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const SizeMat& s)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const SpGlue<T1, T2, spglue_type>& X)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const SpMat<eT>& x)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const SpOp<T1, spop_type>& X)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const SpSubview<eT>& X)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const SpToDOp<T1, op_type>& expr)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const arma_layout_indicator&, const SpMat<eT2>& x)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const arma_reserve_indicator&, const uword in_rows, const uword in_cols, const uword new_n_nonzero)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const arma_vec_indicator&, const uword in_n_rows, const uword in_n_cols, const uword in_vec_state)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const arma_vec_indicator&, const uword in_vec_state)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const bool add_values, const Base<uword,T1>& locations_expr, const Base<eT,T2>& vals_expr, const uword in_n_rows, const uword in_n_cols, const bool sort_locations, const bool check_for_zeros)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const char* text)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const mtSpGlue<eT, T1, T2, spglue_type>& X)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const mtSpOp<eT, T1, spop_type>& X)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const spdiagview<eT>& X)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const std::string& text)$/;"	f	class:SpMat
SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::SpMat(const uword in_rows, const uword in_cols)$/;"	f	class:SpMat
SpMat_MapMat_val	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^class SpMat_MapMat_val$/;"	c
SpMat_MapMat_val	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::SpMat_MapMat_val(SpMat<eT>& in_s_parent, MapMat<eT>& in_m_parent, const uword in_row, const uword in_col)$/;"	f	class:SpMat_MapMat_val
SpMat_aux	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^class SpMat_aux$/;"	c
SpOp	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_bones.hpp	/^class SpOp : public SpBase<typename T1::elem_type, SpOp<T1, op_type> >$/;"	c
SpOp	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_meat.hpp	/^SpOp<T1, op_type>::SpOp(const T1& in_m)$/;"	f	class:SpOp
SpOp	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_meat.hpp	/^SpOp<T1, op_type>::SpOp(const T1& in_m, const typename T1::elem_type in_aux)$/;"	f	class:SpOp
SpOp	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_meat.hpp	/^SpOp<T1, op_type>::SpOp(const T1& in_m, const uword in_aux_uword_a, const uword in_aux_uword_b)$/;"	f	class:SpOp
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  inline explicit SpProxy(const SpCol<eT>& A)$/;"	f	class:SpProxy
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  inline explicit SpProxy(const SpGlue<T1, T2, spglue_type>& A)$/;"	f	class:SpProxy
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  inline explicit SpProxy(const SpMat<eT>& A)$/;"	f	class:SpProxy
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  inline explicit SpProxy(const SpOp<T1, spop_type>& A)$/;"	f	class:SpProxy
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  inline explicit SpProxy(const SpRow<eT>& A)$/;"	f	class:SpProxy
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  inline explicit SpProxy(const SpSubview<eT>& A)$/;"	f	class:SpProxy
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  inline explicit SpProxy(const mtSpGlue<out_eT, T1, T2, spglue_type>& A)$/;"	f	class:SpProxy
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  inline explicit SpProxy(const mtSpOp<out_eT, T1, spop_type>& A)$/;"	f	class:SpProxy
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  inline explicit SpProxy(const spdiagview<eT>& A)$/;"	f	class:SpProxy
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^class SpProxy< SpCol<eT> >$/;"	c
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^class SpProxy< SpGlue<T1, T2, spglue_type> >$/;"	c
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^class SpProxy< SpMat<eT> >$/;"	c
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^class SpProxy< SpOp<T1, spop_type> >$/;"	c
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^class SpProxy< SpRow<eT> >$/;"	c
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^class SpProxy< SpSubview<eT> >$/;"	c
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^class SpProxy< mtSpGlue<out_eT, T1, T2, spglue_type> >$/;"	c
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^class SpProxy< mtSpOp<out_eT, T1, spop_type> >$/;"	c
SpProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^class SpProxy< spdiagview<eT> >$/;"	c
SpRow	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_bones.hpp	/^class SpRow : public SpMat<eT>$/;"	c
SpRow	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::SpRow$/;"	f	class:SpRow
SpRow	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::SpRow()$/;"	f	class:SpRow
SpRow	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::SpRow(const Base<eT,T1>& X)$/;"	f	class:SpRow
SpRow	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::SpRow(const SizeMat& s)$/;"	f	class:SpRow
SpRow	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::SpRow(const SpBase<eT,T1>& X)$/;"	f	class:SpRow
SpRow	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::SpRow(const char* text)$/;"	f	class:SpRow
SpRow	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::SpRow(const std::string& text)$/;"	f	class:SpRow
SpRow	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::SpRow(const uword in_n_elem)$/;"	f	class:SpRow
SpRow	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::SpRow(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:SpRow
SpSubview	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^class SpSubview : public SpBase<eT, SpSubview<eT> >$/;"	c
SpSubview	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::SpSubview(SpMat<eT>& in_m, const uword in_row1, const uword in_col1, const uword in_n_rows, const uword in_n_cols)$/;"	f	class:SpSubview
SpSubview	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::SpSubview(const SpMat<eT>& in_m, const uword in_row1, const uword in_col1, const uword in_n_rows, const uword in_n_cols)$/;"	f	class:SpSubview
SpSubview_MapMat_val	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^class SpSubview_MapMat_val : public SpMat_MapMat_val<eT>$/;"	c
SpSubview_MapMat_val	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpSubview_MapMat_val<eT>::SpSubview_MapMat_val(SpSubview<eT>& in_sv_parent, MapMat<eT>& in_m_parent, const uword in_row, const uword in_col)$/;"	f	class:SpSubview_MapMat_val
SpToDOp	lib/armadillo-9.800.2/include/armadillo_bits/SpToDOp_bones.hpp	/^class SpToDOp : public Base<typename T1::elem_type, SpToDOp<T1, op_type> >$/;"	c
SpToDOp	lib/armadillo-9.800.2/include/armadillo_bits/SpToDOp_meat.hpp	/^SpToDOp<T1, op_type>::SpToDOp(const T1& in_m)$/;"	f	class:SpToDOp
SpToDOp	lib/armadillo-9.800.2/include/armadillo_bits/SpToDOp_meat.hpp	/^SpToDOp<T1, op_type>::SpToDOp(const T1& in_m, const typename T1::elem_type in_aux)$/;"	f	class:SpToDOp
SpValProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_bones.hpp	/^class SpValProxy$/;"	c
SpValProxy	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::SpValProxy(uword in_row, uword in_col, T1& in_parent, eT* in_val_ptr)$/;"	f	class:SpValProxy
SparseGenMatProd	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SparseGenMatProd_bones.hpp	/^class SparseGenMatProd$/;"	c	namespace:newarp
SparseGenMatProd	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SparseGenMatProd_meat.hpp	/^SparseGenMatProd<eT>::SparseGenMatProd(const SpMat<eT>& mat_obj)$/;"	f	class:newarp::SparseGenMatProd
StreamEndStop	include/catch.hpp	/^    struct StreamEndStop {$/;"	s	namespace:Catch
StreamEndStop	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct StreamEndStop {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<NSObject*> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<NSString*> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<R C::*> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<T*> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<T^> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<bool> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<char *> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<char const *> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<char> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<char[SZ]> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<double> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<float> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<int> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<long long> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<long> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<signed char> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<signed char[SZ]> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<std::byte> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<std::nullptr_t> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<std::optional<T> > {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<std::pair<T1, T2> > {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<std::string> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<std::string_view> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<std::wstring> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<std::wstring_view> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<unsigned char> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<unsigned char[SZ]> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<unsigned int> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<unsigned long long> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<unsigned long> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<wchar_t *> {$/;"	s	namespace:Catch
StringMaker	include/catch.hpp	/^    struct StringMaker<wchar_t const *> {$/;"	s	namespace:Catch
StringMaker	lib/armadillo-9.800.2/tests/catch.hpp	/^struct StringMaker :$/;"	s	namespace:Catch
StringMaker	lib/armadillo-9.800.2/tests/catch.hpp	/^struct StringMaker<R C::*> {$/;"	s	namespace:Catch
StringMaker	lib/armadillo-9.800.2/tests/catch.hpp	/^struct StringMaker<T*> {$/;"	s	namespace:Catch
StringMakerBase	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct StringMakerBase {$/;"	s	namespace:Catch::Detail
StringMakerBase	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct StringMakerBase<true> {$/;"	s	namespace:Catch::Detail
StringRef	include/catch.hpp	/^        :   StringRef( s_empty, 0 )$/;"	f	class:Catch::StringRef
StringRef	include/catch.hpp	/^    class StringRef {$/;"	c	namespace:Catch
SuperLUStat_t	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    } SuperLUStat_t;$/;"	t	namespace:arma::superlu	typeref:struct:arma::superlu::__anon5
SuppressFail	include/catch.hpp	/^        SuppressFail = 0x08         \/\/ Failures are reported but do not fail the test$/;"	e	enum:Catch::ResultDisposition::Flags
SuppressFail	lib/armadillo-9.800.2/tests/catch.hpp	/^        SuppressFail = 0x08         \/\/ Failures are reported but do not fail the test$/;"	e	enum:Catch::ResultDisposition::Flags
SymEigsSolver	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^class SymEigsSolver$/;"	c	namespace:newarp
SymEigsSolver	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_meat.hpp	/^SymEigsSolver<eT, SelectionRule, OpType>::SymEigsSolver(const OpType& op_, uword nev_, uword ncv_)$/;"	f	class:newarp::SymEigsSolver
SymPattern	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    yes_no_t      SymPattern;$/;"	m	struct:arma::superlu::__anon6
SymmetricMode	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    yes_no_t      SymmetricMode;$/;"	m	struct:arma::superlu::__anon6
T	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  typedef typename get_pod_type<cx_type>::result T;$/;"	t	class:fft_engine
T	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_bones.hpp	/^  typedef typename get_pod_type<eT>::result T;$/;"	t	class:running_stat
T	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  typedef typename get_pod_type<eT>::result T;$/;"	t	class:running_stat_vec
T1_result	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  typedef T1              T1_result;$/;"	t	struct:force_different_type
T1_result	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  typedef T1 T1_result;$/;"	t	struct:force_different_type
T1_result	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  typedef T               T1_result;$/;"	t	struct:upgrade_val
T1_result	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  typedef T T1_result;$/;"	t	struct:upgrade_val
T1_result	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  typedef double               T1_result;$/;"	t	struct:upgrade_val
T1_result	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  typedef double              T1_result;$/;"	t	struct:upgrade_val
T1_result	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  typedef std::complex<T> T1_result;$/;"	t	struct:upgrade_val
T1_result	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  typedef std::complex<double> T1_result;$/;"	t	struct:upgrade_val
T1_result	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  typedef typename promote_type<T1,T2>::result T1_result;$/;"	t	struct:upgrade_val
T2_result	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  typedef T2 T2_result;$/;"	t	struct:force_different_type
T2_result	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  typedef arma_junk_class T2_result;$/;"	t	struct:force_different_type
T2_result	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  typedef T               T2_result;$/;"	t	struct:upgrade_val
T2_result	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  typedef T T2_result;$/;"	t	struct:upgrade_val
T2_result	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  typedef double               T2_result;$/;"	t	struct:upgrade_val
T2_result	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  typedef std::complex<T> T2_result;$/;"	t	struct:upgrade_val
T2_result	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  typedef std::complex<double> T2_result;$/;"	t	struct:upgrade_val
T2_result	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  typedef std::complex<float> T2_result;$/;"	t	struct:upgrade_val
T2_result	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  typedef typename promote_type<T1,T2>::result T2_result;$/;"	t	struct:upgrade_val
TBC_TEXT_FORMAT_CONSOLE_WIDTH	lib/armadillo-9.800.2/tests/catch.hpp	5305;"	d
TBC_TEXT_FORMAT_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	4065;"	d
TEST_OPERATOR	lib/armadillo-9.800.2/tests/spmat.cpp	1039;"	d	file:
TEST_OPERATOR	lib/armadillo-9.800.2/tests/spmat.cpp	1040;"	d	file:
THEN	lib/armadillo-9.800.2/tests/catch.hpp	11586;"	d
TWOBLUECUBES_CATCH_APPROX_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	2711;"	d
TWOBLUECUBES_CATCH_ASSERTIONRESULT_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	8082;"	d
TWOBLUECUBES_CATCH_ASSERTIONRESULT_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	908;"	d
TWOBLUECUBES_CATCH_CAPTURE_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	850;"	d
TWOBLUECUBES_CATCH_CLARA_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	4032;"	d
TWOBLUECUBES_CATCH_COMMANDLINE_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3478;"	d
TWOBLUECUBES_CATCH_COMMON_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	8621;"	d
TWOBLUECUBES_CATCH_COMMON_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	63;"	d
TWOBLUECUBES_CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	66;"	d
TWOBLUECUBES_CATCH_CONFIG_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3481;"	d
TWOBLUECUBES_CATCH_CONSOLE_COLOUR_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	5474;"	d
TWOBLUECUBES_CATCH_CONSOLE_COLOUR_IMPL_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	7813;"	d
TWOBLUECUBES_CATCH_CONTEXT_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	525;"	d
TWOBLUECUBES_CATCH_CONTEXT_IMPL_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	7618;"	d
TWOBLUECUBES_CATCH_DEBUGGER_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	8774;"	d
TWOBLUECUBES_CATCH_DEBUGGER_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	2020;"	d
TWOBLUECUBES_CATCH_DEFAULT_MAIN_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	11378;"	d
TWOBLUECUBES_CATCH_ERRNO_GUARD_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	7816;"	d
TWOBLUECUBES_CATCH_EVALUATE_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	1289;"	d
TWOBLUECUBES_CATCH_EXCEPTION_TRANSLATOR_REGISTRY_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	7440;"	d
TWOBLUECUBES_CATCH_EXPRESSION_LHS_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	1286;"	d
TWOBLUECUBES_CATCH_FATAL_CONDITION_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	6321;"	d
TWOBLUECUBES_CATCH_GENERATORS_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	2425;"	d
TWOBLUECUBES_CATCH_GENERATORS_IMPL_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	8008;"	d
TWOBLUECUBES_CATCH_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	14;"	d
TWOBLUECUBES_CATCH_IMPL_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3464;"	d
TWOBLUECUBES_CATCH_INTERFACES_CAPTURE_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	1977;"	d
TWOBLUECUBES_CATCH_INTERFACES_CONFIG_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3755;"	d
TWOBLUECUBES_CATCH_INTERFACES_EXCEPTION_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	2604;"	d
TWOBLUECUBES_CATCH_INTERFACES_GENERATORS_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	528;"	d
TWOBLUECUBES_CATCH_INTERFACES_REGISTRY_HUB_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	2610;"	d
TWOBLUECUBES_CATCH_INTERFACES_REPORTER_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	5531;"	d
TWOBLUECUBES_CATCH_INTERFACES_RUNNER_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	2086;"	d
TWOBLUECUBES_CATCH_INTERFACES_TAG_ALIAS_REGISTRY_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3047;"	d
TWOBLUECUBES_CATCH_INTERFACES_TESTCASE_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	673;"	d
TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	8441;"	d
TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	8444;"	d
TWOBLUECUBES_CATCH_LIST_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	5300;"	d
TWOBLUECUBES_CATCH_MATCHERS_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	1028;"	d
TWOBLUECUBES_CATCH_MATCHERS_STRING_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	2900;"	d
TWOBLUECUBES_CATCH_MATCHERS_VECTOR_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	2956;"	d
TWOBLUECUBES_CATCH_MESSAGE_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	8404;"	d
TWOBLUECUBES_CATCH_MESSAGE_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	1921;"	d
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	7597;"	d
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	60;"	d
TWOBLUECUBES_CATCH_OBJC_ARC_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	1437;"	d
TWOBLUECUBES_CATCH_OBJC_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3244;"	d
TWOBLUECUBES_CATCH_OPTION_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3071;"	d
TWOBLUECUBES_CATCH_PLATFORM_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	2023;"	d
TWOBLUECUBES_CATCH_PTR_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	552;"	d
TWOBLUECUBES_CATCH_REENABLE_WARNINGS_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	11593;"	d
TWOBLUECUBES_CATCH_REGISTRY_HUB_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	7205;"	d
TWOBLUECUBES_CATCH_REPORTER_BASES_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	9532;"	d
TWOBLUECUBES_CATCH_REPORTER_COMPACT_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	11019;"	d
TWOBLUECUBES_CATCH_REPORTER_CONSOLE_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	10586;"	d
TWOBLUECUBES_CATCH_REPORTER_JUNIT_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	10342;"	d
TWOBLUECUBES_CATCH_REPORTER_MULTI_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	9393;"	d
TWOBLUECUBES_CATCH_REPORTER_REGISTRARS_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	9806;"	d
TWOBLUECUBES_CATCH_REPORTER_REGISTRY_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	7400;"	d
TWOBLUECUBES_CATCH_REPORTER_XML_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	9529;"	d
TWOBLUECUBES_CATCH_RESULT_BUILDER_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	9093;"	d
TWOBLUECUBES_CATCH_RESULT_BUILDER_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	853;"	d
TWOBLUECUBES_CATCH_RESULT_TYPE_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	856;"	d
TWOBLUECUBES_CATCH_RUNNER_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3475;"	d
TWOBLUECUBES_CATCH_RUNNER_IMPL_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	5960;"	d
TWOBLUECUBES_CATCH_SECTION_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	8729;"	d
TWOBLUECUBES_CATCH_SECTION_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	2261;"	d
TWOBLUECUBES_CATCH_SECTION_INFO_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	2264;"	d
TWOBLUECUBES_CATCH_STREAMBUF_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3824;"	d
TWOBLUECUBES_CATCH_STREAM_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	7621;"	d
TWOBLUECUBES_CATCH_STREAM_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3821;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3050;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	9249;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	7502;"	d
TWOBLUECUBES_CATCH_TEST_CASE_INFO_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	8180;"	d
TWOBLUECUBES_CATCH_TEST_CASE_INFO_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3160;"	d
TWOBLUECUBES_CATCH_TEST_CASE_REGISTRY_IMPL_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	7208;"	d
TWOBLUECUBES_CATCH_TEST_CASE_TRACKER_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	5963;"	d
TWOBLUECUBES_CATCH_TEST_REGISTRY_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	670;"	d
TWOBLUECUBES_CATCH_TEST_SPEC_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3492;"	d
TWOBLUECUBES_CATCH_TEST_SPEC_PARSER_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3484;"	d
TWOBLUECUBES_CATCH_TEXT_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	5303;"	d
TWOBLUECUBES_CATCH_TIMER_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	2364;"	d
TWOBLUECUBES_CATCH_TOSTRING_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	8891;"	d
TWOBLUECUBES_CATCH_TOSTRING_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	1427;"	d
TWOBLUECUBES_CATCH_TOTALS_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	2267;"	d
TWOBLUECUBES_CATCH_VERSION_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	8367;"	d
TWOBLUECUBES_CATCH_VERSION_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	6922;"	d
TWOBLUECUBES_CATCH_WILDCARD_PATTERN_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	3500;"	d
TWOBLUECUBES_CATCH_WINDOWS_H_PROXY_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	6337;"	d
TWOBLUECUBES_CATCH_XMLWRITER_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	9897;"	d
TWOBLUECUBES_CLARA_COMPILERS_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	4214;"	d
TWOBLUECUBES_CLARA_H_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	4051;"	d
TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED	include/catch.hpp	12;"	d
TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	12;"	d
TWOBLUECUBES_TEXT_FORMAT_H_ALREADY_INCLUDED	lib/armadillo-9.800.2/tests/catch.hpp	5313;"	d
TargetType	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^  typedef typename get_pod_type<eT>::result TargetType;  \/\/ type of the sorting target, will be a floating number type, eg. double$/;"	t	class:newarp::SortEigenvalue
TestFailureException	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct TestFailureException{};$/;"	s	namespace:Catch
TestFunction	lib/armadillo-9.800.2/tests/catch.hpp	/^typedef void(*TestFunction)();$/;"	t	namespace:Catch
TestInvokerAsMethod	include/catch.hpp	/^class TestInvokerAsMethod : public ITestInvoker {$/;"	c	namespace:Catch
ThrewException	include/catch.hpp	/^        ThrewException = Exception | 1,$/;"	e	enum:Catch::ResultWas::OfType
ThrewException	lib/armadillo-9.800.2/tests/catch.hpp	/^        ThrewException = Exception | 1,$/;"	e	enum:Catch::ResultWas::OfType
TinyPivots	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int     TinyPivots;$/;"	m	struct:arma::superlu::__anon5
Trans	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    trans_t       Trans;$/;"	m	struct:arma::superlu::__anon6
TridiagEigen	lib/armadillo-9.800.2/include/armadillo_bits/newarp_TridiagEigen_bones.hpp	/^class TridiagEigen$/;"	c	namespace:newarp
TridiagEigen	lib/armadillo-9.800.2/include/armadillo_bits/newarp_TridiagEigen_meat.hpp	/^TridiagEigen<eT>::TridiagEigen()$/;"	f	class:newarp::TridiagEigen
TridiagEigen	lib/armadillo-9.800.2/include/armadillo_bits/newarp_TridiagEigen_meat.hpp	/^TridiagEigen<eT>::TridiagEigen(const Mat<eT>& mat_obj)$/;"	f	class:newarp::TridiagEigen
TridiagQR	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_bones.hpp	/^class TridiagQR : public UpperHessenbergQR<eT>$/;"	c	namespace:newarp
TridiagQR	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_meat.hpp	/^TridiagQR<eT>::TridiagQR()$/;"	f	class:newarp::TridiagQR
TridiagQR	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_meat.hpp	/^TridiagQR<eT>::TridiagQR(const Mat<eT>& mat_obj)$/;"	f	class:newarp::TridiagQR
TrueType	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct TrueType { char sizer[1]; };$/;"	s	namespace:Catch::Detail
TupleDetail	lib/armadillo-9.800.2/tests/catch.hpp	/^namespace TupleDetail {$/;"	n	namespace:Catch
U	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const quasi_unwrap<T1> U; \/\/ avoid copy if T1 is a Row, Col or subview_col$/;"	m	struct:Proxy_xtrans_vector
U	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const unwrap<T1>     U;$/;"	m	class:Proxy_vectorise_col_mat
U	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const unwrap_cube<T1> U;$/;"	m	class:Proxy
U	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_aligned const unwrap_spmat<T1> U;$/;"	m	class:Proxy
U	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  const unwrap<T1>                  U;$/;"	m	struct:Proxy_xtrans_default
U	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  const unwrap<T1>                 U;$/;"	m	struct:Proxy_xtrans_default
U	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const unwrap<T1> U;$/;"	m	struct:quasi_unwrap
U	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const unwrap_cube<T1> U;$/;"	m	struct:quasi_unwrap
U	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const unwrap_spmat<T1> U;$/;"	m	struct:quasi_unwrap
Unknown	include/catch.hpp	/^        Unknown = -1,$/;"	e	enum:Catch::ResultWas::OfType
Unknown	lib/armadillo-9.800.2/tests/catch.hpp	/^        Unknown = -1,$/;"	e	enum:Catch::ResultWas::OfType
UpperHessenbergEigen	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergEigen_bones.hpp	/^class UpperHessenbergEigen$/;"	c	namespace:newarp
UpperHessenbergEigen	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergEigen_meat.hpp	/^UpperHessenbergEigen<eT>::UpperHessenbergEigen()$/;"	f	class:newarp::UpperHessenbergEigen
UpperHessenbergEigen	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergEigen_meat.hpp	/^UpperHessenbergEigen<eT>::UpperHessenbergEigen(const Mat<eT>& mat_obj)$/;"	f	class:newarp::UpperHessenbergEigen
UpperHessenbergQR	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_bones.hpp	/^class UpperHessenbergQR$/;"	c	namespace:newarp
UpperHessenbergQR	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_meat.hpp	/^UpperHessenbergQR<eT>::UpperHessenbergQR()$/;"	f	class:newarp::UpperHessenbergQR
UpperHessenbergQR	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_meat.hpp	/^UpperHessenbergQR<eT>::UpperHessenbergQR(const Mat<eT>& mat_obj)$/;"	f	class:newarp::UpperHessenbergQR
WHEN	lib/armadillo-9.800.2/tests/catch.hpp	11584;"	d
WIN32_LEAN_AND_MEAN	include/catch.hpp	7855;"	d
WIN32_LEAN_AND_MEAN	include/catch.hpp	7868;"	d
WIN32_LEAN_AND_MEAN	lib/armadillo-9.800.2/tests/catch.hpp	6343;"	d
WIN32_LEAN_AND_MEAN	lib/armadillo-9.800.2/tests/catch.hpp	6356;"	d
Warning	include/catch.hpp	/^        Warning = 2,$/;"	e	enum:Catch::ResultWas::OfType
Warning	lib/armadillo-9.800.2/tests/catch.hpp	/^        Warning = 2,$/;"	e	enum:Catch::ResultWas::OfType
X	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  T1&           X;$/;"	m	class:field_injector
X	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  T1&           X;$/;"	m	class:mat_injector
X	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_bones.hpp	/^  arma_aligned const   Mat<eT>& X;$/;"	m	class:xtrans_mat
Y	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_bones.hpp	/^  arma_aligned mutable Mat<eT>  Y;$/;"	m	class:xtrans_mat
Yes	include/catch.hpp	/^        Yes,$/;"	e	enum:Catch::CaseSensitive::Choice
Yes	lib/armadillo-9.800.2/tests/catch.hpp	/^        Yes,$/;"	e	enum:Catch::CaseSensitive::Choice
Z_0	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT Z_0;       \/\/!< characteristic impedance of vacuum (in ohms)$/;"	m	class:Datum
Z_0	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::Z_0       = eT(376.730313461771);$/;"	m	class:Datum
Z_0	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT Z_0()       { return eT(376.730313461771); }$/;"	f	class:Phy
_BSD_SOURCE	include/catch.hpp	215;"	d
_BSD_SOURCE	lib/armadillo-9.800.2/tests/catch.hpp	159;"	d
__has_attribute	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	283;"	d
a	lib/armadillo-9.800.2/include/armadillo_bits/span.hpp	/^  uword a;$/;"	m	class:span
a	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_bones.hpp	/^  arma_aligned const Base<uword,T1>& a;$/;"	m	class:subview_elem1
a_0	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT a_0;       \/\/!< Bohr radius (in meters)$/;"	m	class:Datum
a_0	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::a_0       = eT(0.52917721067e-10);$/;"	m	class:Datum
a_0	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT a_0()       { return eT(0.52917721067e-10); }$/;"	f	class:Phy
a_double	lib/armadillo-9.800.2/include/armadillo_bits/distr_param.hpp	/^    double a_double;$/;"	m	union:distr_param::__anon1
a_int	lib/armadillo-9.800.2/include/armadillo_bits/distr_param.hpp	/^    int    a_int;$/;"	m	union:distr_param::__anon1
abs	lib/armadillo-9.800.2/docs.html	/^<a name="abs"><\/a>$/;"	a
abs	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^abs(const BaseCube< std::complex<typename T1::pod_type>,T1>& X, const typename arma_cx_only<typename T1::elem_type>::result* junk = 0)$/;"	f
abs	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^abs(const BaseCube<typename T1::elem_type,T1>& X, const typename arma_not_cx<typename T1::elem_type>::result* junk = 0)$/;"	f
abs	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^abs(const SpBase< std::complex<typename T1::pod_type>, T1>& X, const typename arma_cx_only<typename T1::elem_type>::result* junk = 0)$/;"	f
abs	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^abs(const SpBase<typename T1::elem_type,T1>& X, const typename arma_not_cx<typename T1::elem_type>::result* junk = 0)$/;"	f
abs	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^abs(const T1& X)$/;"	f
access	lib/armadillo-9.800.2/include/armadillo_bits/access.hpp	/^class access$/;"	c
accu	lib/armadillo-9.800.2/docs.html	/^<a name="accu"><\/a>$/;"	a
accu	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu(const BaseCube<typename T1::elem_type,T1>& X)$/;"	f
accu	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu(const SpBase<typename T1::elem_type,T1>& expr)$/;"	f
accu	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu(const SpGlue<T1,T2,spglue_minus>& expr)$/;"	f
accu	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu(const SpGlue<T1,T2,spglue_plus>& expr)$/;"	f
accu	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu(const SpGlue<T1,T2,spglue_schur>& expr)$/;"	f
accu	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu(const SpOp<T1, spop_type>& expr)$/;"	f
accu	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu(const T& x)$/;"	f
accu	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu(const T1& X)$/;"	f
accu	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu(const eGlue<T1,T2,eglue_schur>& expr)$/;"	f
accu	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu(const eGlueCube<T1,T2,eglue_schur>& expr)$/;"	f
accu	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu(const mtOp<uword,T1,op_rel_eq>& X)$/;"	f
accu	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu(const mtOp<uword,T1,op_rel_noteq>& X)$/;"	f
accu	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu(const subview<eT>& X)$/;"	f
accu	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu(const subview_col<eT>& X)$/;"	f
accu_cube_proxy_at	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu_cube_proxy_at(const ProxyCube<T1>& P)$/;"	f
accu_cube_proxy_at_mp	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu_cube_proxy_at_mp(const ProxyCube<T1>& P)$/;"	f
accu_cube_proxy_linear	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu_cube_proxy_linear(const ProxyCube<T1>& P)$/;"	f
accu_proxy_at	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu_proxy_at(const Proxy<T1>& P)$/;"	f
accu_proxy_at_mp	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu_proxy_at_mp(const Proxy<T1>& P)$/;"	f
accu_proxy_linear	lib/armadillo-9.800.2/include/armadillo_bits/fn_accu.hpp	/^accu_proxy_linear(const Proxy<T1>& P)$/;"	f
accumulate	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::accumulate(const eT* src, const uword n_elem)$/;"	f	class:arrayops
acos	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_cx_only<eT>::result          acos  (const eT x) { return arma_acos(x); }$/;"	f	class:eop_aux
acos	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result    acos  (const eT x) { return eT( std::acos(double(x)) ); }$/;"	f	class:eop_aux
acos	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_only<eT>::result        acos  (const eT x) { return std::acos(x); }$/;"	f	class:eop_aux
acos	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^acos(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
acos	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^acos(const T1& A)$/;"	f
acosh	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result    acosh (const eT x) { return eT( arma_acosh(double(x)) ); }$/;"	f	class:eop_aux
acosh	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result acosh (const eT x) { return arma_acosh(x); }$/;"	f	class:eop_aux
acosh	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^acosh(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
acosh	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^acosh(const T1& A)$/;"	f
acquire	lib/armadillo-9.800.2/include/armadillo_bits/memory.hpp	/^memory::acquire(const uword n_elem)$/;"	f	class:memory
acquire_chunked	lib/armadillo-9.800.2/include/armadillo_bits/memory.hpp	/^memory::acquire_chunked(const uword n_elem)$/;"	f	class:memory
actual_pos	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    uword actual_pos; \/\/ this holds the true position we are at in the matrix, as column-major indexing$/;"	m	class:SpMat::const_row_iterator
actual_pos	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    uword actual_pos; \/\/ Actual position in subview's parent matrix.$/;"	m	class:SpSubview::const_row_iterator
add	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::add(const eT in_val)$/;"	f	class:SpMat_MapMat_val
addRef	lib/armadillo-9.800.2/tests/catch.hpp	/^        virtual void addRef() const {$/;"	f	struct:Catch::SharedImpl
adv_constructors_col	lib/armadillo-9.800.2/docs.html	/^<a name="adv_constructors_col"><\/a>$/;"	a
adv_constructors_col_fixed	lib/armadillo-9.800.2/docs.html	/^<a name="adv_constructors_col_fixed"><\/a>$/;"	a
adv_constructors_cube	lib/armadillo-9.800.2/docs.html	/^<a name="adv_constructors_cube"><\/a>$/;"	a
adv_constructors_mat	lib/armadillo-9.800.2/docs.html	/^<a name="adv_constructors_mat"><\/a>$/;"	a
adv_constructors_mat_fixed	lib/armadillo-9.800.2/docs.html	/^<a name="adv_constructors_mat_fixed"><\/a>$/;"	a
adv_constructors_row	lib/armadillo-9.800.2/docs.html	/^<a name="adv_constructors_row"><\/a>$/;"	a
affmul	lib/armadillo-9.800.2/docs.html	/^<a name="affmul"><\/a>$/;"	a
affmul	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^affmul(const T1& A, const T2& B)$/;"	f
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef          const Mat<out_eT>&           aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const Col<eT>&                           aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const Gen<T1, gen_type>&                 aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const Mat<eT>&                           aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const Mat<elem_type>&                    aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const Mat<elem_type>&                    aligned_ea_type;$/;"	t	class:Proxy_diagvec_expr
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const Mat<elem_type>&                    aligned_ea_type;$/;"	t	class:Proxy_vectorise_col_mat
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const Mat<elem_type>&                    aligned_ea_type;$/;"	t	struct:Proxy_xtrans_vector
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const Proxy< subview_elem1<eT,T1> >&     aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const Row<eT>&                           aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const T1&                                aligned_ea_type;$/;"	t	struct:Proxy_fixed
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const diagview<eT>&                      aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const diagview<elem_type>&               aligned_ea_type;$/;"	t	class:Proxy_diagvec_mat
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const eGlue<T1, T2, eglue_type>&         aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const eOp< Op<T1, op_htrans>, eop_scalar_times>& aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const eOp<T1, eop_type>&                 aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview<eT>&                       aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview_col<eT>&                   aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview_row<eT>&                   aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview_row_htrans<eT>&            aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview_row_htrans<eT>&     aligned_ea_type;$/;"	t	struct:Proxy_subview_row_htrans_cx
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview_row_strans<eT>&            aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview_row_strans<eT>&     aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview_row_strans<eT>&     aligned_ea_type;$/;"	t	struct:Proxy_subview_row_htrans_non_cx
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const xtrans_mat<elem_type,false>&       aligned_ea_type;$/;"	t	struct:Proxy_xtrans_default
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const xtrans_mat<elem_type,true>&        aligned_ea_type;$/;"	t	struct:Proxy_xtrans_default
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const xvec_htrans<eT>&    aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename Proxy<T1>::aligned_ea_type      aligned_ea_type;$/;"	t	class:Proxy_vectorise_col_expr
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename Proxy_sv_row_ht::ea_type     aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename Proxy_xtrans::aligned_ea_type aligned_ea_type;$/;"	t	class:Proxy
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef          const Cube<out_eT>&          aligned_ea_type;$/;"	t	class:ProxyCube
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef const Cube<eT>&                          aligned_ea_type;$/;"	t	class:ProxyCube
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef const Cube<elem_type>&                   aligned_ea_type;$/;"	t	class:ProxyCube
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef const GenCube<eT, gen_type>&             aligned_ea_type;$/;"	t	class:ProxyCube
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef const eGlueCube<T1, T2, eglue_type>&     aligned_ea_type;$/;"	t	class:ProxyCube
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef const eOpCube<T1, eop_type>&             aligned_ea_type;$/;"	t	class:ProxyCube
aligned_ea_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef const subview_cube<eT>&                  aligned_ea_type;$/;"	t	class:ProxyCube
all	lib/armadillo-9.800.2/docs.html	/^<a name="all"><\/a>$/;"	a
all	lib/armadillo-9.800.2/include/armadillo_bits/fn_all.hpp	/^all(const T& val)$/;"	f
all	lib/armadillo-9.800.2/include/armadillo_bits/fn_all.hpp	/^all(const T1& X)$/;"	f
all	lib/armadillo-9.800.2/include/armadillo_bits/fn_all.hpp	/^all(const T1& X, const uword dim)$/;"	f
all	lib/armadillo-9.800.2/include/armadillo_bits/span.hpp	/^  static const span_alt all;$/;"	m	class:span_base
all	lib/armadillo-9.800.2/include/armadillo_bits/span.hpp	/^const span_alt span_base<junk>::all = span_alt();$/;"	m	class:span_base
all_cols	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_bones.hpp	/^  const bool all_cols;$/;"	m	class:subview_elem2
all_rows	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_bones.hpp	/^  const bool all_rows;$/;"	m	class:subview_elem2
all_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_all_meat.hpp	/^op_all::all_vec(T1& X)$/;"	f	class:op_all
all_vec_helper	lib/armadillo-9.800.2/include/armadillo_bits/op_all_meat.hpp	/^op_all::all_vec_helper$/;"	f	class:op_all
all_vec_helper	lib/armadillo-9.800.2/include/armadillo_bits/op_all_meat.hpp	/^op_all::all_vec_helper(const Base<typename T1::elem_type, T1>& X)$/;"	f	class:op_all
all_vec_helper	lib/armadillo-9.800.2/include/armadillo_bits/op_all_meat.hpp	/^op_all::all_vec_helper(const Op<T1, op_vectorise_col>& X)$/;"	f	class:op_all
all_vec_helper	lib/armadillo-9.800.2/include/armadillo_bits/op_all_meat.hpp	/^op_all::all_vec_helper(const subview<eT>& X)$/;"	f	class:op_all
allow_ugly	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  bool             allow_ugly;$/;"	m	struct:superlu_opts
allow_ugly	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const opts_allow_ugly   allow_ugly;$/;"	m	namespace:solve_opts
alpha	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT alpha;     \/\/!< fine-structure constant$/;"	m	class:Datum
alpha	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::alpha     = eT(7.2973525664e-3);$/;"	m	class:Datum
alpha	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT alpha()     { return eT(7.2973525664e-3); }$/;"	f	class:Phy
alpha	src/Polarizability/Polarizability.h	/^    cx_mat::fixed<3,3> alpha;$/;"	m	class:Polarizability
alpha_inv	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT alpha_inv; \/\/!< inverse fine-structure constant$/;"	m	class:Datum
alpha_inv	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::alpha_inv = eT(137.035999139);$/;"	m	class:Datum
alpha_inv	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT alpha_inv() { return eT(137.035999139); }$/;"	f	class:Phy
alpha_zero	src/Polarizability/Polarizability.h	/^    double alpha_zero;$/;"	m	class:Polarizability
alt_conj	lib/armadillo-9.800.2/include/armadillo_bits/access.hpp	/^  template<typename eT> arma_inline static const typename enable_if2<is_cx<eT>::no,  const eT&>::result alt_conj(const eT& X) { return X;            }$/;"	f	class:access
alt_conj	lib/armadillo-9.800.2/include/armadillo_bits/access.hpp	/^  template<typename eT> arma_inline static const typename enable_if2<is_cx<eT>::yes, const eT >::result alt_conj(const eT& X) { return std::conj(X); }$/;"	f	class:access
alwaysFalse	lib/armadillo-9.800.2/tests/catch.hpp	/^    inline bool alwaysFalse() { return false; }$/;"	f	namespace:Catch
alwaysTrue	lib/armadillo-9.800.2/tests/catch.hpp	/^    inline bool alwaysTrue() { return true; }$/;"	f	namespace:Catch
always_false	include/catch.hpp	/^struct always_false : std::false_type {};$/;"	s	namespace:Catch
any	lib/armadillo-9.800.2/docs.html	/^<a name="any"><\/a>$/;"	a
any	lib/armadillo-9.800.2/include/armadillo_bits/fn_any.hpp	/^any(const T& val)$/;"	f
any	lib/armadillo-9.800.2/include/armadillo_bits/fn_any.hpp	/^any(const T1& X)$/;"	f
any	lib/armadillo-9.800.2/include/armadillo_bits/fn_any.hpp	/^any(const T1& X, const uword dim)$/;"	f
any_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_any_meat.hpp	/^op_any::any_vec(T1& X)$/;"	f	class:op_any
any_vec_helper	lib/armadillo-9.800.2/include/armadillo_bits/op_any_meat.hpp	/^op_any::any_vec_helper$/;"	f	class:op_any
any_vec_helper	lib/armadillo-9.800.2/include/armadillo_bits/op_any_meat.hpp	/^op_any::any_vec_helper(const Base<typename T1::elem_type, T1>& X)$/;"	f	class:op_any
any_vec_helper	lib/armadillo-9.800.2/include/armadillo_bits/op_any_meat.hpp	/^op_any::any_vec_helper(const Op<T1, op_vectorise_col>& X)$/;"	f	class:op_any
any_vec_helper	lib/armadillo-9.800.2/include/armadillo_bits/op_any_meat.hpp	/^op_any::any_vec_helper(const subview<eT>& X)$/;"	f	class:op_any
api_additions	lib/armadillo-9.800.2/docs.html	/^<a name="api_additions"><\/a>$/;"	a
api_changes	lib/armadillo-9.800.2/docs.html	/^<a name="api_changes"><\/a>$/;"	a
append	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  static const opts_append  append;$/;"	m	namespace:hdf5_opts
apply	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_meat.hpp	/^GenCube<eT, gen_type>::apply(Cube<eT>& out) const$/;"	f	class:GenCube
apply	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_meat.hpp	/^GenCube<eT, gen_type>::apply(subview_cube<eT>& out) const$/;"	f	class:GenCube
apply	lib/armadillo-9.800.2/include/armadillo_bits/Gen_meat.hpp	/^Gen<T1, gen_type>::apply(Mat<typename T1::elem_type>& out) const$/;"	f	class:Gen
apply	lib/armadillo-9.800.2/include/armadillo_bits/Gen_meat.hpp	/^Gen<T1, gen_type>::apply(subview<typename T1::elem_type>& out) const$/;"	f	class:Gen
apply	lib/armadillo-9.800.2/include/armadillo_bits/arma_static_check.hpp	/^  apply()$/;"	f	struct:arma_type_check_cxx1998
apply	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	/^eglue_core<eglue_type>::apply(Cube<typename T1::elem_type>& out, const eGlueCube<T1, T2, eglue_type>& x)$/;"	f	class:eglue_core
apply	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	/^eglue_core<eglue_type>::apply(outT& out, const eGlue<T1, T2, eglue_type>& x)$/;"	f	class:eglue_core
apply	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_type>::apply(Cube<typename T1::elem_type>& out, const eOpCube<T1, eop_type>& x)$/;"	f	class:eop_core
apply	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_type>::apply(outT& out, const eOp<T1, eop_type>& x)$/;"	f	class:eop_core
apply	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^as_scalar_redirect<2>::apply(const Glue<T1, T2, glue_times>& X)$/;"	f	class:as_scalar_redirect
apply	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^as_scalar_redirect<3>::apply(const Glue< Glue<T1, T2, glue_times>, T3, glue_times >& X)$/;"	f	class:as_scalar_redirect
apply	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^as_scalar_redirect<N>::apply(const T1& X)$/;"	f	class:as_scalar_redirect
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_affmul_meat.hpp	/^glue_affmul::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_affmul>& X)$/;"	f	class:glue_affmul
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_atan2_meat.hpp	/^glue_atan2::apply(Cube<typename T1::elem_type>& out, const GlueCube<T1, T2, glue_atan2>& expr)$/;"	f	class:glue_atan2
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_atan2_meat.hpp	/^glue_atan2::apply(Mat<typename T1::elem_type>& out, const Glue<T1, T2, glue_atan2>& expr)$/;"	f	class:glue_atan2
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_conv_meat.hpp	/^glue_conv2::apply(Mat<eT>& out, const Mat<eT>& A, const Mat<eT>& B)$/;"	f	class:glue_conv2
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_conv_meat.hpp	/^glue_conv2::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_conv2>& expr)$/;"	f	class:glue_conv2
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_conv_meat.hpp	/^glue_conv::apply(Mat<eT>& out, const Mat<eT>& A, const Mat<eT>& B, const bool A_is_col)$/;"	f	class:glue_conv
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_conv_meat.hpp	/^glue_conv::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_conv>& expr)$/;"	f	class:glue_conv
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_cor_meat.hpp	/^glue_cor::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_cor>& X)$/;"	f	class:glue_cor
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_cov_meat.hpp	/^glue_cov::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_cov>& X)$/;"	f	class:glue_cov
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_cross_meat.hpp	/^glue_cross::apply(Mat<typename T1::elem_type>& out, const Glue<T1, T2, glue_cross>& X)$/;"	f	class:glue_cross
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_hist_meat.hpp	/^glue_hist::apply(Mat<uword>& out, const mtGlue<uword,T1,T2,glue_hist>& expr)$/;"	f	class:glue_hist
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_hist_meat.hpp	/^glue_hist_default::apply(Mat<uword>& out, const mtGlue<uword,T1,T2,glue_hist_default>& expr)$/;"	f	class:glue_hist_default
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_histc_meat.hpp	/^glue_histc::apply(Mat<uword>& C, const mtGlue<uword,T1,T2,glue_histc>& expr)$/;"	f	class:glue_histc
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_histc_meat.hpp	/^glue_histc_default::apply(Mat<uword>& C, const mtGlue<uword,T1,T2,glue_histc_default>& expr)$/;"	f	class:glue_histc_default
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_hypot_meat.hpp	/^glue_hypot::apply(Cube<typename T1::elem_type>& out, const GlueCube<T1, T2, glue_hypot>& expr)$/;"	f	class:glue_hypot
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_hypot_meat.hpp	/^glue_hypot::apply(Mat<typename T1::elem_type>& out, const Glue<T1, T2, glue_hypot>& expr)$/;"	f	class:glue_hypot
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_intersect_meat.hpp	/^glue_intersect::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_intersect>& X)$/;"	f	class:glue_intersect
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_intersect_meat.hpp	/^glue_intersect::apply(Mat<typename T1::elem_type>& out, uvec& iA, uvec& iB, const Base<typename T1::elem_type,T1>& A_expr, const Base<typename T1::elem_type,T2>& B_expr, const bool calc_indx)$/;"	f	class:glue_intersect
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_meat.hpp	/^glue_join_cols::apply(Mat<eT>& out, const Base<eT,T1>& A_expr, const Base<eT,T2>& B_expr, const Base<eT,T3>& C_expr)$/;"	f	class:glue_join_cols
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_meat.hpp	/^glue_join_cols::apply(Mat<eT>& out, const Base<eT,T1>& A_expr, const Base<eT,T2>& B_expr, const Base<eT,T3>& C_expr, const Base<eT,T4>& D_expr)$/;"	f	class:glue_join_cols
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_meat.hpp	/^glue_join_cols::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_join_cols>& X)$/;"	f	class:glue_join_cols
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_meat.hpp	/^glue_join_rows::apply(Mat<eT>& out, const Base<eT,T1>& A_expr, const Base<eT,T2>& B_expr, const Base<eT,T3>& C_expr)$/;"	f	class:glue_join_rows
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_meat.hpp	/^glue_join_rows::apply(Mat<eT>& out, const Base<eT,T1>& A_expr, const Base<eT,T2>& B_expr, const Base<eT,T3>& C_expr, const Base<eT,T4>& D_expr)$/;"	f	class:glue_join_rows
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_meat.hpp	/^glue_join_rows::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_join_rows>& X)$/;"	f	class:glue_join_rows
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_meat.hpp	/^glue_join_slices::apply(Cube<typename T1::elem_type>& out, const GlueCube<T1,T2,glue_join_slices>& X)$/;"	f	class:glue_join_slices
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_kron_meat.hpp	/^glue_kron::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_kron>& X)$/;"	f	class:glue_kron
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_max_meat.hpp	/^glue_max::apply(Cube< std::complex<T> >& out, const ProxyCube<T1>& PA, const ProxyCube<T2>& PB)$/;"	f	class:glue_max
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_max_meat.hpp	/^glue_max::apply(Cube<eT>& out, const ProxyCube<T1>& PA, const ProxyCube<T2>& PB)$/;"	f	class:glue_max
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_max_meat.hpp	/^glue_max::apply(Cube<typename T1::elem_type>& out, const GlueCube<T1, T2, glue_max>& X)$/;"	f	class:glue_max
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_max_meat.hpp	/^glue_max::apply(Mat< std::complex<T> >& out, const Proxy<T1>& PA, const Proxy<T2>& PB)$/;"	f	class:glue_max
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_max_meat.hpp	/^glue_max::apply(Mat<eT>& out, const Proxy<T1>& PA, const Proxy<T2>& PB)$/;"	f	class:glue_max
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_max_meat.hpp	/^glue_max::apply(Mat<typename T1::elem_type>& out, const Glue<T1, T2, glue_max>& X)$/;"	f	class:glue_max
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_min_meat.hpp	/^glue_min::apply(Cube< std::complex<T> >& out, const ProxyCube<T1>& PA, const ProxyCube<T2>& PB)$/;"	f	class:glue_min
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_min_meat.hpp	/^glue_min::apply(Cube<eT>& out, const ProxyCube<T1>& PA, const ProxyCube<T2>& PB)$/;"	f	class:glue_min
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_min_meat.hpp	/^glue_min::apply(Cube<typename T1::elem_type>& out, const GlueCube<T1, T2, glue_min>& X)$/;"	f	class:glue_min
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_min_meat.hpp	/^glue_min::apply(Mat< std::complex<T> >& out, const Proxy<T1>& PA, const Proxy<T2>& PB)$/;"	f	class:glue_min
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_min_meat.hpp	/^glue_min::apply(Mat<eT>& out, const Proxy<T1>& PA, const Proxy<T2>& PB)$/;"	f	class:glue_min
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_min_meat.hpp	/^glue_min::apply(Mat<typename T1::elem_type>& out, const Glue<T1, T2, glue_min>& X)$/;"	f	class:glue_min
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_meat.hpp	/^glue_mixed_div::apply(Cube<typename eT_promoter<T1,T2>::eT>& out, const mtGlueCube<typename eT_promoter<T1,T2>::eT, T1, T2, glue_mixed_div>& X)$/;"	f	class:glue_mixed_div
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_meat.hpp	/^glue_mixed_div::apply(Mat<typename eT_promoter<T1,T2>::eT>& out, const mtGlue<typename eT_promoter<T1,T2>::eT, T1, T2, glue_mixed_div>& X)$/;"	f	class:glue_mixed_div
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_meat.hpp	/^glue_mixed_minus::apply(Cube<typename eT_promoter<T1,T2>::eT>& out, const mtGlueCube<typename eT_promoter<T1,T2>::eT, T1, T2, glue_mixed_minus>& X)$/;"	f	class:glue_mixed_minus
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_meat.hpp	/^glue_mixed_minus::apply(Mat<typename eT_promoter<T1,T2>::eT>& out, const mtGlue<typename eT_promoter<T1,T2>::eT, T1, T2, glue_mixed_minus>& X)$/;"	f	class:glue_mixed_minus
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_meat.hpp	/^glue_mixed_plus::apply(Cube<typename eT_promoter<T1,T2>::eT>& out, const mtGlueCube<typename eT_promoter<T1,T2>::eT, T1, T2, glue_mixed_plus>& X)$/;"	f	class:glue_mixed_plus
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_meat.hpp	/^glue_mixed_plus::apply(Mat<typename eT_promoter<T1,T2>::eT>& out, const mtGlue<typename eT_promoter<T1,T2>::eT, T1, T2, glue_mixed_plus>& X)$/;"	f	class:glue_mixed_plus
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_meat.hpp	/^glue_mixed_schur::apply(Cube<typename eT_promoter<T1,T2>::eT>& out, const mtGlueCube<typename eT_promoter<T1,T2>::eT, T1, T2, glue_mixed_schur>& X)$/;"	f	class:glue_mixed_schur
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_meat.hpp	/^glue_mixed_schur::apply(Mat<typename eT_promoter<T1,T2>::eT>& out, const mtGlue<typename eT_promoter<T1,T2>::eT, T1, T2, glue_mixed_schur>& X)$/;"	f	class:glue_mixed_schur
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_meat.hpp	/^glue_mixed_times::apply(Mat<typename eT_promoter<T1,T2>::eT>& out, const mtGlue<typename eT_promoter<T1,T2>::eT, T1, T2, glue_mixed_times>& X)$/;"	f	class:glue_mixed_times
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_mvnrnd_meat.hpp	/^glue_mvnrnd::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_mvnrnd>& expr)$/;"	f	class:glue_mvnrnd
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_mvnrnd_meat.hpp	/^glue_mvnrnd_vec::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_mvnrnd_vec>& expr)$/;"	f	class:glue_mvnrnd_vec
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyfit_meat.hpp	/^glue_polyfit::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_polyfit>& expr)$/;"	f	class:glue_polyfit
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyval_meat.hpp	/^glue_polyval::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_polyval>& expr)$/;"	f	class:glue_polyval
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	/^glue_rel_and::apply$/;"	f	class:glue_rel_and
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	/^glue_rel_eq::apply$/;"	f	class:glue_rel_eq
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	/^glue_rel_gt::apply$/;"	f	class:glue_rel_gt
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	/^glue_rel_gteq::apply$/;"	f	class:glue_rel_gteq
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	/^glue_rel_lt::apply$/;"	f	class:glue_rel_lt
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	/^glue_rel_lteq::apply$/;"	f	class:glue_rel_lteq
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	/^glue_rel_noteq::apply$/;"	f	class:glue_rel_noteq
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	/^glue_rel_or::apply$/;"	f	class:glue_rel_or
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_meat.hpp	/^glue_solve_gen::apply(Mat<eT>& out, const Base<eT,T1>& A_expr, const Base<eT,T2>& B_expr, const uword flags)$/;"	f	class:glue_solve_gen
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_meat.hpp	/^glue_solve_gen::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_solve_gen>& X)$/;"	f	class:glue_solve_gen
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_meat.hpp	/^glue_solve_tri::apply(Mat<eT>& actual_out, const Base<eT,T1>& A_expr, const Base<eT,T2>& B_expr, const uword flags)$/;"	f	class:glue_solve_tri
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_meat.hpp	/^glue_solve_tri::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_solve_tri>& X)$/;"	f	class:glue_solve_tri
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_meat.hpp	/^glue_solve_tri_default::apply(Mat<eT>& actual_out, const Base<eT,T1>& A_expr, const Base<eT,T2>& B_expr, const uword flags)$/;"	f	class:glue_solve_tri_default
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_meat.hpp	/^glue_solve_tri_default::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_solve_tri_default>& X)$/;"	f	class:glue_solve_tri_default
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_meat.hpp	/^glue_times::apply$/;"	f	class:glue_times
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_meat.hpp	/^glue_times::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_times>& X)$/;"	f	class:glue_times
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_meat.hpp	/^glue_times_diag::apply(Mat<typename T1::elem_type>& out, const Glue<T1, T2, glue_times_diag>& X)$/;"	f	class:glue_times_diag
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_meat.hpp	/^glue_times_redirect2_helper<do_inv_detect>::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_times>& X)$/;"	f	class:glue_times_redirect2_helper
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_meat.hpp	/^glue_times_redirect2_helper<true>::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_times>& X)$/;"	f	class:glue_times_redirect2_helper
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_meat.hpp	/^glue_times_redirect3_helper<do_inv_detect>::apply(Mat<typename T1::elem_type>& out, const Glue< Glue<T1,T2,glue_times>, T3, glue_times>& X)$/;"	f	class:glue_times_redirect3_helper
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_meat.hpp	/^glue_times_redirect3_helper<true>::apply(Mat<typename T1::elem_type>& out, const Glue< Glue<T1,T2,glue_times>, T3, glue_times>& X)$/;"	f	class:glue_times_redirect3_helper
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_meat.hpp	/^glue_times_redirect<2>::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_times>& X)$/;"	f	class:glue_times_redirect
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_meat.hpp	/^glue_times_redirect<3>::apply(Mat<typename T1::elem_type>& out, const Glue< Glue<T1,T2,glue_times>, T3, glue_times>& X)$/;"	f	class:glue_times_redirect
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_meat.hpp	/^glue_times_redirect<4>::apply(Mat<typename T1::elem_type>& out, const Glue< Glue< Glue<T1,T2,glue_times>, T3, glue_times>, T4, glue_times>& X)$/;"	f	class:glue_times_redirect
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_meat.hpp	/^glue_times_redirect<N>::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_times>& X)$/;"	f	class:glue_times_redirect
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_toeplitz_meat.hpp	/^glue_toeplitz::apply(Mat<typename T1::elem_type>& out, const Glue<T1, T2, glue_toeplitz>& in)$/;"	f	class:glue_toeplitz
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_trapz_meat.hpp	/^glue_trapz::apply(Mat<typename T1::elem_type>& out, const Glue<T1,T2,glue_trapz>& in)$/;"	f	class:glue_trapz
apply	lib/armadillo-9.800.2/include/armadillo_bits/glue_trapz_meat.hpp	/^op_trapz::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_trapz>& in)$/;"	f	class:op_trapz
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemm.hpp	/^  apply$/;"	f	class:gemm
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemm.hpp	/^  apply$/;"	f	class:gemm_emul
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemm.hpp	/^  apply$/;"	f	class:gemm_emul_large
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemm.hpp	/^  apply$/;"	f	class:gemm_emul_tinysq
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemm.hpp	/^  apply( Mat<eT>& C, const TA& A, const TB& B, const eT alpha = eT(1), const eT beta = eT(0) )$/;"	f	class:gemm
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemm_mixed.hpp	/^  apply$/;"	f	class:gemm_mixed
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemm_mixed.hpp	/^  apply$/;"	f	class:gemm_mixed_large
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^  apply$/;"	f	class:gemv
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^  apply( eT* y, const TA& A, const eT* x, const eT alpha = eT(1), const eT beta = eT(0) )$/;"	f	class:gemv
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^  apply( eT* y, const TA& A, const eT* x, const eT alpha = eT(1), const eT beta = eT(0) )$/;"	f	class:gemv_emul
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^  apply( eT* y, const TA& A, const eT* x, const eT alpha = eT(1), const eT beta = eT(0) )$/;"	f	class:gemv_emul_tinysq
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_herk.hpp	/^  apply$/;"	f	class:herk
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_herk.hpp	/^  apply$/;"	f	class:herk_emul
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_herk.hpp	/^  apply$/;"	f	class:herk_vec
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_herk.hpp	/^  apply( Mat<eT>& C, const TA& A, const eT alpha = eT(1), const eT beta = eT(0), const typename arma_not_cx<eT>::result* junk = 0 )$/;"	f	class:herk
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_syrk.hpp	/^  apply$/;"	f	class:syrk
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_syrk.hpp	/^  apply$/;"	f	class:syrk_emul
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_syrk.hpp	/^  apply$/;"	f	class:syrk_vec
apply	lib/armadillo-9.800.2/include/armadillo_bits/mul_syrk.hpp	/^  apply( Mat<eT>& C, const TA& A, const eT alpha = eT(1), const eT beta = eT(0) )$/;"	f	class:syrk
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_all_meat.hpp	/^op_all::apply(Mat<uword>& out, const mtOp<uword, T1, op_all>& X)$/;"	f	class:op_all
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_any_meat.hpp	/^op_any::apply(Mat<uword>& out, const mtOp<uword, T1, op_any>& X)$/;"	f	class:op_any
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_chi2rnd_meat.hpp	/^op_chi2rnd::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_chi2rnd>& in)$/;"	f	class:op_chi2rnd
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_chol_meat.hpp	/^op_chol::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_chol>& X)$/;"	f	class:op_chol
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_clamp_meat.hpp	/^op_clamp::apply(Cube<typename T1::elem_type>& out, const mtOpCube<typename T1::elem_type, T1, op_clamp>& in)$/;"	f	class:op_clamp
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_clamp_meat.hpp	/^op_clamp::apply(Mat<typename T1::elem_type>& out, const mtOp<typename T1::elem_type, T1, op_clamp>& in)$/;"	f	class:op_clamp
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_cor_meat.hpp	/^op_cor::apply(Mat<typename T1::elem_type>& out, const Op< Op<T1,op_htrans>, op_cor>& in)$/;"	f	class:op_cor
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_cor_meat.hpp	/^op_cor::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_cor>& in)$/;"	f	class:op_cor
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_cov_meat.hpp	/^op_cov::apply(Mat<typename T1::elem_type>& out, const Op< Op<T1,op_htrans>, op_cov>& in)$/;"	f	class:op_cov
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_cov_meat.hpp	/^op_cov::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_cov>& in)$/;"	f	class:op_cov
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_cumprod_meat.hpp	/^op_cumprod::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_cumprod>& in)$/;"	f	class:op_cumprod
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_cumprod_meat.hpp	/^op_cumprod_vec::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_cumprod_vec>& in)$/;"	f	class:op_cumprod_vec
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_cumsum_meat.hpp	/^op_cumsum::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_cumsum>& in)$/;"	f	class:op_cumsum
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_cumsum_meat.hpp	/^op_cumsum_vec::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_cumsum_vec>& in)$/;"	f	class:op_cumsum_vec
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_cx_scalar_meat.hpp	/^op_cx_scalar_div_post::apply$/;"	f	class:op_cx_scalar_div_post
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_cx_scalar_meat.hpp	/^op_cx_scalar_div_pre::apply$/;"	f	class:op_cx_scalar_div_pre
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_cx_scalar_meat.hpp	/^op_cx_scalar_minus_post::apply$/;"	f	class:op_cx_scalar_minus_post
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_cx_scalar_meat.hpp	/^op_cx_scalar_minus_pre::apply$/;"	f	class:op_cx_scalar_minus_pre
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_cx_scalar_meat.hpp	/^op_cx_scalar_plus::apply$/;"	f	class:op_cx_scalar_plus
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_cx_scalar_meat.hpp	/^op_cx_scalar_times::apply$/;"	f	class:op_cx_scalar_times
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_diagmat_meat.hpp	/^op_diagmat2::apply(Mat<typename T1::elem_type>& out, const Op<T1, op_diagmat2>& X)$/;"	f	class:op_diagmat2
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_diagmat_meat.hpp	/^op_diagmat2::apply(Mat<typename T1::elem_type>& out, const Proxy<T1>& P, const uword row_offset, const uword col_offset)$/;"	f	class:op_diagmat2
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_diagmat_meat.hpp	/^op_diagmat::apply(Mat<typename T1::elem_type>& out, const Op<T1, op_diagmat>& X)$/;"	f	class:op_diagmat
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_diagvec_meat.hpp	/^op_diagvec::apply(Mat<typename T1::elem_type>& out, const Op<T1, op_diagvec>& X)$/;"	f	class:op_diagvec
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_diff_meat.hpp	/^op_diff::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_diff>& in)$/;"	f	class:op_diff
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_diff_meat.hpp	/^op_diff_vec::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_diff_vec>& in)$/;"	f	class:op_diff_vec
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_meat.hpp	/^op_cdot::apply(const T1& X, const T2& Y)$/;"	f	class:op_cdot
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_meat.hpp	/^op_dot::apply(const T1& X, const T2& Y)$/;"	f	class:op_dot
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_meat.hpp	/^op_dot_mixed::apply(const T1& A, const T2& B)$/;"	f	class:op_dot_mixed
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_meat.hpp	/^op_norm_dot::apply(const T1& X, const T2& Y)$/;"	f	class:op_norm_dot
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_expmat_meat.hpp	/^op_expmat::apply(Mat<typename T1::elem_type>& out, const Op<T1, op_expmat>& expr)$/;"	f	class:op_expmat
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_expmat_meat.hpp	/^op_expmat_sym::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_expmat_sym>& in)$/;"	f	class:op_expmat_sym
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_fft_meat.hpp	/^op_fft_cx::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_fft_cx>& in)$/;"	f	class:op_fft_cx
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_fft_meat.hpp	/^op_fft_real::apply( Mat< std::complex<typename T1::pod_type> >& out, const mtOp<std::complex<typename T1::pod_type>,T1,op_fft_real>& in )$/;"	f	class:op_fft_real
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_fft_meat.hpp	/^op_ifft_cx::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_ifft_cx>& in)$/;"	f	class:op_ifft_cx
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_find_meat.hpp	/^op_find::apply(Mat<uword>& out, const mtOp<uword, T1, op_find>& X)$/;"	f	class:op_find
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_find_meat.hpp	/^op_find_finite::apply(Mat<uword>& out, const mtOp<uword, T1, op_find_finite>& X)$/;"	f	class:op_find_finite
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_find_meat.hpp	/^op_find_nonfinite::apply(Mat<uword>& out, const mtOp<uword, T1, op_find_nonfinite>& X)$/;"	f	class:op_find_nonfinite
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_find_meat.hpp	/^op_find_simple::apply(Mat<uword>& out, const mtOp<uword, T1, op_find_simple>& X)$/;"	f	class:op_find_simple
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_find_unique_meat.hpp	/^op_find_unique::apply(Mat<uword>& out, const mtOp<uword,T1,op_find_unique>& in)$/;"	f	class:op_find_unique
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_flip_meat.hpp	/^op_fliplr::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_fliplr>& in)$/;"	f	class:op_fliplr
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_flip_meat.hpp	/^op_flipud::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_flipud>& in)$/;"	f	class:op_flipud
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_hist_meat.hpp	/^op_hist::apply(Mat<uword>& out, const mtOp<uword, T1, op_hist>& X)$/;"	f	class:op_hist
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans2::apply(Mat<eT>& out, const Mat<eT>& A, const eT val)$/;"	f	class:op_htrans2
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans2::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_htrans2>& in, const typename arma_cx_only<typename T1::elem_type>::result* junk)$/;"	f	class:op_htrans2
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans2::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_htrans2>& in, const typename arma_not_cx<typename T1::elem_type>::result* junk)$/;"	f	class:op_htrans2
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans::apply(Mat<typename T1::elem_type>& out, const Op< Op<T1, op_trimat>, op_htrans>& in)$/;"	f	class:op_htrans
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_htrans>& in, const typename arma_cx_only<typename T1::elem_type>::result* junk)$/;"	f	class:op_htrans
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_htrans>& in, const typename arma_not_cx<typename T1::elem_type>::result* junk)$/;"	f	class:op_htrans
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_index_max_meat.hpp	/^op_index_max::apply(Cube<uword>& out, const mtOpCube<uword, T1, op_index_max>& in)$/;"	f	class:op_index_max
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_index_max_meat.hpp	/^op_index_max::apply(Mat<uword>& out, const SpBase<typename T1::elem_type,T1>& expr, const uword dim)$/;"	f	class:op_index_max
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_index_max_meat.hpp	/^op_index_max::apply(Mat<uword>& out, const mtOp<uword,T1,op_index_max>& in)$/;"	f	class:op_index_max
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_index_min_meat.hpp	/^op_index_min::apply(Cube<uword>& out, const mtOpCube<uword, T1, op_index_min>& in)$/;"	f	class:op_index_min
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_index_min_meat.hpp	/^op_index_min::apply(Mat<uword>& out, const SpBase<typename T1::elem_type,T1>& expr, const uword dim)$/;"	f	class:op_index_min
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_index_min_meat.hpp	/^op_index_min::apply(Mat<uword>& out, const mtOp<uword,T1,op_index_min>& in)$/;"	f	class:op_index_min
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_inv_meat.hpp	/^op_inv::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_inv>& X)$/;"	f	class:op_inv
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_inv_meat.hpp	/^op_inv_sympd::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_inv_sympd>& X)$/;"	f	class:op_inv_sympd
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_inv_meat.hpp	/^op_inv_tr::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_inv_tr>& X)$/;"	f	class:op_inv_tr
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_logmat_meat.hpp	/^op_logmat::apply(Mat< std::complex<typename T1::elem_type> >& out, const mtOp<std::complex<typename T1::elem_type>,T1,op_logmat>& in)$/;"	f	class:op_logmat
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_logmat_meat.hpp	/^op_logmat_cx::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_logmat_cx>& in)$/;"	f	class:op_logmat_cx
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_logmat_meat.hpp	/^op_logmat_sympd::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_logmat_sympd>& in)$/;"	f	class:op_logmat_sympd
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::apply(Cube<typename T1::elem_type>& out, const OpCube<T1,op_max>& in)$/;"	f	class:op_max
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_max>& in)$/;"	f	class:op_max
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::apply(Cube<typename T1::elem_type>& out, const OpCube<T1,op_mean>& in)$/;"	f	class:op_mean
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_mean>& in)$/;"	f	class:op_mean
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_median_meat.hpp	/^op_median::apply(Mat< std::complex<T> >& out, const Op<T1,op_median>& in)$/;"	f	class:op_median
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_median_meat.hpp	/^op_median::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_median>& in)$/;"	f	class:op_median
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::apply(Cube<typename T1::elem_type>& out, const OpCube<T1,op_min>& in)$/;"	f	class:op_min
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_min>& in)$/;"	f	class:op_min
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_misc_meat.hpp	/^op_abs::apply( Cube<typename T1::pod_type>& out, const mtOpCube<typename T1::pod_type, T1, op_abs>& X )$/;"	f	class:op_abs
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_misc_meat.hpp	/^op_abs::apply( Mat<typename T1::pod_type>& out, const mtOp<typename T1::pod_type, T1, op_abs>& X )$/;"	f	class:op_abs
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_misc_meat.hpp	/^op_arg::apply( Cube<typename T1::pod_type>& out, const mtOpCube<typename T1::pod_type, T1, op_arg>& X )$/;"	f	class:op_arg
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_misc_meat.hpp	/^op_arg::apply( Mat<typename T1::pod_type>& out, const mtOp<typename T1::pod_type, T1, op_arg>& X )$/;"	f	class:op_arg
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_misc_meat.hpp	/^op_imag::apply( Cube<typename T1::pod_type>& out, const mtOpCube<typename T1::pod_type, T1, op_imag>& X )$/;"	f	class:op_imag
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_misc_meat.hpp	/^op_imag::apply( Mat<typename T1::pod_type>& out, const mtOp<typename T1::pod_type, T1, op_imag>& X )$/;"	f	class:op_imag
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_misc_meat.hpp	/^op_real::apply( Cube<typename T1::pod_type>& out, const mtOpCube<typename T1::pod_type, T1, op_real>& X )$/;"	f	class:op_real
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_misc_meat.hpp	/^op_real::apply( Mat<typename T1::pod_type>& out, const mtOp<typename T1::pod_type, T1, op_real>& X )$/;"	f	class:op_real
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_nonzeros_meat.hpp	/^op_nonzeros::apply(Mat<typename T1::elem_type>& out, const Op<T1, op_nonzeros>& X)$/;"	f	class:op_nonzeros
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_nonzeros_meat.hpp	/^op_nonzeros_spmat::apply(Mat<typename T1::elem_type>& out, const SpToDOp<T1, op_nonzeros_spmat>& X)$/;"	f	class:op_nonzeros_spmat
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_normalise_meat.hpp	/^op_normalise_mat::apply(Mat<eT>& out, const Mat<eT>& A, const uword p, const uword dim)$/;"	f	class:op_normalise_mat
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_normalise_meat.hpp	/^op_normalise_mat::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_normalise_mat>& in)$/;"	f	class:op_normalise_mat
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_normalise_meat.hpp	/^op_normalise_vec::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_normalise_vec>& in)$/;"	f	class:op_normalise_vec
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_orth_null_meat.hpp	/^op_null::apply(Mat<typename T1::elem_type>& out, const Op<T1, op_null>& expr)$/;"	f	class:op_null
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_orth_null_meat.hpp	/^op_orth::apply(Mat<typename T1::elem_type>& out, const Op<T1, op_orth>& expr)$/;"	f	class:op_orth
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_pinv_meat.hpp	/^op_pinv::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_pinv>& in)$/;"	f	class:op_pinv
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_princomp_meat.hpp	/^op_princomp::apply$/;"	f	class:op_princomp
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_prod_meat.hpp	/^op_prod::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_prod>& in)$/;"	f	class:op_prod
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_range_meat.hpp	/^op_range::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_range>& in)$/;"	f	class:op_range
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_eq::apply(Cube<uword>& out, const mtOpCube<uword, T1, op_rel_eq>& X)$/;"	f	class:op_rel_eq
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_eq::apply(Mat<uword>& out, const mtOp<uword, T1, op_rel_eq>& X)$/;"	f	class:op_rel_eq
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_gt_post::apply(Cube<uword>& out, const mtOpCube<uword, T1, op_rel_gt_post>& X)$/;"	f	class:op_rel_gt_post
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_gt_post::apply(Mat<uword>& out, const mtOp<uword, T1, op_rel_gt_post>& X)$/;"	f	class:op_rel_gt_post
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_gt_pre::apply(Cube<uword>& out, const mtOpCube<uword, T1, op_rel_gt_pre>& X)$/;"	f	class:op_rel_gt_pre
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_gt_pre::apply(Mat<uword>& out, const mtOp<uword, T1, op_rel_gt_pre>& X)$/;"	f	class:op_rel_gt_pre
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_gteq_post::apply(Cube<uword>& out, const mtOpCube<uword, T1, op_rel_gteq_post>& X)$/;"	f	class:op_rel_gteq_post
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_gteq_post::apply(Mat<uword>& out, const mtOp<uword, T1, op_rel_gteq_post>& X)$/;"	f	class:op_rel_gteq_post
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_gteq_pre::apply(Cube<uword>& out, const mtOpCube<uword, T1, op_rel_gteq_pre>& X)$/;"	f	class:op_rel_gteq_pre
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_gteq_pre::apply(Mat<uword>& out, const mtOp<uword, T1, op_rel_gteq_pre>& X)$/;"	f	class:op_rel_gteq_pre
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_lt_post::apply(Cube<uword>& out, const mtOpCube<uword, T1, op_rel_lt_post>& X)$/;"	f	class:op_rel_lt_post
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_lt_post::apply(Mat<uword>& out, const mtOp<uword, T1, op_rel_lt_post>& X)$/;"	f	class:op_rel_lt_post
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_lt_pre::apply(Cube<uword>& out, const mtOpCube<uword, T1, op_rel_lt_pre>& X)$/;"	f	class:op_rel_lt_pre
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_lt_pre::apply(Mat<uword>& out, const mtOp<uword, T1, op_rel_lt_pre>& X)$/;"	f	class:op_rel_lt_pre
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_lteq_post::apply(Cube<uword>& out, const mtOpCube<uword, T1, op_rel_lteq_post>& X)$/;"	f	class:op_rel_lteq_post
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_lteq_post::apply(Mat<uword>& out, const mtOp<uword, T1, op_rel_lteq_post>& X)$/;"	f	class:op_rel_lteq_post
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_lteq_pre::apply(Cube<uword>& out, const mtOpCube<uword, T1, op_rel_lteq_pre>& X)$/;"	f	class:op_rel_lteq_pre
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_lteq_pre::apply(Mat<uword>& out, const mtOp<uword, T1, op_rel_lteq_pre>& X)$/;"	f	class:op_rel_lteq_pre
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_noteq::apply(Cube<uword>& out, const mtOpCube<uword, T1, op_rel_noteq>& X)$/;"	f	class:op_rel_noteq
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	/^op_rel_noteq::apply(Mat<uword>& out, const mtOp<uword, T1, op_rel_noteq>& X)$/;"	f	class:op_rel_noteq
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_repelem_meat.hpp	/^op_repelem::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_repelem>& in)$/;"	f	class:op_repelem
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_repmat_meat.hpp	/^op_repmat::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_repmat>& in)$/;"	f	class:op_repmat
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_reshape_meat.hpp	/^op_reshape::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_reshape>& in)$/;"	f	class:op_reshape
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_reshape_meat.hpp	/^op_reshape_ext::apply(Cube<typename T1::elem_type>& out, const OpCube<T1,op_reshape_ext>& in)$/;"	f	class:op_reshape_ext
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_reshape_meat.hpp	/^op_reshape_ext::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_reshape_ext>& in)$/;"	f	class:op_reshape_ext
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_resize_meat.hpp	/^op_resize::apply(Cube<typename T1::elem_type>& actual_out, const OpCube<T1,op_resize>& in)$/;"	f	class:op_resize
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_resize_meat.hpp	/^op_resize::apply(Mat<typename T1::elem_type>& actual_out, const Op<T1,op_resize>& in)$/;"	f	class:op_resize
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_reverse_meat.hpp	/^op_reverse::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_reverse>& in)$/;"	f	class:op_reverse
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_reverse_meat.hpp	/^op_reverse_vec::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_reverse_vec>& in)$/;"	f	class:op_reverse_vec
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_roots_meat.hpp	/^op_roots::apply(Mat< std::complex<typename T1::pod_type> >& out, const mtOp<std::complex<typename T1::pod_type>, T1, op_roots>& expr)$/;"	f	class:op_roots
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_shift_meat.hpp	/^op_shift::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_shift>& in)$/;"	f	class:op_shift
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_shift_meat.hpp	/^op_shift_vec::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_shift_vec>& in)$/;"	f	class:op_shift_vec
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_shuffle_meat.hpp	/^op_shuffle::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_shuffle>& in)$/;"	f	class:op_shuffle
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_shuffle_meat.hpp	/^op_shuffle_vec::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_shuffle_vec>& in)$/;"	f	class:op_shuffle_vec
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_meat.hpp	/^op_sort_index::apply(Mat<uword>& out, const mtOp<uword,T1,op_sort_index>& in)$/;"	f	class:op_sort_index
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_meat.hpp	/^op_stable_sort_index::apply(Mat<uword>& out, const mtOp<uword,T1,op_stable_sort_index>& in)$/;"	f	class:op_stable_sort_index
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_meat.hpp	/^op_sort::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_sort>& in)$/;"	f	class:op_sort
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_meat.hpp	/^op_sort_vec::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_sort_vec>& in)$/;"	f	class:op_sort_vec
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_minus_meat.hpp	/^op_sp_minus_post::apply(Mat<typename T1::elem_type>& out, const SpToDOp<T1,op_sp_minus_post>& in)$/;"	f	class:op_sp_minus_post
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_minus_meat.hpp	/^op_sp_minus_post::apply(SpMat<typename T1::elem_type>& out, const SpToDOp<T1,op_sp_minus_post>& in)$/;"	f	class:op_sp_minus_post
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_minus_meat.hpp	/^op_sp_minus_pre::apply(Mat<typename T1::elem_type>& out, const SpToDOp<T1,op_sp_minus_pre>& in)$/;"	f	class:op_sp_minus_pre
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_minus_meat.hpp	/^op_sp_minus_pre::apply(SpMat<typename T1::elem_type>& out, const SpToDOp<T1,op_sp_minus_pre>& in)$/;"	f	class:op_sp_minus_pre
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_plus_meat.hpp	/^op_sp_plus::apply(Mat<typename T1::elem_type>& out, const SpToDOp<T1,op_sp_plus>& in)$/;"	f	class:op_sp_plus
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_plus_meat.hpp	/^op_sp_plus::apply(SpMat<typename T1::elem_type>& out, const SpToDOp<T1,op_sp_plus>& in)$/;"	f	class:op_sp_plus
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sqrtmat_meat.hpp	/^op_sqrtmat::apply(Mat< std::complex<typename T1::elem_type> >& out, const mtOp<std::complex<typename T1::elem_type>,T1,op_sqrtmat>& in)$/;"	f	class:op_sqrtmat
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sqrtmat_meat.hpp	/^op_sqrtmat_cx::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_sqrtmat_cx>& in)$/;"	f	class:op_sqrtmat_cx
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sqrtmat_meat.hpp	/^op_sqrtmat_sympd::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_sqrtmat_sympd>& in)$/;"	f	class:op_sqrtmat_sympd
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_stddev_meat.hpp	/^op_stddev::apply(Mat<typename T1::pod_type>& out, const mtOp<typename T1::pod_type, T1, op_stddev>& in)$/;"	f	class:op_stddev
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_meat.hpp	/^op_strans2::apply(Mat<eT>& out, const TA& A, const eT val)$/;"	f	class:op_strans2
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_meat.hpp	/^op_strans::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_strans>& in)$/;"	f	class:op_strans
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sum_meat.hpp	/^op_sum::apply(Cube<typename T1::elem_type>& out, const OpCube<T1,op_sum>& in)$/;"	f	class:op_sum
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_sum_meat.hpp	/^op_sum::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_sum>& in)$/;"	f	class:op_sum
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_symmat_meat.hpp	/^op_symmat::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_symmat>& in)$/;"	f	class:op_symmat
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_symmat_meat.hpp	/^op_symmat_cx::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_symmat_cx>& in)$/;"	f	class:op_symmat_cx
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_toeplitz_meat.hpp	/^op_toeplitz::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_toeplitz>& in)$/;"	f	class:op_toeplitz
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_toeplitz_meat.hpp	/^op_toeplitz_c::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_toeplitz_c>& in)$/;"	f	class:op_toeplitz_c
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_trimat_meat.hpp	/^op_trimat::apply(Mat<typename T1::elem_type>& out, const Op<Op<T1, op_htrans>, op_trimat>& in)$/;"	f	class:op_trimat
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_trimat_meat.hpp	/^op_trimat::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_trimat>& in)$/;"	f	class:op_trimat
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_trimat_meat.hpp	/^op_trimatl_ext::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_trimatl_ext>& in)$/;"	f	class:op_trimatl_ext
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_trimat_meat.hpp	/^op_trimatu_ext::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_trimatu_ext>& in)$/;"	f	class:op_trimatu_ext
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_unique_meat.hpp	/^op_unique::apply(Mat<typename T1::elem_type>& out, const Op<T1, op_unique>& in)$/;"	f	class:op_unique
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_unique_meat.hpp	/^op_unique_vec::apply(Mat<typename T1::elem_type>& out, const Op<T1, op_unique_vec>& in)$/;"	f	class:op_unique_vec
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_var_meat.hpp	/^op_var::apply(Mat<typename T1::pod_type>& out, const mtOp<typename T1::pod_type, T1, op_var>& in)$/;"	f	class:op_var
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_meat.hpp	/^op_vectorise_all::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_vectorise_all>& in)$/;"	f	class:op_vectorise_all
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_meat.hpp	/^op_vectorise_col::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_vectorise_col>& in)$/;"	f	class:op_vectorise_col
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_meat.hpp	/^op_vectorise_cube_col::apply(Mat<typename T1::elem_type>& out, const CubeToMatOp<T1, op_vectorise_cube_col>& in)$/;"	f	class:op_vectorise_cube_col
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_meat.hpp	/^op_vectorise_row::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_vectorise_row>& in)$/;"	f	class:op_vectorise_row
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_wishrnd_meat.hpp	/^op_iwishrnd::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_iwishrnd>& expr)$/;"	f	class:op_iwishrnd
apply	lib/armadillo-9.800.2/include/armadillo_bits/op_wishrnd_meat.hpp	/^op_wishrnd::apply(Mat<typename T1::elem_type>& out, const Op<T1,op_wishrnd>& expr)$/;"	f	class:op_wishrnd
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_meat.hpp	/^spglue_join_cols::apply(SpMat<eT>& out, const SpBase<eT,T1>& A_expr, const SpBase<eT,T2>& B_expr, const SpBase<eT,T3>& C_expr)$/;"	f	class:spglue_join_cols
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_meat.hpp	/^spglue_join_cols::apply(SpMat<eT>& out, const SpBase<eT,T1>& A_expr, const SpBase<eT,T2>& B_expr, const SpBase<eT,T3>& C_expr, const SpBase<eT,T4>& D_expr)$/;"	f	class:spglue_join_cols
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_meat.hpp	/^spglue_join_cols::apply(SpMat<typename T1::elem_type>& out, const SpGlue<T1,T2,spglue_join_cols>& X)$/;"	f	class:spglue_join_cols
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_meat.hpp	/^spglue_join_rows::apply(SpMat<eT>& out, const SpBase<eT,T1>& A_expr, const SpBase<eT,T2>& B_expr, const SpBase<eT,T3>& C_expr)$/;"	f	class:spglue_join_rows
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_meat.hpp	/^spglue_join_rows::apply(SpMat<eT>& out, const SpBase<eT,T1>& A_expr, const SpBase<eT,T2>& B_expr, const SpBase<eT,T3>& C_expr, const SpBase<eT,T4>& D_expr)$/;"	f	class:spglue_join_rows
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_meat.hpp	/^spglue_join_rows::apply(SpMat<typename T1::elem_type>& out, const SpGlue<T1,T2,spglue_join_rows>& X)$/;"	f	class:spglue_join_rows
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_kron_meat.hpp	/^spglue_kron::apply(SpMat<typename T1::elem_type>& out, const SpGlue<T1,T2,spglue_kron>& X)$/;"	f	class:spglue_kron
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_max_meat.hpp	/^spglue_max::apply(SpMat<typename T1::elem_type>& out, const SpGlue<T1,T2,spglue_max>& X)$/;"	f	class:spglue_max
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_min_meat.hpp	/^spglue_min::apply(SpMat<typename T1::elem_type>& out, const SpGlue<T1,T2,spglue_min>& X)$/;"	f	class:spglue_min
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_minus_meat.hpp	/^spglue_minus::apply(SpMat<typename T1::elem_type>& out, const SpGlue<T1,T2,spglue_minus>& X)$/;"	f	class:spglue_minus
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_minus_meat.hpp	/^spglue_minus_mixed::apply(SpMat<typename eT_promoter<T1,T2>::eT>& out, const mtSpGlue<typename eT_promoter<T1,T2>::eT, T1, T2, spglue_minus_mixed>& expr)$/;"	f	class:spglue_minus_mixed
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_plus_meat.hpp	/^spglue_plus::apply(SpMat<typename T1::elem_type>& out, const SpGlue<T1,T2,spglue_plus>& X)$/;"	f	class:spglue_plus
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_plus_meat.hpp	/^spglue_plus_mixed::apply(SpMat<typename eT_promoter<T1,T2>::eT>& out, const mtSpGlue<typename eT_promoter<T1,T2>::eT, T1, T2, spglue_plus_mixed>& expr)$/;"	f	class:spglue_plus_mixed
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_relational_meat.hpp	/^spglue_rel_gt::apply(SpMat<uword>& out, const mtSpGlue<uword, T1, T2, spglue_rel_gt>& X)$/;"	f	class:spglue_rel_gt
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_relational_meat.hpp	/^spglue_rel_lt::apply(SpMat<uword>& out, const mtSpGlue<uword, T1, T2, spglue_rel_lt>& X)$/;"	f	class:spglue_rel_lt
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_schur_meat.hpp	/^spglue_schur::apply(SpMat<typename T1::elem_type>& out, const SpGlue<T1,T2,spglue_schur>& X)$/;"	f	class:spglue_schur
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_schur_meat.hpp	/^spglue_schur_mixed::apply(SpMat<typename eT_promoter<T1,T2>::eT>& out, const mtSpGlue<typename eT_promoter<T1,T2>::eT, T1, T2, spglue_schur_mixed>& expr)$/;"	f	class:spglue_schur_mixed
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_meat.hpp	/^spglue_times::apply(SpMat<typename T1::elem_type>& out, const SpGlue<SpOp<T1,spop_scalar_times>,T2,spglue_times>& X)$/;"	f	class:spglue_times
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_meat.hpp	/^spglue_times::apply(SpMat<typename T1::elem_type>& out, const SpGlue<T1,T2,spglue_times>& X)$/;"	f	class:spglue_times
apply	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_meat.hpp	/^spglue_times_mixed::apply(SpMat<typename eT_promoter<T1,T2>::eT>& out, const mtSpGlue<typename eT_promoter<T1,T2>::eT, T1, T2, spglue_times_mixed>& expr)$/;"	f	class:spglue_times_mixed
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_diagmat_meat.hpp	/^spop_diagmat2::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1, spop_diagmat2>& in)$/;"	f	class:spop_diagmat2
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_diagmat_meat.hpp	/^spop_diagmat::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1, spop_diagmat>& in)$/;"	f	class:spop_diagmat
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_htrans_meat.hpp	/^spop_htrans::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_htrans>& in, const typename arma_cx_only<typename T1::elem_type>::result* junk)$/;"	f	class:spop_htrans
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_htrans_meat.hpp	/^spop_htrans::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_htrans>& in, const typename arma_not_cx<typename T1::elem_type>::result* junk)$/;"	f	class:spop_htrans
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_max_meat.hpp	/^spop_max::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_max>& in)$/;"	f	class:spop_max
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_mean_meat.hpp	/^spop_mean::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1, spop_mean>& in)$/;"	f	class:spop_mean
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_min_meat.hpp	/^spop_min::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_min>& in)$/;"	f	class:spop_min
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_abs::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_abs>& in)$/;"	f	class:spop_abs
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_arg::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_arg>& in)$/;"	f	class:spop_arg
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_ceil::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_ceil>& in)$/;"	f	class:spop_ceil
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_conj::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_conj>& in)$/;"	f	class:spop_conj
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_cx_abs::apply(SpMat<typename T1::pod_type>& out, const mtSpOp<typename T1::pod_type, T1, spop_cx_abs>& in)$/;"	f	class:spop_cx_abs
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_cx_arg::apply(SpMat<typename T1::pod_type>& out, const mtSpOp<typename T1::pod_type, T1, spop_cx_arg>& in)$/;"	f	class:spop_cx_arg
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_cx_scalar_times::apply(SpMat< std::complex<typename T1::pod_type> >& out, const mtSpOp< std::complex<typename T1::pod_type>, T1, spop_cx_scalar_times >& in)$/;"	f	class:spop_cx_scalar_times
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_diagvec::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_diagvec>& in)$/;"	f	class:spop_diagvec
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_fliplr::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_fliplr>& in)$/;"	f	class:spop_fliplr
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_flipud::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_flipud>& in)$/;"	f	class:spop_flipud
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_floor::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_floor>& in)$/;"	f	class:spop_floor
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_imag::apply(SpMat<typename T1::pod_type>& out, const mtSpOp<typename T1::pod_type, T1, spop_imag>& in)$/;"	f	class:spop_imag
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_real::apply(SpMat<typename T1::pod_type>& out, const mtSpOp<typename T1::pod_type, T1, spop_real>& in)$/;"	f	class:spop_real
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_repelem::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1, spop_repelem>& in)$/;"	f	class:spop_repelem
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_reshape::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1, spop_reshape>& in)$/;"	f	class:spop_reshape
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_resize::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1, spop_resize>& in)$/;"	f	class:spop_resize
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_round::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_round>& in)$/;"	f	class:spop_round
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_scalar_times::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_scalar_times>& in)$/;"	f	class:spop_scalar_times
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_sign::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_sign>& in)$/;"	f	class:spop_sign
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_sqrt::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_sqrt>& in)$/;"	f	class:spop_sqrt
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_square::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_square>& in)$/;"	f	class:spop_square
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^spop_trunc::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_trunc>& in)$/;"	f	class:spop_trunc
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_normalise_meat.hpp	/^spop_normalise::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_normalise>& expr)$/;"	f	class:spop_normalise
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_repmat_meat.hpp	/^spop_repmat::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_repmat>& X)$/;"	f	class:spop_repmat
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_reverse_meat.hpp	/^spop_reverse::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_reverse>& in)$/;"	f	class:spop_reverse
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_strans_meat.hpp	/^spop_strans::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_htrans>& in)$/;"	f	class:spop_strans
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_strans_meat.hpp	/^spop_strans::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_strans>& in)$/;"	f	class:spop_strans
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_sum_meat.hpp	/^spop_sum::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_sum>& in)$/;"	f	class:spop_sum
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_symmat_meat.hpp	/^spop_symmat::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_symmat>& in)$/;"	f	class:spop_symmat
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_symmat_meat.hpp	/^spop_symmat_cx::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_symmat_cx>& in)$/;"	f	class:spop_symmat_cx
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_trimat_meat.hpp	/^spop_trimat::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1,spop_trimat>& in)$/;"	f	class:spop_trimat
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_var_meat.hpp	/^spop_var::apply(SpMat<typename T1::pod_type>& out, const mtSpOp<typename T1::pod_type, T1, spop_var>& in)$/;"	f	class:spop_var
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_vectorise_meat.hpp	/^spop_vectorise_all::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1, spop_vectorise_all>& in)$/;"	f	class:spop_vectorise_all
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_vectorise_meat.hpp	/^spop_vectorise_col::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1, spop_vectorise_col>& in)$/;"	f	class:spop_vectorise_col
apply	lib/armadillo-9.800.2/include/armadillo_bits/spop_vectorise_meat.hpp	/^spop_vectorise_row::apply(SpMat<typename T1::elem_type>& out, const SpOp<T1, spop_vectorise_row>& in)$/;"	f	class:spop_vectorise_row
apply	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  apply(const T1 x)$/;"	f	struct:upgrade_val
apply	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  apply(const T2 x)$/;"	f	struct:upgrade_val
apply	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  arma_inline static       T                apply(const T1 x)               { return T(x); }$/;"	f	struct:upgrade_val
apply	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  arma_inline static       T                apply(const T2 x)               { return T(x); }$/;"	f	struct:upgrade_val
apply	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  arma_inline static       double                apply(const float x)                 { return double(x); }$/;"	f	struct:upgrade_val
apply	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  arma_inline static       double               apply(const double x)               { return x; }$/;"	f	struct:upgrade_val
apply	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  arma_inline static const T& apply(const T& x) { return x; }$/;"	f	struct:upgrade_val
apply	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  arma_inline static const std::complex<T>& apply(const std::complex<T>& x) { return x;    }$/;"	f	struct:upgrade_val
apply	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  arma_inline static const std::complex<double>  apply(const std::complex<float>&  x) { return std::complex<double>(x); }$/;"	f	struct:upgrade_val
apply	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  arma_inline static const std::complex<double> apply(const std::complex<float>& x) { return std::complex<double>(x); }$/;"	f	struct:upgrade_val
apply	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^  arma_inline static const std::complex<double>& apply(const std::complex<double>& x) { return x; }$/;"	f	struct:upgrade_val
apply_PX	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_meat.hpp	/^DoubleShiftQR<eT>::apply_PX(Mat<eT>& X, uword oi, uword oj, uword nrow, uword ncol, uword u_ind)$/;"	f	class:newarp::DoubleShiftQR
apply_PX	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_meat.hpp	/^DoubleShiftQR<eT>::apply_PX(eT* x, uword u_ind)$/;"	f	class:newarp::DoubleShiftQR
apply_QtY	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_meat.hpp	/^DoubleShiftQR<eT>::apply_QtY(Col<eT>& y)$/;"	f	class:newarp::DoubleShiftQR
apply_XP	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_meat.hpp	/^DoubleShiftQR<eT>::apply_XP(Mat<eT>& X, uword oi, uword oj, uword nrow, uword ncol, uword u_ind)$/;"	f	class:newarp::DoubleShiftQR
apply_YQ	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_meat.hpp	/^DoubleShiftQR<eT>::apply_YQ(Mat<eT>& Y)$/;"	f	class:newarp::DoubleShiftQR
apply_YQ	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_meat.hpp	/^UpperHessenbergQR<eT>::apply_YQ(Mat<eT>& Y)$/;"	f	class:newarp::UpperHessenbergQR
apply_alias	lib/armadillo-9.800.2/include/armadillo_bits/op_shift_meat.hpp	/^op_shift::apply_alias(Mat<eT>& X, const uword len, const uword neg, const uword dim)$/;"	f	class:op_shift
apply_blas_type	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemm.hpp	/^  apply_blas_type( Mat<eT>& C, const TA& A, const TB& B, const eT alpha = eT(1), const eT beta = eT(0) )$/;"	f	class:gemm
apply_blas_type	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^  apply_blas_type( eT* y, const TA& A, const eT* x, const eT alpha = eT(1), const eT beta = eT(0) )$/;"	f	class:gemv
apply_blas_type	lib/armadillo-9.800.2/include/armadillo_bits/mul_herk.hpp	/^  apply_blas_type( Mat<std::complex<T> >& C, const TA& A, const T alpha = T(1), const T beta = T(0) )$/;"	f	class:herk
apply_blas_type	lib/armadillo-9.800.2/include/armadillo_bits/mul_syrk.hpp	/^  apply_blas_type( Mat<eT>& C, const TA& A, const eT alpha = eT(1), const eT beta = eT(0) )$/;"	f	class:syrk
apply_common	lib/armadillo-9.800.2/include/armadillo_bits/op_logmat_meat.hpp	/^op_logmat_cx::apply_common(Mat< std::complex<T> >& out, Mat< std::complex<T> >& S, const uword n_iters)$/;"	f	class:op_logmat_cx
apply_diagmat	lib/armadillo-9.800.2/include/armadillo_bits/op_inv_meat.hpp	/^op_inv::apply_diagmat(Mat<typename T1::elem_type>& out, const T1& X)$/;"	f	class:op_inv
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/glue_mvnrnd_meat.hpp	/^glue_mvnrnd::apply_direct(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type,T1>& M, const Base<typename T1::elem_type,T2>& C, const uword N)$/;"	f	class:glue_mvnrnd
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyfit_meat.hpp	/^glue_polyfit::apply_direct(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type,T1>& X_expr, const Base<typename T1::elem_type, T2>& Y_expr, const uword N)$/;"	f	class:glue_polyfit
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_chol_meat.hpp	/^op_chol::apply_direct(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type,T1>& A_expr, const uword layout)$/;"	f	class:op_chol
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_clamp_meat.hpp	/^op_clamp::apply_direct(Cube<eT>& out, const Cube<eT>& X, const eT min_val, const eT max_val)$/;"	f	class:op_clamp
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_clamp_meat.hpp	/^op_clamp::apply_direct(Mat<eT>& out, const Mat<eT>& X, const eT min_val, const eT max_val)$/;"	f	class:op_clamp
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_expmat_meat.hpp	/^op_expmat::apply_direct(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type, T1>& expr)$/;"	f	class:op_expmat
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_expmat_meat.hpp	/^op_expmat_sym::apply_direct(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type,T1>& expr)$/;"	f	class:op_expmat_sym
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_flip_meat.hpp	/^op_fliplr::apply_direct(Mat<eT>& out, const Mat<eT>& X)$/;"	f	class:op_fliplr
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_flip_meat.hpp	/^op_flipud::apply_direct(Mat<eT>& out, const Mat<eT>& X)$/;"	f	class:op_flipud
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_logmat_meat.hpp	/^op_logmat::apply_direct(Mat< std::complex<typename T1::elem_type> >& out, const Base<typename T1::elem_type,T1>& expr, const uword n_iters)$/;"	f	class:op_logmat
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_logmat_meat.hpp	/^op_logmat::apply_direct(Mat< std::complex<typename T1::elem_type> >& out, const Op<T1,op_diagmat>& expr, const uword)$/;"	f	class:op_logmat
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_logmat_meat.hpp	/^op_logmat_cx::apply_direct(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type,T1>& expr, const uword n_iters)$/;"	f	class:op_logmat_cx
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_logmat_meat.hpp	/^op_logmat_cx::apply_direct(Mat<typename T1::elem_type>& out, const Op<T1,op_diagmat>& expr, const uword)$/;"	f	class:op_logmat_cx
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_logmat_meat.hpp	/^op_logmat_sympd::apply_direct(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type,T1>& expr)$/;"	f	class:op_logmat_sympd
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_orth_null_meat.hpp	/^op_null::apply_direct(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type,T1>& expr, typename T1::pod_type tol)$/;"	f	class:op_null
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_orth_null_meat.hpp	/^op_orth::apply_direct(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type,T1>& expr, typename T1::pod_type tol)$/;"	f	class:op_orth
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_pinv_meat.hpp	/^op_pinv::apply_direct(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type,T1>& expr, typename T1::pod_type tol, const bool use_divide_and_conquer)$/;"	f	class:op_pinv
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_roots_meat.hpp	/^op_roots::apply_direct(Mat< std::complex<typename T1::pod_type> >& out, const Base<typename T1::elem_type, T1>& X)$/;"	f	class:op_roots
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_shift_meat.hpp	/^op_shift::apply_direct(Mat<eT>& out, const Mat<eT>& X, const uword len, const uword neg, const uword dim)$/;"	f	class:op_shift
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_shuffle_meat.hpp	/^op_shuffle::apply_direct(Mat<eT>& out, const Mat<eT>& X, const uword dim)$/;"	f	class:op_shuffle
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_sqrtmat_meat.hpp	/^op_sqrtmat::apply_direct(Mat< std::complex<typename T1::elem_type> >& out, const Base<typename T1::elem_type,T1>& expr)$/;"	f	class:op_sqrtmat
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_sqrtmat_meat.hpp	/^op_sqrtmat::apply_direct(Mat< std::complex<typename T1::elem_type> >& out, const Op<T1,op_diagmat>& expr)$/;"	f	class:op_sqrtmat
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_sqrtmat_meat.hpp	/^op_sqrtmat_cx::apply_direct(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type,T1>& expr)$/;"	f	class:op_sqrtmat_cx
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_sqrtmat_meat.hpp	/^op_sqrtmat_cx::apply_direct(Mat<typename T1::elem_type>& out, const Op<T1,op_diagmat>& expr)$/;"	f	class:op_sqrtmat_cx
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_sqrtmat_meat.hpp	/^op_sqrtmat_sympd::apply_direct(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type,T1>& expr)$/;"	f	class:op_sqrtmat_sympd
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_meat.hpp	/^op_vectorise_col::apply_direct(Mat<typename T1::elem_type>& out, const T1& expr)$/;"	f	class:op_vectorise_col
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_meat.hpp	/^op_vectorise_row::apply_direct(Mat<typename T1::elem_type>& out, const T1& expr)$/;"	f	class:op_vectorise_row
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_wishrnd_meat.hpp	/^op_iwishrnd::apply_direct(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type,T1>& X, const typename T1::elem_type df, const uword mode)$/;"	f	class:op_iwishrnd
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/op_wishrnd_meat.hpp	/^op_wishrnd::apply_direct(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type,T1>& X, const typename T1::elem_type df, const uword mode)$/;"	f	class:op_wishrnd
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/spop_normalise_meat.hpp	/^spop_normalise::apply_direct(SpMat<eT>& out, const SpMat<eT>& X, const uword p, const uword dim)$/;"	f	class:spop_normalise
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/spop_vectorise_meat.hpp	/^spop_vectorise_col::apply_direct(SpMat<typename T1::elem_type>& out, const T1& expr)$/;"	f	class:spop_vectorise_col
apply_direct	lib/armadillo-9.800.2/include/armadillo_bits/spop_vectorise_meat.hpp	/^spop_vectorise_row::apply_direct(SpMat<typename T1::elem_type>& out, const T1& expr)$/;"	f	class:spop_vectorise_row
apply_direct_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_logmat_meat.hpp	/^op_logmat_cx::apply_direct_noalias(Mat<typename T1::elem_type>& out, const diagmat_proxy<T1>& P)$/;"	f	class:op_logmat_cx
apply_direct_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_sqrtmat_meat.hpp	/^op_sqrtmat_cx::apply_direct_noalias(Mat<typename T1::elem_type>& out, const diagmat_proxy<T1>& P)$/;"	f	class:op_sqrtmat_cx
apply_helper	lib/armadillo-9.800.2/include/armadillo_bits/op_all_meat.hpp	/^op_all::apply_helper(Mat<uword>& out, const Proxy<T1>& P, const uword dim)$/;"	f	class:op_all
apply_helper	lib/armadillo-9.800.2/include/armadillo_bits/op_any_meat.hpp	/^op_any::apply_helper(Mat<uword>& out, const Proxy<T1>& P, const uword dim)$/;"	f	class:op_any
apply_helper	lib/armadillo-9.800.2/include/armadillo_bits/op_find_unique_meat.hpp	/^op_find_unique::apply_helper(Mat<uword>& out, const Proxy<T1>& P, const bool ascending_indices)$/;"	f	class:op_find_unique
apply_helper	lib/armadillo-9.800.2/include/armadillo_bits/op_unique_meat.hpp	/^op_unique::apply_helper(Mat<typename T1::elem_type>& out, const Proxy<T1>& P, const bool P_is_row)$/;"	f	class:op_unique
apply_htrans	lib/armadillo-9.800.2/include/armadillo_bits/op_trimat_meat.hpp	/^op_trimat::apply_htrans$/;"	f	class:op_trimat
apply_inplace	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_meat.hpp	/^glue_times::apply_inplace(Mat<typename T1::elem_type>& out, const T1& X)$/;"	f	class:glue_times
apply_inplace_div	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_meat.hpp	/^GenCube<eT, gen_type>::apply_inplace_div(Cube<eT>& out) const$/;"	f	class:GenCube
apply_inplace_div	lib/armadillo-9.800.2/include/armadillo_bits/Gen_meat.hpp	/^Gen<T1, gen_type>::apply_inplace_div(Mat<typename T1::elem_type>& out) const$/;"	f	class:Gen
apply_inplace_div	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	/^eglue_core<eglue_type>::apply_inplace_div(Cube<typename T1::elem_type>& out, const eGlueCube<T1, T2, eglue_type>& x)$/;"	f	class:eglue_core
apply_inplace_div	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	/^eglue_core<eglue_type>::apply_inplace_div(Mat<typename T1::elem_type>& out, const eGlue<T1, T2, eglue_type>& x)$/;"	f	class:eglue_core
apply_inplace_div	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_type>::apply_inplace_div(Cube<typename T1::elem_type>& out, const eOpCube<T1, eop_type>& x)$/;"	f	class:eop_core
apply_inplace_div	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_type>::apply_inplace_div(Mat<typename T1::elem_type>& out, const eOp<T1, eop_type>& x)$/;"	f	class:eop_core
apply_inplace_minus	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_meat.hpp	/^GenCube<eT, gen_type>::apply_inplace_minus(Cube<eT>& out) const$/;"	f	class:GenCube
apply_inplace_minus	lib/armadillo-9.800.2/include/armadillo_bits/Gen_meat.hpp	/^Gen<T1, gen_type>::apply_inplace_minus(Mat<typename T1::elem_type>& out) const$/;"	f	class:Gen
apply_inplace_minus	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	/^eglue_core<eglue_type>::apply_inplace_minus(Cube<typename T1::elem_type>& out, const eGlueCube<T1, T2, eglue_type>& x)$/;"	f	class:eglue_core
apply_inplace_minus	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	/^eglue_core<eglue_type>::apply_inplace_minus(Mat<typename T1::elem_type>& out, const eGlue<T1, T2, eglue_type>& x)$/;"	f	class:eglue_core
apply_inplace_minus	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_type>::apply_inplace_minus(Cube<typename T1::elem_type>& out, const eOpCube<T1, eop_type>& x)$/;"	f	class:eop_core
apply_inplace_minus	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_type>::apply_inplace_minus(Mat<typename T1::elem_type>& out, const eOp<T1, eop_type>& x)$/;"	f	class:eop_core
apply_inplace_plus	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_meat.hpp	/^GenCube<eT, gen_type>::apply_inplace_plus(Cube<eT>& out) const$/;"	f	class:GenCube
apply_inplace_plus	lib/armadillo-9.800.2/include/armadillo_bits/Gen_meat.hpp	/^Gen<T1, gen_type>::apply_inplace_plus(Mat<typename T1::elem_type>& out) const$/;"	f	class:Gen
apply_inplace_plus	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	/^eglue_core<eglue_type>::apply_inplace_plus(Cube<typename T1::elem_type>& out, const eGlueCube<T1, T2, eglue_type>& x)$/;"	f	class:eglue_core
apply_inplace_plus	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	/^eglue_core<eglue_type>::apply_inplace_plus(Mat<typename T1::elem_type>& out, const eGlue<T1, T2, eglue_type>& x)$/;"	f	class:eglue_core
apply_inplace_plus	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_type>::apply_inplace_plus(Cube<typename T1::elem_type>& out, const eOpCube<T1, eop_type>& x)$/;"	f	class:eop_core
apply_inplace_plus	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_type>::apply_inplace_plus(Mat<typename T1::elem_type>& out, const eOp<T1, eop_type>& x)$/;"	f	class:eop_core
apply_inplace_plus	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_meat.hpp	/^glue_times::apply_inplace_plus(Mat<typename T1::elem_type>& out, const Glue<T1, T2, glue_times>& X, const sword sign)$/;"	f	class:glue_times
apply_inplace_schur	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_meat.hpp	/^GenCube<eT, gen_type>::apply_inplace_schur(Cube<eT>& out) const$/;"	f	class:GenCube
apply_inplace_schur	lib/armadillo-9.800.2/include/armadillo_bits/Gen_meat.hpp	/^Gen<T1, gen_type>::apply_inplace_schur(Mat<typename T1::elem_type>& out) const$/;"	f	class:Gen
apply_inplace_schur	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	/^eglue_core<eglue_type>::apply_inplace_schur(Cube<typename T1::elem_type>& out, const eGlueCube<T1, T2, eglue_type>& x)$/;"	f	class:eglue_core
apply_inplace_schur	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	/^eglue_core<eglue_type>::apply_inplace_schur(Mat<typename T1::elem_type>& out, const eGlue<T1, T2, eglue_type>& x)$/;"	f	class:eglue_core
apply_inplace_schur	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_type>::apply_inplace_schur(Cube<typename T1::elem_type>& out, const eOpCube<T1, eop_type>& x)$/;"	f	class:eop_core
apply_inplace_schur	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_type>::apply_inplace_schur(Mat<typename T1::elem_type>& out, const eOp<T1, eop_type>& x)$/;"	f	class:eop_core
apply_inside_div	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_minus_meat.hpp	/^op_sp_minus_post::apply_inside_div(SpMat<eT>& out, const T2& x, const SpToDOp<T3, op_sp_minus_post>& y)$/;"	f	class:op_sp_minus_post
apply_inside_div	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_minus_meat.hpp	/^op_sp_minus_pre::apply_inside_div(SpMat<eT>& out, const T2& x, const SpToDOp<T3, op_sp_minus_pre>& y)$/;"	f	class:op_sp_minus_pre
apply_inside_div	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_plus_meat.hpp	/^op_sp_plus::apply_inside_div(SpMat<eT>& out, const T2& x, const SpToDOp<T3, op_sp_plus>& y)$/;"	f	class:op_sp_plus
apply_inside_schur	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_minus_meat.hpp	/^op_sp_minus_post::apply_inside_schur(SpMat<eT>& out, const T2& x, const SpToDOp<T3, op_sp_minus_post>& y)$/;"	f	class:op_sp_minus_post
apply_inside_schur	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_minus_meat.hpp	/^op_sp_minus_pre::apply_inside_schur(SpMat<eT>& out, const T2& x, const SpToDOp<T3, op_sp_minus_pre>& y)$/;"	f	class:op_sp_minus_pre
apply_inside_schur	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_plus_meat.hpp	/^op_sp_plus::apply_inside_schur(SpMat<eT>& out, const T2& x, const SpToDOp<T3, op_sp_plus>& y)$/;"	f	class:op_sp_plus
apply_mat	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans::apply_mat(Mat<eT>& out, const Mat<eT>& A, const typename arma_cx_only<eT>::result* junk)$/;"	f	class:op_htrans
apply_mat	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans::apply_mat(Mat<eT>& out, const Mat<eT>& A, const typename arma_not_cx<eT>::result* junk)$/;"	f	class:op_htrans
apply_mat	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_meat.hpp	/^op_strans::apply_mat(Mat<eT>& out, const TA& A)$/;"	f	class:op_strans
apply_mat_inplace	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans::apply_mat_inplace(Mat<eT>& out, const typename arma_cx_only<eT>::result* junk)$/;"	f	class:op_htrans
apply_mat_inplace	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans::apply_mat_inplace(Mat<eT>& out, const typename arma_not_cx<eT>::result* junk)$/;"	f	class:op_htrans
apply_mat_inplace	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_meat.hpp	/^op_strans::apply_mat_inplace(Mat<eT>& out)$/;"	f	class:op_strans
apply_mat_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans::apply_mat_noalias(Mat<eT>& out, const Mat<eT>& A, const typename arma_cx_only<eT>::result* junk)$/;"	f	class:op_htrans
apply_mat_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans::apply_mat_noalias(Mat<eT>& out, const Mat<eT>& A, const typename arma_not_cx<eT>::result* junk)$/;"	f	class:op_htrans
apply_mat_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_meat.hpp	/^op_strans::apply_mat_noalias(Mat<eT>& out, const TA& A)$/;"	f	class:op_strans
apply_mat_noalias_large	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans::apply_mat_noalias_large(Mat< std::complex<T> >& out, const Mat< std::complex<T> >& A)$/;"	f	class:op_htrans
apply_mat_noalias_large	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_meat.hpp	/^op_strans::apply_mat_noalias_large(Mat<eT>& out, const Mat<eT>& A)$/;"	f	class:op_strans
apply_mat_noalias_tinysq	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_meat.hpp	/^op_strans::apply_mat_noalias_tinysq(Mat<eT>& out, const TA& A)$/;"	f	class:op_strans
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/glue_affmul_meat.hpp	/^glue_affmul::apply_noalias(Mat<typename T1::elem_type>& out, const T1& A, const T2& B)$/;"	f	class:glue_affmul
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/glue_atan2_meat.hpp	/^glue_atan2::apply_noalias(Cube<typename T1::elem_type>& out, const ProxyCube<T1>& P1, const ProxyCube<T2>& P2)$/;"	f	class:glue_atan2
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/glue_atan2_meat.hpp	/^glue_atan2::apply_noalias(Mat<typename T1::elem_type>& out, const Proxy<T1>& P1, const Proxy<T2>& P2)$/;"	f	class:glue_atan2
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/glue_hist_meat.hpp	/^glue_hist::apply_noalias(Mat<uword>& out, const Mat<eT>& X, const Mat<eT>& C, const uword dim)$/;"	f	class:glue_hist
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/glue_histc_meat.hpp	/^glue_histc::apply_noalias(Mat<uword>& C, const Mat<eT>& A, const Mat<eT>& B, const uword dim)$/;"	f	class:glue_histc
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/glue_hypot_meat.hpp	/^glue_hypot::apply_noalias(Cube<typename T1::elem_type>& out, const ProxyCube<T1>& P1, const ProxyCube<T2>& P2)$/;"	f	class:glue_hypot
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/glue_hypot_meat.hpp	/^glue_hypot::apply_noalias(Mat<typename T1::elem_type>& out, const Proxy<T1>& P1, const Proxy<T2>& P2)$/;"	f	class:glue_hypot
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_meat.hpp	/^glue_join_cols::apply_noalias(Mat<typename T1::elem_type>& out, const Proxy<T1>& A, const Proxy<T2>& B)$/;"	f	class:glue_join_cols
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_meat.hpp	/^glue_join_rows::apply_noalias(Mat<typename T1::elem_type>& out, const Proxy<T1>& A, const Proxy<T2>& B)$/;"	f	class:glue_join_rows
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/glue_mvnrnd_meat.hpp	/^glue_mvnrnd::apply_noalias(Mat<eT>& out, const Mat<eT>& M, const Mat<eT>& C, const uword N)$/;"	f	class:glue_mvnrnd
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyfit_meat.hpp	/^glue_polyfit::apply_noalias(Mat<eT>& out, const Col<eT>& X, const Col<eT>& Y, const uword N)$/;"	f	class:glue_polyfit
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyval_meat.hpp	/^glue_polyval::apply_noalias(Mat<eT>& out, const Mat<eT>& P, const Mat<eT>& X)$/;"	f	class:glue_polyval
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/glue_trapz_meat.hpp	/^glue_trapz::apply_noalias(Mat<eT>& out, const Mat<eT>& X, const Mat<eT>& Y, const uword dim)$/;"	f	class:glue_trapz
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/glue_trapz_meat.hpp	/^op_trapz::apply_noalias(Mat<eT>& out, const Mat<eT>& Y, const uword dim)$/;"	f	class:op_trapz
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_chi2rnd_meat.hpp	/^op_chi2rnd::apply_noalias(Mat<typename T1::elem_type>& out, const Proxy<T1>& P)$/;"	f	class:op_chi2rnd
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_cumprod_meat.hpp	/^op_cumprod::apply_noalias(Mat<eT>& out, const Mat<eT>& X, const uword dim)$/;"	f	class:op_cumprod
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_cumsum_meat.hpp	/^op_cumsum::apply_noalias(Mat<eT>& out, const Mat<eT>& X, const uword dim)$/;"	f	class:op_cumsum
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_diff_meat.hpp	/^op_diff::apply_noalias(Mat<eT>& out, const Mat<eT>& X, const uword k, const uword dim)$/;"	f	class:op_diff
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_fft_meat.hpp	/^op_fft_cx::apply_noalias(Mat<typename T1::elem_type>& out, const Proxy<T1>& P, const uword a, const uword b)$/;"	f	class:op_fft_cx
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_hist_meat.hpp	/^op_hist::apply_noalias(Mat<uword>& out, const Mat<eT>& A, const uword n_bins, const uword dim)$/;"	f	class:op_hist
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans2::apply_noalias(Mat<eT>& out, const Mat<eT>& A, const eT val)$/;"	f	class:op_htrans2
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_index_max_meat.hpp	/^op_index_max::apply_noalias(Cube<uword>& out, const Cube<eT>& X, const uword dim, const typename arma_cx_only<eT>::result* junk)$/;"	f	class:op_index_max
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_index_max_meat.hpp	/^op_index_max::apply_noalias(Cube<uword>& out, const Cube<eT>& X, const uword dim, const typename arma_not_cx<eT>::result* junk)$/;"	f	class:op_index_max
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_index_max_meat.hpp	/^op_index_max::apply_noalias(Mat<uword>& out, const Mat<eT>& X, const uword dim)$/;"	f	class:op_index_max
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_index_min_meat.hpp	/^op_index_min::apply_noalias(Cube<uword>& out, const Cube<eT>& X, const uword dim, const typename arma_cx_only<eT>::result* junk)$/;"	f	class:op_index_min
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_index_min_meat.hpp	/^op_index_min::apply_noalias(Cube<uword>& out, const Cube<eT>& X, const uword dim, const typename arma_not_cx<eT>::result* junk)$/;"	f	class:op_index_min
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_index_min_meat.hpp	/^op_index_min::apply_noalias(Mat<uword>& out, const Mat<eT>& X, const uword dim)$/;"	f	class:op_index_min
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_inv_meat.hpp	/^op_inv::apply_noalias(Mat<eT>& out, const Mat<eT>& A)$/;"	f	class:op_inv
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::apply_noalias(Cube<eT>& out, const Cube<eT>& X, const uword dim, const typename arma_cx_only<eT>::result* junk)$/;"	f	class:op_max
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::apply_noalias(Cube<eT>& out, const Cube<eT>& X, const uword dim, const typename arma_not_cx<eT>::result* junk)$/;"	f	class:op_max
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::apply_noalias(Mat<eT>& out, const Mat<eT>& X, const uword dim, const typename arma_cx_only<eT>::result* junk)$/;"	f	class:op_max
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::apply_noalias(Mat<eT>& out, const Mat<eT>& X, const uword dim, const typename arma_not_cx<eT>::result* junk)$/;"	f	class:op_max
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::apply_noalias(Cube<typename T1::elem_type>& out, const ProxyCube<T1>& P, const uword dim)$/;"	f	class:op_mean
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::apply_noalias(Mat<typename T1::elem_type>& out, const Proxy<T1>& P, const uword dim)$/;"	f	class:op_mean
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::apply_noalias(Cube<eT>& out, const Cube<eT>& X, const uword dim, const typename arma_cx_only<eT>::result* junk)$/;"	f	class:op_min
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::apply_noalias(Cube<eT>& out, const Cube<eT>& X, const uword dim, const typename arma_not_cx<eT>::result* junk)$/;"	f	class:op_min
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::apply_noalias(Mat<eT>& out, const Mat<eT>& X, const uword dim, const typename arma_cx_only<eT>::result* junk)$/;"	f	class:op_min
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::apply_noalias(Mat<eT>& out, const Mat<eT>& X, const uword dim, const typename arma_not_cx<eT>::result* junk)$/;"	f	class:op_min
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_nonzeros_meat.hpp	/^op_nonzeros::apply_noalias(Mat<typename T1::elem_type>& out, const Proxy<T1>& P)$/;"	f	class:op_nonzeros
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_prod_meat.hpp	/^op_prod::apply_noalias(Mat<eT>& out, const Mat<eT>& X, const uword dim)$/;"	f	class:op_prod
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_range_meat.hpp	/^op_range::apply_noalias(Mat<eT>& out, const Mat<eT>& X, const uword dim)$/;"	f	class:op_range
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_repelem_meat.hpp	/^op_repelem::apply_noalias(Mat<typename obj::elem_type>& out, const obj& X, const uword copies_per_row, const uword copies_per_col)$/;"	f	class:op_repelem
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_repmat_meat.hpp	/^op_repmat::apply_noalias(Mat<typename obj::elem_type>& out, const obj& X, const uword copies_per_row, const uword copies_per_col)$/;"	f	class:op_repmat
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_roots_meat.hpp	/^op_roots::apply_noalias(Mat< std::complex<typename get_pod_type<eT>::result> >& out, const Mat<eT>& X)$/;"	f	class:op_roots
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_shift_meat.hpp	/^op_shift::apply_noalias(Mat<eT>& out, const Mat<eT>& X, const uword len, const uword neg, const uword dim)$/;"	f	class:op_shift
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_meat.hpp	/^op_sort_index::apply_noalias(Mat<uword>& out, const Proxy<T1>& P, const uword sort_type)$/;"	f	class:op_sort_index
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_meat.hpp	/^op_stable_sort_index::apply_noalias(Mat<uword>& out, const Proxy<T1>& P, const uword sort_type)$/;"	f	class:op_stable_sort_index
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_meat.hpp	/^op_sort::apply_noalias(Mat<eT>& out, const Mat<eT>& X, const uword sort_type, const uword dim)$/;"	f	class:op_sort
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_meat.hpp	/^op_strans2::apply_noalias(Mat<eT>& out, const TA& A, const eT val)$/;"	f	class:op_strans2
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_meat.hpp	/^op_strans_cube::apply_noalias(Cube<eT>& out, const Cube<eT>& X)$/;"	f	class:op_strans_cube
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_sum_meat.hpp	/^op_sum::apply_noalias(Cube<typename T1::elem_type>& out, const ProxyCube<T1>& P, const uword dim)$/;"	f	class:op_sum
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_sum_meat.hpp	/^op_sum::apply_noalias(Mat<typename T1::elem_type>& out, const Proxy<T1>& P, const uword dim)$/;"	f	class:op_sum
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_meat.hpp	/^spglue_join_cols::apply_noalias(SpMat<eT>& out, const SpMat<eT>& A, const SpMat<eT>& B)$/;"	f	class:spglue_join_cols
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_meat.hpp	/^spglue_join_rows::apply_noalias(SpMat<eT>& out, const SpMat<eT>& A, const SpMat<eT>& B)$/;"	f	class:spglue_join_rows
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_kron_meat.hpp	/^spglue_kron::apply_noalias(SpMat<eT>& out, const SpMat<eT>& A, const SpMat<eT>& B)$/;"	f	class:spglue_kron
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_max_meat.hpp	/^spglue_max::apply_noalias(SpMat<eT>& out, const SpMat<eT>& A, const SpMat<eT>& B)$/;"	f	class:spglue_max
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_max_meat.hpp	/^spglue_max::apply_noalias(SpMat<eT>& out, const SpProxy<T1>& pa, const SpProxy<T2>& pb)$/;"	f	class:spglue_max
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_min_meat.hpp	/^spglue_min::apply_noalias(SpMat<eT>& out, const SpMat<eT>& A, const SpMat<eT>& B)$/;"	f	class:spglue_min
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_min_meat.hpp	/^spglue_min::apply_noalias(SpMat<eT>& out, const SpProxy<T1>& pa, const SpProxy<T2>& pb)$/;"	f	class:spglue_min
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_minus_meat.hpp	/^spglue_minus::apply_noalias(SpMat<eT>& out, const SpMat<eT>& A, const SpMat<eT>& B)$/;"	f	class:spglue_minus
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_minus_meat.hpp	/^spglue_minus::apply_noalias(SpMat<eT>& out, const SpProxy<T1>& pa, const SpProxy<T2>& pb)$/;"	f	class:spglue_minus
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_plus_meat.hpp	/^spglue_plus::apply_noalias(SpMat<eT>& out, const SpMat<eT>& A, const SpMat<eT>& B)$/;"	f	class:spglue_plus
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_plus_meat.hpp	/^spglue_plus::apply_noalias(SpMat<eT>& out, const SpProxy<T1>& pa, const SpProxy<T2>& pb)$/;"	f	class:spglue_plus
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_relational_meat.hpp	/^spglue_rel_gt::apply_noalias(SpMat<uword>& out, const SpProxy<T1>& PA, const SpProxy<T2>& PB)$/;"	f	class:spglue_rel_gt
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_relational_meat.hpp	/^spglue_rel_lt::apply_noalias(SpMat<uword>& out, const SpProxy<T1>& PA, const SpProxy<T2>& PB)$/;"	f	class:spglue_rel_lt
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_schur_meat.hpp	/^spglue_schur::apply_noalias(SpMat<eT>& out, const SpMat<eT>& A, const SpMat<eT>& B)$/;"	f	class:spglue_schur
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_schur_meat.hpp	/^spglue_schur::apply_noalias(SpMat<eT>& out, const SpProxy<T1>& pa, const SpProxy<T2>& pb)$/;"	f	class:spglue_schur
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_meat.hpp	/^spglue_times::apply_noalias(SpMat<eT>& c, const SpMat<eT>& x, const SpMat<eT>& y)$/;"	f	class:spglue_times
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spop_diagmat_meat.hpp	/^spop_diagmat2::apply_noalias(SpMat<eT>& out, const SpMat<eT>& X, const uword row_offset, const uword col_offset)$/;"	f	class:spop_diagmat2
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spop_diagmat_meat.hpp	/^spop_diagmat::apply_noalias(SpMat<typename T1::elem_type>& out, const SpBase<typename T1::elem_type, T1>& expr)$/;"	f	class:spop_diagmat
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spop_diagmat_meat.hpp	/^spop_diagmat::apply_noalias(SpMat<typename T1::elem_type>& out, const SpGlue<T1,T2,spglue_minus>& expr)$/;"	f	class:spop_diagmat
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spop_diagmat_meat.hpp	/^spop_diagmat::apply_noalias(SpMat<typename T1::elem_type>& out, const SpGlue<T1,T2,spglue_plus>& expr)$/;"	f	class:spop_diagmat
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spop_diagmat_meat.hpp	/^spop_diagmat::apply_noalias(SpMat<typename T1::elem_type>& out, const SpGlue<T1,T2,spglue_schur>& expr)$/;"	f	class:spop_diagmat
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spop_diagmat_meat.hpp	/^spop_diagmat::apply_noalias(SpMat<typename T1::elem_type>& out, const SpGlue<T1,T2,spglue_times>& expr)$/;"	f	class:spop_diagmat
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spop_repmat_meat.hpp	/^spop_repmat::apply_noalias(SpMat<eT>& out, const uword A_n_rows, const uword A_n_cols, const SpMat<eT>& B)$/;"	f	class:spop_repmat
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spop_strans_meat.hpp	/^spop_strans::apply_noalias(SpMat<eT>& B, const SpMat<eT>& A)$/;"	f	class:spop_strans
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spop_trimat_meat.hpp	/^spop_trimat::apply_noalias(SpMat<typename T1::elem_type>& out, const SpProxy<T1>& P, const bool upper)$/;"	f	class:spop_trimat
apply_noalias	lib/armadillo-9.800.2/include/armadillo_bits/spop_var_meat.hpp	/^spop_var::apply_noalias$/;"	f	class:spop_var
apply_noalias_fast	lib/armadillo-9.800.2/include/armadillo_bits/spop_mean_meat.hpp	/^spop_mean::apply_noalias_fast$/;"	f	class:spop_mean
apply_noalias_generic	lib/armadillo-9.800.2/include/armadillo_bits/glue_affmul_meat.hpp	/^glue_affmul::apply_noalias_generic(Mat<typename T1::elem_type>& out, const T1& A, const T2& B)$/;"	f	class:glue_affmul
apply_noalias_mode1	lib/armadillo-9.800.2/include/armadillo_bits/op_wishrnd_meat.hpp	/^op_iwishrnd::apply_noalias_mode1(Mat<eT>& out, const Mat<eT>& T, const eT df)$/;"	f	class:op_iwishrnd
apply_noalias_mode1	lib/armadillo-9.800.2/include/armadillo_bits/op_wishrnd_meat.hpp	/^op_wishrnd::apply_noalias_mode1(Mat<eT>& out, const Mat<eT>& S, const eT df)$/;"	f	class:op_wishrnd
apply_noalias_mode2	lib/armadillo-9.800.2/include/armadillo_bits/op_wishrnd_meat.hpp	/^op_iwishrnd::apply_noalias_mode2(Mat<eT>& out, const Mat<eT>& Dinv, const eT df)$/;"	f	class:op_iwishrnd
apply_noalias_mode2	lib/armadillo-9.800.2/include/armadillo_bits/op_wishrnd_meat.hpp	/^op_wishrnd::apply_noalias_mode2(Mat<eT>& out, const Mat<eT>& D, const eT df)$/;"	f	class:op_wishrnd
apply_noalias_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::apply_noalias_proxy(Cube<typename T1::elem_type>& out, const ProxyCube<T1>& P, const uword dim)$/;"	f	class:op_mean
apply_noalias_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::apply_noalias_proxy(Mat<typename T1::elem_type>& out, const Proxy<T1>& P, const uword dim)$/;"	f	class:op_mean
apply_noalias_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_sum_meat.hpp	/^op_sum::apply_noalias_proxy(Cube<typename T1::elem_type>& out, const ProxyCube<T1>& P, const uword dim)$/;"	f	class:op_sum
apply_noalias_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_sum_meat.hpp	/^op_sum::apply_noalias_proxy(Mat<typename T1::elem_type>& out, const Proxy<T1>& P, const uword dim)$/;"	f	class:op_sum
apply_noalias_proxy_mp	lib/armadillo-9.800.2/include/armadillo_bits/op_sum_meat.hpp	/^op_sum::apply_noalias_proxy_mp(Cube<typename T1::elem_type>& out, const ProxyCube<T1>& P, const uword dim)$/;"	f	class:op_sum
apply_noalias_proxy_mp	lib/armadillo-9.800.2/include/armadillo_bits/op_sum_meat.hpp	/^op_sum::apply_noalias_proxy_mp(Mat<typename T1::elem_type>& out, const Proxy<T1>& P, const uword dim)$/;"	f	class:op_sum
apply_noalias_rectangle	lib/armadillo-9.800.2/include/armadillo_bits/glue_affmul_meat.hpp	/^glue_affmul::apply_noalias_rectangle(Mat<typename T1::elem_type>& out, const T1& A, const T2& B)$/;"	f	class:glue_affmul
apply_noalias_slow	lib/armadillo-9.800.2/include/armadillo_bits/spop_mean_meat.hpp	/^spop_mean::apply_noalias_slow$/;"	f	class:spop_mean
apply_noalias_square	lib/armadillo-9.800.2/include/armadillo_bits/glue_affmul_meat.hpp	/^glue_affmul::apply_noalias_square(Mat<typename T1::elem_type>& out, const T1& A, const T2& B)$/;"	f	class:glue_affmul
apply_noalias_tinysq	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_meat.hpp	/^op_strans2::apply_noalias_tinysq(Mat<eT>& out, const TA& A, const eT val)$/;"	f	class:op_strans2
apply_noalias_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::apply_noalias_unwrap(Cube<typename T1::elem_type>& out, const ProxyCube<T1>& P, const uword dim)$/;"	f	class:op_mean
apply_noalias_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::apply_noalias_unwrap(Mat<typename T1::elem_type>& out, const Proxy<T1>& P, const uword dim)$/;"	f	class:op_mean
apply_noalias_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/op_sum_meat.hpp	/^op_sum::apply_noalias_unwrap(Cube<typename T1::elem_type>& out, const ProxyCube<T1>& P, const uword dim)$/;"	f	class:op_sum
apply_noalias_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/op_sum_meat.hpp	/^op_sum::apply_noalias_unwrap(Mat<typename T1::elem_type>& out, const Proxy<T1>& P, const uword dim)$/;"	f	class:op_sum
apply_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_diagvec_meat.hpp	/^op_diagvec::apply_proxy(Mat<typename T1::elem_type>& out, const Proxy<T1>& P, const uword row_offset, const uword col_offset, const uword len)$/;"	f	class:op_diagvec
apply_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_meat.hpp	/^op_cdot::apply_proxy(const T1& X, const T2& Y)$/;"	f	class:op_cdot
apply_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_meat.hpp	/^op_dot::apply_proxy(const Proxy<T1>& PA, const Proxy<T2>& PB)$/;"	f	class:op_dot
apply_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans2::apply_proxy(Mat<typename T1::elem_type>& out, const T1& X, const typename T1::elem_type val)$/;"	f	class:op_htrans2
apply_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans::apply_proxy(Mat<typename T1::elem_type>& out, const T1& X)$/;"	f	class:op_htrans
apply_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_reshape_meat.hpp	/^op_reshape::apply_proxy(Mat<typename T1::elem_type>& out, const Proxy<T1>& P, const uword in_n_rows, const uword in_n_cols)$/;"	f	class:op_reshape
apply_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_meat.hpp	/^op_strans2::apply_proxy(Mat<typename T1::elem_type>& out, const T1& X, const typename T1::elem_type val)$/;"	f	class:op_strans2
apply_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_meat.hpp	/^op_strans::apply_proxy(Mat<typename T1::elem_type>& out, const T1& X)$/;"	f	class:op_strans
apply_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_meat.hpp	/^op_vectorise_col::apply_proxy(Mat<typename T1::elem_type>& out, const Proxy<T1>& P)$/;"	f	class:op_vectorise_col
apply_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_meat.hpp	/^op_vectorise_cube_col::apply_proxy(Mat<typename T1::elem_type>& out, const ProxyCube<T1>& P)$/;"	f	class:op_vectorise_cube_col
apply_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_meat.hpp	/^op_vectorise_row::apply_proxy(Mat<typename T1::elem_type>& out, const Proxy<T1>& P)$/;"	f	class:op_vectorise_row
apply_proxy	lib/armadillo-9.800.2/include/armadillo_bits/spop_max_meat.hpp	/^spop_max::apply_proxy$/;"	f	class:spop_max
apply_proxy	lib/armadillo-9.800.2/include/armadillo_bits/spop_min_meat.hpp	/^spop_min::apply_proxy$/;"	f	class:spop_min
apply_proxy	lib/armadillo-9.800.2/include/armadillo_bits/spop_reverse_meat.hpp	/^spop_reverse::apply_proxy(SpMat<typename T1::elem_type>& out, const T1& X, const uword dim)$/;"	f	class:spop_reverse
apply_proxy_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_clamp_meat.hpp	/^op_clamp::apply_proxy_noalias(Cube<typename T1::elem_type>& out, const ProxyCube<T1>& P, const typename T1::elem_type min_val, const typename T1::elem_type max_val)$/;"	f	class:op_clamp
apply_proxy_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_clamp_meat.hpp	/^op_clamp::apply_proxy_noalias(Mat<typename T1::elem_type>& out, const Proxy<T1>& P, const typename T1::elem_type min_val, const typename T1::elem_type max_val)$/;"	f	class:op_clamp
apply_proxy_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_flip_meat.hpp	/^op_fliplr::apply_proxy_noalias(Mat<typename T1::elem_type>& out, const Proxy<T1>& P)$/;"	f	class:op_fliplr
apply_proxy_noalias	lib/armadillo-9.800.2/include/armadillo_bits/op_flip_meat.hpp	/^op_flipud::apply_proxy_noalias(Mat<typename T1::elem_type>& out, const Proxy<T1>& P)$/;"	f	class:op_flipud
apply_spmat	lib/armadillo-9.800.2/include/armadillo_bits/spop_reverse_meat.hpp	/^spop_reverse::apply_spmat(SpMat<eT>& out, const SpMat<eT>& X, const uword dim)$/;"	f	class:spop_reverse
apply_subview	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_meat.hpp	/^op_vectorise_col::apply_subview(Mat<eT>& out, const subview<eT>& sv)$/;"	f	class:op_vectorise_col
apply_subview	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_meat.hpp	/^op_vectorise_cube_col::apply_subview(Mat<eT>& out, const subview_cube<eT>& sv)$/;"	f	class:op_vectorise_cube_col
apply_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/op_diagvec_meat.hpp	/^op_diagvec::apply_unwrap(Mat<typename T1::elem_type>& out, const T1& X, const uword row_offset, const uword col_offset, const uword len)$/;"	f	class:op_diagvec
apply_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_meat.hpp	/^op_cdot::apply_unwrap(const T1& X, const T2& Y)$/;"	f	class:op_cdot
apply_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/op_reshape_meat.hpp	/^op_reshape::apply_unwrap(Mat<eT>& out, const Mat<eT>& A, const uword in_n_rows, const uword in_n_cols, const uword in_dim)$/;"	f	class:op_reshape
approx0	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  const eT                approx0;   \/\/ a number that is approximately zero$/;"	m	class:newarp::GenEigsSolver
approx0	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  const eT          approx0;   \/\/ a number that is approximately zero$/;"	m	class:newarp::SymEigsSolver
approx_equal	lib/armadillo-9.800.2/docs.html	/^<a name="approx_equal"><\/a>$/;"	a
approx_equal	lib/armadillo-9.800.2/include/armadillo_bits/fn_approx_equal.hpp	/^approx_equal(const Base<typename T1::elem_type,T1>& A, const Base<typename T1::elem_type,T2>& B, const char* method, const typename T1::pod_type abs_tol, const typename T1::pod_type rel_tol)$/;"	f
approx_equal	lib/armadillo-9.800.2/include/armadillo_bits/fn_approx_equal.hpp	/^approx_equal(const Base<typename T1::elem_type,T1>& A, const Base<typename T1::elem_type,T2>& B, const char* method, const typename T1::pod_type tol)$/;"	f
approx_equal	lib/armadillo-9.800.2/include/armadillo_bits/fn_approx_equal.hpp	/^approx_equal(const BaseCube<typename T1::elem_type,T1>& A, const BaseCube<typename T1::elem_type,T2>& B, const char* method, const typename T1::pod_type abs_tol, const typename T1::pod_type rel_tol)$/;"	f
approx_equal	lib/armadillo-9.800.2/include/armadillo_bits/fn_approx_equal.hpp	/^approx_equal(const BaseCube<typename T1::elem_type,T1>& A, const BaseCube<typename T1::elem_type,T2>& B, const char* method, const typename T1::pod_type tol)$/;"	f
approx_equal	lib/armadillo-9.800.2/include/armadillo_bits/fn_approx_equal.hpp	/^approx_equal(const SpBase<typename T1::elem_type,T1>& A, const SpBase<typename T1::elem_type,T2>& B, const char* method, const typename T1::pod_type abs_tol, const typename T1::pod_type rel_tol)$/;"	f
approx_equal	lib/armadillo-9.800.2/include/armadillo_bits/fn_approx_equal.hpp	/^approx_equal(const SpBase<typename T1::elem_type,T1>& A, const SpBase<typename T1::elem_type,T2>& B, const char* method, const typename T1::pod_type tol)$/;"	f
approx_exp	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^template<typename T1> void approx_exp(const T1&) { arma_stop_logic_error("unimplemented"); }$/;"	f
approx_log	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^template<typename T1> void approx_log(const T1&) { arma_stop_logic_error("unimplemented"); }$/;"	f
arcSafeRelease	include/catch.hpp	/^inline void arcSafeRelease( NSObject* ){}$/;"	f
arcSafeRelease	include/catch.hpp	/^inline void arcSafeRelease( NSObject* obj ) {$/;"	f
arcSafeRelease	lib/armadillo-9.800.2/tests/catch.hpp	/^inline void arcSafeRelease( NSObject* ){}$/;"	f
arcSafeRelease	lib/armadillo-9.800.2/tests/catch.hpp	/^inline void arcSafeRelease( NSObject* obj ) {$/;"	f
arg	lib/armadillo-9.800.2/docs.html	/^<a name="arg"><\/a>$/;"	a
arg	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^arg(const BaseCube< std::complex<typename T1::pod_type>,T1>& X, const typename arma_cx_only<typename T1::elem_type>::result* junk = 0)$/;"	f
arg	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^arg(const BaseCube<typename T1::elem_type,T1>& X, const typename arma_not_cx<typename T1::elem_type>::result* junk = 0)$/;"	f
arg	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^arg(const SpBase< std::complex<typename T1::pod_type>, T1>& X, const typename arma_cx_only<typename T1::elem_type>::result* junk = 0)$/;"	f
arg	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^arg(const SpBase<typename T1::elem_type,T1>& X, const typename arma_not_cx<typename T1::elem_type>::result* junk = 0)$/;"	f
arg	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^arg(const T1& X)$/;"	f
arma	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^namespace arma$/;"	n
arma	lib/armadillo-9.800.2/src/wrapper1.cpp	/^  namespace arma$/;"	n	file:
arma	lib/armadillo-9.800.2/src/wrapper1.cpp	/^namespace arma$/;"	n	file:
arma	lib/armadillo-9.800.2/src/wrapper2.cpp	/^namespace arma$/;"	n	file:
armaCreateMxMatrix	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaCreateMxMatrix(const mwSize n_rows, const mwSize n_cols, const mwSize n_slices, const mxClassID mx_type = mxDOUBLE_CLASS, const mxComplexity mx_complexity = mxREAL)$/;"	f
armaCreateMxMatrix	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaCreateMxMatrix(const mwSize n_rows, const mwSize n_cols, const mxClassID mx_type = mxDOUBLE_CLASS, const mxComplexity mx_complexity = mxREAL)$/;"	f
armaCreateMxSparseMatrix	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaCreateMxSparseMatrix(const mwSize n_rows,const mwSize n_cols,const mwSize n_nonzero,const mxComplexity mx_complexity = mxREAL)$/;"	f
armaGetCubeCx	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetCubeCx(const mxArray *matlabMatrix, bool copy_aux_mem = false, bool strict = true) $/;"	f
armaGetCubeData	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetCubeData(const mxArray *matlabMatrix, bool copy_aux_mem = false, bool strict = true)$/;"	f
armaGetCubeImagData	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetCubeImagData(const mxArray *matlabMatrix, bool copy_aux_mem = false, bool strict = true)$/;"	f
armaGetCubePi	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetCubePi(const mxArray *matlabMatrix, bool copy_aux_mem = false, bool strict = true)$/;"	f
armaGetCubePr	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetCubePr(const mxArray *matlabMatrix, bool copy_aux_mem = false, bool strict = true)$/;"	f
armaGetCx	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetCx(const mxArray *matlabMatrix, bool copy_aux_mem = false, bool strict = true) $/;"	f
armaGetData	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetData(const mxArray *matlabMatrix, bool copy_aux_mem = false, bool strict = true)$/;"	f
armaGetDouble	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetDouble(const mxArray *matlabScalar) $/;"	f
armaGetImagData	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetImagData(const mxArray *matlabMatrix, bool copy_aux_mem = false, bool strict = true)$/;"	f
armaGetPi	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetPi(const mxArray *matlabMatrix, bool copy_aux_mem = false, bool strict = true) $/;"	f
armaGetPr	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetPr(const mxArray *matlabMatrix, bool copy_aux_mem = false, bool strict = true)$/;"	f
armaGetScalar	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetScalar(const mxArray *matlabScalar)$/;"	f
armaGetSparseData	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetSparseData(const mxArray *matlabMatrix, bool sort_locations = false)$/;"	f
armaGetSparseImagData	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetSparseImagData(const mxArray *matlabMatrix, bool sort_locations = false)$/;"	f
armaGetSparseImagMatrix	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetSparseImagMatrix(const mxArray *matlabMatrix, bool sort_locations = false)$/;"	f
armaGetSparseMatrix	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaGetSparseMatrix(const mxArray *matlabMatrix, bool sort_locations = false)$/;"	f
armaReadCubeFromFile	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaReadCubeFromFile(const char *filename)$/;"	f
armaReadCxCubeFromFile	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaReadCxCubeFromFile(const char *filename)$/;"	f
armaReadCxMatFromFile	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaReadCxMatFromFile(const char *filename)$/;"	f
armaReadMatFromFile	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaReadMatFromFile(const char *filename)$/;"	f
armaSetCubeCx	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaSetCubeCx(mxArray *matlabMatrix, const cx_cube& armaCube)$/;"	f
armaSetCubeData	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaSetCubeData(mxArray *matlabMatrix, const Cube<Type>& armaCube) $/;"	f
armaSetCubePi	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaSetCubePi(mxArray *matlabMatrix, const Cube<double>& armaCube)$/;"	f
armaSetCubePr	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaSetCubePr(mxArray *matlabMatrix, const Cube<double>& armaCube) $/;"	f
armaSetCx	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaSetCx(mxArray *matlabMatrix, const cx_mat& armaMatrix) $/;"	f
armaSetData	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaSetData(mxArray *matlabMatrix, const Mat<Type>& armaMatrix)$/;"	f
armaSetImagCubeData	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaSetImagCubeData(mxArray *matlabMatrix, const Cube<Type>& armaCube)$/;"	f
armaSetImagData	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaSetImagData(mxArray *matlabMatrix, const Mat<Type>& armaMatrix)$/;"	f
armaSetPi	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaSetPi(mxArray *matlabMatrix, const Mat<double>& armaMatrix)$/;"	f
armaSetPr	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaSetPr(mxArray *matlabMatrix, const Mat<double>& armaMatrix)$/;"	f
armaSetSparsePi	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaSetSparsePi(mxArray *matlabMatrix, const SpMat<double>& armaMatrix)$/;"	f
armaSetSparsePr	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaSetSparsePr(mxArray *matlabMatrix, const SpMat<double>& armaMatrix)$/;"	f
armaWriteCubeToFile	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaWriteCubeToFile(const char *filename, cube &armaCube, const char *name)$/;"	f
armaWriteCxCubeToFile	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaWriteCxCubeToFile(const char *filename, cx_cube &armaCube, const char *name)$/;"	f
armaWriteCxMatToFile	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaWriteCxMatToFile(const char *filename, cx_mat &armaMatrix, const char *name)$/;"	f
armaWriteMatToFile	lib/armadillo-9.800.2/mex_interface/armaMex.hpp	/^armaWriteMatToFile(const char *filename, mat &armaMatrix, const char *name)$/;"	f
arma_Cube_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename  T> struct arma_Cube_only             { };$/;"	s
arma_Cube_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename eT> struct arma_Cube_only< Cube<eT> > { typedef Cube<eT> result; };$/;"	s
arma_H5Dclose	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	31;"	d
arma_H5Dclose	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    herr_t arma_H5Dclose(hid_t dataset_id)$/;"	f
arma_H5Dcreate	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	35;"	d
arma_H5Dcreate	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5Dcreate(hid_t loc_id, const char* name, hid_t dtype_id, hid_t space_id, hid_t lcpl_id, hid_t dcpl_id, hid_t dapl_id)$/;"	f
arma_H5Dget_space	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	33;"	d
arma_H5Dget_space	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5Dget_space(hid_t dataset_id)$/;"	f
arma_H5Dget_type	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	30;"	d
arma_H5Dget_type	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5Dget_type(hid_t dataset_id)$/;"	f
arma_H5Dopen	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	29;"	d
arma_H5Dopen	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5Dopen(hid_t loc_id, const char* name, hid_t dapl_id)$/;"	f
arma_H5Dread	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	34;"	d
arma_H5Dread	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    herr_t arma_H5Dread(hid_t dataset_id, hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t xfer_plist_id, void* buf)$/;"	f
arma_H5Dwrite	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	32;"	d
arma_H5Dwrite	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    herr_t arma_H5Dwrite(hid_t dataset_id, hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t xfer_plist_id, const void* buf)$/;"	f
arma_H5Eget_auto	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	45;"	d
arma_H5Eget_auto	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    herr_t arma_H5Eget_auto(hid_t estack_id, H5E_auto_t* func, void** client_data)$/;"	f
arma_H5Eset_auto	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	44;"	d
arma_H5Eset_auto	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    herr_t arma_H5Eset_auto(hid_t estack_id, H5E_auto_t func, void* client_data)$/;"	f
arma_H5Fclose	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	49;"	d
arma_H5Fclose	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    herr_t arma_H5Fclose(hid_t file_id)$/;"	f
arma_H5Fcreate	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	48;"	d
arma_H5Fcreate	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5Fcreate(const char* name, unsigned flags, hid_t fcpl_id, hid_t fapl_id)$/;"	f
arma_H5Fis_hdf5	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	50;"	d
arma_H5Fis_hdf5	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    htri_t arma_H5Fis_hdf5(const char* name)$/;"	f
arma_H5Fopen	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	47;"	d
arma_H5Fopen	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5Fopen(const char* name, unsigned flags, hid_t fapl_id)$/;"	f
arma_H5Gclose	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	54;"	d
arma_H5Gclose	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    herr_t arma_H5Gclose(hid_t group_id)$/;"	f
arma_H5Gcreate	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	52;"	d
arma_H5Gcreate	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5Gcreate(hid_t loc_id, const char* name, hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id)$/;"	f
arma_H5Gopen	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	53;"	d
arma_H5Gopen	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5Gopen(hid_t loc_id, const char* name, hid_t gapl_id)$/;"	f
arma_H5Ldelete	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	57;"	d
arma_H5Ldelete	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    herr_t arma_H5Ldelete(hid_t loc_id, const char* name, hid_t lapl_id)$/;"	f
arma_H5Lexists	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	56;"	d
arma_H5Lexists	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    htri_t arma_H5Lexists(hid_t loc_id, const char* name, hid_t lapl_id)$/;"	f
arma_H5Ovisit	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	42;"	d
arma_H5Ovisit	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    herr_t arma_H5Ovisit(hid_t object_id, H5_index_t index_type, H5_iter_order_t order, H5O_iterate_t op, void* op_data)$/;"	f
arma_H5Sclose	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	39;"	d
arma_H5Sclose	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    herr_t arma_H5Sclose(hid_t space_id)$/;"	f
arma_H5Screate_simple	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	40;"	d
arma_H5Screate_simple	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5Screate_simple(int rank, const hsize_t* current_dims, const hsize_t* maximum_dims)$/;"	f
arma_H5Sget_simple_extent_dims	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	38;"	d
arma_H5Sget_simple_extent_dims	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int arma_H5Sget_simple_extent_dims(hid_t space_id, hsize_t* dims, hsize_t* maxdims)$/;"	f
arma_H5Sget_simple_extent_ndims	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	37;"	d
arma_H5Sget_simple_extent_ndims	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int arma_H5Sget_simple_extent_ndims(hid_t space_id)$/;"	f
arma_H5T_NATIVE_CHAR	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	60;"	d
arma_H5T_NATIVE_CHAR	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5T_NATIVE_CHAR   = H5T_NATIVE_CHAR;$/;"	v
arma_H5T_NATIVE_DOUBLE	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	70;"	d
arma_H5T_NATIVE_DOUBLE	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5T_NATIVE_DOUBLE = H5T_NATIVE_DOUBLE;$/;"	v
arma_H5T_NATIVE_FLOAT	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	69;"	d
arma_H5T_NATIVE_FLOAT	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5T_NATIVE_FLOAT  = H5T_NATIVE_FLOAT;$/;"	v
arma_H5T_NATIVE_INT	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	63;"	d
arma_H5T_NATIVE_INT	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5T_NATIVE_INT    = H5T_NATIVE_INT;$/;"	v
arma_H5T_NATIVE_LLONG	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	67;"	d
arma_H5T_NATIVE_LLONG	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5T_NATIVE_LLONG  = H5T_NATIVE_LLONG;$/;"	v
arma_H5T_NATIVE_LONG	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	65;"	d
arma_H5T_NATIVE_LONG	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5T_NATIVE_LONG   = H5T_NATIVE_LONG;$/;"	v
arma_H5T_NATIVE_SHORT	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	61;"	d
arma_H5T_NATIVE_SHORT	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5T_NATIVE_SHORT  = H5T_NATIVE_SHORT;$/;"	v
arma_H5T_NATIVE_UCHAR	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	59;"	d
arma_H5T_NATIVE_UCHAR	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5T_NATIVE_UCHAR  = H5T_NATIVE_UCHAR;$/;"	v
arma_H5T_NATIVE_UINT	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	64;"	d
arma_H5T_NATIVE_UINT	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5T_NATIVE_UINT   = H5T_NATIVE_UINT;$/;"	v
arma_H5T_NATIVE_ULLONG	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	68;"	d
arma_H5T_NATIVE_ULLONG	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5T_NATIVE_ULLONG = H5T_NATIVE_ULLONG;$/;"	v
arma_H5T_NATIVE_ULONG	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	66;"	d
arma_H5T_NATIVE_ULONG	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5T_NATIVE_ULONG  = H5T_NATIVE_ULONG;$/;"	v
arma_H5T_NATIVE_USHORT	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	62;"	d
arma_H5T_NATIVE_USHORT	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5T_NATIVE_USHORT = H5T_NATIVE_USHORT;$/;"	v
arma_H5Tclose	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	27;"	d
arma_H5Tclose	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    herr_t arma_H5Tclose(hid_t dtype_id)$/;"	f
arma_H5Tcopy	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	23;"	d
arma_H5Tcopy	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5Tcopy(hid_t dtype_id)$/;"	f
arma_H5Tcreate	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	24;"	d
arma_H5Tcreate	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    hid_t arma_H5Tcreate(H5T_class_t cl, size_t size)$/;"	f
arma_H5Tequal	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	26;"	d
arma_H5Tequal	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    htri_t arma_H5Tequal(hid_t dtype_id1, hid_t dtype_id2)$/;"	f
arma_H5Tinsert	lib/armadillo-9.800.2/include/armadillo_bits/def_hdf5.hpp	25;"	d
arma_H5Tinsert	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    herr_t arma_H5Tinsert(hid_t dtype_id, const char* name, size_t offset, hid_t field_id)$/;"	f
arma_Mat_Col_Row_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_Mat_Col_Row_only { };$/;"	s
arma_Mat_Col_Row_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename eT> struct arma_Mat_Col_Row_only< Col<eT> > { typedef Col<eT> result; };$/;"	s
arma_Mat_Col_Row_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename eT> struct arma_Mat_Col_Row_only< Mat<eT> > { typedef Mat<eT> result; };$/;"	s
arma_Mat_Col_Row_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename eT> struct arma_Mat_Col_Row_only< Row<eT> > { typedef Row<eT> result; };$/;"	s
arma_SpMat_SpCol_SpRow_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_SpMat_SpCol_SpRow_only { };$/;"	s
arma_SpMat_SpCol_SpRow_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename eT> struct arma_SpMat_SpCol_SpRow_only< SpCol<eT> > { typedef SpCol<eT> result; };$/;"	s
arma_SpMat_SpCol_SpRow_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename eT> struct arma_SpMat_SpCol_SpRow_only< SpMat<eT> > { typedef SpMat<eT> result; };$/;"	s
arma_SpMat_SpCol_SpRow_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename eT> struct arma_SpMat_SpCol_SpRow_only< SpRow<eT> > { typedef SpRow<eT> result; };$/;"	s
arma_abs	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename  T> arma_inline static typename              arma_real_only< T>::result arma_abs (const std::complex<T>& x) { return std::abs(x); }$/;"	f	class:eop_aux
arma_abs	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename              arma_real_only<eT>::result arma_abs (const eT               x) { return std::abs(x); }$/;"	f	class:eop_aux
arma_abs	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename   arma_signed_integral_only<eT>::result arma_abs (const eT               x) { return std::abs(x); }$/;"	f	class:eop_aux
arma_abs	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_unsigned_integral_only<eT>::result arma_abs (const eT               x) { return x;           }$/;"	f	class:eop_aux
arma_acos	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_acos(const std::complex<T>& x)$/;"	f
arma_acosh	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_acosh(const eT x)$/;"	f
arma_acosh	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_acosh(const std::complex<T>& x)$/;"	f
arma_align_mem	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	209;"	d
arma_align_mem	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	219;"	d
arma_align_mem	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	21;"	d
arma_align_mem	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	288;"	d
arma_align_mem	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	291;"	d
arma_align_mem	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	32;"	d
arma_aligned	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	208;"	d
arma_aligned	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	20;"	d
arma_aligned	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	218;"	d
arma_aligned	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	287;"	d
arma_aligned	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	290;"	d
arma_aligned	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	31;"	d
arma_applier_1_mp	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	1253;"	d
arma_applier_1_mp	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	182;"	d
arma_applier_1_mp	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	241;"	d
arma_applier_1_mp	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	29;"	d
arma_applier_1_mp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	1161;"	d
arma_applier_1_mp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	168;"	d
arma_applier_1_mp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	227;"	d
arma_applier_1_mp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	27;"	d
arma_applier_1a	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	1249;"	d
arma_applier_1a	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	23;"	d
arma_applier_1a	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	68;"	d
arma_applier_1a	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	76;"	d
arma_applier_1a	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	1157;"	d
arma_applier_1a	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	22;"	d
arma_applier_1a	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	67;"	d
arma_applier_1a	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	75;"	d
arma_applier_1u	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	1248;"	d
arma_applier_1u	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	22;"	d
arma_applier_1u	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	35;"	d
arma_applier_1u	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	43;"	d
arma_applier_1u	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	1156;"	d
arma_applier_1u	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	21;"	d
arma_applier_1u	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	33;"	d
arma_applier_1u	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	41;"	d
arma_applier_2	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	100;"	d
arma_applier_2	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	1250;"	d
arma_applier_2	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	24;"	d
arma_applier_2	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	1158;"	d
arma_applier_2	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	23;"	d
arma_applier_2	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	99;"	d
arma_applier_2_mp	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	1254;"	d
arma_applier_2_mp	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	192;"	d
arma_applier_2_mp	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	242;"	d
arma_applier_2_mp	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	30;"	d
arma_applier_2_mp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	1162;"	d
arma_applier_2_mp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	178;"	d
arma_applier_2_mp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	228;"	d
arma_applier_2_mp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	28;"	d
arma_applier_3	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	1251;"	d
arma_applier_3	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	150;"	d
arma_applier_3	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	25;"	d
arma_applier_3	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	1159;"	d
arma_applier_3	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	136;"	d
arma_applier_3	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	24;"	d
arma_applier_3_mp	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	1255;"	d
arma_applier_3_mp	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	225;"	d
arma_applier_3_mp	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	243;"	d
arma_applier_3_mp	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	31;"	d
arma_applier_3_mp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	1163;"	d
arma_applier_3_mp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	211;"	d
arma_applier_3_mp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	229;"	d
arma_applier_3_mp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	29;"	d
arma_applier_cube	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	26;"	d
arma_applier_cube	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	413;"	d
arma_applier_cube	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	94;"	d
arma_applier_cube_post	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	202;"	d
arma_applier_cube_post	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	27;"	d
arma_applier_cube_post	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	504;"	d
arma_applier_cube_pre	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	150;"	d
arma_applier_cube_pre	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	26;"	d
arma_applier_cube_pre	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	503;"	d
arma_applier_mat	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	25;"	d
arma_applier_mat	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	29;"	d
arma_applier_mat	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	412;"	d
arma_applier_mat_post	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	24;"	d
arma_applier_mat_post	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	501;"	d
arma_applier_mat_post	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	90;"	d
arma_applier_mat_pre	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	23;"	d
arma_applier_mat_pre	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	30;"	d
arma_applier_mat_pre	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	500;"	d
arma_arg	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^struct arma_arg$/;"	s
arma_arg	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^struct arma_arg< std::complex<double> >$/;"	s
arma_arg	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^struct arma_arg< std::complex<float> >$/;"	s
arma_arg	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^struct arma_arg<double>$/;"	s
arma_arg	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^struct arma_arg<float>$/;"	s
arma_ascii	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  arma_ascii,         \/\/!< Armadillo ASCII format (text), with information about matrix type and size$/;"	e	enum:file_type
arma_asin	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_asin(const std::complex<T>& x)$/;"	f
arma_asinh	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_asinh(const eT x)$/;"	f
arma_asinh	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_asinh(const std::complex<T>& x)$/;"	f
arma_assert_atlas_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_atlas_size(const T1& A)$/;"	f
arma_assert_atlas_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_atlas_size(const T1& A, const T2& B)$/;"	f
arma_assert_blas_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_blas_size(const T1& A)$/;"	f
arma_assert_blas_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_blas_size(const T1& A, const T2& B)$/;"	f
arma_assert_cube_as_mat	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_cube_as_mat(const Mat<eT>& M, const T1& Q, const char* x, const bool check_compat_size)$/;"	f
arma_assert_mul_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_mul_size(const Mat<eT1>& A, const Mat<eT2>& B, const bool do_trans_A, const bool do_trans_B, const char* x)$/;"	f
arma_assert_mul_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_mul_size(const Mat<eT1>& A, const Mat<eT2>& B, const char* x)$/;"	f
arma_assert_mul_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_mul_size(const Mat<eT1>& A, const subview<eT2>& B, const char* x)$/;"	f
arma_assert_mul_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_mul_size(const subview<eT1>& A, const Mat<eT2>& B, const char* x)$/;"	f
arma_assert_mul_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_mul_size(const subview<eT1>& A, const subview<eT2>& B, const char* x)$/;"	f
arma_assert_mul_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_mul_size(const uword A_n_rows, const uword A_n_cols, const uword B_n_rows, const uword B_n_cols, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const Cube<eT1>& A, const Cube<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const Cube<eT1>& A, const Mat<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const Cube<eT1>& A, const subview_cube<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const Mat<eT1>& A, const Cube<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const Mat<eT1>& A, const Mat<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const Mat<eT1>& A, const Proxy<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const Mat<eT1>& A, const subview<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const Mat<eT1>& A, const subview_cube<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const Proxy<eT1>& A, const Mat<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const Proxy<eT1>& A, const Proxy<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const Proxy<eT1>& A, const subview<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const ProxyCube<eT1>& A, const ProxyCube<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const SpMat<eT1>& A, const SpMat<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const subview<eT1>& A, const Mat<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const subview<eT1>& A, const Proxy<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const subview<eT1>& A, const subview<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const subview_cube<eT1>& A, const Cube<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const subview_cube<eT1>& A, const Mat<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const subview_cube<eT1>& A, const subview_cube<eT2>& B, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const uword A_n_rows, const uword A_n_cols, const uword A_n_slices, const uword B_n_rows, const uword B_n_cols, const uword B_n_slices, const char* x)$/;"	f
arma_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_same_size(const uword A_n_rows, const uword A_n_cols, const uword B_n_rows, const uword B_n_cols, const char* x)$/;"	f
arma_assert_trans_mul_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_assert_trans_mul_size(const uword A_n_rows, const uword A_n_cols, const uword B_n_rows, const uword B_n_cols, const char* x)$/;"	f
arma_atan	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_atan(const std::complex<T>& x)$/;"	f
arma_atanh	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_atanh(const eT x)$/;"	f
arma_atanh	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_atanh(const std::complex<T>& x)$/;"	f
arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  arma_binary,        \/\/!< Armadillo binary format, with information about matrix type and size$/;"	e	enum:file_type
arma_bktprint	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_bktprint()$/;"	f
arma_bktprint	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_bktprint(const T1& x)$/;"	f
arma_bktprint	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_bktprint(const T1& x, const T2& y)$/;"	f
arma_blas_type_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_blas_type_only< cx_double > { typedef cx_double result; };$/;"	s
arma_blas_type_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_blas_type_only< cx_float  > { typedef cx_float  result; };$/;"	s
arma_blas_type_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_blas_type_only< double    > { typedef double    result; };$/;"	s
arma_blas_type_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_blas_type_only< float     > { typedef float     result; };$/;"	s
arma_blas_type_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_blas_type_only { };$/;"	s
arma_cerr_stream	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_cerr_stream(std::ostream* user_stream)$/;"	f
arma_cgbcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	231;"	d
arma_cgbcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	460;"	d
arma_cgbcon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgbcon)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_cxf* ab, const blas_int* ldab, const blas_int* ipiv, const  float* anorm,  float* rcond, blas_cxf* work,  float* rwork, blas_int* info)$/;"	f
arma_cgbcon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgbcon)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_cxf* ab, const blas_int* ldab, const blas_int* ipiv, const  float* anorm,  float* rcond, blas_cxf* work,  float* rwork, blas_int* info, blas_len norm_len)$/;"	f
arma_cgbsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	163;"	d
arma_cgbsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	392;"	d
arma_cgbsv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgbsv)(const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, blas_cxf* ab, const blas_int* ldab, blas_int* ipiv, blas_cxf* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_cgbsv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgbsv)(const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, blas_cxf* ab, const blas_int* ldab, blas_int* ipiv, blas_cxf* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_cgbsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	168;"	d
arma_cgbsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	397;"	d
arma_cgbsvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgbsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, blas_cxf* ab, const blas_int* ldab, blas_cxf* afb, const blas_int* ldafb, blas_int* ipiv, char* equed,  float* r,  float* c, blas_cxf* b, const blas_int* ldb, blas_cxf* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr, blas_cxf* work,  float* rwork, blas_int* info)$/;"	f
arma_cgbsvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgbsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, blas_cxf* ab, const blas_int* ldab, blas_cxf* afb, const blas_int* ldafb, blas_int* ipiv, char* equed,  float* r,  float* c, blas_cxf* b, const blas_int* ldb, blas_cxf* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr, blas_cxf* work,  float* rwork, blas_int* info, blas_len fact_len, blas_len trans_len, blas_len equed_len)$/;"	f
arma_cgbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	153;"	d
arma_cgbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	382;"	d
arma_cgbtrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgbtrf)(const blas_int* m, const blas_int* n, const blas_int* kl, const blas_int* ku, blas_cxf* ab, const blas_int* ldab, blas_int* ipiv, blas_int* info)$/;"	f
arma_cgbtrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgbtrf)(const blas_int* m, const blas_int* n, const blas_int* kl, const blas_int* ku, blas_cxf* ab, const blas_int* ldab, blas_int* ipiv, blas_int* info)$/;"	f
arma_cgbtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	158;"	d
arma_cgbtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	387;"	d
arma_cgbtrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgbtrs)(const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, const blas_cxf* ab, const blas_int* ldab, const blas_int* ipiv, blas_cxf* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_cgbtrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgbtrs)(const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, const blas_cxf* ab, const blas_int* ldab, const blas_int* ipiv, blas_cxf* b, const blas_int* ldb, blas_int* info, blas_len trans_len)$/;"	f
arma_cgecon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	216;"	d
arma_cgecon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	445;"	d
arma_cgecon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgecon)(const char* norm, const blas_int* n, const blas_cxf* a, const blas_int* lda, const  float* anorm,  float* rcond, blas_cxf* work,  float* rwork, blas_int* info)$/;"	f
arma_cgecon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgecon)(const char* norm, const blas_int* n, const blas_cxf* a, const blas_int* lda, const  float* anorm,  float* rcond, blas_cxf* work,  float* rwork, blas_int* info, blas_len norm_len)$/;"	f
arma_cgees	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	183;"	d
arma_cgees	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	412;"	d
arma_cgees	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgees)(const char* jobvs, const char* sort, fn_select_c1 select, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_int* sdim, blas_cxf* w, blas_cxf* vs, const blas_int* ldvs, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* bwork, blas_int* info)$/;"	f
arma_cgees	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgees)(const char* jobvs, const char* sort, fn_select_c1 select, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_int* sdim, blas_cxf* w, blas_cxf* vs, const blas_int* ldvs, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* bwork, blas_int* info, blas_len jobvs_len, blas_len sort_len)$/;"	f
arma_cgeev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	277;"	d
arma_cgeev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	48;"	d
arma_cgeev	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgeev)(const char* jobvl, const char* jobvr, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_cxf* w, blas_cxf* vl, const blas_int* ldvl, blas_cxf* vr, const blas_int* ldvr, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* info)$/;"	f
arma_cgeev	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgeev)(const char* jobvl, const char* jobvr, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_cxf* w, blas_cxf* vl, const blas_int* ldvl, blas_cxf* vr, const blas_int* ldvr, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* info, blas_len jobvl_len, blas_len jobvr_len)$/;"	f
arma_cgeevx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	282;"	d
arma_cgeevx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	53;"	d
arma_cgeevx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgeevx)(const char* balanc, const char* jobvl, const char* jobvr, const char* sense, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_cxf* w, blas_cxf* vl, const blas_int* ldvl, blas_cxf* vr, const blas_int* ldvr, blas_int* ilo, blas_int* ihi,  float* scale,  float* abnrm,  float* rconde,  float* rcondv, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* info)$/;"	f
arma_cgeevx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgeevx)(const char* balanc, const char* jobvl, const char* jobvr, const char* sense, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_cxf* w, blas_cxf* vl, const blas_int* ldvl, blas_cxf* vr, const blas_int* ldvr, blas_int* ilo, blas_int* ihi,  float* scale,  float* abnrm,  float* rconde,  float* rcondv, blas_cxf* work, const blas_int* lwork,  float* rwork, const blas_int* info, blas_len balanc_len, blas_len jobvl_len, blas_len jobvr_len, blas_len sense_len)$/;"	f
arma_cgehrd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	250;"	d
arma_cgehrd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	479;"	d
arma_cgehrd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgehrd)(const blas_int* n, const blas_int* ilo, const blas_int* ihi, blas_cxf* a, const blas_int* lda, blas_cxf* tao, blas_cxf* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_cgehrd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgehrd)(const blas_int* n, const blas_int* ilo, const blas_int* ihi, blas_cxf* a, const blas_int* lda, blas_cxf* tao, blas_cxf* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_cgels	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	138;"	d
arma_cgels	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	367;"	d
arma_cgels	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgels)(const char* trans, const blas_int* m, const blas_int* n, const blas_int* nrhs, blas_cxf* a, const blas_int* lda, blas_cxf* b, const blas_int* ldb, blas_cxf* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_cgels	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgels)(const char* trans, const blas_int* m, const blas_int* n, const blas_int* nrhs, blas_cxf* a, const blas_int* lda, blas_cxf* b, const blas_int* ldb, blas_cxf* work, const blas_int* lwork, blas_int* info, blas_len trans_len)$/;"	f
arma_cgelsd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	143;"	d
arma_cgelsd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	372;"	d
arma_cgelsd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgelsd)(const blas_int* m, const blas_int* n, const blas_int* nrhs, blas_cxf* a, const blas_int* lda, blas_cxf* b, const blas_int* ldb,  float* S, const  float* rcond, blas_int* rank, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* iwork, blas_int* info)$/;"	f
arma_cgelsd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgelsd)(const blas_int* m, const blas_int* n, const blas_int* nrhs, blas_cxf* a, const blas_int* lda, blas_cxf* b, const blas_int* ldb,  float* S, const  float* rcond, blas_int* rank, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* iwork, blas_int* info)$/;"	f
arma_cgemm	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	43;"	d
arma_cgemm	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	70;"	d
arma_cgemm	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgemm)(const char* transA, const char* transB, const blas_int* m, const blas_int* n, const blas_int* k, const blas_cxf* alpha, const blas_cxf* A, const blas_int* ldA, const blas_cxf* B, const blas_int* ldB, const blas_cxf* beta, blas_cxf* C, const blas_int* ldC)$/;"	f
arma_cgemm	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgemm)(const char* transA, const char* transB, const blas_int* m, const blas_int* n, const blas_int* k, const blas_cxf* alpha, const blas_cxf* A, const blas_int* ldA, const blas_cxf* B, const blas_int* ldB, const blas_cxf* beta, blas_cxf* C, const blas_int* ldC, blas_len transA_len, blas_len transB_len)$/;"	f
arma_cgemv	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	38;"	d
arma_cgemv	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	65;"	d
arma_cgemv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgemv)(const char* transA, const blas_int* m, const blas_int* n, const blas_cxf* alpha, const blas_cxf* A, const blas_int* ldA, const blas_cxf* x, const blas_int* incx, const blas_cxf* beta, blas_cxf* y, const blas_int* incy)$/;"	f
arma_cgemv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgemv)(const char* transA, const blas_int* m, const blas_int* n, const blas_cxf* alpha, const blas_cxf* A, const blas_int* ldA, const blas_cxf* x, const blas_int* incx, const blas_cxf* beta, blas_cxf* y, const blas_int* incy, blas_len transA_len)$/;"	f
arma_cgeqrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	325;"	d
arma_cgeqrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	96;"	d
arma_cgeqrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgeqrf)(const blas_int* m, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_cxf* tau, blas_cxf* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_cgeqrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgeqrf)(const blas_int* m, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_cxf* tau, blas_cxf* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_cgesdd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	113;"	d
arma_cgesdd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	342;"	d
arma_cgesdd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgesdd)(const char* jobz, const blas_int* m, const blas_int* n, blas_cxf* a, const blas_int* lda,  float* s, blas_cxf* u, const blas_int* ldu, blas_cxf* vt, const blas_int* ldvt, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* iwork, blas_int* info)$/;"	f
arma_cgesdd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgesdd)(const char* jobz, const blas_int* m, const blas_int* n, blas_cxf* a, const blas_int* lda,  float* s, blas_cxf* u, const blas_int* ldu, blas_cxf* vt, const blas_int* ldvt, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* iwork, blas_int* info, blas_len jobz_len)$/;"	f
arma_cgesv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	118;"	d
arma_cgesv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	347;"	d
arma_cgesv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgesv)(const blas_int* n, const blas_int* nrhs, blas_cxf* a, const blas_int* lda, blas_int* ipiv, blas_cxf* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_cgesv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgesv)(const blas_int* n, const blas_int* nrhs, blas_cxf* a, const blas_int* lda, blas_int* ipiv, blas_cxf* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_cgesvd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	108;"	d
arma_cgesvd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	337;"	d
arma_cgesvd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgesvd)(const char* jobu, const char* jobvt, const blas_int* m, const blas_int* n, blas_cxf* a, const blas_int* lda,  float* s, blas_cxf* u, const blas_int* ldu, blas_cxf* vt, const blas_int* ldvt, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* info)$/;"	f
arma_cgesvd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgesvd)(const char* jobu, const char* jobvt, const blas_int* m, const blas_int* n, blas_cxf* a, const blas_int* lda,  float* s, blas_cxf* u, const blas_int* ldu, blas_cxf* vt, const blas_int* ldvt, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* info, blas_len jobu_len, blas_len jobvt_len)$/;"	f
arma_cgesvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	123;"	d
arma_cgesvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	352;"	d
arma_cgesvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgesvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs, blas_cxf* a, const blas_int* lda, blas_cxf* af, const blas_int* ldaf, blas_int* ipiv, char* equed,  float* r,  float* c, blas_cxf* b, const blas_int* ldb, blas_cxf* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr, blas_cxf* work,  float* rwork, blas_int* info)$/;"	f
arma_cgesvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgesvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs, blas_cxf* a, const blas_int* lda, blas_cxf* af, const blas_int* ldaf, blas_int* ipiv, char* equed,  float* r,  float* c, blas_cxf* b, const blas_int* ldb, blas_cxf* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr, blas_cxf* work,  float* rwork, blas_int* info, blas_len fact_len, blas_len trans_len, blas_len equed_len)$/;"	f
arma_cgetrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	257;"	d
arma_cgetrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	28;"	d
arma_cgetrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgetrf)(const blas_int* m, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_int* ipiv, blas_int* info)$/;"	f
arma_cgetrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgetrf)(const blas_int* m, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_int* ipiv, blas_int* info)$/;"	f
arma_cgetri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	267;"	d
arma_cgetri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	38;"	d
arma_cgetri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgetri)(const blas_int* n, blas_cxf* a, const blas_int* lda, const blas_int* ipiv, blas_cxf* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_cgetri	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgetri)(const blas_int* n, blas_cxf* a, const blas_int* lda, const blas_int* ipiv, blas_cxf* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_cgetrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	262;"	d
arma_cgetrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	33;"	d
arma_cgetrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgetrs)(const char* trans, const blas_int* n, const blas_int* nrhs, const blas_cxf* a, const blas_int* lda, const blas_int* ipiv, blas_cxf* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_cgetrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgetrs)(const char* trans, const blas_int* n, const blas_int* nrhs, const blas_cxf* a, const blas_int* lda, const blas_int* ipiv, blas_cxf* b, const blas_int* ldb, blas_int* info, const blas_len trans_len)$/;"	f
arma_cgges	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	193;"	d
arma_cgges	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	422;"	d
arma_cgges	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgges)(const char* jobvsl, const char* jobvsr, const char* sort, fn_select_c2 selctg, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_cxf* b, const blas_int* ldb, blas_int* sdim, blas_cxf* alpha, blas_cxf* beta, blas_cxf* vsl, const blas_int* ldvsl, blas_cxf* vsr, const blas_int* ldvsr, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* bwork, blas_int* info)$/;"	f
arma_cgges	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgges)(const char* jobvsl, const char* jobvsr, const char* sort, fn_select_c2 selctg, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_cxf* b, const blas_int* ldb, blas_int* sdim, blas_cxf* alpha, blas_cxf* beta, blas_cxf* vsl, const blas_int* ldvsl, blas_cxf* vsr, const blas_int* ldvsr, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* bwork, blas_int* info, blas_len jobvsl_len, blas_len jobvsr_len, blas_len sort_len)$/;"	f
arma_cggev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	300;"	d
arma_cggev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	71;"	d
arma_cggev	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cggev)(const char* jobvl, const char* jobvr, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_cxf* b, const blas_int* ldb, blas_cxf* alpha, blas_cxf* beta, blas_cxf* vl, const blas_int* ldvl, blas_cxf* vr, const blas_int* ldvr, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* info)$/;"	f
arma_cggev	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cggev)(const char* jobvl, const char* jobvr, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_cxf* b, const blas_int* ldb, blas_cxf* alpha, blas_cxf* beta, blas_cxf* vl, const blas_int* ldvl, blas_cxf* vr, const blas_int* ldvr, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* info, blas_len jobvl_len, blas_len jobvr_len)$/;"	f
arma_cgtsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	173;"	d
arma_cgtsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	402;"	d
arma_cgtsv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgtsv)(const blas_int* n, const blas_int* nrhs, blas_cxf* dl, blas_cxf* d, blas_cxf* du, blas_cxf* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_cgtsv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgtsv)(const blas_int* n, const blas_int* nrhs, blas_cxf* dl, blas_cxf* d, blas_cxf* du, blas_cxf* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_cgtsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	178;"	d
arma_cgtsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	407;"	d
arma_cgtsvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cgtsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs, const blas_cxf* dl, const blas_cxf* d, const blas_cxf* du, blas_cxf* dlf, blas_cxf* df, blas_cxf* duf, blas_cxf* du2, blas_int* ipiv, const blas_cxf* b, const blas_int* ldb, blas_cxf* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr, blas_cxf* work,  float* rwork, blas_int* info)$/;"	f
arma_cgtsvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cgtsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs, const blas_cxf* dl, const blas_cxf* d, const blas_cxf* du, blas_cxf* dlf, blas_cxf* df, blas_cxf* duf, blas_cxf* du2, blas_int* ipiv, const blas_cxf* b, const blas_int* ldb, blas_cxf* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr, blas_cxf* work,  float* rwork, blas_int* info, blas_len fact_len, blas_len trans_len)$/;"	f
arma_check	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_check(const bool state, const T1& x)$/;"	f
arma_check	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_check(const bool state, const T1& x, const T2& y)$/;"	f
arma_check_bad_alloc	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_check_bad_alloc(const bool state, const T1& x)$/;"	f
arma_cheev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	288;"	d
arma_cheev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	59;"	d
arma_cheev	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cheev)(const char* jobz, const char* uplo, const blas_int* n, blas_cxf* a, const blas_int* lda,  float* w, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* info)$/;"	f
arma_cheev	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cheev)(const char* jobz, const char* uplo, const blas_int* n, blas_cxf* a, const blas_int* lda,  float* w, blas_cxf* work, const blas_int* lwork,  float* rwork, blas_int* info, blas_len jobz_len, blas_len uplo_len)$/;"	f
arma_cheevd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	294;"	d
arma_cheevd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	65;"	d
arma_cheevd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cheevd)(const char* jobz, const char* uplo, const blas_int* n, blas_cxf* a, const blas_int* lda,  float* w, blas_cxf* work, const blas_int* lwork,  float* rwork, const blas_int* lrwork, blas_int* iwork, const blas_int* liwork, blas_int* info)$/;"	f
arma_cheevd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cheevd)(const char* jobz, const char* uplo, const blas_int* n, blas_cxf* a, const blas_int* lda,  float* w, blas_cxf* work, const blas_int* lwork,  float* rwork, const blas_int* lrwork, blas_int* iwork, const blas_int* liwork, blas_int* info, blas_len jobz_len, blas_len uplo_len)$/;"	f
arma_cherk	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	49;"	d
arma_cherk	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	76;"	d
arma_cherk	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cherk)(const char* uplo, const char* transA, const blas_int* n, const blas_int* k, const  float* alpha, const blas_cxf* A, const blas_int* ldA, const  float* beta, blas_cxf* C, const blas_int* ldC)$/;"	f
arma_cherk	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cherk)(const char* uplo, const char* transA, const blas_int* n, const blas_int* k, const  float* alpha, const blas_cxf* A, const blas_int* ldA, const  float* beta, blas_cxf* C, const blas_int* ldC, blas_len uplo_len, blas_len transA_len)$/;"	f
arma_clangb	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	211;"	d
arma_clangb	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	440;"	d
arma_clangb	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    float  arma_fortran_with_prefix(arma_clangb)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_cxf* ab, const blas_int* ldab,  float* work)$/;"	f
arma_clangb	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    float  arma_fortran_with_prefix(arma_clangb)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_cxf* ab, const blas_int* ldab,  float* work, blas_len norm_len)$/;"	f
arma_clange	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	198;"	d
arma_clange	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	427;"	d
arma_clange	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    float  arma_fortran_with_prefix(arma_clange)(const char* norm, const blas_int* m, const blas_int* n, const blas_cxf* a, const blas_int* lda,  float* work)$/;"	f
arma_clange	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    float  arma_fortran_with_prefix(arma_clange)(const char* norm, const blas_int* m, const blas_int* n, const blas_cxf* a, const blas_int* lda,  float* work, blas_len norm_len)$/;"	f
arma_clanhe	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	206;"	d
arma_clanhe	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	435;"	d
arma_clanhe	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    float  arma_fortran_with_prefix(arma_clanhe)(const char* norm, const char* uplo, const blas_int* n, const blas_cxf* a, const blas_int* lda,  float* work)$/;"	f
arma_clanhe	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    float  arma_fortran_with_prefix(arma_clanhe)(const char* norm, const char* uplo, const blas_int* n, const blas_cxf* a, const blas_int* lda,  float* work, blas_len norm_len, blas_len uplo_len)$/;"	f
arma_clansy	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	203;"	d
arma_clansy	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	432;"	d
arma_clansy	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    float  arma_fortran_with_prefix(arma_clansy)(const char* norm, const char* uplo, const blas_int* n, const blas_cxf* a, const blas_int* lda,  float* work)$/;"	f
arma_clansy	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    float  arma_fortran_with_prefix(arma_clansy)(const char* norm, const char* uplo, const blas_int* n, const blas_cxf* a, const blas_int* lda,  float* work, blas_len norm_len, blas_len uplo_len)$/;"	f
arma_cnaupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	24;"	d
arma_cnaupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	42;"	d
arma_cnaupd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cnaupd)(blas_int* ido, char* bmat, blas_int* n, char* which, blas_int* nev, float* tol, void* resid, blas_int* ncv, void* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, void* workd, void* workl, blas_int* lworkl, float* rwork, blas_int* info)$/;"	f
arma_cnaupd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cnaupd)(blas_int* ido, char* bmat, blas_int* n, char* which, blas_int* nev, float* tol, void* resid, blas_int* ncv, void* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, void* workd, void* workl, blas_int* lworkl, float* rwork, blas_int* info, blas_len bmat_len, blas_len which_len)$/;"	f
arma_cneupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	29;"	d
arma_cneupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	47;"	d
arma_cneupd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cneupd)(blas_int* rvec, char* howmny, blas_int* select, void* d, void* z, blas_int* ldz, void* sigma, void* workev, char* bmat, blas_int* n, char* which, blas_int* nev, float* tol, void* resid, blas_int* ncv, void* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, void* workd, void* workl, blas_int* lworkl, float* rwork, blas_int* info)$/;"	f
arma_cneupd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cneupd)(blas_int* rvec, char* howmny, blas_int* select, void* d, void* z, blas_int* ldz, void* sigma, void* workev, char* bmat, blas_int* n, char* which, blas_int* nev, float* tol, void* resid, blas_int* ncv, void* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, void* workd, void* workl, blas_int* lworkl, float* rwork, blas_int* info, blas_len howmny_len, blas_len bmat_len, blas_len which_len)$/;"	f
arma_cold	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	19;"	d
arma_cold	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	207;"	d
arma_cold	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	217;"	d
arma_cold	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	30;"	d
arma_cold	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	328;"	d
arma_cold	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	329;"	d
arma_cold	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	331;"	d
arma_cold	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	332;"	d
arma_config	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^struct arma_config$/;"	s
arma_counter	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_bones.hpp	/^class arma_counter$/;"	c
arma_counter	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^arma_counter<eT>::arma_counter()$/;"	f	class:arma_counter
arma_cout_stream	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_cout_stream(std::ostream* user_stream)$/;"	f
arma_cpbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	315;"	d
arma_cpbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	86;"	d
arma_cpbtrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cpbtrf)(const char* uplo, const blas_int* n, const blas_int* kd, blas_cxf* ab, const blas_int* ldab, blas_int* info)$/;"	f
arma_cpbtrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cpbtrf)(const char* uplo, const blas_int* n, const blas_int* kd, blas_cxf* ab, const blas_int* ldab, blas_int* info, blas_len uplo_len)$/;"	f
arma_cpocon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	221;"	d
arma_cpocon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	450;"	d
arma_cpocon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cpocon)(const char* uplo, const blas_int* n, const blas_cxf* a, const blas_int* lda, const  float* anorm,  float* rcond, blas_cxf* work,  float* rwork, blas_int* info)$/;"	f
arma_cpocon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cpocon)(const char* uplo, const blas_int* n, const blas_cxf* a, const blas_int* lda, const  float* anorm,  float* rcond, blas_cxf* work,  float* rwork, blas_int* info, blas_len uplo_len)$/;"	f
arma_cposv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	128;"	d
arma_cposv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	357;"	d
arma_cposv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cposv)(const char* uplo, const blas_int* n, const blas_int* nrhs, blas_cxf* a, const blas_int* lda, blas_cxf* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_cposv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cposv)(const char* uplo, const blas_int* n, const blas_int* nrhs, blas_cxf* a, const blas_int* lda, blas_cxf* b, const blas_int* ldb, blas_int* info, blas_len uplo_len)$/;"	f
arma_cposvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	133;"	d
arma_cposvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	362;"	d
arma_cposvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cposvx)(const char* fact, const char* uplo, const blas_int* n, const blas_int* nrhs, blas_cxf* a, const blas_int* lda, blas_cxf* af, const blas_int* ldaf, char* equed,  float* s, blas_cxf* b, const blas_int* ldb, blas_cxf* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr, blas_cxf* work,  float* rwork, blas_int* info)$/;"	f
arma_cposvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cposvx)(const char* fact, const char* uplo, const blas_int* n, const blas_int* nrhs, blas_cxf* a, const blas_int* lda, blas_cxf* af, const blas_int* ldaf, char* equed,  float* s, blas_cxf* b, const blas_int* ldb, blas_cxf* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr, blas_cxf* work,  float* rwork, blas_int* info, blas_len fact_len, blas_len uplo_len, blas_len equed_len)$/;"	f
arma_cpotrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	305;"	d
arma_cpotrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	76;"	d
arma_cpotrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cpotrf)(const char* uplo, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_int* info)$/;"	f
arma_cpotrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cpotrf)(const char* uplo, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_int* info, blas_len uplo_len)$/;"	f
arma_cpotri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	320;"	d
arma_cpotri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	91;"	d
arma_cpotri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cpotri)(const char* uplo, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_int* info)$/;"	f
arma_cpotri	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cpotri)(const char* uplo, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_int* info, blas_len uplo_len)$/;"	f
arma_cpotrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	310;"	d
arma_cpotrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	81;"	d
arma_cpotrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cpotrs)(const char* uplo, const blas_int* n, const blas_int* nrhs, const blas_cxf* a, const blas_int* lda, blas_cxf* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_cpotrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cpotrs)(const char* uplo, const blas_int* n, const blas_int* nrhs, const blas_cxf* a, const blas_int* lda, blas_cxf* b, const blas_int* ldb, blas_int* info, blas_len uplo_len)$/;"	f
arma_ctrcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	226;"	d
arma_ctrcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	455;"	d
arma_ctrcon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_ctrcon)(const char* norm, const char* uplo, const char* diag, const blas_int* n, const blas_cxf* a, const blas_int* lda,  float* rcond, blas_cxf* work,  float* rwork, blas_int* info)$/;"	f
arma_ctrcon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_ctrcon)(const char* norm, const char* uplo, const char* diag, const blas_int* n, const blas_cxf* a, const blas_int* lda,  float* rcond, blas_cxf* work,  float* rwork, blas_int* info, blas_len norm_len, blas_len uplo_len, blas_len diag_len)$/;"	f
arma_ctrsyl	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	188;"	d
arma_ctrsyl	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	417;"	d
arma_ctrsyl	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_ctrsyl)(const char* transa, const char* transb, const blas_int* isgn, const blas_int* m, const blas_int* n, const blas_cxf* a, const blas_int* lda, const blas_cxf* b, const blas_int* ldb, blas_cxf* c, const blas_int* ldc,  float* scale, blas_int* info)$/;"	f
arma_ctrsyl	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_ctrsyl)(const char* transa, const char* transb, const blas_int* isgn, const blas_int* m, const blas_int* n, const blas_cxf* a, const blas_int* lda, const blas_cxf* b, const blas_int* ldb, blas_cxf* c, const blas_int* ldc,  float* scale, blas_int* info, blas_len transa_len, blas_len transb_len)$/;"	f
arma_ctrtri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	272;"	d
arma_ctrtri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	43;"	d
arma_ctrtri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_ctrtri)(const char* uplo, const char* diag, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_int* info)$/;"	f
arma_ctrtri	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_ctrtri)(const char* uplo, const char* diag, const blas_int* n, blas_cxf* a, const blas_int* lda, blas_int* info, blas_len uplo_len, blas_len diag_len)$/;"	f
arma_ctrtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	148;"	d
arma_ctrtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	377;"	d
arma_ctrtrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_ctrtrs)(const char* uplo, const char* trans, const char* diag, const blas_int* n, const blas_int* nrhs, const blas_cxf* a, const blas_int* lda, blas_cxf* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_ctrtrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_ctrtrs)(const char* uplo, const char* trans, const char* diag, const blas_int* n, const blas_int* nrhs, const blas_cxf* a, const blas_int* lda, blas_cxf* b, const blas_int* ldb, blas_int* info, blas_len uplo_len, blas_len trans_len, blas_len diag_len)$/;"	f
arma_cungqr	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	102;"	d
arma_cungqr	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	331;"	d
arma_cungqr	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_cungqr)(const blas_int* m, const blas_int* n, const blas_int* k, blas_cxf* a, const blas_int* lda,   const blas_cxf* tau, blas_cxf* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_cungqr	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_cungqr)(const blas_int* m, const blas_int* n, const blas_int* k, blas_cxf* a, const blas_int* lda,   const blas_cxf* tau, blas_cxf* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_cx_median_packet	lib/armadillo-9.800.2/include/armadillo_bits/op_median_bones.hpp	/^struct arma_cx_median_packet$/;"	s
arma_cx_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_cx_only< cx_double > { typedef cx_double result; };$/;"	s
arma_cx_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_cx_only< cx_float  > { typedef cx_float  result; };$/;"	s
arma_cx_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_cx_only { };$/;"	s
arma_dasum	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	28;"	d
arma_dasum	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	55;"	d
arma_dasum	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    double arma_fortran_with_prefix(arma_dasum)(const blas_int* n, const double* x, const blas_int* incx)$/;"	f
arma_dasum	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    double arma_fortran_with_prefix(arma_dasum)(const blas_int* n, const double* x, const blas_int* incx)$/;"	f
arma_ddot	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	34;"	d
arma_ddot	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	61;"	d
arma_ddot	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    double arma_fortran_with_prefix(arma_ddot)(const blas_int* n, const double* x, const blas_int* incx, const double* y, const blas_int* incy)$/;"	f
arma_ddot	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    double arma_fortran_with_prefix(arma_ddot)(const blas_int* n, const double* x, const blas_int* incx, const double* y, const blas_int* incy)$/;"	f
arma_debug_assert_atlas_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1250;"	d
arma_debug_assert_atlas_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1263;"	d
arma_debug_assert_blas_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1249;"	d
arma_debug_assert_blas_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1262;"	d
arma_debug_assert_cube_as_mat	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1248;"	d
arma_debug_assert_cube_as_mat	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1261;"	d
arma_debug_assert_mul_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1246;"	d
arma_debug_assert_mul_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1259;"	d
arma_debug_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1245;"	d
arma_debug_assert_same_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1258;"	d
arma_debug_assert_trans_mul_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1247;"	d
arma_debug_assert_trans_mul_size	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1260;"	d
arma_debug_check	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1243;"	d
arma_debug_check	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1256;"	d
arma_debug_print	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1241;"	d
arma_debug_print	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1254;"	d
arma_debug_set_error	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1244;"	d
arma_debug_set_error	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1257;"	d
arma_debug_warn	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1242;"	d
arma_debug_warn	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1255;"	d
arma_deprecated	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	211;"	d
arma_deprecated	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	221;"	d
arma_deprecated	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	23;"	d
arma_deprecated	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	303;"	d
arma_deprecated	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	304;"	d
arma_deprecated	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	34;"	d
arma_deprecated	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	393;"	d
arma_deprecated	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	394;"	d
arma_dgbcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	230;"	d
arma_dgbcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	459;"	d
arma_dgbcon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgbcon)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const double* ab, const blas_int* ldab, const blas_int* ipiv, const double* anorm, double* rcond, double* work, blas_int* iwork, blas_int* info)$/;"	f
arma_dgbcon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgbcon)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const double* ab, const blas_int* ldab, const blas_int* ipiv, const double* anorm, double* rcond, double* work, blas_int* iwork, blas_int* info, blas_len norm_len)$/;"	f
arma_dgbsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	162;"	d
arma_dgbsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	391;"	d
arma_dgbsv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgbsv)(const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs,   double* ab, const blas_int* ldab, blas_int* ipiv,   double* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_dgbsv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgbsv)(const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs,   double* ab, const blas_int* ldab, blas_int* ipiv,   double* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_dgbsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	167;"	d
arma_dgbsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	396;"	d
arma_dgbsvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgbsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, double* ab, const blas_int* ldab, double* afb, const blas_int* ldafb, blas_int* ipiv, char* equed, double* r, double* c, double* b, const blas_int* ldb, double* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, double* work, blas_int* iwork, blas_int* info)$/;"	f
arma_dgbsvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgbsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, double* ab, const blas_int* ldab, double* afb, const blas_int* ldafb, blas_int* ipiv, char* equed, double* r, double* c, double* b, const blas_int* ldb, double* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, double* work, blas_int* iwork, blas_int* info, blas_len fact_len, blas_len trans_len, blas_len equed_len)$/;"	f
arma_dgbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	152;"	d
arma_dgbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	381;"	d
arma_dgbtrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgbtrf)(const blas_int* m, const blas_int* n, const blas_int* kl, const blas_int* ku,   double* ab, const blas_int* ldab, blas_int* ipiv, blas_int* info)$/;"	f
arma_dgbtrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgbtrf)(const blas_int* m, const blas_int* n, const blas_int* kl, const blas_int* ku,   double* ab, const blas_int* ldab, blas_int* ipiv, blas_int* info)$/;"	f
arma_dgbtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	157;"	d
arma_dgbtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	386;"	d
arma_dgbtrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgbtrs)(const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, const   double* ab, const blas_int* ldab, const blas_int* ipiv,   double* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_dgbtrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgbtrs)(const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, const   double* ab, const blas_int* ldab, const blas_int* ipiv,   double* b, const blas_int* ldb, blas_int* info, blas_len trans_len)$/;"	f
arma_dgecon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	215;"	d
arma_dgecon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	444;"	d
arma_dgecon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgecon)(const char* norm, const blas_int* n, const double* a, const blas_int* lda, const double* anorm, double* rcond, double* work, blas_int* iwork, blas_int* info)$/;"	f
arma_dgecon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgecon)(const char* norm, const blas_int* n, const double* a, const blas_int* lda, const double* anorm, double* rcond, double* work, blas_int* iwork, blas_int* info, blas_len norm_len)$/;"	f
arma_dgees	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	182;"	d
arma_dgees	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	411;"	d
arma_dgees	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgees)(const char* jobvs, const char* sort, fn_select_d2 select, const blas_int* n, double* a, const blas_int* lda, blas_int* sdim, double* wr, double* wi, double* vs, const blas_int* ldvs, double* work, const blas_int* lwork, blas_int* bwork, blas_int* info)$/;"	f
arma_dgees	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgees)(const char* jobvs, const char* sort, fn_select_d2 select, const blas_int* n, double* a, const blas_int* lda, blas_int* sdim, double* wr, double* wi, double* vs, const blas_int* ldvs, double* work, const blas_int* lwork, blas_int* bwork, blas_int* info, blas_len jobvs_len, blas_len sort_len)$/;"	f
arma_dgeev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	276;"	d
arma_dgeev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	47;"	d
arma_dgeev	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgeev)(const char* jobvl, const char* jobvr, const blas_int* n, double* a, const blas_int* lda, double* wr, double* wi, double* vl, const blas_int* ldvl, double* vr, const blas_int* ldvr, double* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_dgeev	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgeev)(const char* jobvl, const char* jobvr, const blas_int* n, double* a, const blas_int* lda, double* wr, double* wi, double* vl, const blas_int* ldvl, double* vr, const blas_int* ldvr, double* work, const blas_int* lwork, blas_int* info, blas_len jobvl_len, blas_len jobvr_len)$/;"	f
arma_dgeevx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	281;"	d
arma_dgeevx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	52;"	d
arma_dgeevx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgeevx)(const char* balanc, const char* jobvl, const char* jobvr, const char* sense, const blas_int* n, double* a, const blas_int* lda, double* wr, double* wi, double* vl, const blas_int* ldvl, double* vr, const blas_int* ldvr, blas_int* ilo, blas_int* ihi, double* scale, double* abnrm, double* rconde, double* rcondv, double* work, const blas_int* lwork, blas_int* iwork, blas_int* info)$/;"	f
arma_dgeevx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgeevx)(const char* balanc, const char* jobvl, const char* jobvr, const char* sense, const blas_int* n, double* a, const blas_int* lda, double* wr, double* wi, double* vl, const blas_int* ldvl, double* vr, const blas_int* ldvr, blas_int* ilo, blas_int* ihi, double* scale, double* abnrm, double* rconde, double* rcondv, double* work, const blas_int* lwork, blas_int* iwork, blas_int* info, blas_len balanc_len, blas_len jobvl_len, blas_len jobvr_len, blas_len sense_len)$/;"	f
arma_dgehrd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	249;"	d
arma_dgehrd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	478;"	d
arma_dgehrd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgehrd)(const blas_int* n, const blas_int* ilo, const blas_int* ihi,   double* a, const blas_int* lda,   double* tao,   double* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_dgehrd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgehrd)(const blas_int* n, const blas_int* ilo, const blas_int* ihi,   double* a, const blas_int* lda,   double* tao,   double* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_dgels	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	137;"	d
arma_dgels	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	366;"	d
arma_dgels	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgels)(const char* trans, const blas_int* m, const blas_int* n, const blas_int* nrhs,   double* a, const blas_int* lda,   double* b, const blas_int* ldb,   double* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_dgels	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgels)(const char* trans, const blas_int* m, const blas_int* n, const blas_int* nrhs,   double* a, const blas_int* lda,   double* b, const blas_int* ldb,   double* work, const blas_int* lwork, blas_int* info, blas_len trans_len)$/;"	f
arma_dgelsd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	142;"	d
arma_dgelsd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	371;"	d
arma_dgelsd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgelsd)(const blas_int* m, const blas_int* n, const blas_int* nrhs, double* a, const blas_int* lda, double* b, const blas_int* ldb, double* S, const double* rcond, blas_int* rank, double* work, const blas_int* lwork, blas_int* iwork, blas_int* info)$/;"	f
arma_dgelsd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgelsd)(const blas_int* m, const blas_int* n, const blas_int* nrhs, double* a, const blas_int* lda, double* b, const blas_int* ldb, double* S, const double* rcond, blas_int* rank, double* work, const blas_int* lwork, blas_int* iwork, blas_int* info)$/;"	f
arma_dgemm	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	42;"	d
arma_dgemm	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	69;"	d
arma_dgemm	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgemm)(const char* transA, const char* transB, const blas_int* m, const blas_int* n, const blas_int* k, const double* alpha, const double* A, const blas_int* ldA, const double* B, const blas_int* ldB, const double* beta, double* C, const blas_int* ldC)$/;"	f
arma_dgemm	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgemm)(const char* transA, const char* transB, const blas_int* m, const blas_int* n, const blas_int* k, const double* alpha, const double* A, const blas_int* ldA, const double* B, const blas_int* ldB, const double* beta, double* C, const blas_int* ldC, blas_len transA_len, blas_len transB_len)$/;"	f
arma_dgemv	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	37;"	d
arma_dgemv	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	64;"	d
arma_dgemv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgemv)(const char* transA, const blas_int* m, const blas_int* n, const double* alpha, const double* A, const blas_int* ldA, const double* x, const blas_int* incx, const double* beta, double* y, const blas_int* incy)$/;"	f
arma_dgemv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgemv)(const char* transA, const blas_int* m, const blas_int* n, const double* alpha, const double* A, const blas_int* ldA, const double* x, const blas_int* incx, const double* beta, double* y, const blas_int* incy, blas_len transA_len)$/;"	f
arma_dgeqrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	324;"	d
arma_dgeqrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	95;"	d
arma_dgeqrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgeqrf)(const blas_int* m, const blas_int* n,   double* a, const blas_int* lda,   double* tau,   double* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_dgeqrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgeqrf)(const blas_int* m, const blas_int* n,   double* a, const blas_int* lda,   double* tau,   double* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_dgesdd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	112;"	d
arma_dgesdd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	341;"	d
arma_dgesdd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgesdd)(const char* jobz, const blas_int* m, const blas_int* n, double* a, const blas_int* lda, double* s, double* u, const blas_int* ldu, double* vt, const blas_int* ldvt, double* work, const blas_int* lwork, blas_int* iwork, blas_int* info)$/;"	f
arma_dgesdd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgesdd)(const char* jobz, const blas_int* m, const blas_int* n, double* a, const blas_int* lda, double* s, double* u, const blas_int* ldu, double* vt, const blas_int* ldvt, double* work, const blas_int* lwork, blas_int* iwork, blas_int* info, blas_len jobz_len)$/;"	f
arma_dgesv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	117;"	d
arma_dgesv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	346;"	d
arma_dgesv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgesv)(const blas_int* n, const blas_int* nrhs,   double* a, const blas_int* lda, blas_int* ipiv,   double* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_dgesv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgesv)(const blas_int* n, const blas_int* nrhs,   double* a, const blas_int* lda, blas_int* ipiv,   double* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_dgesvd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	106;"	d
arma_dgesvd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	335;"	d
arma_dgesvd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgesvd)(const char* jobu, const char* jobvt, const blas_int* m, const blas_int* n, double* a, const blas_int* lda, double* s, double* u, const blas_int* ldu, double* vt, const blas_int* ldvt, double* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_dgesvd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgesvd)(const char* jobu, const char* jobvt, const blas_int* m, const blas_int* n, double* a, const blas_int* lda, double* s, double* u, const blas_int* ldu, double* vt, const blas_int* ldvt, double* work, const blas_int* lwork, blas_int* info, blas_len jobu_len, blas_len jobvt_len)$/;"	f
arma_dgesvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	122;"	d
arma_dgesvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	351;"	d
arma_dgesvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgesvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs, double* a, const blas_int* lda, double* af, const blas_int* ldaf, blas_int* ipiv, char* equed, double* r, double* c, double* b, const blas_int* ldb, double* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, double* work, blas_int* iwork, blas_int* info)$/;"	f
arma_dgesvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgesvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs, double* a, const blas_int* lda, double* af, const blas_int* ldaf, blas_int* ipiv, char* equed, double* r, double* c, double* b, const blas_int* ldb, double* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, double* work, blas_int* iwork, blas_int* info, blas_len fact_len, blas_len trans_len, blas_len equed_len)$/;"	f
arma_dgetrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	256;"	d
arma_dgetrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	27;"	d
arma_dgetrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgetrf)(const blas_int* m, const blas_int* n,   double* a, const blas_int* lda, blas_int* ipiv, blas_int* info)$/;"	f
arma_dgetrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgetrf)(const blas_int* m, const blas_int* n,   double* a, const blas_int* lda, blas_int* ipiv, blas_int* info)$/;"	f
arma_dgetri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	266;"	d
arma_dgetri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	37;"	d
arma_dgetri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgetri)(const blas_int* n,   double* a, const blas_int* lda, const blas_int* ipiv,   double* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_dgetri	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgetri)(const blas_int* n,   double* a, const blas_int* lda, const blas_int* ipiv,   double* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_dgetrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	261;"	d
arma_dgetrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	32;"	d
arma_dgetrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgetrs)(const char* trans, const blas_int* n, const blas_int* nrhs, const   double* a, const blas_int* lda, const blas_int* ipiv,   double* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_dgetrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgetrs)(const char* trans, const blas_int* n, const blas_int* nrhs, const   double* a, const blas_int* lda, const blas_int* ipiv,   double* b, const blas_int* ldb, blas_int* info, const blas_len trans_len)$/;"	f
arma_dgges	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	192;"	d
arma_dgges	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	421;"	d
arma_dgges	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgges)(const char* jobvsl, const char* jobvsr, const char* sort, fn_select_d3 selctg, const blas_int* n, double* a, const blas_int* lda, double* b, const blas_int* ldb, blas_int* sdim, double* alphar, double* alphai, double* beta, double* vsl, const blas_int* ldvsl, double* vsr, const blas_int* ldvsr, double* work, const blas_int* lwork, blas_int* bwork, blas_int* info)$/;"	f
arma_dgges	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgges)(const char* jobvsl, const char* jobvsr, const char* sort, fn_select_d3 selctg, const blas_int* n, double* a, const blas_int* lda, double* b, const blas_int* ldb, blas_int* sdim, double* alphar, double* alphai, double* beta, double* vsl, const blas_int* ldvsl, double* vsr, const blas_int* ldvsr, double* work, const blas_int* lwork, blas_int* bwork, blas_int* info, blas_len jobvsl_len, blas_len jobvsr_len, blas_len sort_len)$/;"	f
arma_dggev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	298;"	d
arma_dggev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	69;"	d
arma_dggev	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dggev)(const char* jobvl, const char* jobvr, const blas_int* n, double* a, const blas_int* lda, double* b, const blas_int* ldb, double* alphar, double* alphai, double* beta, double* vl, const blas_int* ldvl, double* vr, const blas_int* ldvr, double* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_dggev	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dggev)(const char* jobvl, const char* jobvr, const blas_int* n, double* a, const blas_int* lda, double* b, const blas_int* ldb, double* alphar, double* alphai, double* beta, double* vl, const blas_int* ldvl, double* vr, const blas_int* ldvr, double* work, const blas_int* lwork, blas_int* info, blas_len jobvl_len, blas_len jobvr_len)$/;"	f
arma_dgtsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	172;"	d
arma_dgtsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	401;"	d
arma_dgtsv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgtsv)(const blas_int* n, const blas_int* nrhs,   double* dl,   double* d,   double* du,   double* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_dgtsv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgtsv)(const blas_int* n, const blas_int* nrhs,   double* dl,   double* d,   double* du,   double* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_dgtsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	177;"	d
arma_dgtsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	406;"	d
arma_dgtsvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dgtsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs, const double* dl, const double* d, const double* du, double* dlf, double* df, double* duf, double* du2, blas_int* ipiv, const double* b, const blas_int* ldb, double* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, double* work, blas_int* iwork, blas_int* info)$/;"	f
arma_dgtsvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dgtsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs, const double* dl, const double* d, const double* du, double* dlf, double* df, double* duf, double* du2, blas_int* ipiv, const double* b, const blas_int* ldb, double* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, double* work, blas_int* iwork, blas_int* info, blas_len fact_len, blas_len trans_len)$/;"	f
arma_dlahqr	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	237;"	d
arma_dlahqr	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	466;"	d
arma_dlahqr	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dlahqr)(const blas_int* wantt, const blas_int* wantz, const blas_int* n, const blas_int* ilo, const blas_int* ihi, double* h, const blas_int* ldh, double* wr, double* wi, const blas_int* iloz, const blas_int* ihiz, double* z, const blas_int* ldz, blas_int* info)$/;"	f
arma_dlahqr	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dlahqr)(const blas_int* wantt, const blas_int* wantz, const blas_int* n, const blas_int* ilo, const blas_int* ihi, double* h, const blas_int* ldh, double* wr, double* wi, const blas_int* iloz, const blas_int* ihiz, double* z, const blas_int* ldz, blas_int* info)$/;"	f
arma_dlangb	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	210;"	d
arma_dlangb	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	439;"	d
arma_dlangb	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    double arma_fortran_with_prefix(arma_dlangb)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const   double* ab, const blas_int* ldab, double* work)$/;"	f
arma_dlangb	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    double arma_fortran_with_prefix(arma_dlangb)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const   double* ab, const blas_int* ldab, double* work, blas_len norm_len)$/;"	f
arma_dlange	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	197;"	d
arma_dlange	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	426;"	d
arma_dlange	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    double arma_fortran_with_prefix(arma_dlange)(const char* norm, const blas_int* m, const blas_int* n, const   double* a, const blas_int* lda, double* work)$/;"	f
arma_dlange	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    double arma_fortran_with_prefix(arma_dlange)(const char* norm, const blas_int* m, const blas_int* n, const   double* a, const blas_int* lda, double* work, blas_len norm_len)$/;"	f
arma_dlansy	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	202;"	d
arma_dlansy	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	431;"	d
arma_dlansy	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    double arma_fortran_with_prefix(arma_dlansy)(const char* norm, const char* uplo, const blas_int* n, const   double* a, const blas_int* lda, double* work)$/;"	f
arma_dlansy	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    double arma_fortran_with_prefix(arma_dlansy)(const char* norm, const char* uplo, const blas_int* n, const   double* a, const blas_int* lda, double* work, blas_len norm_len, blas_len uplo_len)$/;"	f
arma_dlarnv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	246;"	d
arma_dlarnv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	475;"	d
arma_dlarnv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dlarnv)(const blas_int* idist, blas_int* iseed, const blas_int* n, double* x)$/;"	f
arma_dlarnv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dlarnv)(const blas_int* idist, blas_int* iseed, const blas_int* n, double* x)$/;"	f
arma_dnaupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	23;"	d
arma_dnaupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	41;"	d
arma_dnaupd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dnaupd)(blas_int* ido, char* bmat, blas_int* n, char* which, blas_int* nev, double* tol, double* resid, blas_int* ncv, double* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, double* workd, double* workl, blas_int* lworkl, blas_int* info)$/;"	f
arma_dnaupd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dnaupd)(blas_int* ido, char* bmat, blas_int* n, char* which, blas_int* nev, double* tol, double* resid, blas_int* ncv, double* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, double* workd, double* workl, blas_int* lworkl, blas_int* info, blas_len bmat_len, blas_len which_len)$/;"	f
arma_dneupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	28;"	d
arma_dneupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	46;"	d
arma_dneupd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dneupd)(blas_int* rvec, char* howmny, blas_int* select, double* dr, double* di, double* z, blas_int* ldz, double* sigmar, double* sigmai, double* workev, char* bmat, blas_int* n, char* which, blas_int* nev, double* tol, double* resid, blas_int* ncv, double* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, double* workd, double* workl, blas_int* lworkl, blas_int* info)$/;"	f
arma_dneupd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dneupd)(blas_int* rvec, char* howmny, blas_int* select, double* dr, double* di, double* z, blas_int* ldz, double* sigmar, double* sigmai, double* workev, char* bmat, blas_int* n, char* which, blas_int* nev, double* tol, double* resid, blas_int* ncv, double* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, double* workd, double* workl, blas_int* lworkl, blas_int* info, blas_len howmny_len, blas_len bmat_len, blas_len which_len)$/;"	f
arma_dnrm2	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	31;"	d
arma_dnrm2	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	58;"	d
arma_dnrm2	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    double arma_fortran_with_prefix(arma_dnrm2)(const blas_int* n, const double* x, const blas_int* incx)$/;"	f
arma_dnrm2	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    double arma_fortran_with_prefix(arma_dnrm2)(const blas_int* n, const double* x, const blas_int* incx)$/;"	f
arma_dorgqr	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	100;"	d
arma_dorgqr	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	329;"	d
arma_dorgqr	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dorgqr)(const blas_int* m, const blas_int* n, const blas_int* k, double* a, const blas_int* lda, const double* tau, double* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_dorgqr	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dorgqr)(const blas_int* m, const blas_int* n, const blas_int* k, double* a, const blas_int* lda, const double* tau, double* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_dpbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	314;"	d
arma_dpbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	85;"	d
arma_dpbtrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dpbtrf)(const char* uplo, const blas_int* n, const blas_int* kd,   double* ab, const blas_int* ldab, blas_int* info)$/;"	f
arma_dpbtrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dpbtrf)(const char* uplo, const blas_int* n, const blas_int* kd,   double* ab, const blas_int* ldab, blas_int* info, blas_len uplo_len)$/;"	f
arma_dpocon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	220;"	d
arma_dpocon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	449;"	d
arma_dpocon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dpocon)(const char* uplo, const blas_int* n, const double* a, const blas_int* lda, const double* anorm, double* rcond, double* work, blas_int* iwork, blas_int* info)$/;"	f
arma_dpocon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dpocon)(const char* uplo, const blas_int* n, const double* a, const blas_int* lda, const double* anorm, double* rcond, double* work, blas_int* iwork, blas_int* info, blas_len uplo_len)$/;"	f
arma_dposv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	127;"	d
arma_dposv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	356;"	d
arma_dposv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dposv)(const char* uplo, const blas_int* n, const blas_int* nrhs,   double* a, const blas_int* lda,   double* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_dposv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dposv)(const char* uplo, const blas_int* n, const blas_int* nrhs,   double* a, const blas_int* lda,   double* b, const blas_int* ldb, blas_int* info, blas_len uplo_len)$/;"	f
arma_dposvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	132;"	d
arma_dposvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	361;"	d
arma_dposvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dposvx)(const char* fact, const char* uplo, const blas_int* n, const blas_int* nrhs, double* a, const blas_int* lda, double* af, const blas_int* ldaf, char* equed, double* s, double* b, const blas_int* ldb, double* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, double* work, blas_int* iwork, blas_int* info)$/;"	f
arma_dposvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dposvx)(const char* fact, const char* uplo, const blas_int* n, const blas_int* nrhs, double* a, const blas_int* lda, double* af, const blas_int* ldaf, char* equed, double* s, double* b, const blas_int* ldb, double* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, double* work, blas_int* iwork, blas_int* info, blas_len fact_len, blas_len uplo_len, blas_len equed_len)$/;"	f
arma_dpotrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	304;"	d
arma_dpotrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	75;"	d
arma_dpotrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dpotrf)(const char* uplo, const blas_int* n,   double* a, const blas_int* lda, blas_int* info)$/;"	f
arma_dpotrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dpotrf)(const char* uplo, const blas_int* n,   double* a, const blas_int* lda, blas_int* info, blas_len uplo_len)$/;"	f
arma_dpotri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	319;"	d
arma_dpotri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	90;"	d
arma_dpotri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dpotri)(const char* uplo, const blas_int* n,   double* a, const blas_int* lda, blas_int* info)$/;"	f
arma_dpotri	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dpotri)(const char* uplo, const blas_int* n,   double* a, const blas_int* lda, blas_int* info, blas_len uplo_len)$/;"	f
arma_dpotrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	309;"	d
arma_dpotrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	80;"	d
arma_dpotrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dpotrs)(const char* uplo, const blas_int* n, const blas_int* nrhs, const   double* a, const blas_int* lda,   double* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_dpotrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dpotrs)(const char* uplo, const blas_int* n, const blas_int* nrhs, const   double* a, const blas_int* lda,   double* b, const blas_int* ldb, blas_int* info, blas_len uplo_len)$/;"	f
arma_dsaupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	33;"	d
arma_dsaupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	51;"	d
arma_dsaupd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dsaupd)(blas_int* ido, char* bmat, blas_int* n, char* which, blas_int* nev, double* tol, double* resid, blas_int* ncv, double* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, double* workd, double* workl, blas_int* lworkl, blas_int* info)$/;"	f
arma_dsaupd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dsaupd)(blas_int* ido, char* bmat, blas_int* n, char* which, blas_int* nev, double* tol, double* resid, blas_int* ncv, double* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, double* workd, double* workl, blas_int* lworkl, blas_int* info, blas_len bmat_len, blas_len which_len)$/;"	f
arma_dseupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	36;"	d
arma_dseupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	54;"	d
arma_dseupd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dseupd)(blas_int* rvec, char* howmny, blas_int* select, double* d, double* z, blas_int* ldz, double* sigma, char* bmat, blas_int* n, char* which, blas_int* nev, double* tol, double* resid, blas_int* ncv, double* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, double* workd, double* workl, blas_int* lworkl, blas_int* info)$/;"	f
arma_dseupd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dseupd)(blas_int* rvec, char* howmny, blas_int* select, double* d, double* z, blas_int* ldz, double* sigma, char* bmat, blas_int* n, char* which, blas_int* nev, double* tol, double* resid, blas_int* ncv, double* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, double* workd, double* workl, blas_int* lworkl, blas_int* info, blas_len howmny_len, blas_len bmat_len, blas_len which_len)$/;"	f
arma_dstedc	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	240;"	d
arma_dstedc	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	469;"	d
arma_dstedc	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dstedc)(const char* compz, const blas_int* n, double* d, double* e, double* z, const blas_int* ldz, double* work, const blas_int* lwork, blas_int* iwork, const blas_int* liwork, blas_int* info)$/;"	f
arma_dstedc	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dstedc)(const char* compz, const blas_int* n, double* d, double* e, double* z, const blas_int* ldz, double* work, const blas_int* lwork, blas_int* iwork, const blas_int* liwork, blas_int* info, blas_len compz_len)$/;"	f
arma_dsyev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	286;"	d
arma_dsyev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	57;"	d
arma_dsyev	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dsyev)(const char* jobz, const char* uplo, const blas_int* n, double* a, const blas_int* lda, double* w, double* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_dsyev	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dsyev)(const char* jobz, const char* uplo, const blas_int* n, double* a, const blas_int* lda, double* w, double* work, const blas_int* lwork, blas_int* info, blas_len jobz_len, blas_len uplo_len)$/;"	f
arma_dsyevd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	292;"	d
arma_dsyevd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	63;"	d
arma_dsyevd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dsyevd)(const char* jobz, const char* uplo, const blas_int* n, double* a, const blas_int* lda, double* w, double* work, const blas_int* lwork, blas_int* iwork, const blas_int* liwork, blas_int* info)$/;"	f
arma_dsyevd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dsyevd)(const char* jobz, const char* uplo, const blas_int* n, double* a, const blas_int* lda, double* w, double* work, const blas_int* lwork, blas_int* iwork, const blas_int* liwork, blas_int* info, blas_len jobz_len, blas_len uplo_len)$/;"	f
arma_dsyrk	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	47;"	d
arma_dsyrk	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	74;"	d
arma_dsyrk	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dsyrk)(const char* uplo, const char* transA, const blas_int* n, const blas_int* k, const double* alpha, const double* A, const blas_int* ldA, const double* beta, double* C, const blas_int* ldC)$/;"	f
arma_dsyrk	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dsyrk)(const char* uplo, const char* transA, const blas_int* n, const blas_int* k, const double* alpha, const double* A, const blas_int* ldA, const double* beta, double* C, const blas_int* ldC, blas_len uplo_len, blas_len transA_len)$/;"	f
arma_dtrcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	225;"	d
arma_dtrcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	454;"	d
arma_dtrcon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dtrcon)(const char* norm, const char* uplo, const char* diag, const blas_int* n, const double* a, const blas_int* lda, double* rcond, double* work, blas_int* iwork, blas_int* info)$/;"	f
arma_dtrcon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dtrcon)(const char* norm, const char* uplo, const char* diag, const blas_int* n, const double* a, const blas_int* lda, double* rcond, double* work, blas_int* iwork, blas_int* info, blas_len norm_len, blas_len uplo_len, blas_len diag_len)$/;"	f
arma_dtrevc	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	243;"	d
arma_dtrevc	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	472;"	d
arma_dtrevc	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dtrevc)(const char* side, const char* howmny, blas_int* select, const blas_int* n, const double* t, const blas_int* ldt, double* vl, const blas_int* ldvl, double* vr, const blas_int* ldvr, const blas_int* mm, blas_int* m, double* work, blas_int* info)$/;"	f
arma_dtrevc	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dtrevc)(const char* side, const char* howmny, blas_int* select, const blas_int* n, const double* t, const blas_int* ldt, double* vl, const blas_int* ldvl, double* vr, const blas_int* ldvr, const blas_int* mm, blas_int* m, double* work, blas_int* info, blas_len side_len, blas_len howmny_len)$/;"	f
arma_dtrsyl	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	187;"	d
arma_dtrsyl	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	416;"	d
arma_dtrsyl	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dtrsyl)(const char* transa, const char* transb, const blas_int* isgn, const blas_int* m, const blas_int* n, const   double* a, const blas_int* lda, const   double* b, const blas_int* ldb,   double* c, const blas_int* ldc, double* scale, blas_int* info)$/;"	f
arma_dtrsyl	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dtrsyl)(const char* transa, const char* transb, const blas_int* isgn, const blas_int* m, const blas_int* n, const   double* a, const blas_int* lda, const   double* b, const blas_int* ldb,   double* c, const blas_int* ldc, double* scale, blas_int* info, blas_len transa_len, blas_len transb_len)$/;"	f
arma_dtrtri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	271;"	d
arma_dtrtri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	42;"	d
arma_dtrtri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dtrtri)(const char* uplo, const char* diag, const blas_int* n,   double* a, const blas_int* lda, blas_int* info)$/;"	f
arma_dtrtri	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dtrtri)(const char* uplo, const char* diag, const blas_int* n,   double* a, const blas_int* lda, blas_int* info, blas_len uplo_len, blas_len diag_len)$/;"	f
arma_dtrtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	147;"	d
arma_dtrtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	376;"	d
arma_dtrtrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_dtrtrs)(const char* uplo, const char* trans, const char* diag, const blas_int* n, const blas_int* nrhs, const   double* a, const blas_int* lda,   double* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_dtrtrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_dtrtrs)(const char* uplo, const char* trans, const char* diag, const blas_int* n, const blas_int* nrhs, const   double* a, const blas_int* lda,   double* b, const blas_int* ldb, blas_int* info, blas_len uplo_len, blas_len trans_len, blas_len diag_len)$/;"	f
arma_elem_size_test	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem_check.hpp	/^  struct arma_elem_size_test$/;"	s	namespace:junk
arma_empty_class	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^class arma_empty_class {};$/;"	c
arma_extra_debug_check	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1275;"	d
arma_extra_debug_check	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1283;"	d
arma_extra_debug_print	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1273;"	d
arma_extra_debug_print	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1281;"	d
arma_extra_debug_sigprint	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1271;"	d
arma_extra_debug_sigprint	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1279;"	d
arma_extra_debug_sigprint_this	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1272;"	d
arma_extra_debug_sigprint_this	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1280;"	d
arma_extra_debug_warn	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1274;"	d
arma_extra_debug_warn	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	1282;"	d
arma_find_unique_comparator	lib/armadillo-9.800.2/include/armadillo_bits/op_find_unique_bones.hpp	/^struct arma_find_unique_comparator$/;"	s
arma_find_unique_comparator	lib/armadillo-9.800.2/include/armadillo_bits/op_find_unique_bones.hpp	/^struct arma_find_unique_comparator< std::complex<T> >$/;"	s
arma_find_unique_packet	lib/armadillo-9.800.2/include/armadillo_bits/op_find_unique_bones.hpp	/^struct arma_find_unique_packet$/;"	s
arma_first_extra_debug_message	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^      arma_first_extra_debug_message()$/;"	f	class:junk::arma_first_extra_debug_message
arma_first_extra_debug_message	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^    class arma_first_extra_debug_message$/;"	c	namespace:junk
arma_first_extra_debug_message_run	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^    static arma_first_extra_debug_message arma_first_extra_debug_message_run;$/;"	m	namespace:junk
arma_fixed_indicator	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct arma_fixed_indicator   {};$/;"	s
arma_fortran	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	61;"	d
arma_fortran	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	65;"	d
arma_fortran	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	68;"	d
arma_fortran_sans_prefix	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	72;"	d
arma_fortran_sans_prefix	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	75;"	d
arma_fortran_sans_prefix_B	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	40;"	d
arma_fortran_sans_prefix_B	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	44;"	d
arma_fortran_sans_prefix_B	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	52;"	d
arma_fortran_with_prefix	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	73;"	d
arma_fortran_with_prefix	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	76;"	d
arma_fortran_with_prefix_B	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	41;"	d
arma_fortran_with_prefix_B	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	47;"	d
arma_fortran_with_prefix_B	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	49;"	d
arma_fortran_with_prefix_B	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	55;"	d
arma_fortran_with_prefix_B	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	57;"	d
arma_geq_comparator	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^struct arma_geq_comparator$/;"	s
arma_geq_comparator	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^struct arma_geq_comparator< std::complex<T> >$/;"	s
arma_glue_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_and   > { typedef int result; };$/;"	s
arma_glue_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_eq    > { typedef int result; };$/;"	s
arma_glue_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_gt    > { typedef int result; };$/;"	s
arma_glue_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_gteq  > { typedef int result; };$/;"	s
arma_glue_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_lt    > { typedef int result; };$/;"	s
arma_glue_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_lteq  > { typedef int result; };$/;"	s
arma_glue_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_noteq > { typedef int result; };$/;"	s
arma_glue_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_or    > { typedef int result; };$/;"	s
arma_glue_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_glue_rel_only { };$/;"	s
arma_gt_comparator	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^struct arma_gt_comparator$/;"	s
arma_gt_comparator	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^struct arma_gt_comparator< std::complex<T> >$/;"	s
arma_hot	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	18;"	d
arma_hot	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	206;"	d
arma_hot	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	216;"	d
arma_hot	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	29;"	d
arma_hot	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	323;"	d
arma_hot	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	324;"	d
arma_hypot	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_hypot(const double x, const double y)$/;"	f
arma_hypot	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_hypot(const eT x, const eT y)$/;"	f
arma_hypot	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_hypot(const float x, const float y)$/;"	f
arma_hypot_generic	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_hypot_generic(const eT x, const eT y)$/;"	f
arma_ignore	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	27;"	d
arma_ignore	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	38;"	d
arma_ilaenv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	234;"	d
arma_ilaenv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	463;"	d
arma_ilaenv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    blas_int arma_fortran_with_prefix(arma_ilaenv)(const blas_int* ispec, const char* name, const char* opts, const blas_int* n1, const blas_int* n2, const blas_int* n3, const blas_int* n4)$/;"	f
arma_ilaenv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    blas_int arma_fortran_with_prefix(arma_ilaenv)(const blas_int* ispec, const char* name, const char* opts, const blas_int* n1, const blas_int* n2, const blas_int* n3, const blas_int* n4, blas_len name_len, blas_len opts_len)$/;"	f
arma_incompat_size_string	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_incompat_size_string(const subview_cube<eT>& Q, const Mat<eT>& A, const char* x)$/;"	f
arma_incompat_size_string	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_incompat_size_string(const uword A_n_rows, const uword A_n_cols, const uword A_n_slices, const uword B_n_rows, const uword B_n_cols, const uword B_n_slices, const char* x)$/;"	f
arma_incompat_size_string	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_incompat_size_string(const uword A_n_rows, const uword A_n_cols, const uword B_n_rows, const uword B_n_cols, const char* x)$/;"	f
arma_inline	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	213;"	d
arma_inline	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	223;"	d
arma_inline	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	25;"	d
arma_inline	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	313;"	d
arma_inline	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	314;"	d
arma_inline	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	36;"	d
arma_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< s16    > { typedef s16 result; };$/;"	s
arma_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< s32    > { typedef s32 result; };$/;"	s
arma_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< s64    > { typedef s64 result; };$/;"	s
arma_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< s8     > { typedef s8  result; };$/;"	s
arma_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< slng_t > { typedef slng_t result; };$/;"	s
arma_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< u16    > { typedef u16 result; };$/;"	s
arma_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< u32    > { typedef u32 result; };$/;"	s
arma_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< u64    > { typedef u64 result; };$/;"	s
arma_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< u8     > { typedef u8  result; };$/;"	s
arma_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< ulng_t > { typedef ulng_t result; };$/;"	s
arma_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_integral_only { };$/;"	s
arma_isfinite	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_isfinite(const std::complex<T>& x)$/;"	f
arma_isfinite	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_isfinite(double x)$/;"	f
arma_isfinite	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_isfinite(eT val)$/;"	f
arma_isfinite	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_isfinite(float x)$/;"	f
arma_isinf	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_isinf(const std::complex<T>& x)$/;"	f
arma_isinf	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_isinf(double x)$/;"	f
arma_isinf	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_isinf(eT val)$/;"	f
arma_isinf	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_isinf(float x)$/;"	f
arma_isnan	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_isnan(const std::complex<T>& x)$/;"	f
arma_isnan	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_isnan(double x)$/;"	f
arma_isnan	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_isnan(eT val)$/;"	f
arma_isnan	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_isnan(float x)$/;"	f
arma_layout_indicator	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct arma_layout_indicator  {};$/;"	s
arma_leq_comparator	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^struct arma_leq_comparator$/;"	s
arma_leq_comparator	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^struct arma_leq_comparator< std::complex<T> >$/;"	s
arma_log1p	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_log1p(const double x)$/;"	f
arma_log1p	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_log1p(const float x)$/;"	f
arma_lt_comparator	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^struct arma_lt_comparator$/;"	s
arma_lt_comparator	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^struct arma_lt_comparator< std::complex<T> >$/;"	s
arma_malloc	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	212;"	d
arma_malloc	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	222;"	d
arma_malloc	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	24;"	d
arma_malloc	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	308;"	d
arma_malloc	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	309;"	d
arma_malloc	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	35;"	d
arma_noinline	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	214;"	d
arma_noinline	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	224;"	d
arma_noinline	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	26;"	d
arma_noinline	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	318;"	d
arma_noinline	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	319;"	d
arma_noinline	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	37;"	d
arma_not_blas_type	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_not_blas_type< cx_double > {  };$/;"	s
arma_not_blas_type	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_not_blas_type< cx_float  > {  };$/;"	s
arma_not_blas_type	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_not_blas_type< double    > {  };$/;"	s
arma_not_blas_type	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_not_blas_type< float     > {  };$/;"	s
arma_not_blas_type	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_not_blas_type { typedef T result; };$/;"	s
arma_not_cx	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_not_cx                    { typedef T result; };$/;"	s
arma_not_cx	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_not_cx< std::complex<T> > { };$/;"	s
arma_not_op_rel	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_not_op_rel< op_rel_eq        > { };$/;"	s
arma_not_op_rel	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_not_op_rel< op_rel_gt_post   > { };$/;"	s
arma_not_op_rel	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_not_op_rel< op_rel_gt_pre    > { };$/;"	s
arma_not_op_rel	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_not_op_rel< op_rel_gteq_post > { };$/;"	s
arma_not_op_rel	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_not_op_rel< op_rel_gteq_pre  > { };$/;"	s
arma_not_op_rel	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_not_op_rel< op_rel_lt_post   > { };$/;"	s
arma_not_op_rel	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_not_op_rel< op_rel_lt_pre    > { };$/;"	s
arma_not_op_rel	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_not_op_rel< op_rel_lteq_post > { };$/;"	s
arma_not_op_rel	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_not_op_rel< op_rel_lteq_pre  > { };$/;"	s
arma_not_op_rel	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_not_op_rel< op_rel_noteq     > { };$/;"	s
arma_not_op_rel	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_not_op_rel { typedef int result; };$/;"	s
arma_op_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_eq        > { typedef int result; };$/;"	s
arma_op_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_gt_post   > { typedef int result; };$/;"	s
arma_op_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_gt_pre    > { typedef int result; };$/;"	s
arma_op_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_gteq_post > { typedef int result; };$/;"	s
arma_op_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_gteq_pre  > { typedef int result; };$/;"	s
arma_op_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_lt_post   > { typedef int result; };$/;"	s
arma_op_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_lt_pre    > { typedef int result; };$/;"	s
arma_op_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_lteq_post > { typedef int result; };$/;"	s
arma_op_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_lteq_pre  > { typedef int result; };$/;"	s
arma_op_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_noteq     > { typedef int result; };$/;"	s
arma_op_rel_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_op_rel_only { };$/;"	s
arma_ostream	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_bones.hpp	/^class arma_ostream$/;"	c
arma_ostream_state	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_bones.hpp	/^class arma_ostream_state$/;"	c
arma_ostream_state	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream_state::arma_ostream_state(const std::ostream& o)$/;"	f	class:arma_ostream_state
arma_print	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_print()$/;"	f
arma_print	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_print(const T1& x)$/;"	f
arma_print	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_print(const T1& x, const T2& y)$/;"	f
arma_print	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_print(const T1& x, const T2& y, const T3& z)$/;"	f
arma_real_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_real_only< double > { typedef double result; };$/;"	s
arma_real_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_real_only< float  > { typedef float  result; };$/;"	s
arma_real_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_real_only { };$/;"	s
arma_real_or_cx_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_real_or_cx_only< cx_double > { typedef cx_double result; };$/;"	s
arma_real_or_cx_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_real_or_cx_only< cx_float  > { typedef cx_float  result; };$/;"	s
arma_real_or_cx_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_real_or_cx_only< double    > { typedef double    result; };$/;"	s
arma_real_or_cx_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_real_or_cx_only< float     > { typedef float     result; };$/;"	s
arma_real_or_cx_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_real_or_cx_only { };$/;"	s
arma_reserve_indicator	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct arma_reserve_indicator {};$/;"	s
arma_rng	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^class arma_rng$/;"	c
arma_rng_cxx11	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^class arma_rng_cxx11$/;"	c
arma_rng_cxx11_instance	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    thread_local arma_rng_cxx11 arma_rng_cxx11_instance;$/;"	m	namespace:arma	file:
arma_rng_cxx98	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx98.hpp	/^class arma_rng_cxx98$/;"	c
arma_sasum	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	27;"	d
arma_sasum	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	54;"	d
arma_sasum	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    float arma_fortran_with_prefix(arma_sasum)(const blas_int* n, const float* x, const blas_int* incx)$/;"	f
arma_sasum	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    float arma_fortran_with_prefix(arma_sasum)(const blas_int* n, const float* x, const blas_int* incx)$/;"	f
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< cx_double > { typedef cx_double result; };$/;"	s
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< cx_float  > { typedef cx_float  result; };$/;"	s
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< double    > { typedef double    result; };$/;"	s
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< float     > { typedef float     result; };$/;"	s
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< s16       > { typedef s16       result; };$/;"	s
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< s32       > { typedef s32       result; };$/;"	s
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< s64       > { typedef s64       result; };$/;"	s
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< s8        > { typedef s8        result; };$/;"	s
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< slng_t    > { typedef slng_t    result; };$/;"	s
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< u16       > { typedef u16       result; };$/;"	s
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< u32       > { typedef u32       result; };$/;"	s
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< u64       > { typedef u64       result; };$/;"	s
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< u8        > { typedef u8        result; };$/;"	s
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< ulng_t    > { typedef ulng_t    result; };$/;"	s
arma_scalar_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_scalar_only { };$/;"	s
arma_sdot	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	33;"	d
arma_sdot	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	60;"	d
arma_sdot	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    float arma_fortran_with_prefix(arma_sdot)(const blas_int* n, const float*  x, const blas_int* incx, const float*  y, const blas_int* incy)$/;"	f
arma_sdot	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    float arma_fortran_with_prefix(arma_sdot)(const blas_int* n, const float*  x, const blas_int* incx, const float*  y, const blas_int* incy)$/;"	f
arma_set_error	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_set_error(bool& err_state, char*& err_msg, const bool expression, const char* message)$/;"	f
arma_sgbcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	229;"	d
arma_sgbcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	458;"	d
arma_sgbcon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgbcon)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const  float* ab, const blas_int* ldab, const blas_int* ipiv, const  float* anorm,  float* rcond,  float* work, blas_int* iwork, blas_int* info)$/;"	f
arma_sgbcon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgbcon)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const  float* ab, const blas_int* ldab, const blas_int* ipiv, const  float* anorm,  float* rcond,  float* work, blas_int* iwork, blas_int* info, blas_len norm_len)$/;"	f
arma_sgbsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	161;"	d
arma_sgbsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	390;"	d
arma_sgbsv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgbsv)(const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs,    float* ab, const blas_int* ldab, blas_int* ipiv,    float* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_sgbsv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgbsv)(const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs,    float* ab, const blas_int* ldab, blas_int* ipiv,    float* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_sgbsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	166;"	d
arma_sgbsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	395;"	d
arma_sgbsvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgbsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs,  float* ab, const blas_int* ldab,  float* afb, const blas_int* ldafb, blas_int* ipiv, char* equed,  float* r,  float* c,  float* b, const blas_int* ldb,  float* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr,  float* work, blas_int* iwork, blas_int* info)$/;"	f
arma_sgbsvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgbsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs,  float* ab, const blas_int* ldab,  float* afb, const blas_int* ldafb, blas_int* ipiv, char* equed,  float* r,  float* c,  float* b, const blas_int* ldb,  float* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr,  float* work, blas_int* iwork, blas_int* info, blas_len fact_len, blas_len trans_len, blas_len equed_len)$/;"	f
arma_sgbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	151;"	d
arma_sgbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	380;"	d
arma_sgbtrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgbtrf)(const blas_int* m, const blas_int* n, const blas_int* kl, const blas_int* ku,    float* ab, const blas_int* ldab, blas_int* ipiv, blas_int* info)$/;"	f
arma_sgbtrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgbtrf)(const blas_int* m, const blas_int* n, const blas_int* kl, const blas_int* ku,    float* ab, const blas_int* ldab, blas_int* ipiv, blas_int* info)$/;"	f
arma_sgbtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	156;"	d
arma_sgbtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	385;"	d
arma_sgbtrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgbtrs)(const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, const    float* ab, const blas_int* ldab, const blas_int* ipiv,    float* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_sgbtrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgbtrs)(const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, const    float* ab, const blas_int* ldab, const blas_int* ipiv,    float* b, const blas_int* ldb, blas_int* info, blas_len trans_len)$/;"	f
arma_sgecon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	214;"	d
arma_sgecon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	443;"	d
arma_sgecon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgecon)(const char* norm, const blas_int* n, const  float* a, const blas_int* lda, const  float* anorm,  float* rcond,  float* work, blas_int* iwork, blas_int* info)$/;"	f
arma_sgecon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgecon)(const char* norm, const blas_int* n, const  float* a, const blas_int* lda, const  float* anorm,  float* rcond,  float* work, blas_int* iwork, blas_int* info, blas_len norm_len)$/;"	f
arma_sgees	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	181;"	d
arma_sgees	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	410;"	d
arma_sgees	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgees)(const char* jobvs, const char* sort, fn_select_s2 select, const blas_int* n,  float* a, const blas_int* lda, blas_int* sdim,  float* wr,  float* wi,  float* vs, const blas_int* ldvs,  float* work, const blas_int* lwork, blas_int* bwork, blas_int* info)$/;"	f
arma_sgees	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgees)(const char* jobvs, const char* sort, fn_select_s2 select, const blas_int* n,  float* a, const blas_int* lda, blas_int* sdim,  float* wr,  float* wi,  float* vs, const blas_int* ldvs,  float* work, const blas_int* lwork, blas_int* bwork, blas_int* info, blas_len jobvs_len, blas_len sort_len)$/;"	f
arma_sgeev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	275;"	d
arma_sgeev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	46;"	d
arma_sgeev	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgeev)(const char* jobvl, const char* jobvr, const blas_int* n,  float* a, const blas_int* lda,  float* wr,  float* wi,  float* vl, const blas_int* ldvl,  float* vr, const blas_int* ldvr,  float* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_sgeev	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgeev)(const char* jobvl, const char* jobvr, const blas_int* n,  float* a, const blas_int* lda,  float* wr,  float* wi,  float* vl, const blas_int* ldvl,  float* vr, const blas_int* ldvr,  float* work, const blas_int* lwork, blas_int* info, blas_len jobvl_len, blas_len jobvr_len)$/;"	f
arma_sgeevx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	280;"	d
arma_sgeevx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	51;"	d
arma_sgeevx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgeevx)(const char* balanc, const char* jobvl, const char* jobvr, const char* sense, const blas_int* n,  float* a, const blas_int* lda,  float* wr,  float* wi,  float* vl, const blas_int* ldvl,  float* vr, const blas_int* ldvr, blas_int* ilo, blas_int* ihi,  float* scale,  float* abnrm,  float* rconde,  float* rcondv,  float* work, const blas_int* lwork, blas_int* iwork, blas_int* info)$/;"	f
arma_sgeevx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgeevx)(const char* balanc, const char* jobvl, const char* jobvr, const char* sense, const blas_int* n,  float* a, const blas_int* lda,  float* wr,  float* wi,  float* vl, const blas_int* ldvl,  float* vr, const blas_int* ldvr, blas_int* ilo, blas_int* ihi,  float* scale,  float* abnrm,  float* rconde,  float* rcondv,  float* work, const blas_int* lwork, blas_int* iwork, blas_int* info, blas_len balanc_len, blas_len jobvl_len, blas_len jobvr_len, blas_len sense_len)$/;"	f
arma_sgehrd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	248;"	d
arma_sgehrd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	477;"	d
arma_sgehrd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgehrd)(const blas_int* n, const blas_int* ilo, const blas_int* ihi,    float* a, const blas_int* lda,    float* tao,    float* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_sgehrd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgehrd)(const blas_int* n, const blas_int* ilo, const blas_int* ihi,    float* a, const blas_int* lda,    float* tao,    float* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_sgels	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	136;"	d
arma_sgels	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	365;"	d
arma_sgels	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgels)(const char* trans, const blas_int* m, const blas_int* n, const blas_int* nrhs,    float* a, const blas_int* lda,    float* b, const blas_int* ldb,    float* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_sgels	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgels)(const char* trans, const blas_int* m, const blas_int* n, const blas_int* nrhs,    float* a, const blas_int* lda,    float* b, const blas_int* ldb,    float* work, const blas_int* lwork, blas_int* info, blas_len trans_len)$/;"	f
arma_sgelsd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	141;"	d
arma_sgelsd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	370;"	d
arma_sgelsd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgelsd)(const blas_int* m, const blas_int* n, const blas_int* nrhs,  float* a, const blas_int* lda,  float* b, const blas_int* ldb,  float* S, const  float* rcond, blas_int* rank,  float* work, const blas_int* lwork, blas_int* iwork, blas_int* info)$/;"	f
arma_sgelsd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgelsd)(const blas_int* m, const blas_int* n, const blas_int* nrhs,  float* a, const blas_int* lda,  float* b, const blas_int* ldb,  float* S, const  float* rcond, blas_int* rank,  float* work, const blas_int* lwork, blas_int* iwork, blas_int* info)$/;"	f
arma_sgemm	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	41;"	d
arma_sgemm	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	68;"	d
arma_sgemm	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgemm)(const char* transA, const char* transB, const blas_int* m, const blas_int* n, const blas_int* k, const float*  alpha, const float*  A, const blas_int* ldA, const float*  B, const blas_int* ldB, const float*  beta, float*  C, const blas_int* ldC)$/;"	f
arma_sgemm	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgemm)(const char* transA, const char* transB, const blas_int* m, const blas_int* n, const blas_int* k, const float*  alpha, const float*  A, const blas_int* ldA, const float*  B, const blas_int* ldB, const float*  beta, float*  C, const blas_int* ldC, blas_len transA_len, blas_len transB_len)$/;"	f
arma_sgemv	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	36;"	d
arma_sgemv	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	63;"	d
arma_sgemv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgemv)(const char* transA, const blas_int* m, const blas_int* n, const float*  alpha, const float*  A, const blas_int* ldA, const float*  x, const blas_int* incx, const float*  beta, float*  y, const blas_int* incy)$/;"	f
arma_sgemv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgemv)(const char* transA, const blas_int* m, const blas_int* n, const float*  alpha, const float*  A, const blas_int* ldA, const float*  x, const blas_int* incx, const float*  beta, float*  y, const blas_int* incy, blas_len transA_len)$/;"	f
arma_sgeqrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	323;"	d
arma_sgeqrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	94;"	d
arma_sgeqrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgeqrf)(const blas_int* m, const blas_int* n,    float* a, const blas_int* lda,    float* tau,    float* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_sgeqrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgeqrf)(const blas_int* m, const blas_int* n,    float* a, const blas_int* lda,    float* tau,    float* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_sgesdd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	111;"	d
arma_sgesdd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	340;"	d
arma_sgesdd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgesdd)(const char* jobz, const blas_int* m, const blas_int* n,  float* a, const blas_int* lda,  float* s,  float* u, const blas_int* ldu,  float* vt, const blas_int* ldvt,  float* work, const blas_int* lwork, blas_int* iwork, blas_int* info)$/;"	f
arma_sgesdd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgesdd)(const char* jobz, const blas_int* m, const blas_int* n,  float* a, const blas_int* lda,  float* s,  float* u, const blas_int* ldu,  float* vt, const blas_int* ldvt,  float* work, const blas_int* lwork, blas_int* iwork, blas_int* info, blas_len jobz_len)$/;"	f
arma_sgesv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	116;"	d
arma_sgesv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	345;"	d
arma_sgesv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgesv)(const blas_int* n, const blas_int* nrhs,    float* a, const blas_int* lda, blas_int* ipiv,    float* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_sgesv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgesv)(const blas_int* n, const blas_int* nrhs,    float* a, const blas_int* lda, blas_int* ipiv,    float* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_sgesvd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	105;"	d
arma_sgesvd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	334;"	d
arma_sgesvd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgesvd)(const char* jobu, const char* jobvt, const blas_int* m, const blas_int* n,  float* a, const blas_int* lda,  float* s,  float* u, const blas_int* ldu,  float* vt, const blas_int* ldvt,  float* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_sgesvd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgesvd)(const char* jobu, const char* jobvt, const blas_int* m, const blas_int* n,  float* a, const blas_int* lda,  float* s,  float* u, const blas_int* ldu,  float* vt, const blas_int* ldvt,  float* work, const blas_int* lwork, blas_int* info, blas_len jobu_len, blas_len jobvt_len)$/;"	f
arma_sgesvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	121;"	d
arma_sgesvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	350;"	d
arma_sgesvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgesvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs,  float* a, const blas_int* lda,  float* af, const blas_int* ldaf, blas_int* ipiv, char* equed,  float* r,  float* c,  float* b, const blas_int* ldb,  float* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr,  float* work, blas_int* iwork, blas_int* info)$/;"	f
arma_sgesvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgesvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs,  float* a, const blas_int* lda,  float* af, const blas_int* ldaf, blas_int* ipiv, char* equed,  float* r,  float* c,  float* b, const blas_int* ldb,  float* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr,  float* work, blas_int* iwork, blas_int* info, blas_len fact_len, blas_len trans_len, blas_len equed_len)$/;"	f
arma_sgetrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	255;"	d
arma_sgetrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	26;"	d
arma_sgetrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgetrf)(const blas_int* m, const blas_int* n,    float* a, const blas_int* lda, blas_int* ipiv, blas_int* info)$/;"	f
arma_sgetrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgetrf)(const blas_int* m, const blas_int* n,    float* a, const blas_int* lda, blas_int* ipiv, blas_int* info)$/;"	f
arma_sgetri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	265;"	d
arma_sgetri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	36;"	d
arma_sgetri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgetri)(const blas_int* n,    float* a, const blas_int* lda, const blas_int* ipiv,    float* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_sgetri	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgetri)(const blas_int* n,    float* a, const blas_int* lda, const blas_int* ipiv,    float* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_sgetrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	260;"	d
arma_sgetrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	31;"	d
arma_sgetrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgetrs)(const char* trans, const blas_int* n, const blas_int* nrhs, const    float* a, const blas_int* lda, const blas_int* ipiv,    float* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_sgetrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgetrs)(const char* trans, const blas_int* n, const blas_int* nrhs, const    float* a, const blas_int* lda, const blas_int* ipiv,    float* b, const blas_int* ldb, blas_int* info, const blas_len trans_len)$/;"	f
arma_sgges	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	191;"	d
arma_sgges	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	420;"	d
arma_sgges	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgges)(const char* jobvsl, const char* jobvsr, const char* sort, fn_select_s3 selctg, const blas_int* n,  float* a, const blas_int* lda,  float* b, const blas_int* ldb, blas_int* sdim,  float* alphar,  float* alphai,  float* beta,  float* vsl, const blas_int* ldvsl,  float* vsr, const blas_int* ldvsr,  float* work, const blas_int* lwork, blas_int* bwork, blas_int* info)$/;"	f
arma_sgges	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgges)(const char* jobvsl, const char* jobvsr, const char* sort, fn_select_s3 selctg, const blas_int* n,  float* a, const blas_int* lda,  float* b, const blas_int* ldb, blas_int* sdim,  float* alphar,  float* alphai,  float* beta,  float* vsl, const blas_int* ldvsl,  float* vsr, const blas_int* ldvsr,  float* work, const blas_int* lwork, blas_int* bwork, blas_int* info, blas_len jobvsl_len, blas_len jobvsr_len, blas_len sort_len)$/;"	f
arma_sggev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	297;"	d
arma_sggev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	68;"	d
arma_sggev	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sggev)(const char* jobvl, const char* jobvr, const blas_int* n,  float* a, const blas_int* lda,  float* b, const blas_int* ldb,  float* alphar,  float* alphai,  float* beta,  float* vl, const blas_int* ldvl,  float* vr, const blas_int* ldvr,  float* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_sggev	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sggev)(const char* jobvl, const char* jobvr, const blas_int* n,  float* a, const blas_int* lda,  float* b, const blas_int* ldb,  float* alphar,  float* alphai,  float* beta,  float* vl, const blas_int* ldvl,  float* vr, const blas_int* ldvr,  float* work, const blas_int* lwork, blas_int* info, blas_len jobvl_len, blas_len jobvr_len)$/;"	f
arma_sgtsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	171;"	d
arma_sgtsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	400;"	d
arma_sgtsv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgtsv)(const blas_int* n, const blas_int* nrhs,    float* dl,    float* d,    float* du,    float* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_sgtsv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgtsv)(const blas_int* n, const blas_int* nrhs,    float* dl,    float* d,    float* du,    float* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_sgtsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	176;"	d
arma_sgtsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	405;"	d
arma_sgtsvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sgtsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs, const  float* dl, const  float* d, const  float* du,  float* dlf,  float* df,  float* duf,  float* du2, blas_int* ipiv, const  float* b, const blas_int* ldb,  float* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr,  float* work, blas_int* iwork, blas_int* info)$/;"	f
arma_sgtsvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sgtsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs, const  float* dl, const  float* d, const  float* du,  float* dlf,  float* df,  float* duf,  float* du2, blas_int* ipiv, const  float* b, const blas_int* ldb,  float* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr,  float* work, blas_int* iwork, blas_int* info, blas_len fact_len, blas_len trans_len)$/;"	f
arma_sign	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_sign(const eT x)$/;"	f
arma_sign	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_sign(const eT& x)$/;"	f
arma_signed_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_integral_only< s16    > { typedef s16    result; };$/;"	s
arma_signed_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_integral_only< s32    > { typedef s32    result; };$/;"	s
arma_signed_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_integral_only< s64    > { typedef s64    result; };$/;"	s
arma_signed_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_integral_only< s8     > { typedef s8     result; };$/;"	s
arma_signed_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_integral_only< slng_t > { typedef slng_t result; };$/;"	s
arma_signed_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_signed_integral_only { };$/;"	s
arma_signed_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< cx_double > { typedef cx_double result; };$/;"	s
arma_signed_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< cx_float  > { typedef cx_float  result; };$/;"	s
arma_signed_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< double    > { typedef double    result; };$/;"	s
arma_signed_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< float     > { typedef float     result; };$/;"	s
arma_signed_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< s16       > { typedef s16       result; };$/;"	s
arma_signed_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< s32       > { typedef s32       result; };$/;"	s
arma_signed_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< s64       > { typedef s64       result; };$/;"	s
arma_signed_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< s8        > { typedef s8        result; };$/;"	s
arma_signed_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< slng_t    > { typedef slng_t    result; };$/;"	s
arma_signed_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_signed_only { };$/;"	s
arma_sigprint	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_sigprint(const char* x)$/;"	f
arma_sinc	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_sinc(const double x)$/;"	f
arma_sinc	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_sinc(const eT x)$/;"	f
arma_sinc	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_sinc(const float x)$/;"	f
arma_sinc	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_sinc(const std::complex<T>& x)$/;"	f
arma_sinc_generic	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^arma_sinc_generic(const eT x)$/;"	f
arma_slahqr	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	236;"	d
arma_slahqr	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	465;"	d
arma_slahqr	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_slahqr)(const blas_int* wantt, const blas_int* wantz, const blas_int* n, const blas_int* ilo, const blas_int* ihi,  float* h, const blas_int* ldh,  float* wr,  float* wi, const blas_int* iloz, const blas_int* ihiz,  float* z, const blas_int* ldz, blas_int* info)$/;"	f
arma_slahqr	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_slahqr)(const blas_int* wantt, const blas_int* wantz, const blas_int* n, const blas_int* ilo, const blas_int* ihi,  float* h, const blas_int* ldh,  float* wr,  float* wi, const blas_int* iloz, const blas_int* ihiz,  float* z, const blas_int* ldz, blas_int* info)$/;"	f
arma_slangb	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	209;"	d
arma_slangb	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	438;"	d
arma_slangb	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    float  arma_fortran_with_prefix(arma_slangb)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const    float* ab, const blas_int* ldab,  float* work)$/;"	f
arma_slangb	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    float  arma_fortran_with_prefix(arma_slangb)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const    float* ab, const blas_int* ldab,  float* work, blas_len norm_len)$/;"	f
arma_slange	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	196;"	d
arma_slange	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	425;"	d
arma_slange	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    float  arma_fortran_with_prefix(arma_slange)(const char* norm, const blas_int* m, const blas_int* n, const    float* a, const blas_int* lda,  float* work)$/;"	f
arma_slange	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    float  arma_fortran_with_prefix(arma_slange)(const char* norm, const blas_int* m, const blas_int* n, const    float* a, const blas_int* lda,  float* work, blas_len norm_len)$/;"	f
arma_slansy	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	201;"	d
arma_slansy	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	430;"	d
arma_slansy	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    float  arma_fortran_with_prefix(arma_slansy)(const char* norm, const char* uplo, const blas_int* n, const    float* a, const blas_int* lda,  float* work)$/;"	f
arma_slansy	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    float  arma_fortran_with_prefix(arma_slansy)(const char* norm, const char* uplo, const blas_int* n, const    float* a, const blas_int* lda,  float* work, blas_len norm_len, blas_len uplo_len)$/;"	f
arma_slarnv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	245;"	d
arma_slarnv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	474;"	d
arma_slarnv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_slarnv)(const blas_int* idist, blas_int* iseed, const blas_int* n,  float* x)$/;"	f
arma_slarnv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_slarnv)(const blas_int* idist, blas_int* iseed, const blas_int* n,  float* x)$/;"	f
arma_snaupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	22;"	d
arma_snaupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	40;"	d
arma_snaupd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_snaupd)(blas_int* ido, char* bmat, blas_int* n, char* which, blas_int* nev, float* tol, float* resid, blas_int* ncv, float* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, float* workd, float* workl, blas_int* lworkl, blas_int* info)$/;"	f
arma_snaupd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_snaupd)(blas_int* ido, char* bmat, blas_int* n, char* which, blas_int* nev, float* tol, float* resid, blas_int* ncv, float* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, float* workd, float* workl, blas_int* lworkl, blas_int* info, blas_len bmat_len, blas_len which_len)$/;"	f
arma_sneupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	27;"	d
arma_sneupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	45;"	d
arma_sneupd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sneupd)(blas_int* rvec, char* howmny, blas_int* select, float* dr, float* di, float* z, blas_int* ldz, float* sigmar, float* sigmai, float* workev, char* bmat, blas_int* n, char* which, blas_int* nev, float* tol, float* resid, blas_int* ncv, float* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, float* workd, float* workl, blas_int* lworkl, blas_int* info)$/;"	f
arma_sneupd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sneupd)(blas_int* rvec, char* howmny, blas_int* select, float* dr, float* di, float* z, blas_int* ldz, float* sigmar, float* sigmai, float* workev, char* bmat, blas_int* n, char* which, blas_int* nev, float* tol, float* resid, blas_int* ncv, float* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, float* workd, float* workl, blas_int* lworkl, blas_int* info, blas_len howmny_len, blas_len bmat_len, blas_len which_len)$/;"	f
arma_snprintf	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	26;"	d
arma_snrm2	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	30;"	d
arma_snrm2	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	57;"	d
arma_snrm2	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    float arma_fortran_with_prefix(arma_snrm2)(const blas_int* n, const float* x, const blas_int* incx)$/;"	f
arma_snrm2	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    float arma_fortran_with_prefix(arma_snrm2)(const blas_int* n, const float* x, const blas_int* incx)$/;"	f
arma_sorgqr	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	328;"	d
arma_sorgqr	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	99;"	d
arma_sorgqr	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sorgqr)(const blas_int* m, const blas_int* n, const blas_int* k,  float* a, const blas_int* lda, const  float* tau,  float* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_sorgqr	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sorgqr)(const blas_int* m, const blas_int* n, const blas_int* k,  float* a, const blas_int* lda, const  float* tau,  float* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_sort_index_helper	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_meat.hpp	/^arma_sort_index_helper(Mat<uword>& out, const Proxy<T1>& P, const uword sort_type)$/;"	f
arma_sort_index_helper_ascend	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_bones.hpp	/^struct arma_sort_index_helper_ascend$/;"	s
arma_sort_index_helper_ascend	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_bones.hpp	/^struct arma_sort_index_helper_ascend< std::complex<T> >$/;"	s
arma_sort_index_helper_descend	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_bones.hpp	/^struct arma_sort_index_helper_descend$/;"	s
arma_sort_index_helper_descend	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_bones.hpp	/^struct arma_sort_index_helper_descend< std::complex<T> >$/;"	s
arma_sort_index_packet	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_bones.hpp	/^struct arma_sort_index_packet$/;"	s
arma_spbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	313;"	d
arma_spbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	84;"	d
arma_spbtrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_spbtrf)(const char* uplo, const blas_int* n, const blas_int* kd,    float* ab, const blas_int* ldab, blas_int* info)$/;"	f
arma_spbtrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_spbtrf)(const char* uplo, const blas_int* n, const blas_int* kd,    float* ab, const blas_int* ldab, blas_int* info, blas_len uplo_len)$/;"	f
arma_spocon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	219;"	d
arma_spocon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	448;"	d
arma_spocon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_spocon)(const char* uplo, const blas_int* n, const  float* a, const blas_int* lda, const  float* anorm,  float* rcond,  float* work, blas_int* iwork, blas_int* info)$/;"	f
arma_spocon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_spocon)(const char* uplo, const blas_int* n, const  float* a, const blas_int* lda, const  float* anorm,  float* rcond,  float* work, blas_int* iwork, blas_int* info, blas_len uplo_len)$/;"	f
arma_sposv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	126;"	d
arma_sposv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	355;"	d
arma_sposv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sposv)(const char* uplo, const blas_int* n, const blas_int* nrhs,    float* a, const blas_int* lda,    float* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_sposv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sposv)(const char* uplo, const blas_int* n, const blas_int* nrhs,    float* a, const blas_int* lda,    float* b, const blas_int* ldb, blas_int* info, blas_len uplo_len)$/;"	f
arma_sposvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	131;"	d
arma_sposvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	360;"	d
arma_sposvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sposvx)(const char* fact, const char* uplo, const blas_int* n, const blas_int* nrhs,  float* a, const blas_int* lda,  float* af, const blas_int* ldaf, char* equed,  float* s,  float* b, const blas_int* ldb,  float* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr,  float* work, blas_int* iwork, blas_int* info)$/;"	f
arma_sposvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sposvx)(const char* fact, const char* uplo, const blas_int* n, const blas_int* nrhs,  float* a, const blas_int* lda,  float* af, const blas_int* ldaf, char* equed,  float* s,  float* b, const blas_int* ldb,  float* x, const blas_int* ldx,  float* rcond,  float* ferr,  float* berr,  float* work, blas_int* iwork, blas_int* info, blas_len fact_len, blas_len uplo_len, blas_len equed_len)$/;"	f
arma_spotrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	303;"	d
arma_spotrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	74;"	d
arma_spotrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_spotrf)(const char* uplo, const blas_int* n,    float* a, const blas_int* lda, blas_int* info)$/;"	f
arma_spotrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_spotrf)(const char* uplo, const blas_int* n,    float* a, const blas_int* lda, blas_int* info, blas_len uplo_len)$/;"	f
arma_spotri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	318;"	d
arma_spotri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	89;"	d
arma_spotri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_spotri)(const char* uplo, const blas_int* n,    float* a, const blas_int* lda, blas_int* info)$/;"	f
arma_spotri	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_spotri)(const char* uplo, const blas_int* n,    float* a, const blas_int* lda, blas_int* info, blas_len uplo_len)$/;"	f
arma_spotrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	308;"	d
arma_spotrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	79;"	d
arma_spotrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_spotrs)(const char* uplo, const blas_int* n, const blas_int* nrhs, const    float* a, const blas_int* lda,    float* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_spotrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_spotrs)(const char* uplo, const blas_int* n, const blas_int* nrhs, const    float* a, const blas_int* lda,    float* b, const blas_int* ldb, blas_int* info, blas_len uplo_len)$/;"	f
arma_ssaupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	32;"	d
arma_ssaupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	50;"	d
arma_ssaupd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_ssaupd)(blas_int* ido, char* bmat, blas_int* n, char* which, blas_int* nev, float* tol, float* resid, blas_int* ncv, float* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, float* workd, float* workl, blas_int* lworkl, blas_int* info)$/;"	f
arma_ssaupd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_ssaupd)(blas_int* ido, char* bmat, blas_int* n, char* which, blas_int* nev, float* tol, float* resid, blas_int* ncv, float* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, float* workd, float* workl, blas_int* lworkl, blas_int* info, blas_len bmat_len, blas_len which_len)$/;"	f
arma_sseupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	35;"	d
arma_sseupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	53;"	d
arma_sseupd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sseupd)(blas_int* rvec, char* howmny, blas_int* select, float* d, float* z, blas_int* ldz, float* sigma, char* bmat, blas_int* n, char* which, blas_int* nev, float* tol, float* resid, blas_int* ncv, float* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, float* workd, float* workl, blas_int* lworkl, blas_int* info)$/;"	f
arma_sseupd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sseupd)(blas_int* rvec, char* howmny, blas_int* select, float* d, float* z, blas_int* ldz, float* sigma, char* bmat, blas_int* n, char* which, blas_int* nev, float* tol, float* resid, blas_int* ncv, float* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, float* workd, float* workl, blas_int* lworkl, blas_int* info, blas_len howmny_len, blas_len bmat_len, blas_len which_len)$/;"	f
arma_sstedc	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	239;"	d
arma_sstedc	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	468;"	d
arma_sstedc	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_sstedc)(const char* compz, const blas_int* n,  float* d,  float* e,  float* z, const blas_int* ldz,  float* work, const blas_int* lwork, blas_int* iwork, const blas_int* liwork, blas_int* info)$/;"	f
arma_sstedc	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_sstedc)(const char* compz, const blas_int* n,  float* d,  float* e,  float* z, const blas_int* ldz,  float* work, const blas_int* lwork, blas_int* iwork, const blas_int* liwork, blas_int* info, blas_len compz_len)$/;"	f
arma_ssyev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	285;"	d
arma_ssyev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	56;"	d
arma_ssyev	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_ssyev)(const char* jobz, const char* uplo, const blas_int* n,  float* a, const blas_int* lda,  float* w,  float* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_ssyev	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_ssyev)(const char* jobz, const char* uplo, const blas_int* n,  float* a, const blas_int* lda,  float* w,  float* work, const blas_int* lwork, blas_int* info, blas_len jobz_len, blas_len uplo_len)$/;"	f
arma_ssyevd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	291;"	d
arma_ssyevd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	62;"	d
arma_ssyevd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_ssyevd)(const char* jobz, const char* uplo, const blas_int* n,  float* a, const blas_int* lda,  float* w,  float* work, const blas_int* lwork, blas_int* iwork, const blas_int* liwork, blas_int* info)$/;"	f
arma_ssyevd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_ssyevd)(const char* jobz, const char* uplo, const blas_int* n,  float* a, const blas_int* lda,  float* w,  float* work, const blas_int* lwork, blas_int* iwork, const blas_int* liwork, blas_int* info, blas_len jobz_len, blas_len uplo_len)$/;"	f
arma_ssyrk	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	46;"	d
arma_ssyrk	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	73;"	d
arma_ssyrk	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_ssyrk)(const char* uplo, const char* transA, const blas_int* n, const blas_int* k, const  float* alpha, const  float* A, const blas_int* ldA, const  float* beta,  float* C, const blas_int* ldC)$/;"	f
arma_ssyrk	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_ssyrk)(const char* uplo, const char* transA, const blas_int* n, const blas_int* k, const  float* alpha, const  float* A, const blas_int* ldA, const  float* beta,  float* C, const blas_int* ldC, blas_len uplo_len, blas_len transA_len)$/;"	f
arma_static_check	lib/armadillo-9.800.2/include/armadillo_bits/arma_static_check.hpp	52;"	d
arma_static_check	lib/armadillo-9.800.2/include/armadillo_bits/arma_static_check.hpp	58;"	d
arma_stop_bad_alloc	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_stop_bad_alloc(const T1& x)$/;"	f
arma_stop_logic_error	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_stop_logic_error(const T1& x)$/;"	f
arma_stop_runtime_error	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_stop_runtime_error(const T1& x)$/;"	f
arma_str	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^namespace arma_str$/;"	n
arma_strcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	224;"	d
arma_strcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	453;"	d
arma_strcon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_strcon)(const char* norm, const char* uplo, const char* diag, const blas_int* n, const  float* a, const blas_int* lda,  float* rcond,  float* work, blas_int* iwork, blas_int* info)$/;"	f
arma_strcon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_strcon)(const char* norm, const char* uplo, const char* diag, const blas_int* n, const  float* a, const blas_int* lda,  float* rcond,  float* work, blas_int* iwork, blas_int* info, blas_len norm_len, blas_len uplo_len, blas_len diag_len)$/;"	f
arma_strevc	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	242;"	d
arma_strevc	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	471;"	d
arma_strevc	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_strevc)(const char* side, const char* howmny, blas_int* select, const blas_int* n, const  float* t, const blas_int* ldt,  float* vl, const blas_int* ldvl,  float* vr, const blas_int* ldvr, const blas_int* mm, blas_int* m,  float* work, blas_int* info)$/;"	f
arma_strevc	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_strevc)(const char* side, const char* howmny, blas_int* select, const blas_int* n, const  float* t, const blas_int* ldt,  float* vl, const blas_int* ldvl,  float* vr, const blas_int* ldvr, const blas_int* mm, blas_int* m,  float* work, blas_int* info, blas_len side_len, blas_len howmny_len)$/;"	f
arma_strsyl	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	186;"	d
arma_strsyl	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	415;"	d
arma_strsyl	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_strsyl)(const char* transa, const char* transb, const blas_int* isgn, const blas_int* m, const blas_int* n, const    float* a, const blas_int* lda, const    float* b, const blas_int* ldb,    float* c, const blas_int* ldc,  float* scale, blas_int* info)$/;"	f
arma_strsyl	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_strsyl)(const char* transa, const char* transb, const blas_int* isgn, const blas_int* m, const blas_int* n, const    float* a, const blas_int* lda, const    float* b, const blas_int* ldb,    float* c, const blas_int* ldc,  float* scale, blas_int* info, blas_len transa_len, blas_len transb_len)$/;"	f
arma_strtri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	270;"	d
arma_strtri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	41;"	d
arma_strtri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_strtri)(const char* uplo, const char* diag, const blas_int* n,    float* a, const blas_int* lda, blas_int* info)$/;"	f
arma_strtri	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_strtri)(const char* uplo, const char* diag, const blas_int* n,    float* a, const blas_int* lda, blas_int* info, blas_len uplo_len, blas_len diag_len)$/;"	f
arma_strtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	146;"	d
arma_strtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	375;"	d
arma_strtrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_strtrs)(const char* uplo, const char* trans, const char* diag, const blas_int* n, const blas_int* nrhs, const    float* a, const blas_int* lda,    float* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_strtrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_strtrs)(const char* uplo, const char* trans, const char* diag, const blas_int* n, const blas_int* nrhs, const    float* a, const blas_int* lda,    float* b, const blas_int* ldb, blas_int* info, blas_len uplo_len, blas_len trans_len, blas_len diag_len)$/;"	f
arma_thisprint	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_thisprint(const void* this_ptr)$/;"	f
arma_type_check	lib/armadillo-9.800.2/include/armadillo_bits/arma_static_check.hpp	54;"	d
arma_type_check	lib/armadillo-9.800.2/include/armadillo_bits/arma_static_check.hpp	60;"	d
arma_type_check_cxx1998	lib/armadillo-9.800.2/include/armadillo_bits/arma_static_check.hpp	/^struct arma_type_check_cxx1998$/;"	s
arma_type_check_cxx1998	lib/armadillo-9.800.2/include/armadillo_bits/arma_static_check.hpp	/^struct arma_type_check_cxx1998<false>$/;"	s
arma_unique_comparator	lib/armadillo-9.800.2/include/armadillo_bits/op_unique_bones.hpp	/^struct arma_unique_comparator$/;"	s
arma_unique_comparator	lib/armadillo-9.800.2/include/armadillo_bits/op_unique_bones.hpp	/^struct arma_unique_comparator< std::complex<T> >$/;"	s
arma_unsigned_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_unsigned_integral_only< u16    > { typedef u16    result; };$/;"	s
arma_unsigned_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_unsigned_integral_only< u32    > { typedef u32    result; };$/;"	s
arma_unsigned_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_unsigned_integral_only< u64    > { typedef u64    result; };$/;"	s
arma_unsigned_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_unsigned_integral_only< u8     > { typedef u8     result; };$/;"	s
arma_unsigned_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_unsigned_integral_only< ulng_t > { typedef ulng_t result; };$/;"	s
arma_unsigned_integral_only	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_unsigned_integral_only { };$/;"	s
arma_vec_indicator	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct arma_vec_indicator     {};$/;"	s
arma_version	lib/armadillo-9.800.2/include/armadillo_bits/arma_version.hpp	/^struct arma_version$/;"	s
arma_warn	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_warn(const T1& x)$/;"	f
arma_warn	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_warn(const T1& x, const T2& y)$/;"	f
arma_warn	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^arma_warn(const T1& x, const T2& y, const T3& z)$/;"	f
arma_warn_unused	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	210;"	d
arma_warn_unused	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	220;"	d
arma_warn_unused	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	22;"	d
arma_warn_unused	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	298;"	d
arma_warn_unused	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	299;"	d
arma_warn_unused	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	33;"	d
arma_wrapper	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	62;"	d
arma_wrapper	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	66;"	d
arma_wrapper	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	69;"	d
arma_zgbcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	232;"	d
arma_zgbcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	461;"	d
arma_zgbcon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgbcon)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_cxd* ab, const blas_int* ldab, const blas_int* ipiv, const double* anorm, double* rcond, blas_cxd* work, double* rwork, blas_int* info)$/;"	f
arma_zgbcon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgbcon)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_cxd* ab, const blas_int* ldab, const blas_int* ipiv, const double* anorm, double* rcond, blas_cxd* work, double* rwork, blas_int* info, blas_len norm_len)$/;"	f
arma_zgbsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	164;"	d
arma_zgbsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	393;"	d
arma_zgbsv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgbsv)(const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, blas_cxd* ab, const blas_int* ldab, blas_int* ipiv, blas_cxd* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_zgbsv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgbsv)(const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, blas_cxd* ab, const blas_int* ldab, blas_int* ipiv, blas_cxd* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_zgbsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	169;"	d
arma_zgbsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	398;"	d
arma_zgbsvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgbsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, blas_cxd* ab, const blas_int* ldab, blas_cxd* afb, const blas_int* ldafb, blas_int* ipiv, char* equed, double* r, double* c, blas_cxd* b, const blas_int* ldb, blas_cxd* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, blas_cxd* work, double* rwork, blas_int* info)$/;"	f
arma_zgbsvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgbsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, blas_cxd* ab, const blas_int* ldab, blas_cxd* afb, const blas_int* ldafb, blas_int* ipiv, char* equed, double* r, double* c, blas_cxd* b, const blas_int* ldb, blas_cxd* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, blas_cxd* work, double* rwork, blas_int* info, blas_len fact_len, blas_len trans_len, blas_len equed_len)$/;"	f
arma_zgbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	154;"	d
arma_zgbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	383;"	d
arma_zgbtrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgbtrf)(const blas_int* m, const blas_int* n, const blas_int* kl, const blas_int* ku, blas_cxd* ab, const blas_int* ldab, blas_int* ipiv, blas_int* info)$/;"	f
arma_zgbtrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgbtrf)(const blas_int* m, const blas_int* n, const blas_int* kl, const blas_int* ku, blas_cxd* ab, const blas_int* ldab, blas_int* ipiv, blas_int* info)$/;"	f
arma_zgbtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	159;"	d
arma_zgbtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	388;"	d
arma_zgbtrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgbtrs)(const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, const blas_cxd* ab, const blas_int* ldab, const blas_int* ipiv, blas_cxd* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_zgbtrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgbtrs)(const char* trans, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_int* nrhs, const blas_cxd* ab, const blas_int* ldab, const blas_int* ipiv, blas_cxd* b, const blas_int* ldb, blas_int* info, blas_len trans_len)$/;"	f
arma_zgecon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	217;"	d
arma_zgecon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	446;"	d
arma_zgecon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgecon)(const char* norm, const blas_int* n, const blas_cxd* a, const blas_int* lda, const double* anorm, double* rcond, blas_cxd* work, double* rwork, blas_int* info)$/;"	f
arma_zgecon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgecon)(const char* norm, const blas_int* n, const blas_cxd* a, const blas_int* lda, const double* anorm, double* rcond, blas_cxd* work, double* rwork, blas_int* info, blas_len norm_len)$/;"	f
arma_zgees	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	184;"	d
arma_zgees	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	413;"	d
arma_zgees	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgees)(const char* jobvs, const char* sort, fn_select_z1 select, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_int* sdim, blas_cxd* w, blas_cxd* vs, const blas_int* ldvs, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* bwork, blas_int* info)$/;"	f
arma_zgees	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgees)(const char* jobvs, const char* sort, fn_select_z1 select, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_int* sdim, blas_cxd* w, blas_cxd* vs, const blas_int* ldvs, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* bwork, blas_int* info, blas_len jobvs_len, blas_len sort_len)$/;"	f
arma_zgeev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	278;"	d
arma_zgeev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	49;"	d
arma_zgeev	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgeev)(const char* jobvl, const char* jobvr, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_cxd* w, blas_cxd* vl, const blas_int* ldvl, blas_cxd* vr, const blas_int* ldvr, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* info)$/;"	f
arma_zgeev	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgeev)(const char* jobvl, const char* jobvr, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_cxd* w, blas_cxd* vl, const blas_int* ldvl, blas_cxd* vr, const blas_int* ldvr, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* info, blas_len jobvl_len, blas_len jobvr_len)$/;"	f
arma_zgeevx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	283;"	d
arma_zgeevx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	54;"	d
arma_zgeevx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgeevx)(const char* balanc, const char* jobvl, const char* jobvr, const char* sense, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_cxd* w, blas_cxd* vl, const blas_int* ldvl, blas_cxd* vr, const blas_int* ldvr, blas_int* ilo, blas_int* ihi, double* scale, double* abnrm, double* rconde, double* rcondv, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* info)$/;"	f
arma_zgeevx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgeevx)(const char* balanc, const char* jobvl, const char* jobvr, const char* sense, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_cxd* w, blas_cxd* vl, const blas_int* ldvl, blas_cxd* vr, const blas_int* ldvr, blas_int* ilo, blas_int* ihi, double* scale, double* abnrm, double* rconde, double* rcondv, blas_cxd* work, const blas_int* lwork, double* rwork, const blas_int* info, blas_len balanc_len, blas_len jobvl_len, blas_len jobvr_len, blas_len sense_len)$/;"	f
arma_zgehrd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	251;"	d
arma_zgehrd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	480;"	d
arma_zgehrd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgehrd)(const blas_int* n, const blas_int* ilo, const blas_int* ihi, blas_cxd* a, const blas_int* lda, blas_cxd* tao, blas_cxd* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_zgehrd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgehrd)(const blas_int* n, const blas_int* ilo, const blas_int* ihi, blas_cxd* a, const blas_int* lda, blas_cxd* tao, blas_cxd* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_zgels	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	139;"	d
arma_zgels	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	368;"	d
arma_zgels	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgels)(const char* trans, const blas_int* m, const blas_int* n, const blas_int* nrhs, blas_cxd* a, const blas_int* lda, blas_cxd* b, const blas_int* ldb, blas_cxd* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_zgels	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgels)(const char* trans, const blas_int* m, const blas_int* n, const blas_int* nrhs, blas_cxd* a, const blas_int* lda, blas_cxd* b, const blas_int* ldb, blas_cxd* work, const blas_int* lwork, blas_int* info, blas_len trans_len)$/;"	f
arma_zgelsd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	144;"	d
arma_zgelsd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	373;"	d
arma_zgelsd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgelsd)(const blas_int* m, const blas_int* n, const blas_int* nrhs, blas_cxd* a, const blas_int* lda, blas_cxd* b, const blas_int* ldb, double* S, const double* rcond, blas_int* rank, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* iwork, blas_int* info)$/;"	f
arma_zgelsd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgelsd)(const blas_int* m, const blas_int* n, const blas_int* nrhs, blas_cxd* a, const blas_int* lda, blas_cxd* b, const blas_int* ldb, double* S, const double* rcond, blas_int* rank, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* iwork, blas_int* info)$/;"	f
arma_zgemm	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	44;"	d
arma_zgemm	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	71;"	d
arma_zgemm	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgemm)(const char* transA, const char* transB, const blas_int* m, const blas_int* n, const blas_int* k, const blas_cxd* alpha, const blas_cxd* A, const blas_int* ldA, const blas_cxd* B, const blas_int* ldB, const blas_cxd* beta, blas_cxd* C, const blas_int* ldC)$/;"	f
arma_zgemm	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgemm)(const char* transA, const char* transB, const blas_int* m, const blas_int* n, const blas_int* k, const blas_cxd* alpha, const blas_cxd* A, const blas_int* ldA, const blas_cxd* B, const blas_int* ldB, const blas_cxd* beta, blas_cxd* C, const blas_int* ldC, blas_len transA_len, blas_len transB_len)$/;"	f
arma_zgemv	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	39;"	d
arma_zgemv	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	66;"	d
arma_zgemv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgemv)(const char* transA, const blas_int* m, const blas_int* n, const blas_cxd* alpha, const blas_cxd* A, const blas_int* ldA, const blas_cxd* x, const blas_int* incx, const blas_cxd* beta, blas_cxd* y, const blas_int* incy)$/;"	f
arma_zgemv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgemv)(const char* transA, const blas_int* m, const blas_int* n, const blas_cxd* alpha, const blas_cxd* A, const blas_int* ldA, const blas_cxd* x, const blas_int* incx, const blas_cxd* beta, blas_cxd* y, const blas_int* incy, blas_len transA_len)$/;"	f
arma_zgeqrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	326;"	d
arma_zgeqrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	97;"	d
arma_zgeqrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgeqrf)(const blas_int* m, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_cxd* tau, blas_cxd* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_zgeqrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgeqrf)(const blas_int* m, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_cxd* tau, blas_cxd* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_zgesdd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	114;"	d
arma_zgesdd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	343;"	d
arma_zgesdd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgesdd)(const char* jobz, const blas_int* m, const blas_int* n, blas_cxd* a, const blas_int* lda, double* s, blas_cxd* u, const blas_int* ldu, blas_cxd* vt, const blas_int* ldvt, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* iwork, blas_int* info)$/;"	f
arma_zgesdd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgesdd)(const char* jobz, const blas_int* m, const blas_int* n, blas_cxd* a, const blas_int* lda, double* s, blas_cxd* u, const blas_int* ldu, blas_cxd* vt, const blas_int* ldvt, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* iwork, blas_int* info, blas_len jobz_len)$/;"	f
arma_zgesv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	119;"	d
arma_zgesv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	348;"	d
arma_zgesv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgesv)(const blas_int* n, const blas_int* nrhs, blas_cxd* a, const blas_int* lda, blas_int* ipiv, blas_cxd* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_zgesv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgesv)(const blas_int* n, const blas_int* nrhs, blas_cxd* a, const blas_int* lda, blas_int* ipiv, blas_cxd* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_zgesvd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	109;"	d
arma_zgesvd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	338;"	d
arma_zgesvd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgesvd)(const char* jobu, const char* jobvt, const blas_int* m, const blas_int* n, blas_cxd* a, const blas_int* lda, double* s, blas_cxd* u, const blas_int* ldu, blas_cxd* vt, const blas_int* ldvt, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* info)$/;"	f
arma_zgesvd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgesvd)(const char* jobu, const char* jobvt, const blas_int* m, const blas_int* n, blas_cxd* a, const blas_int* lda, double* s, blas_cxd* u, const blas_int* ldu, blas_cxd* vt, const blas_int* ldvt, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* info, blas_len jobu_len, blas_len jobvt_len)$/;"	f
arma_zgesvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	124;"	d
arma_zgesvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	353;"	d
arma_zgesvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgesvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs, blas_cxd* a, const blas_int* lda, blas_cxd* af, const blas_int* ldaf, blas_int* ipiv, char* equed, double* r, double* c, blas_cxd* b, const blas_int* ldb, blas_cxd* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, blas_cxd* work, double* rwork, blas_int* info)$/;"	f
arma_zgesvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgesvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs, blas_cxd* a, const blas_int* lda, blas_cxd* af, const blas_int* ldaf, blas_int* ipiv, char* equed, double* r, double* c, blas_cxd* b, const blas_int* ldb, blas_cxd* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, blas_cxd* work, double* rwork, blas_int* info, blas_len fact_len, blas_len trans_len, blas_len equed_len)$/;"	f
arma_zgetrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	258;"	d
arma_zgetrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	29;"	d
arma_zgetrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgetrf)(const blas_int* m, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_int* ipiv, blas_int* info)$/;"	f
arma_zgetrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgetrf)(const blas_int* m, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_int* ipiv, blas_int* info)$/;"	f
arma_zgetri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	268;"	d
arma_zgetri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	39;"	d
arma_zgetri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgetri)(const blas_int* n, blas_cxd* a, const blas_int* lda, const blas_int* ipiv, blas_cxd* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_zgetri	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgetri)(const blas_int* n, blas_cxd* a, const blas_int* lda, const blas_int* ipiv, blas_cxd* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_zgetrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	263;"	d
arma_zgetrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	34;"	d
arma_zgetrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgetrs)(const char* trans, const blas_int* n, const blas_int* nrhs, const blas_cxd* a, const blas_int* lda, const blas_int* ipiv, blas_cxd* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_zgetrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgetrs)(const char* trans, const blas_int* n, const blas_int* nrhs, const blas_cxd* a, const blas_int* lda, const blas_int* ipiv, blas_cxd* b, const blas_int* ldb, blas_int* info, const blas_len trans_len)$/;"	f
arma_zgges	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	194;"	d
arma_zgges	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	423;"	d
arma_zgges	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgges)(const char* jobvsl, const char* jobvsr, const char* sort, fn_select_z2 selctg, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_cxd* b, const blas_int* ldb, blas_int* sdim, blas_cxd* alpha, blas_cxd* beta, blas_cxd* vsl, const blas_int* ldvsl, blas_cxd* vsr, const blas_int* ldvsr, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* bwork, blas_int* info)$/;"	f
arma_zgges	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgges)(const char* jobvsl, const char* jobvsr, const char* sort, fn_select_z2 selctg, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_cxd* b, const blas_int* ldb, blas_int* sdim, blas_cxd* alpha, blas_cxd* beta, blas_cxd* vsl, const blas_int* ldvsl, blas_cxd* vsr, const blas_int* ldvsr, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* bwork, blas_int* info, blas_len jobvsl_len, blas_len jobvsr_len, blas_len sort_len)$/;"	f
arma_zggev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	301;"	d
arma_zggev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	72;"	d
arma_zggev	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zggev)(const char* jobvl, const char* jobvr, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_cxd* b, const blas_int* ldb, blas_cxd* alpha, blas_cxd* beta, blas_cxd* vl, const blas_int* ldvl, blas_cxd* vr, const blas_int* ldvr, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* info)$/;"	f
arma_zggev	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zggev)(const char* jobvl, const char* jobvr, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_cxd* b, const blas_int* ldb, blas_cxd* alpha, blas_cxd* beta, blas_cxd* vl, const blas_int* ldvl, blas_cxd* vr, const blas_int* ldvr, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* info, blas_len jobvl_len, blas_len jobvr_len)$/;"	f
arma_zgtsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	174;"	d
arma_zgtsv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	403;"	d
arma_zgtsv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgtsv)(const blas_int* n, const blas_int* nrhs, blas_cxd* dl, blas_cxd* d, blas_cxd* du, blas_cxd* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_zgtsv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgtsv)(const blas_int* n, const blas_int* nrhs, blas_cxd* dl, blas_cxd* d, blas_cxd* du, blas_cxd* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_zgtsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	179;"	d
arma_zgtsvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	408;"	d
arma_zgtsvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zgtsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs, const blas_cxd* dl, const blas_cxd* d, const blas_cxd* du, blas_cxd* dlf, blas_cxd* df, blas_cxd* duf, blas_cxd* du2, blas_int* ipiv, const blas_cxd* b, const blas_int* ldb, blas_cxd* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, blas_cxd* work, double* rwork, blas_int* info)$/;"	f
arma_zgtsvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zgtsvx)(const char* fact, const char* trans, const blas_int* n, const blas_int* nrhs, const blas_cxd* dl, const blas_cxd* d, const blas_cxd* du, blas_cxd* dlf, blas_cxd* df, blas_cxd* duf, blas_cxd* du2, blas_int* ipiv, const blas_cxd* b, const blas_int* ldb, blas_cxd* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, blas_cxd* work, double* rwork, blas_int* info, blas_len fact_len, blas_len trans_len)$/;"	f
arma_zheev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	289;"	d
arma_zheev	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	60;"	d
arma_zheev	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zheev)(const char* jobz, const char* uplo, const blas_int* n, blas_cxd* a, const blas_int* lda, double* w, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* info)$/;"	f
arma_zheev	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zheev)(const char* jobz, const char* uplo, const blas_int* n, blas_cxd* a, const blas_int* lda, double* w, blas_cxd* work, const blas_int* lwork, double* rwork, blas_int* info, blas_len jobz_len, blas_len uplo_len)$/;"	f
arma_zheevd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	295;"	d
arma_zheevd	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	66;"	d
arma_zheevd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zheevd)(const char* jobz, const char* uplo, const blas_int* n, blas_cxd* a, const blas_int* lda, double* w, blas_cxd* work, const blas_int* lwork, double* rwork, const blas_int* lrwork, blas_int* iwork, const blas_int* liwork, blas_int* info)$/;"	f
arma_zheevd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zheevd)(const char* jobz, const char* uplo, const blas_int* n, blas_cxd* a, const blas_int* lda, double* w, blas_cxd* work, const blas_int* lwork, double* rwork, const blas_int* lrwork, blas_int* iwork, const blas_int* liwork, blas_int* info, blas_len jobz_len, blas_len uplo_len)$/;"	f
arma_zherk	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	50;"	d
arma_zherk	lib/armadillo-9.800.2/include/armadillo_bits/def_blas.hpp	77;"	d
arma_zherk	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zherk)(const char* uplo, const char* transA, const blas_int* n, const blas_int* k, const double* alpha, const blas_cxd* A, const blas_int* ldA, const double* beta, blas_cxd* C, const blas_int* ldC)$/;"	f
arma_zherk	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zherk)(const char* uplo, const char* transA, const blas_int* n, const blas_int* k, const double* alpha, const blas_cxd* A, const blas_int* ldA, const double* beta, blas_cxd* C, const blas_int* ldC, blas_len uplo_len, blas_len transA_len)$/;"	f
arma_zlangb	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	212;"	d
arma_zlangb	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	441;"	d
arma_zlangb	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    double arma_fortran_with_prefix(arma_zlangb)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_cxd* ab, const blas_int* ldab, double* work)$/;"	f
arma_zlangb	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    double arma_fortran_with_prefix(arma_zlangb)(const char* norm, const blas_int* n, const blas_int* kl, const blas_int* ku, const blas_cxd* ab, const blas_int* ldab, double* work, blas_len norm_len)$/;"	f
arma_zlange	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	199;"	d
arma_zlange	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	428;"	d
arma_zlange	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    double arma_fortran_with_prefix(arma_zlange)(const char* norm, const blas_int* m, const blas_int* n, const blas_cxd* a, const blas_int* lda, double* work)$/;"	f
arma_zlange	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    double arma_fortran_with_prefix(arma_zlange)(const char* norm, const blas_int* m, const blas_int* n, const blas_cxd* a, const blas_int* lda, double* work, blas_len norm_len)$/;"	f
arma_zlanhe	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	207;"	d
arma_zlanhe	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	436;"	d
arma_zlanhe	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    double arma_fortran_with_prefix(arma_zlanhe)(const char* norm, const char* uplo, const blas_int* n, const blas_cxd* a, const blas_int* lda, double* work)$/;"	f
arma_zlanhe	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    double arma_fortran_with_prefix(arma_zlanhe)(const char* norm, const char* uplo, const blas_int* n, const blas_cxd* a, const blas_int* lda, double* work, blas_len norm_len, blas_len uplo_len)$/;"	f
arma_zlansy	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	204;"	d
arma_zlansy	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	433;"	d
arma_zlansy	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    double arma_fortran_with_prefix(arma_zlansy)(const char* norm, const char* uplo, const blas_int* n, const blas_cxd* a, const blas_int* lda, double* work)$/;"	f
arma_zlansy	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    double arma_fortran_with_prefix(arma_zlansy)(const char* norm, const char* uplo, const blas_int* n, const blas_cxd* a, const blas_int* lda, double* work, blas_len norm_len, blas_len uplo_len)$/;"	f
arma_znaupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	25;"	d
arma_znaupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	43;"	d
arma_znaupd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_znaupd)(blas_int* ido, char* bmat, blas_int* n, char* which, blas_int* nev, double* tol, void* resid, blas_int* ncv, void* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, void* workd, void* workl, blas_int* lworkl, double* rwork, blas_int* info)$/;"	f
arma_znaupd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_znaupd)(blas_int* ido, char* bmat, blas_int* n, char* which, blas_int* nev, double* tol, void* resid, blas_int* ncv, void* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, void* workd, void* workl, blas_int* lworkl, double* rwork, blas_int* info, blas_len bmat_len, blas_len which_len)$/;"	f
arma_zneupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	30;"	d
arma_zneupd	lib/armadillo-9.800.2/include/armadillo_bits/def_arpack.hpp	48;"	d
arma_zneupd	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zneupd)(blas_int* rvec, char* howmny, blas_int* select, void* d, void* z, blas_int* ldz, void* sigma, void* workev, char* bmat, blas_int* n, char* which, blas_int* nev, double* tol, void* resid, blas_int* ncv, void* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, void* workd, void* workl, blas_int* lworkl, double* rwork, blas_int* info)$/;"	f
arma_zneupd	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zneupd)(blas_int* rvec, char* howmny, blas_int* select, void* d, void* z, blas_int* ldz, void* sigma, void* workev, char* bmat, blas_int* n, char* which, blas_int* nev, double* tol, void* resid, blas_int* ncv, void* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, void* workd, void* workl, blas_int* lworkl, double* rwork, blas_int* info, blas_len howmny_len, blas_len bmat_len, blas_len which_len)$/;"	f
arma_zpbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	316;"	d
arma_zpbtrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	87;"	d
arma_zpbtrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zpbtrf)(const char* uplo, const blas_int* n, const blas_int* kd, blas_cxd* ab, const blas_int* ldab, blas_int* info)$/;"	f
arma_zpbtrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zpbtrf)(const char* uplo, const blas_int* n, const blas_int* kd, blas_cxd* ab, const blas_int* ldab, blas_int* info, blas_len uplo_len)$/;"	f
arma_zpocon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	222;"	d
arma_zpocon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	451;"	d
arma_zpocon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zpocon)(const char* uplo, const blas_int* n, const blas_cxd* a, const blas_int* lda, const double* anorm, double* rcond, blas_cxd* work, double* rwork, blas_int* info)$/;"	f
arma_zpocon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zpocon)(const char* uplo, const blas_int* n, const blas_cxd* a, const blas_int* lda, const double* anorm, double* rcond, blas_cxd* work, double* rwork, blas_int* info, blas_len uplo_len)$/;"	f
arma_zposv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	129;"	d
arma_zposv	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	358;"	d
arma_zposv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zposv)(const char* uplo, const blas_int* n, const blas_int* nrhs, blas_cxd* a, const blas_int* lda, blas_cxd* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_zposv	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zposv)(const char* uplo, const blas_int* n, const blas_int* nrhs, blas_cxd* a, const blas_int* lda, blas_cxd* b, const blas_int* ldb, blas_int* info, blas_len uplo_len)$/;"	f
arma_zposvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	134;"	d
arma_zposvx	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	363;"	d
arma_zposvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zposvx)(const char* fact, const char* uplo, const blas_int* n, const blas_int* nrhs, blas_cxd* a, const blas_int* lda, blas_cxd* af, const blas_int* ldaf, char* equed, double* s, blas_cxd* b, const blas_int* ldb, blas_cxd* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, blas_cxd* work, double* rwork, blas_int* info)$/;"	f
arma_zposvx	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zposvx)(const char* fact, const char* uplo, const blas_int* n, const blas_int* nrhs, blas_cxd* a, const blas_int* lda, blas_cxd* af, const blas_int* ldaf, char* equed, double* s, blas_cxd* b, const blas_int* ldb, blas_cxd* x, const blas_int* ldx, double* rcond, double* ferr, double* berr, blas_cxd* work, double* rwork, blas_int* info, blas_len fact_len, blas_len uplo_len, blas_len equed_len)$/;"	f
arma_zpotrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	306;"	d
arma_zpotrf	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	77;"	d
arma_zpotrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zpotrf)(const char* uplo, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_int* info)$/;"	f
arma_zpotrf	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zpotrf)(const char* uplo, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_int* info, blas_len uplo_len)$/;"	f
arma_zpotri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	321;"	d
arma_zpotri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	92;"	d
arma_zpotri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zpotri)(const char* uplo, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_int* info)$/;"	f
arma_zpotri	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zpotri)(const char* uplo, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_int* info, blas_len uplo_len)$/;"	f
arma_zpotrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	311;"	d
arma_zpotrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	82;"	d
arma_zpotrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zpotrs)(const char* uplo, const blas_int* n, const blas_int* nrhs, const blas_cxd* a, const blas_int* lda, blas_cxd* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_zpotrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zpotrs)(const char* uplo, const blas_int* n, const blas_int* nrhs, const blas_cxd* a, const blas_int* lda, blas_cxd* b, const blas_int* ldb, blas_int* info, blas_len uplo_len)$/;"	f
arma_ztrcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	227;"	d
arma_ztrcon	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	456;"	d
arma_ztrcon	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_ztrcon)(const char* norm, const char* uplo, const char* diag, const blas_int* n, const blas_cxd* a, const blas_int* lda, double* rcond, blas_cxd* work, double* rwork, blas_int* info)$/;"	f
arma_ztrcon	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_ztrcon)(const char* norm, const char* uplo, const char* diag, const blas_int* n, const blas_cxd* a, const blas_int* lda, double* rcond, blas_cxd* work, double* rwork, blas_int* info, blas_len norm_len, blas_len uplo_len, blas_len diag_len)$/;"	f
arma_ztrsyl	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	189;"	d
arma_ztrsyl	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	418;"	d
arma_ztrsyl	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_ztrsyl)(const char* transa, const char* transb, const blas_int* isgn, const blas_int* m, const blas_int* n, const blas_cxd* a, const blas_int* lda, const blas_cxd* b, const blas_int* ldb, blas_cxd* c, const blas_int* ldc, double* scale, blas_int* info)$/;"	f
arma_ztrsyl	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_ztrsyl)(const char* transa, const char* transb, const blas_int* isgn, const blas_int* m, const blas_int* n, const blas_cxd* a, const blas_int* lda, const blas_cxd* b, const blas_int* ldb, blas_cxd* c, const blas_int* ldc, double* scale, blas_int* info, blas_len transa_len, blas_len transb_len)$/;"	f
arma_ztrtri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	273;"	d
arma_ztrtri	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	44;"	d
arma_ztrtri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_ztrtri)(const char* uplo, const char* diag, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_int* info)$/;"	f
arma_ztrtri	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_ztrtri)(const char* uplo, const char* diag, const blas_int* n, blas_cxd* a, const blas_int* lda, blas_int* info, blas_len uplo_len, blas_len diag_len)$/;"	f
arma_ztrtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	149;"	d
arma_ztrtrs	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	378;"	d
arma_ztrtrs	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_ztrtrs)(const char* uplo, const char* trans, const char* diag, const blas_int* n, const blas_int* nrhs, const blas_cxd* a, const blas_int* lda, blas_cxd* b, const blas_int* ldb, blas_int* info)$/;"	f
arma_ztrtrs	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_ztrtrs)(const char* uplo, const char* trans, const char* diag, const blas_int* n, const blas_int* nrhs, const blas_cxd* a, const blas_int* lda, blas_cxd* b, const blas_int* ldb, blas_int* info, blas_len uplo_len, blas_len trans_len, blas_len diag_len)$/;"	f
arma_zungqr	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	103;"	d
arma_zungqr	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	332;"	d
arma_zungqr	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void arma_fortran_with_prefix(arma_zungqr)(const blas_int* m, const blas_int* n, const blas_int* k, blas_cxd* a, const blas_int* lda,   const blas_cxd* tau, blas_cxd* work, const blas_int* lwork, blas_int* info)$/;"	f
arma_zungqr	lib/armadillo-9.800.2/src/wrapper2.cpp	/^    void arma_fortran_with_prefix(arma_zungqr)(const blas_int* m, const blas_int* n, const blas_int* k, blas_cxd* a, const blas_int* lda,   const blas_cxd* tau, blas_cxd* work, const blas_int* lwork, blas_int* info)$/;"	f
arpack	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool arpack = false;$/;"	m	struct:arma_config
arpack	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool arpack = true;$/;"	m	struct:arma_config
arpack	lib/armadillo-9.800.2/include/armadillo_bits/translate_arpack.hpp	/^namespace arpack$/;"	n
array	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    void* array;$/;"	m	struct:arma::superlu::__anon8
arrayops	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_bones.hpp	/^class arrayops$/;"	c
as_col	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type, derived>::as_col() const$/;"	f	class:Base
as_col	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::as_col() const$/;"	f	class:Row
as_col	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type, derived>::as_col() const$/;"	f	class:SpBase
as_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::as_col() const$/;"	f	class:subview_row
as_col_row	lib/armadillo-9.800.2/docs.html	/^<a name="as_col_row"><\/a>$/;"	a
as_row	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type, derived>::as_row() const$/;"	f	class:Base
as_row	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::as_row() const$/;"	f	class:Col
as_row	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type, derived>::as_row() const$/;"	f	class:SpBase
as_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::as_row() const$/;"	f	class:subview_col
as_scalar	lib/armadillo-9.800.2/docs.html	/^<a name="as_scalar"><\/a>$/;"	a
as_scalar	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^as_scalar(const Base<typename T1::elem_type,T1>& X)$/;"	f
as_scalar	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^as_scalar(const BaseCube<typename T1::elem_type,T1>& X)$/;"	f
as_scalar	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^as_scalar(const Gen<T1, gen_randn>& X)$/;"	f
as_scalar	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^as_scalar(const Gen<T1, gen_randu>& X)$/;"	f
as_scalar	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^as_scalar(const Glue<T1, T2, glue_times>& X, const typename arma_not_cx<typename T1::elem_type>::result* junk = 0)$/;"	f
as_scalar	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^as_scalar(const SpBase<typename T1::elem_type, T1>& X)$/;"	f
as_scalar	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^as_scalar(const T& x)$/;"	f
as_scalar_diag	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^as_scalar_diag(const Base<typename T1::elem_type,T1>& X)$/;"	f
as_scalar_diag	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^as_scalar_diag(const Glue< Glue<T1, T2, glue_times_diag>, T3, glue_times >& X)$/;"	f
as_scalar_redirect	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^struct as_scalar_redirect$/;"	s
as_scalar_redirect	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^struct as_scalar_redirect<2>$/;"	s
as_scalar_redirect	lib/armadillo-9.800.2/include/armadillo_bits/fn_as_scalar.hpp	/^struct as_scalar_redirect<3>$/;"	s
as_string	lib/armadillo-9.800.2/include/armadillo_bits/arma_version.hpp	/^  as_string()$/;"	f	struct:arma_version
asin	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_cx_only<eT>::result          asin  (const eT x) { return arma_asin(x); }$/;"	f	class:eop_aux
asin	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result    asin  (const eT x) { return eT( std::asin(double(x)) ); }$/;"	f	class:eop_aux
asin	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_only<eT>::result        asin  (const eT x) { return std::asin(x); }$/;"	f	class:eop_aux
asin	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^asin(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
asin	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^asin(const T1& A)$/;"	f
asinh	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result    asinh (const eT x) { return eT( arma_asinh(double(x)) ); }$/;"	f	class:eop_aux
asinh	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result asinh (const eT x) { return arma_asinh(x); }$/;"	f	class:eop_aux
asinh	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^asinh(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
asinh	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^asinh(const T1& A)$/;"	f
assign	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::assign(const T1& expr, const gmm_dist_mode& dist, typename enable_if<((is_arma_type<T1>::value) && (resolves_to_colvector<T1>::value == false))>::result* junk) const$/;"	f	class:gmm_priv::gmm_diag
assign	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::assign(const T1& expr, const gmm_dist_mode& dist, typename enable_if<((is_arma_type<T1>::value) && (resolves_to_colvector<T1>::value == true))>::result* junk) const$/;"	f	class:gmm_priv::gmm_diag
assign	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::assign(const T1& expr, const gmm_dist_mode& dist, typename enable_if<((is_arma_type<T1>::value) && (resolves_to_colvector<T1>::value == false))>::result* junk) const$/;"	f	class:gmm_priv::gmm_full
assign	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::assign(const T1& expr, const gmm_dist_mode& dist, typename enable_if<((is_arma_type<T1>::value) && (resolves_to_colvector<T1>::value == true))>::result* junk) const$/;"	f	class:gmm_priv::gmm_full
assign	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^  assign(eT* y, const eT acc, const eT alpha, const eT beta)$/;"	f	class:gemv_emul_tinysq
asum	lib/armadillo-9.800.2/include/armadillo_bits/translate_blas.hpp	/^  asum(const uword n_elem, const eT* x)$/;"	f	namespace:blas
at	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::at(const uword i) const$/;"	f	class:Col
at	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::at(const uword i)$/;"	f	class:Col
at	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::at(const uword in_row, const uword) const$/;"	f	class:Col
at	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::at(const uword in_row, const uword)$/;"	f	class:Col
at	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::at(const uword ii) const$/;"	f	class:Col::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::at(const uword ii)$/;"	f	class:Col::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::at(const uword in_row, const uword) const$/;"	f	class:Col::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::at(const uword in_row, const uword)$/;"	f	class:Col::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::at(const uword i) const$/;"	f	class:Cube
at	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::at(const uword i)$/;"	f	class:Cube
at	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::at(const uword in_row, const uword in_col, const uword in_slice) const$/;"	f	class:Cube
at	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::at(const uword in_row, const uword in_col, const uword in_slice)$/;"	f	class:Cube
at	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::at(const uword i) const$/;"	f	class:Cube::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::at(const uword i)$/;"	f	class:Cube::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::at(const uword in_row, const uword in_col, const uword in_slice) const$/;"	f	class:Cube::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::at(const uword in_row, const uword in_col, const uword in_slice)$/;"	f	class:Cube::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_meat.hpp	/^GenCube<eT, gen_type>::at(const uword, const uword, const uword) const$/;"	f	class:GenCube
at	lib/armadillo-9.800.2/include/armadillo_bits/Gen_meat.hpp	/^Gen<T1, gen_type>::at(const uword row, const uword col) const$/;"	f	class:Gen
at	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::at(const uword in_row, const uword in_col) const$/;"	f	class:MapMat
at	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::at(const uword in_row, const uword in_col)$/;"	f	class:MapMat
at	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::at(const uword ii) const$/;"	f	class:Mat
at	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::at(const uword ii)$/;"	f	class:Mat
at	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::at(const uword in_row, const uword in_col) const$/;"	f	class:Mat
at	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::at(const uword in_row, const uword in_col)$/;"	f	class:Mat
at	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::at(const uword ii) const$/;"	f	class:Mat::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::at(const uword ii)$/;"	f	class:Mat::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::at(const uword in_row, const uword in_col) const$/;"	f	class:Mat::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::at(const uword in_row, const uword in_col)$/;"	f	class:Mat::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword col) const { return Q.at(row, col); }$/;"	f	class:Proxy
at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword col) const { return Q.at(row, col); }$/;"	f	struct:Proxy_fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword col) const { return Q.at(row,col); }$/;"	f	class:Proxy
at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword) const { const uword ii = (Proxy<T1>::use_at) ? R.at(row,0) : R[row]; arma_debug_check( (ii >= Q.m.n_elem), "Mat::elem(): index out of bounds" ); return Q.m[ii]; }$/;"	f	class:Proxy
at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword) const { return Q.at(row, 0); }$/;"	f	class:Proxy
at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword) const { return Q.at(row, 0); }$/;"	f	class:Proxy_diagvec_expr
at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword) const { return Q.at(row, 0); }$/;"	f	class:Proxy_diagvec_mat
at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword) const { return Q[row];         }$/;"	f	class:Proxy_vectorise_col_mat
at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword) const { return Q[row];      }$/;"	f	class:Proxy
at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword) const { return Q[row]; }$/;"	f	class:Proxy
at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword) const { return R.at(row, 0); }$/;"	f	class:Proxy_vectorise_col_expr
at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at         (const uword, const uword col) const { return Q[col];      }$/;"	f	class:Proxy
at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at         (const uword, const uword col) const { return Q[col]; }$/;"	f	class:Proxy
at	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline elem_type at         (const uword row, const uword col, const uword slice) const { return Q.at(row, col, slice); }$/;"	f	class:ProxyCube
at	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::at(const uword i) const$/;"	f	class:Row
at	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::at(const uword i)$/;"	f	class:Row
at	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::at(const uword, const uword in_col) const$/;"	f	class:Row
at	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::at(const uword, const uword in_col)$/;"	f	class:Row
at	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::at(const uword ii) const$/;"	f	class:Row::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::at(const uword ii)$/;"	f	class:Row::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::at(const uword, const uword in_col) const$/;"	f	class:Row::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::at(const uword, const uword in_col)$/;"	f	class:Row::fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::at(const uword i) const$/;"	f	class:SpMat
at	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::at(const uword i)$/;"	f	class:SpMat
at	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::at(const uword in_row, const uword in_col) const$/;"	f	class:SpMat
at	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::at(const uword in_row, const uword in_col)$/;"	f	class:SpMat
at	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline elem_type at        (const uword row, const uword col) const { return Q.at(row, col); }$/;"	f	class:SpProxy
at	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::at(const uword i) const$/;"	f	class:SpSubview
at	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::at(const uword i)$/;"	f	class:SpSubview
at	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::at(const uword in_row, const uword in_col) const$/;"	f	class:SpSubview
at	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::at(const uword in_row, const uword in_col)$/;"	f	class:SpSubview
at	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline eT at         (const uword row, const uword col) const { return (row == col) ? ( P_is_vec ? P[row] : P.at(row,row) ) : elem_type(0); }$/;"	f	class:diagmat_proxy_check_fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword col) const { return (row == col) ? ( P_is_vec ? P[row] : P.at(row,row) ) : elem_type(0); }$/;"	f	class:diagmat_proxy
at	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword col) const { return (row == col) ? ( P_is_vec ? P[row] : P.at(row,row) ) : elem_type(0); }$/;"	f	class:diagmat_proxy_check
at	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword col) const { return (row == col) ? ( P_is_vec ? P[row] : P.at(row,row) ) : elem_type(0); }$/;"	f	class:diagmat_proxy_check_default
at	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword col) const { return (row == col) ? P[row] : elem_type(0); }$/;"	f	class:diagmat_proxy
at	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline elem_type at         (const uword row, const uword col) const { return (row == col) ? P[row] : elem_type(0); }$/;"	f	class:diagmat_proxy_check
at	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  at(const uword row, const uword col) const$/;"	f	class:diagmat_proxy_default
at	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  at(const uword row, const uword col) const$/;"	f	class:diagmat_proxy_fixed
at	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::at(const uword ii) const$/;"	f	class:diagview
at	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::at(const uword ii)$/;"	f	class:diagview
at	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::at(const uword row, const uword) const$/;"	f	class:diagview
at	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::at(const uword row, const uword)$/;"	f	class:diagview
at	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_meat.hpp	/^eGlueCube<T1,T2,eglue_type>::at(const uword row, const uword col, const uword slice) const$/;"	f	class:eGlueCube
at	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_meat.hpp	/^eGlue<T1,T2,eglue_type>::at(const uword row, const uword col) const$/;"	f	class:eGlue
at	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_meat.hpp	/^eOpCube<T1, eop_type>::at(const uword row, const uword col, const uword slice) const$/;"	f	class:eOpCube
at	lib/armadillo-9.800.2/include/armadillo_bits/eOp_meat.hpp	/^eOp<T1, eop_type>::at(const uword row, const uword col) const$/;"	f	class:eOp
at	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::at(const uword i) const$/;"	f	class:field
at	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::at(const uword i)$/;"	f	class:field
at	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::at(const uword in_row, const uword in_col) const$/;"	f	class:field
at	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::at(const uword in_row, const uword in_col)$/;"	f	class:field
at	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::at(const uword in_row, const uword in_col, const uword in_slice) const$/;"	f	class:field
at	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::at(const uword in_row, const uword in_col, const uword in_slice)$/;"	f	class:field
at	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::at(const uword i) const$/;"	f	class:spdiagview
at	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::at(const uword i)$/;"	f	class:spdiagview
at	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::at(const uword row, const uword) const$/;"	f	class:spdiagview
at	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::at(const uword row, const uword)$/;"	f	class:spdiagview
at	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::at(const uword in_row, const uword in_col, const uword in_slice) const$/;"	f	class:subview_cube
at	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::at(const uword in_row, const uword in_col, const uword in_slice)$/;"	f	class:subview_cube
at	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::at(const uword in_row, const uword in_col) const$/;"	f	class:subview_field
at	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::at(const uword in_row, const uword in_col)$/;"	f	class:subview_field
at	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::at(const uword in_row, const uword in_col, const uword in_slice) const$/;"	f	class:subview_field
at	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::at(const uword in_row, const uword in_col, const uword in_slice)$/;"	f	class:subview_field
at	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::at(const uword in_row, const uword in_col) const$/;"	f	class:subview
at	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::at(const uword in_row, const uword in_col)$/;"	f	class:subview
at	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::at(const uword in_row, const uword) const$/;"	f	class:subview_col
at	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::at(const uword in_row, const uword)$/;"	f	class:subview_col
at	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::at(const uword, const uword in_col) const$/;"	f	class:subview_row
at	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::at(const uword, const uword in_col)$/;"	f	class:subview_row
at	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row_htrans<eT>::at(const uword in_row, const uword) const$/;"	f	class:subview_row_htrans
at	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row_strans<eT>::at(const uword in_row, const uword) const$/;"	f	class:subview_row_strans
at	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_meat.hpp	/^xtrans_mat<eT,do_conj>::at(const uword in_row, const uword in_col) const$/;"	f	class:xtrans_mat
at	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_meat.hpp	/^xvec_htrans<eT>::at(const uword in_row, const uword in_col) const$/;"	f	class:xvec_htrans
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::at_alt(const uword ii) const$/;"	f	class:Col::fixed
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::at_alt(const uword i) const$/;"	f	class:Cube
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_meat.hpp	/^GenCube<eT, gen_type>::at_alt(const uword) const$/;"	f	class:GenCube
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Gen_meat.hpp	/^Gen<T1, gen_type>::at_alt(const uword ii) const$/;"	f	class:Gen
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::at_alt(const uword ii) const$/;"	f	class:Mat
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::at_alt(const uword ii) const$/;"	f	class:Mat::fixed
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at_alt     (const uword i)                    const { return Q.at_alt(i);    }$/;"	f	class:Proxy
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at_alt     (const uword i)                    const { return Q.at_alt(i);    }$/;"	f	struct:Proxy_fixed
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at_alt     (const uword i)                    const { return Q.at_alt(i);   }$/;"	f	class:Proxy
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at_alt     (const uword i)                    const { return Q[i];           }$/;"	f	class:Proxy
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at_alt     (const uword i)                const { const uword ii = (Proxy<T1>::use_at) ? R.at(i,  0) : R[i  ]; arma_debug_check( (ii >= Q.m.n_elem), "Mat::elem(): index out of bounds" ); return Q.m[ii]; }$/;"	f	class:Proxy
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at_alt     (const uword i)                const { return Q.at_alt(i);    }$/;"	f	class:Proxy_vectorise_col_mat
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at_alt     (const uword i)                const { return Q.at_alt(i);  }$/;"	f	class:Proxy_diagvec_expr
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at_alt     (const uword i)                const { return Q.at_alt(i); }$/;"	f	class:Proxy
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at_alt     (const uword i)                const { return Q[i];         }$/;"	f	class:Proxy
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at_alt     (const uword i)                const { return Q[i];         }$/;"	f	class:Proxy_diagvec_mat
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at_alt     (const uword i)                const { return Q[i];   }$/;"	f	class:Proxy
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type at_alt     (const uword i)                const { return R.at_alt(i);  }$/;"	f	class:Proxy_vectorise_col_expr
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline elem_type at_alt     (const uword i)                                       const { return Q.at_alt(i);           }$/;"	f	class:ProxyCube
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline elem_type at_alt     (const uword i)                                       const { return Q[i];                  }$/;"	f	class:ProxyCube
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::at_alt(const uword ii) const$/;"	f	class:Row::fixed
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::at_alt(const uword ii) const$/;"	f	class:diagview
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_meat.hpp	/^eGlueCube<T1,T2,eglue_type>::at_alt(const uword i) const$/;"	f	class:eGlueCube
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_meat.hpp	/^eGlue<T1,T2,eglue_type>::at_alt(const uword ii) const$/;"	f	class:eGlue
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_meat.hpp	/^eOpCube<T1, eop_type>::at_alt(const uword i) const$/;"	f	class:eOpCube
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/eOp_meat.hpp	/^eOp<T1, eop_type>::at_alt(const uword ii) const$/;"	f	class:eOp
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::at_alt(const uword i) const$/;"	f	class:subview_cube
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::at_alt(const uword ii) const$/;"	f	class:subview
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::at_alt(const uword ii) const$/;"	f	class:subview_col
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::at_alt(const uword ii) const$/;"	f	class:subview_row
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row_htrans<eT>::at_alt(const uword ii) const$/;"	f	class:subview_row_htrans
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row_strans<eT>::at_alt(const uword ii) const$/;"	f	class:subview_row_strans
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_meat.hpp	/^xtrans_mat<eT,do_conj>::at_alt(const uword ii) const$/;"	f	class:xtrans_mat
at_alt	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_meat.hpp	/^xvec_htrans<eT>::at_alt(const uword ii) const$/;"	f	class:xvec_htrans
atan	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_cx_only<eT>::result          atan  (const eT x) { return arma_atan(x); }$/;"	f	class:eop_aux
atan	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result    atan  (const eT x) { return eT( std::atan(double(x)) ); }$/;"	f	class:eop_aux
atan	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_only<eT>::result        atan  (const eT x) { return std::atan(x); }$/;"	f	class:eop_aux
atan	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^atan(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
atan	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^atan(const T1& A)$/;"	f
atan2	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^atan2(const BaseCube<typename T1::elem_type,T1>& Y, const BaseCube<typename T1::elem_type,T2>& X)$/;"	f
atan2	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^atan2(const T1& Y, const T2& X)$/;"	f
atanh	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result    atanh (const eT x) { return eT( arma_atanh(double(x)) ); }$/;"	f	class:eop_aux
atanh	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result atanh (const eT x) { return arma_atanh(x); }$/;"	f	class:eop_aux
atanh	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^atanh(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
atanh	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^atanh(const T1& A)$/;"	f
atlas	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool atlas = false;$/;"	m	struct:arma_config
atlas	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool atlas = true;$/;"	m	struct:arma_config
atlas	lib/armadillo-9.800.2/include/armadillo_bits/def_atlas.hpp	/^namespace atlas$/;"	n
atlas	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^namespace atlas$/;"	n
attributes	lib/armadillo-9.800.2/docs.html	/^<a name="attributes"><\/a>$/;"	a
auto_detect	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  auto_detect,        \/\/!< Automatically detect the file type$/;"	e	enum:file_type
aux	lib/armadillo-9.800.2/include/armadillo_bits/CubeToMatOp_bones.hpp	/^  arma_aligned       elem_type aux;          \/\/!< auxiliary data, using the element type as used by T1$/;"	m	class:CubeToMatOp
aux	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_bones.hpp	/^  arma_aligned       elem_type aux;          \/\/!< auxiliary data, using the element type as used by T1$/;"	m	class:OpCube
aux	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^  arma_aligned       elem_type aux;          \/\/!< auxiliary data, using the element type as used by T1$/;"	m	class:Op
aux	lib/armadillo-9.800.2/include/armadillo_bits/SpGlue_bones.hpp	/^        elem_type aux;$/;"	m	class:SpGlue
aux	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_bones.hpp	/^  arma_aligned       elem_type aux;          \/\/!< auxiliary data, using the element type as used by T1$/;"	m	class:SpOp
aux	lib/armadillo-9.800.2/include/armadillo_bits/SpToDOp_bones.hpp	/^  arma_aligned       elem_type aux;          \/\/!< auxiliary data, using the element type as used by T1$/;"	m	class:SpToDOp
aux	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_bones.hpp	/^  arma_aligned       elem_type     aux;          \/\/!< storage of auxiliary data, user defined format$/;"	m	class:eOpCube
aux	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^  arma_aligned       elem_type aux;          \/\/!< storage of auxiliary data, user defined format$/;"	m	class:eOp
aux	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_bones.hpp	/^  arma_aligned       in_eT  aux;          \/\/!< auxiliary data, using the element type as used by T1$/;"	m	class:mtOpCube
aux	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_bones.hpp	/^  arma_aligned       in_eT  aux;          \/\/!< auxiliary data, using the element type as used by T1$/;"	m	class:mtOp
aux_col1	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  const uword aux_col1;$/;"	m	class:SpSubview
aux_col1	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned const uword aux_col1;$/;"	m	class:subview::const_row_iterator
aux_col1	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned const uword aux_col1;$/;"	m	class:subview::row_iterator
aux_col1	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  const uword aux_col1;$/;"	m	class:subview
aux_col1	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned const uword aux_col1;$/;"	m	class:subview_cube::const_iterator
aux_col1	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned const uword aux_col1;$/;"	m	class:subview_cube::iterator
aux_col1	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^  const uword aux_col1;$/;"	m	class:subview_cube
aux_col1	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_bones.hpp	/^  const uword aux_col1;$/;"	m	class:subview_field
aux_col2_p1	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned const uword aux_col2_p1;$/;"	m	class:subview::const_row_iterator
aux_col2_p1	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned const uword aux_col2_p1;$/;"	m	class:subview::row_iterator
aux_col2_p1	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned const uword aux_col2_p1;$/;"	m	class:subview_cube::const_iterator
aux_col2_p1	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned const uword aux_col2_p1;$/;"	m	class:subview_cube::iterator
aux_out_eT	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_bones.hpp	/^  arma_aligned       out_eT aux_out_eT;   \/\/!< auxiliary data, using the element type as specified by the out_eT template parameter$/;"	m	class:mtOpCube
aux_out_eT	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_bones.hpp	/^  arma_aligned       out_eT aux_out_eT;   \/\/!< auxiliary data, using the element type as specified by the out_eT template parameter$/;"	m	class:mtOp
aux_out_eT	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_bones.hpp	/^  arma_aligned       out_eT aux_out_eT;   \/\/!< auxiliary data, using the element type as specified by the out_eT template parameter$/;"	m	class:mtSpOp
aux_row1	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  const uword aux_row1;$/;"	m	class:SpSubview
aux_row1	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned const uword aux_row1;$/;"	m	class:subview::const_iterator
aux_row1	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned const uword aux_row1;$/;"	m	class:subview::iterator
aux_row1	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  const uword aux_row1;$/;"	m	class:subview
aux_row1	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned const uword aux_row1;$/;"	m	class:subview_cube::const_iterator
aux_row1	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned const uword aux_row1;$/;"	m	class:subview_cube::iterator
aux_row1	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^  const uword aux_row1;$/;"	m	class:subview_cube
aux_row1	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_bones.hpp	/^  const uword aux_row1;$/;"	m	class:subview_field
aux_row2_p1	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned const uword aux_row2_p1;$/;"	m	class:subview::const_iterator
aux_row2_p1	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned const uword aux_row2_p1;$/;"	m	class:subview::iterator
aux_row2_p1	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned const uword aux_row2_p1;$/;"	m	class:subview_cube::const_iterator
aux_row2_p1	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned const uword aux_row2_p1;$/;"	m	class:subview_cube::iterator
aux_slice1	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^  const uword aux_slice1;$/;"	m	class:subview_cube
aux_slice1	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_bones.hpp	/^  const uword aux_slice1;$/;"	m	class:subview_field
aux_uword	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^        uword aux_uword;  \/\/!< storage of auxiliary data, uword format$/;"	m	class:Glue
aux_uword	lib/armadillo-9.800.2/include/armadillo_bits/mtGlueCube_bones.hpp	/^  arma_aligned       uword aux_uword; \/\/!< storage of auxiliary data, uword format$/;"	m	class:mtGlueCube
aux_uword	lib/armadillo-9.800.2/include/armadillo_bits/mtGlue_bones.hpp	/^  arma_aligned       uword aux_uword; \/\/!< storage of auxiliary data, uword format$/;"	m	class:mtGlue
aux_uword_a	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_bones.hpp	/^  arma_aligned       uword     aux_uword_a;  \/\/!< auxiliary data, uword format$/;"	m	class:OpCube
aux_uword_a	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^  arma_aligned       uword     aux_uword_a;  \/\/!< auxiliary data, uword format$/;"	m	class:Op
aux_uword_a	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_bones.hpp	/^  arma_aligned       uword     aux_uword_a;  \/\/!< auxiliary data, uword format$/;"	m	class:SpOp
aux_uword_a	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_bones.hpp	/^  arma_aligned       uword         aux_uword_a;  \/\/!< storage of auxiliary data, uword format$/;"	m	class:eOpCube
aux_uword_a	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^  arma_aligned       uword     aux_uword_a;  \/\/!< storage of auxiliary data, uword format$/;"	m	class:eOp
aux_uword_a	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_bones.hpp	/^  arma_aligned       uword  aux_uword_a;  \/\/!< auxiliary data, uword format$/;"	m	class:mtOpCube
aux_uword_a	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_bones.hpp	/^  arma_aligned       uword  aux_uword_a;  \/\/!< auxiliary data, uword format$/;"	m	class:mtOp
aux_uword_a	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_bones.hpp	/^  arma_aligned       uword  aux_uword_a;$/;"	m	class:mtSpOp
aux_uword_b	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_bones.hpp	/^  arma_aligned       uword     aux_uword_b;  \/\/!< auxiliary data, uword format$/;"	m	class:OpCube
aux_uword_b	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^  arma_aligned       uword     aux_uword_b;  \/\/!< auxiliary data, uword format$/;"	m	class:Op
aux_uword_b	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_bones.hpp	/^  arma_aligned       uword     aux_uword_b;  \/\/!< auxiliary data, uword format$/;"	m	class:SpOp
aux_uword_b	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_bones.hpp	/^  arma_aligned       uword         aux_uword_b;  \/\/!< storage of auxiliary data, uword format$/;"	m	class:eOpCube
aux_uword_b	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^  arma_aligned       uword     aux_uword_b;  \/\/!< storage of auxiliary data, uword format$/;"	m	class:eOp
aux_uword_b	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_bones.hpp	/^  arma_aligned       uword  aux_uword_b;  \/\/!< auxiliary data, uword format$/;"	m	class:mtOpCube
aux_uword_b	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_bones.hpp	/^  arma_aligned       uword  aux_uword_b;  \/\/!< auxiliary data, uword format$/;"	m	class:mtOp
aux_uword_b	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_bones.hpp	/^  arma_aligned       uword  aux_uword_b;$/;"	m	class:mtSpOp
aux_uword_c	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_bones.hpp	/^  arma_aligned       uword     aux_uword_c;  \/\/!< auxiliary data, uword format$/;"	m	class:OpCube
aux_uword_c	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^  arma_aligned       uword     aux_uword_c;  \/\/!< auxiliary data, uword format$/;"	m	class:Op
aux_uword_c	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_bones.hpp	/^  arma_aligned       uword         aux_uword_c;  \/\/!< storage of auxiliary data, uword format$/;"	m	class:eOpCube
aux_uword_c	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_bones.hpp	/^  arma_aligned       uword  aux_uword_c;  \/\/!< auxiliary data, uword format$/;"	m	class:mtOpCube
aux_uword_d	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_bones.hpp	/^  arma_aligned       uword     aux_uword_d;  \/\/!< auxiliary data, uword format$/;"	m	class:OpCube
auxlib	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_bones.hpp	/^class auxlib$/;"	c
avg_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::avg_log_p(const Base<eT,T1>& expr) const$/;"	f	class:gmm_priv::gmm_diag
avg_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::avg_log_p(const Base<eT,T1>& expr, const uword gaus_id) const$/;"	f	class:gmm_priv::gmm_diag
avg_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::avg_log_p(const Base<eT,T1>& expr) const$/;"	f	class:gmm_priv::gmm_full
avg_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::avg_log_p(const Base<eT,T1>& expr, const uword gaus_id) const$/;"	f	class:gmm_priv::gmm_full
b	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT b;         \/\/!< Wien wavelength displacement law constant$/;"	m	class:Datum
b	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::b         = eT(2.8977729e-3);$/;"	m	class:Datum
b	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT b()         { return eT(2.8977729e-3); }$/;"	f	class:Phy
b	lib/armadillo-9.800.2/include/armadillo_bits/span.hpp	/^  uword b;$/;"	m	class:span
b_double	lib/armadillo-9.800.2/include/armadillo_bits/distr_param.hpp	/^    double b_double;$/;"	m	union:distr_param::__anon2
b_int	lib/armadillo-9.800.2/include/armadillo_bits/distr_param.hpp	/^    int    b_int;$/;"	m	union:distr_param::__anon2
back	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::back() const$/;"	f	class:Mat
back	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::back()$/;"	f	class:Mat
band_helper	lib/armadillo-9.800.2/include/armadillo_bits/band_helper.hpp	/^namespace band_helper$/;"	n
base_ci	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_bones.hpp	/^  arma_aligned const Base<uword,T2>& base_ci;$/;"	m	class:subview_elem2
base_indices	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_bones.hpp	/^  const Base<uword, TB>& base_indices;$/;"	m	class:subview_cube_each2
base_indices	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_bones.hpp	/^  const Base<uword, TB>& base_indices;$/;"	m	class:subview_each2
base_ri	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_bones.hpp	/^  arma_aligned const Base<uword,T1>& base_ri;$/;"	m	class:subview_elem2
base_si	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_bones.hpp	/^  arma_aligned const Base<uword,T1>& base_si;$/;"	m	class:subview_cube_slices
basic_format	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^    basic_format(const T1& in_A, const T2& in_B)$/;"	f	class:arma_str::basic_format
basic_format	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  class basic_format$/;"	c	namespace:arma_str
basic_format_only	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  struct basic_format_only { };$/;"	s	namespace:arma_str
basic_format_only	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  struct basic_format_only< basic_format<T1, T2> > { typedef basic_format<T1,T2> result; };$/;"	s	namespace:arma_str
batch_constructors_sp_mat	lib/armadillo-9.800.2/docs.html	/^<a name="batch_constructors_sp_mat"><\/a>$/;"	a
begin	include/catch.hpp	/^        const_iterator begin() const { return m_start; }$/;"	f	class:Catch::StringRef
begin	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::begin() const$/;"	f	class:Cube
begin	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::begin()$/;"	f	class:Cube
begin	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::begin() const$/;"	f	class:Mat
begin	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::begin()$/;"	f	class:Mat
begin	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::begin() const$/;"	f	class:SpMat
begin	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::begin()$/;"	f	class:SpMat
begin	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const_iterator_type     begin()                            const { return Q.begin();            }$/;"	f	class:SpProxy
begin	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::begin() const$/;"	f	class:SpSubview
begin	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::begin()$/;"	f	class:SpSubview
begin	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::begin() const$/;"	f	class:field
begin	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::begin()$/;"	f	class:field
begin	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::begin() const$/;"	f	class:subview_cube
begin	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::begin()$/;"	f	class:subview_cube
begin	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::begin() const$/;"	f	class:subview
begin	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::begin()$/;"	f	class:subview
begin	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::begin() const$/;"	f	class:subview_row
begin	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::begin()$/;"	f	class:subview_row
begin_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::begin_col(const uword col_num) const$/;"	f	class:Mat
begin_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::begin_col(const uword col_num)$/;"	f	class:Mat
begin_col	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::begin_col(const uword col_num) const$/;"	f	class:SpMat
begin_col	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::begin_col(const uword col_num)$/;"	f	class:SpMat
begin_col	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const_iterator_type     begin_col(const uword col_num)     const { return Q.begin_col(col_num); }$/;"	f	class:SpProxy
begin_col	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const_iterator_type     begin_col(const uword)             const { return Q.begin();            }$/;"	f	class:SpProxy
begin_col	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::begin_col(const uword col_num) const$/;"	f	class:SpSubview
begin_col	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::begin_col(const uword col_num)$/;"	f	class:SpSubview
begin_col_no_sync	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::begin_col_no_sync(const uword col_num) const$/;"	f	class:SpMat
begin_col_no_sync	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::begin_col_no_sync(const uword col_num)$/;"	f	class:SpMat
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::begin_row(const uword row_num) const$/;"	f	class:Col
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::begin_row(const uword row_num)$/;"	f	class:Col
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::begin_row(const uword row_num) const$/;"	f	class:Mat
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::begin_row(const uword row_num)$/;"	f	class:Mat
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::begin_row(const uword row_num) const$/;"	f	class:Row
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::begin_row(const uword row_num)$/;"	f	class:Row
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::begin_row(const uword row_num) const$/;"	f	class:SpCol
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::begin_row(const uword row_num)$/;"	f	class:SpCol
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::begin_row(const uword row_num) const$/;"	f	class:SpMat
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::begin_row(const uword row_num)$/;"	f	class:SpMat
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const_row_iterator_type begin_row(const uword row_num = 0) const { return Q.begin_row(row_num); }$/;"	f	class:SpProxy
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::begin_row(const uword row_num) const$/;"	f	class:SpRow
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::begin_row(const uword row_num)$/;"	f	class:SpRow
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::begin_row(const uword row_num) const$/;"	f	class:SpSubview
begin_row	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::begin_row(const uword row_num)$/;"	f	class:SpSubview
begin_row_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::begin_row_col() const$/;"	f	class:Mat
begin_row_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::begin_row_col()$/;"	f	class:Mat
begin_row_col	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::begin_row_col() const$/;"	f	class:SpMat
begin_row_col	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::begin_row_col()$/;"	f	class:SpMat
begin_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::begin_slice(const uword slice_num) const$/;"	f	class:Cube
begin_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::begin_slice(const uword slice_num)$/;"	f	class:Cube
best_match	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^  hid_t  best_match;$/;"	m	struct:hdf5_misc::hdf5_search_info
best_match_position	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^  size_t best_match_position; \/\/ Position of best match in names vector.$/;"	m	struct:hdf5_misc::hdf5_search_info
blas	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool blas = false;$/;"	m	struct:arma_config
blas	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool blas = true;$/;"	m	struct:arma_config
blas	lib/armadillo-9.800.2/include/armadillo_bits/translate_blas.hpp	/^namespace blas$/;"	n
blas_cxd	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef MKL_Complex16 blas_cxd;$/;"	t
blas_cxd	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef void blas_cxd;$/;"	t
blas_cxf	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef MKL_Complex8  blas_cxf;$/;"	t
blas_cxf	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef void blas_cxf;$/;"	t
blas_int	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef int       blas_int;$/;"	t
blas_int	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef long      blas_int;$/;"	t
blas_int	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef long long blas_int;$/;"	t
blas_len	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^typedef ARMA_FORTRAN_CHARLEN_TYPE blas_len;$/;"	t
block_worker	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_meat.hpp	/^op_htrans::block_worker(std::complex<T>* Y, const std::complex<T>* X, const uword X_n_rows, const uword Y_n_rows, const uword n_rows, const uword n_cols)$/;"	f	class:op_htrans
block_worker	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_meat.hpp	/^op_strans::block_worker(eT* Y, const eT* X, const uword X_n_rows, const uword Y_n_rows, const uword n_rows, const uword n_cols)$/;"	f	class:op_strans
butterfly_2	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  butterfly_2(cx_type* Y, const uword stride, const uword m)$/;"	f	class:fft_engine
butterfly_3	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  butterfly_3(cx_type* Y, const uword stride, const uword m)$/;"	f	class:fft_engine
butterfly_4	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  butterfly_4(cx_type* Y, const uword stride, const uword m)$/;"	f	class:fft_engine
butterfly_5	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  butterfly_5(cx_type* Y, const uword stride, const uword m)$/;"	f	class:fft_engine
butterfly_N	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  butterfly_N(cx_type* Y, const uword stride, const uword m, const uword r)$/;"	f	class:fft_engine
c_0	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT c_0;       \/\/!< speed of light in vacuum (in meters per second)$/;"	m	class:Datum
c_0	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::c_0       = eT(299792458.0);$/;"	m	class:Datum
c_0	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT c_0()       { return eT(299792458.0); }$/;"	f	class:Phy
cache	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  arma_aligned mutable MapMat<eT> cache;$/;"	m	class:SpMat
cache_mutex	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  arma_aligned mutable std::mutex cache_mutex;$/;"	m	class:SpMat
calc_cov	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  const bool calc_cov;$/;"	m	class:running_stat_vec
calc_radix	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  calc_radix()$/;"	f	class:fft_engine
calculate	src/Polarizability/PolarizabilityBath.cpp	/^cx_mat::fixed<3,3> PolarizabilityBath::calculate(double omega)$/;"	f	class:PolarizabilityBath
capturedExpression	include/catch.hpp	/^        StringRef capturedExpression;$/;"	m	struct:Catch::AssertionInfo
capturedExpression	lib/armadillo-9.800.2/tests/catch.hpp	/^        char const * capturedExpression;$/;"	m	struct:Catch::AssertionInfo
catching_exceptions	lib/armadillo-9.800.2/docs.html	/^<a name="catching_exceptions"><\/a>$/;"	a
cbegin	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::cbegin() const$/;"	f	class:Cube
cbegin	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::cbegin() const$/;"	f	class:Mat
cbegin	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::cbegin() const$/;"	f	class:SpMat
cbegin	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::cbegin() const$/;"	f	class:SpSubview
cbegin	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::cbegin() const$/;"	f	class:field
cbegin	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::cbegin() const$/;"	f	class:subview_cube
cbegin	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::cbegin() const$/;"	f	class:subview
cbegin	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::cbegin() const$/;"	f	class:subview_row
cblas_asum	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  cblas_asum(const int N, const eT* X)$/;"	f	namespace:atlas
cblas_cx_dot	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  cblas_cx_dot(const int N, const eT* X, const eT* Y)$/;"	f	namespace:atlas
cblas_dot	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  cblas_dot(const int N, const eT* X, const eT* Y)$/;"	f	namespace:atlas
cblas_gemm	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  cblas_gemm$/;"	f	namespace:atlas
cblas_gemv	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  cblas_gemv$/;"	f	namespace:atlas
cblas_herk	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  cblas_herk$/;"	f	namespace:atlas
cblas_nrm2	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  cblas_nrm2(const int N, const eT* X)$/;"	f	namespace:atlas
cblas_syrk	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  cblas_syrk$/;"	f	namespace:atlas
cdot	lib/armadillo-9.800.2/include/armadillo_bits/fn_dot.hpp	/^cdot$/;"	f
ceil	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_cx_only<eT>::result ceil  (const eT& x) { return eT( std::ceil(x.real()), std::ceil(x.imag()) );   }$/;"	f	class:eop_aux
ceil	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename     arma_real_only<eT>::result ceil  (const eT  x) { return std::ceil(x);                                     }$/;"	f	class:eop_aux
ceil	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result ceil  (const eT  x) { return x;                                                }$/;"	f	class:eop_aux
ceil	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^ceil(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
ceil	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^ceil(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
ceil	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^ceil(const T1& A)$/;"	f
cend	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::cend() const$/;"	f	class:Cube
cend	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::cend() const$/;"	f	class:Mat
cend	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::cend() const$/;"	f	class:SpMat
cend	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::cend() const$/;"	f	class:SpSubview
cend	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::cend() const$/;"	f	class:field
cend	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::cend() const$/;"	f	class:subview_cube
cend	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::cend() const$/;"	f	class:subview
cend	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::cend() const$/;"	f	class:subview_row
char_only	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  template<>           struct char_only<char         > { typedef char        result; };$/;"	s	namespace:arma_str
char_only	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  template<typename T> struct char_only                { };$/;"	s	namespace:arma_str
check	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^  inline static void check()$/;"	f	struct:promote_type
checkEigenvalues	lib/armadillo-9.800.2/tests/fn_princomp.cpp	/^  void checkEigenvalues(const vec& latent)$/;"	f	namespace:__anon11
checkEigenvectors	lib/armadillo-9.800.2/tests/fn_princomp.cpp	/^  void checkEigenvectors(const mat& coeff)$/;"	f	namespace:__anon11
checkHotteling	lib/armadillo-9.800.2/tests/fn_princomp.cpp	/^  void checkHotteling(const vec& tsquared)$/;"	f	namespace:__anon11
checkScore	lib/armadillo-9.800.2/tests/fn_princomp.cpp	/^  void checkScore(const mat& score)$/;"	f	namespace:__anon11
check_cmake	lib/armadillo-9.800.2/configure	/^check_cmake()$/;"	f
check_indices	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each2<eT,TB>::check_indices(const Mat<uword>& indices) const$/;"	f	class:subview_cube_each2
check_indices	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each2<parent,mode,TB>::check_indices(const Mat<uword>& indices) const$/;"	f	class:subview_each2
check_overlap	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::check_overlap(const SpSubview<eT>& x) const$/;"	f	class:SpSubview
check_overlap	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::check_overlap(const Mat<eT>& x) const$/;"	f	class:subview_cube
check_overlap	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::check_overlap(const subview_cube<eT>& x) const$/;"	f	class:subview_cube
check_overlap	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::check_overlap(const subview_field<oT>& x) const$/;"	f	class:subview_field
check_overlap	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::check_overlap(const subview<eT2>& x) const$/;"	f	class:subview
check_size	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each_common<eT>::check_size(const Mat<eT>& A) const$/;"	f	class:subview_cube_each_common
check_size	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each_common<parent,mode>::check_size(const Mat<typename parent::elem_type>& A) const$/;"	f	class:subview_each_common
check_zero	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::check_zero()$/;"	f	class:SpValProxy
chi2rnd	lib/armadillo-9.800.2/docs.html	/^<a name="chi2rnd"><\/a>$/;"	a
chi2rnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_chi2rnd.hpp	/^chi2rnd(const T1& expr)$/;"	f
chi2rnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_chi2rnd.hpp	/^chi2rnd(const double df)$/;"	f
chi2rnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_chi2rnd.hpp	/^chi2rnd(const double df, const SizeMat& s)$/;"	f
chi2rnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_chi2rnd.hpp	/^chi2rnd(const double df, const uword n_elem)$/;"	f
chi2rnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_chi2rnd.hpp	/^chi2rnd(const double df, const uword n_rows, const uword n_cols)$/;"	f
chi2rnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_chi2rnd.hpp	/^chi2rnd(const eT df)$/;"	f
chi2rnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_chi2rnd.hpp	/^chi2rnd(const typename obj_type::elem_type df, const SizeMat& s)$/;"	f
chi2rnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_chi2rnd.hpp	/^chi2rnd(const typename obj_type::elem_type df, const uword n_elem)$/;"	f
chi2rnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_chi2rnd.hpp	/^chi2rnd(const typename obj_type::elem_type df, const uword n_rows, const uword n_cols)$/;"	f
chol	lib/armadillo-9.800.2/docs.html	/^<a name="chol"><\/a>$/;"	a
chol	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::chol(Mat<eT>& X, const uword layout)$/;"	f	class:auxlib
chol	lib/armadillo-9.800.2/include/armadillo_bits/fn_chol.hpp	/^chol$/;"	f
chol_band	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::chol_band(Mat< std::complex<T> >& X, const uword KD, const uword layout)$/;"	f	class:auxlib
chol_band	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::chol_band(Mat<eT>& X, const uword KD, const uword layout)$/;"	f	class:auxlib
chol_band_common	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::chol_band_common(Mat<eT>& X, const uword KD, const uword layout)$/;"	f	class:auxlib
chol_fcovs	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_bones.hpp	/^  arma_aligned Cube<eT> chol_fcovs;$/;"	m	class:gmm_priv::gmm_full
chol_simple	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::chol_simple(Mat<eT>& X)$/;"	f	class:auxlib
chrono_time1	lib/armadillo-9.800.2/include/armadillo_bits/wall_clock_bones.hpp	/^    std::chrono::steady_clock::time_point chrono_time1;$/;"	m	class:wall_clock
circ_toeplitz	lib/armadillo-9.800.2/include/armadillo_bits/fn_toeplitz.hpp	/^circ_toeplitz(const Base<typename T1::elem_type,T1>& X)$/;"	f
clamp	lib/armadillo-9.800.2/docs.html	/^<a name="clamp"><\/a>$/;"	a
clamp	lib/armadillo-9.800.2/include/armadillo_bits/fn_clamp.hpp	/^clamp(const BaseCube<typename T1::elem_type,T1>& X, const typename T1::elem_type min_val, const typename T1::elem_type max_val, typename arma_not_cx<typename T1::elem_type>::result* junk = 0)$/;"	f
clamp	lib/armadillo-9.800.2/include/armadillo_bits/fn_clamp.hpp	/^clamp(const SpBase<typename T1::elem_type,T1>& X, const typename T1::elem_type min_val, const typename T1::elem_type max_val)$/;"	f
clamp	lib/armadillo-9.800.2/include/armadillo_bits/fn_clamp.hpp	/^clamp(const T1& X, const typename T1::elem_type min_val, const typename T1::elem_type max_val)$/;"	f
clapack_gesv	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  clapack_gesv$/;"	f	namespace:atlas
clapack_getrf	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  clapack_getrf$/;"	f	namespace:atlas
clapack_getri	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  clapack_getri$/;"	f	namespace:atlas
clapack_posv	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  clapack_posv(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N, const int NRHS, eT *A, const int lda, eT *B, const int ldb)$/;"	f	namespace:atlas
clapack_potrf	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  clapack_potrf(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N, eT *A, const int lda)$/;"	f	namespace:atlas
clapack_potri	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  clapack_potri(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N, eT *A, const int lda)$/;"	f	namespace:atlas
clean	lib/armadillo-9.800.2/docs.html	/^<a name="clean"><\/a>$/;"	a
clean	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::clean(const typename get_pod_type<eT>::result threshold)$/;"	f	class:Cube
clean	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::clean(const typename get_pod_type<eT>::result threshold)$/;"	f	class:Mat
clean	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::clean(const typename get_pod_type<eT>::result threshold)$/;"	f	class:SpMat
clean	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::clean(const typename get_pod_type<eT>::result threshold)$/;"	f	class:SpSubview
clean	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::clean(eT* mem, const uword n_elem, const eT abs_limit, const typename arma_not_cx<eT>::result* junk)$/;"	f	class:arrayops
clean	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::clean(std::complex<T>* mem, const uword n_elem, const T abs_limit)$/;"	f	class:arrayops
clean	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::clean(const typename get_pod_type<eT>::result threshold)$/;"	f	class:subview_cube
clean	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::clean(const typename get_pod_type<eT>::result threshold)$/;"	f	class:subview
clear	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::clear()$/;"	f	class:Cube
clear	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::clear()$/;"	f	class:Mat
clear	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::clear()$/;"	f	class:SpMat
clear	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::clear()$/;"	f	class:field
coeffs_array	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  arma_aligned cx_type coeffs_array[fixed_N];$/;"	m	struct:fft_store
coeffs_array	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  podarray<cx_type> coeffs_array;$/;"	m	struct:fft_store
coeffs_ptr	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  arma_inline       cx_type* coeffs_ptr()       { return &coeffs_array[0]; }$/;"	f	struct:fft_store
coeffs_ptr	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  arma_inline       cx_type* coeffs_ptr()       { return coeffs_array.memptr(); }$/;"	f	struct:fft_store
coeffs_ptr	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  arma_inline const cx_type* coeffs_ptr() const { return &coeffs_array[0]; }$/;"	f	struct:fft_store
coeffs_ptr	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  arma_inline const cx_type* coeffs_ptr() const { return coeffs_array.memptr(); }$/;"	f	struct:fft_store
col	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::col(const uword in_col) const$/;"	f	class:Cube
col	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::col(const uword in_col)$/;"	f	class:Cube
col	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  arma_aligned const uword col;$/;"	m	class:SpMat_MapMat_val
col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::col(const uword col_num) const$/;"	f	class:Mat
col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::col(const uword col_num)$/;"	f	class:Mat
col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::col() const$/;"	f	class:Mat::const_row_col_iterator
col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_col_iterator::col() const$/;"	f	class:Mat::row_col_iterator
col	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::col(const uword in_col1) const$/;"	f	class:Row
col	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::col(const uword in_col1)$/;"	f	class:Row
col	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    arma_inline uword col() const { return internal_col;                 }$/;"	f	class:SpMat::iterator_base
col	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::col(const uword col_num) const$/;"	f	class:SpMat
col	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::col(const uword col_num)$/;"	f	class:SpMat
col	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    arma_inline uword col() const { return internal_col; }$/;"	f	class:SpSubview::iterator_base
col	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::col(const uword col_num) const$/;"	f	class:SpSubview
col	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::col(const uword col_num)$/;"	f	class:SpSubview
col	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_bones.hpp	/^  arma_aligned const uword col;$/;"	m	class:SpValProxy
col	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::col(const uword col_num) const$/;"	f	class:field
col	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::col(const uword col_num)$/;"	f	class:field
col	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::col(const uword col_num) const$/;"	f	class:subview
col	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::col(const uword col_num)$/;"	f	class:subview
col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  typedef       eT*       col_iterator;$/;"	t	class:Mat
col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  typedef       iterator       col_iterator;$/;"	t	class:SpMat
col_offset	lib/armadillo-9.800.2/include/armadillo_bits/diagview_bones.hpp	/^  const uword col_offset;$/;"	m	class:diagview
col_offset	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_bones.hpp	/^  const uword col_offset;$/;"	m	class:spdiagview
col_ptrs	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  arma_aligned const uword* const col_ptrs;$/;"	m	class:SpMat
colmem	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  const eT* colmem;$/;"	m	class:subview_col
colptr	lib/armadillo-9.800.2/docs.html	/^<a name="colptr"><\/a>$/;"	a
colptr	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::colptr(const uword in_col) const$/;"	f	class:Mat
colptr	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::colptr(const uword in_col)$/;"	f	class:Mat
colptr	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::colptr(const uword in_col) const$/;"	f	class:Mat::fixed
colptr	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::colptr(const uword in_col)$/;"	f	class:Mat::fixed
colptr	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::colptr(const uword in_col) const$/;"	f	class:subview
colptr	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::colptr(const uword in_col)$/;"	f	class:subview
colptr	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::colptr(const uword) const$/;"	f	class:subview_col
colptr	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::colptr(const uword)$/;"	f	class:subview_col
cols	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::cols(const uword in_col1, const uword in_col2) const$/;"	f	class:Cube
cols	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::cols(const uword in_col1, const uword in_col2)$/;"	f	class:Cube
cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::cols(const Base<uword,T2>& ci) const$/;"	f	class:Mat
cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::cols(const Base<uword,T2>& ci)$/;"	f	class:Mat
cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::cols(const span& col_span) const$/;"	f	class:Mat
cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::cols(const span& col_span)$/;"	f	class:Mat
cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::cols(const uword in_col1, const uword in_col2) const$/;"	f	class:Mat
cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::cols(const uword in_col1, const uword in_col2)$/;"	f	class:Mat
cols	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::cols(const span& col_span) const$/;"	f	class:Row
cols	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::cols(const span& col_span)$/;"	f	class:Row
cols	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::cols(const uword in_col1, const uword in_col2) const$/;"	f	class:Row
cols	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::cols(const uword in_col1, const uword in_col2)$/;"	f	class:Row
cols	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::cols(const uword in_col1, const uword in_col2) const$/;"	f	class:SpMat
cols	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::cols(const uword in_col1, const uword in_col2)$/;"	f	class:SpMat
cols	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::cols(const uword in_col1, const uword in_col2) const$/;"	f	class:SpSubview
cols	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::cols(const uword in_col1, const uword in_col2)$/;"	f	class:SpSubview
cols	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::cols(const uword in_col1, const uword in_col2) const$/;"	f	class:field
cols	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::cols(const uword in_col1, const uword in_col2)$/;"	f	class:field
cols	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::cols(const uword in_col1, const uword in_col2) const$/;"	f	class:subview
cols	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::cols(const uword in_col1, const uword in_col2)$/;"	f	class:subview
cols	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::cols(const uword in_col1, const uword in_col2) const$/;"	f	class:subview_row
cols	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::cols(const uword in_col1, const uword in_col2)$/;"	f	class:subview_row
colvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <double> colvec;$/;"	t
colvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef colvec::fixed<2> colvec2;$/;"	t
colvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef colvec::fixed<3> colvec3;$/;"	t
colvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef colvec::fixed<4> colvec4;$/;"	t
colvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef colvec::fixed<5> colvec5;$/;"	t
colvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef colvec::fixed<6> colvec6;$/;"	t
colvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef colvec::fixed<7> colvec7;$/;"	t
colvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef colvec::fixed<8> colvec8;$/;"	t
colvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef colvec::fixed<9> colvec9;$/;"	t
compat_container_fns	lib/armadillo-9.800.2/docs.html	/^<a name="compat_container_fns"><\/a>$/;"	a
compress	lib/armadillo-9.800.2/include/armadillo_bits/band_helper.hpp	/^compress(Mat<eT>& AB, const Mat<eT>& A, const uword KL, const uword KU, const bool use_offset)$/;"	f	namespace:band_helper
compute	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_meat.hpp	/^DoubleShiftQR<eT>::compute(const Mat<eT>& mat_obj, eT s, eT t)$/;"	f	class:newarp::DoubleShiftQR
compute	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_meat.hpp	/^GenEigsSolver<eT, SelectionRule, OpType>::compute(uword maxit, eT tol)$/;"	f	class:newarp::GenEigsSolver
compute	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_meat.hpp	/^SymEigsSolver<eT, SelectionRule, OpType>::compute(uword maxit, eT tol)$/;"	f	class:newarp::SymEigsSolver
compute	lib/armadillo-9.800.2/include/armadillo_bits/newarp_TridiagEigen_meat.hpp	/^TridiagEigen<eT>::compute(const Mat<eT>& mat_obj)$/;"	f	class:newarp::TridiagEigen
compute	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergEigen_meat.hpp	/^UpperHessenbergEigen<eT>::compute(const Mat<eT>& mat_obj)$/;"	f	class:newarp::UpperHessenbergEigen
compute	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_meat.hpp	/^TridiagQR<eT>::compute(const Mat<eT>& mat_obj)$/;"	f	class:newarp::TridiagQR
compute	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_meat.hpp	/^UpperHessenbergQR<eT>::compute(const Mat<eT>& mat_obj)$/;"	f	class:newarp::UpperHessenbergQR
compute_reflector	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_meat.hpp	/^DoubleShiftQR<eT>::compute_reflector(const eT& x1, const eT& x2, const eT& x3, uword ind)$/;"	f	class:newarp::DoubleShiftQR
compute_reflector	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_meat.hpp	/^DoubleShiftQR<eT>::compute_reflector(const eT* x, uword ind)$/;"	f	class:newarp::DoubleShiftQR
computed	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_bones.hpp	/^  bool                computed; \/\/ Whether matrix has been factorised$/;"	m	class:newarp::DoubleShiftQR
computed	lib/armadillo-9.800.2/include/armadillo_bits/newarp_TridiagEigen_bones.hpp	/^  bool     computed;$/;"	m	class:newarp::TridiagEigen
computed	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergEigen_bones.hpp	/^  bool                    computed;$/;"	m	class:newarp::UpperHessenbergEigen
computed	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_bones.hpp	/^  bool    computed;$/;"	m	class:newarp::UpperHessenbergQR
cond	lib/armadillo-9.800.2/docs.html	/^<a name="cond"><\/a>$/;"	a
cond	lib/armadillo-9.800.2/include/armadillo_bits/fn_cond.hpp	/^cond(const Base<typename T1::elem_type, T1>& X)$/;"	f
cond	lib/armadillo-9.800.2/include/armadillo_bits/op_cond_meat.hpp	/^op_cond::cond(const Base<typename T1::elem_type, T1>& X)$/;"	f	class:op_cond
cond_rel	lib/armadillo-9.800.2/include/armadillo_bits/cond_rel_bones.hpp	/^class cond_rel$/;"	c
config_hpp	lib/armadillo-9.800.2/docs.html	/^<a name="config_hpp"><\/a>$/;"	a
config_hpp_arma_64bit_word	lib/armadillo-9.800.2/docs.html	/^<a name="config_hpp_arma_64bit_word"><\/a>$/;"	a
config_hpp_arma_no_debug	lib/armadillo-9.800.2/docs.html	/^<a name="config_hpp_arma_no_debug"><\/a>$/;"	a
config_hpp_arma_use_cxx11	lib/armadillo-9.800.2/docs.html	/^<a name="config_hpp_arma_use_cxx11"><\/a>$/;"	a
conj	lib/armadillo-9.800.2/docs.html	/^<a name="conj"><\/a>$/;"	a
conj	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename  T> arma_inline static          std::complex<T>         conj(const std::complex<T>& x) { return std::conj(x); }$/;"	f	class:eop_aux
conj	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_not_cx<eT>::result conj(const eT               x) { return x;            }$/;"	f	class:eop_aux
conj	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^conj(const Base<std::complex<typename T1::pod_type>,T1>& A)$/;"	f
conj	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^conj(const Base<typename T1::pod_type,T1>& A)$/;"	f
conj	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^conj(const BaseCube<std::complex<typename T1::pod_type>,T1>& A)$/;"	f
conj	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^conj(const BaseCube<typename T1::pod_type,T1>& A)$/;"	f
conj	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^conj(const SpBase<std::complex<typename T1::pod_type>,T1>& A)$/;"	f
conj	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^conj(const SpBase<typename T1::pod_type,T1>& A)$/;"	f
const_col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  typedef const eT* const_col_iterator;$/;"	t	class:Mat
const_col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  typedef const_iterator const_col_iterator;$/;"	t	class:SpMat
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  typedef const eT* const_iterator;$/;"	t	class:Cube
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  typedef const eT* const_iterator;$/;"	t	class:Mat
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  class const_iterator : public iterator_base$/;"	c	class:SpMat
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::const_iterator()$/;"	f	class:SpMat::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::const_iterator(const SpMat<eT>& in_M, const uword \/* in_row *\/, const uword in_col, const uword in_pos)$/;"	f	class:SpMat::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::const_iterator(const SpMat<eT>& in_M, uword in_row, uword in_col)$/;"	f	class:SpMat::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::const_iterator(const SpMat<eT>& in_M, uword initial_pos)$/;"	f	class:SpMat::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::const_iterator(const typename SpMat<eT>::const_iterator& other)$/;"	f	class:SpMat::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  class const_iterator : public iterator_base$/;"	c	class:SpSubview
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::const_iterator(const SpSubview<eT>& in_M, const uword in_row, const uword in_col)$/;"	f	class:SpSubview::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::const_iterator(const SpSubview<eT>& in_M, const uword initial_pos)$/;"	f	class:SpSubview::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::const_iterator(const SpSubview<eT>& in_M, uword in_row, uword in_col, uword in_pos, uword in_skip_pos)$/;"	f	class:SpSubview::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::const_iterator(const const_iterator& other)$/;"	f	class:SpSubview::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^  class const_iterator$/;"	c	class:field
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::const_iterator::const_iterator(const field<oT>& in_M, const bool at_end)$/;"	f	class:field::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::const_iterator::const_iterator(const typename field<oT>::iterator& X)$/;"	f	class:field::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  class const_iterator$/;"	c	class:subview
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^  class const_iterator$/;"	c	class:subview_cube
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::const_iterator::const_iterator()$/;"	f	class:subview_cube::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::const_iterator::const_iterator(const const_iterator& X)$/;"	f	class:subview_cube::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::const_iterator::const_iterator(const iterator& X)$/;"	f	class:subview_cube::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::const_iterator::const_iterator(const subview_cube<eT>& in_sv, const uword in_row, const uword in_col, const uword in_slice)$/;"	f	class:subview_cube::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_iterator::const_iterator()$/;"	f	class:subview::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_iterator::const_iterator(const const_iterator& X)$/;"	f	class:subview::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_iterator::const_iterator(const iterator& X)$/;"	f	class:subview::const_iterator
const_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_iterator::const_iterator(const subview<eT>& in_sv, const uword in_row, const uword in_col)$/;"	f	class:subview::const_iterator
const_iterator_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef typename SpCol<eT>::const_iterator       const_iterator_type;$/;"	t	class:SpProxy
const_iterator_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef typename SpMat<eT>::const_iterator       const_iterator_type;$/;"	t	class:SpProxy
const_iterator_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef typename SpMat<out_eT>::const_iterator       const_iterator_type;$/;"	t	class:SpProxy
const_iterator_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef typename SpRow<eT>::const_iterator       const_iterator_type;$/;"	t	class:SpProxy
const_iterator_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef typename SpSubview<eT>::const_iterator       const_iterator_type;$/;"	t	class:SpProxy
const_row_col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  class const_row_col_iterator$/;"	c	class:Mat
const_row_col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::const_row_col_iterator()$/;"	f	class:Mat::const_row_col_iterator
const_row_col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::const_row_col_iterator(const Mat<eT>& in_M, const uword in_row, const uword in_col)$/;"	f	class:Mat::const_row_col_iterator
const_row_col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::const_row_col_iterator(const const_row_col_iterator& in_it)$/;"	f	class:Mat::const_row_col_iterator
const_row_col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::const_row_col_iterator(const row_col_iterator& in_it)$/;"	f	class:Mat::const_row_col_iterator
const_row_col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  typedef const_iterator const_row_col_iterator;$/;"	t	class:SpMat
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  typedef const eT* const_row_iterator;$/;"	t	class:Col
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  class const_row_iterator$/;"	c	class:Mat
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_iterator::const_row_iterator()$/;"	f	class:Mat::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_iterator::const_row_iterator(const Mat<eT>& in_M, const uword in_row)$/;"	f	class:Mat::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_iterator::const_row_iterator(const typename Mat<eT>::const_row_iterator& X)$/;"	f	class:Mat::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_iterator::const_row_iterator(const typename Mat<eT>::row_iterator& X)$/;"	f	class:Mat::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  typedef const eT* const_row_iterator;$/;"	t	class:Row
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_bones.hpp	/^  typedef typename SpMat<eT>::const_iterator const_row_iterator;$/;"	t	class:SpCol
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  class const_row_iterator : public iterator_base$/;"	c	class:SpMat
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::const_row_iterator()$/;"	f	class:SpMat::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::const_row_iterator(const SpMat<eT>& in_M, uword in_row, uword in_col)$/;"	f	class:SpMat::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::const_row_iterator(const SpMat<eT>& in_M, uword initial_pos)$/;"	f	class:SpMat::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::const_row_iterator(const typename SpMat<eT>::const_row_iterator& other)$/;"	f	class:SpMat::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_bones.hpp	/^  typedef typename SpMat<eT>::const_iterator const_row_iterator;$/;"	t	class:SpRow
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  class const_row_iterator : public iterator_base$/;"	c	class:SpSubview
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::const_row_iterator()$/;"	f	class:SpSubview::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::const_row_iterator(const SpSubview<eT>& in_M, uword in_row, uword in_col)$/;"	f	class:SpSubview::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::const_row_iterator(const SpSubview<eT>& in_M, uword initial_pos)$/;"	f	class:SpSubview::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::const_row_iterator(const const_row_iterator& other)$/;"	f	class:SpSubview::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  class const_row_iterator$/;"	c	class:subview
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_row_iterator::const_row_iterator()$/;"	f	class:subview::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_row_iterator::const_row_iterator(const const_row_iterator& X)$/;"	f	class:subview::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_row_iterator::const_row_iterator(const row_iterator& X)$/;"	f	class:subview::const_row_iterator
const_row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_row_iterator::const_row_iterator(const subview<eT>& in_sv, const uword in_row, const uword in_col)$/;"	f	class:subview::const_row_iterator
const_row_iterator_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef typename SpCol<eT>::const_row_iterator   const_row_iterator_type;$/;"	t	class:SpProxy
const_row_iterator_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef typename SpMat<eT>::const_row_iterator   const_row_iterator_type;$/;"	t	class:SpProxy
const_row_iterator_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef typename SpMat<out_eT>::const_row_iterator   const_row_iterator_type;$/;"	t	class:SpProxy
const_row_iterator_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef typename SpRow<eT>::const_row_iterator   const_row_iterator_type;$/;"	t	class:SpProxy
const_row_iterator_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef typename SpSubview<eT>::const_row_iterator   const_row_iterator_type;$/;"	t	class:SpProxy
const_slice_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  typedef const eT* const_slice_iterator;$/;"	t	class:Cube
constants	lib/armadillo-9.800.2/docs.html	/^<a name="constants"><\/a>$/;"	a
constructors_cube	lib/armadillo-9.800.2/docs.html	/^<a name="constructors_cube"><\/a>$/;"	a
constructors_mat	lib/armadillo-9.800.2/docs.html	/^<a name="constructors_mat"><\/a>$/;"	a
constructors_sp_mat	lib/armadillo-9.800.2/docs.html	/^<a name="constructors_sp_mat"><\/a>$/;"	a
conv	lib/armadillo-9.800.2/docs.html	/^<a name="conv"><\/a>$/;"	a
conv	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv.hpp	/^conv(const T1& A, const T2& B, const char* shape = "full")$/;"	f
conv2	lib/armadillo-9.800.2/docs.html	/^<a name="conv2"><\/a>$/;"	a
conv2	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv.hpp	/^conv2(const T1& A, const T2& B, const char* shape = "full")$/;"	f
conv_to	lib/armadillo-9.800.2/docs.html	/^<a name="conv_to"><\/a>$/;"	a
conv_to	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^class conv_to$/;"	c
conv_to	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^class conv_to< Col<out_eT> >$/;"	c
conv_to	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^class conv_to< Cube<out_eT> >$/;"	c
conv_to	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^class conv_to< Mat<out_eT> >$/;"	c
conv_to	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^class conv_to< Row<out_eT> >$/;"	c
conv_to	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^class conv_to< SpMat<out_eT> >$/;"	c
conv_to	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^class conv_to< std::vector<out_eT> >$/;"	c
convert	include/catch.hpp	/^            convert( const Fake& value ) {$/;"	f	struct:Catch::StringMaker
convert	include/catch.hpp	/^            convert(const Fake& value) {$/;"	f	struct:Catch::StringMaker
convert	include/catch.hpp	/^        static std::string convert(NSObject* nsObject) {$/;"	f	struct:Catch::StringMaker
convert	include/catch.hpp	/^        static std::string convert(NSString * nsstring) {$/;"	f	struct:Catch::StringMaker
convert	include/catch.hpp	/^        static std::string convert(R C::* p) {$/;"	f	struct:Catch::StringMaker
convert	include/catch.hpp	/^        static std::string convert(U* p) {$/;"	f	struct:Catch::StringMaker
convert	include/catch.hpp	/^        static std::string convert(char const* str) {$/;"	f	struct:Catch::StringMaker
convert	include/catch.hpp	/^        static std::string convert(const std::optional<T>& optional) {$/;"	f	struct:Catch::StringMaker
convert	include/catch.hpp	/^        static std::string convert(const std::pair<T1, T2>& pair) {$/;"	f	struct:Catch::StringMaker
convert	include/catch.hpp	/^        static std::string convert(signed char const* str) {$/;"	f	struct:Catch::StringMaker
convert	include/catch.hpp	/^        static std::string convert(unsigned char const* str) {$/;"	f	struct:Catch::StringMaker
convert	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::convert(out_eT* dest, const in_eT* src, const uword n_elem)$/;"	f	class:arrayops
convert	lib/armadillo-9.800.2/tests/catch.hpp	/^        static std::string convert( T const& ) { return unprintableString; }$/;"	f	struct:Catch::Detail::EnumStringMaker
convert	lib/armadillo-9.800.2/tests/catch.hpp	/^        static std::string convert( T const& _value ) {$/;"	f	struct:Catch::Detail::StringMakerBase
convert	lib/armadillo-9.800.2/tests/catch.hpp	/^        static std::string convert( T const& v )$/;"	f	struct:Catch::Detail::EnumStringMaker
convert	lib/armadillo-9.800.2/tests/catch.hpp	/^        static std::string convert( T const& v )$/;"	f	struct:Catch::Detail::StringMakerBase
convert	lib/armadillo-9.800.2/tests/catch.hpp	/^    static std::string convert( R C::* p ) {$/;"	f	struct:Catch::StringMaker
convert	lib/armadillo-9.800.2/tests/catch.hpp	/^    static std::string convert( U* p ) {$/;"	f	struct:Catch::StringMaker
convertUnknownEnumToString	include/catch.hpp	/^        std::string convertUnknownEnumToString( E e ) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	include/catch.hpp	/^         std::string>::type convertUnstreamable(T const& ex) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	include/catch.hpp	/^        , std::string>::type convertUnstreamable( T const& value ) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	include/catch.hpp	/^        std::string>::type convertUnstreamable( T const& ) {$/;"	f	namespace:Catch::Detail
convert_cx	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::convert_cx(out_eT* dest, const in_eT* src, const uword n_elem)$/;"	f	class:arrayops
convert_cx_scalar	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::convert_cx_scalar$/;"	f	class:arrayops
convert_naninf	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::convert_naninf(eT& val, const std::string& token)$/;"	f	class:diskio
convert_token	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::convert_token(eT& val, const std::string& token)$/;"	f	class:diskio
convert_token	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::convert_token(std::complex<T>& val, const std::string& token)$/;"	f	class:diskio
coord_ascii	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  coord_ascii         \/\/!< simple co-ordinate format for sparse matrices$/;"	e	enum:file_type
copy	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::copy(eT* dest, const eT* src, const uword n_elem)$/;"	f	class:arrayops
copy_row	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_meat.hpp	/^op_sort::copy_row(Mat<eT>& A, const eT* X, const uword row)$/;"	f	class:op_sort
copy_row	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_meat.hpp	/^op_sort::copy_row(eT* X, const Mat<eT>& A, const uword row)$/;"	f	class:op_sort
copy_row	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::copy_row(const Mat<eT>& A, const uword row)$/;"	f	class:podarray
copy_size	lib/armadillo-9.800.2/docs.html	/^<a name="copy_size"><\/a>$/;"	a
copy_size	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::copy_size(const Cube<eT2>& m)$/;"	f	class:Cube
copy_size	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::copy_size(const Base<eT2, expr>& X)$/;"	f	class:Mat
copy_size	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::copy_size(const Mat<eT2>& m)$/;"	f	class:SpMat
copy_size	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::copy_size(const SpMat<eT2>& m)$/;"	f	class:SpMat
copy_size	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::copy_size(const field<oT2>& x)$/;"	f	class:field
copy_small	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::copy_small(eT* dest, const eT* src, const uword n_elem)$/;"	f	class:arrayops
copy_to_supermatrix	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^  sp_auxlib::copy_to_supermatrix(superlu::SuperMatrix& out, const SpMat<eT>& A)$/;"	f	class:sp_auxlib
copy_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_fft_meat.hpp	/^op_fft_cx::copy_vec(typename Proxy<T1>::elem_type* dest, const Proxy<T1>& P, const uword N)$/;"	f	class:op_fft_cx
copy_vec_proxy	lib/armadillo-9.800.2/include/armadillo_bits/op_fft_meat.hpp	/^op_fft_cx::copy_vec_proxy(typename Proxy<T1>::elem_type* dest, const Proxy<T1>& P, const uword N)$/;"	f	class:op_fft_cx
copy_vec_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/op_fft_meat.hpp	/^op_fft_cx::copy_vec_unwrap(typename Proxy<T1>::elem_type* dest, const Proxy<T1>& P, const uword N)$/;"	f	class:op_fft_cx
cor	lib/armadillo-9.800.2/docs.html	/^<a name="cor"><\/a>$/;"	a
cor	lib/armadillo-9.800.2/include/armadillo_bits/fn_cor.hpp	/^cor(const Base<typename T1::elem_type,T1>& A, const Base<typename T1::elem_type,T2>& B, const uword norm_type = 0)$/;"	f
cor	lib/armadillo-9.800.2/include/armadillo_bits/fn_cor.hpp	/^cor(const Base<typename T1::elem_type,T1>& X, const uword norm_type = 0)$/;"	f
cos	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result cos   (const eT x) { return eT( std::cos  (double(x)) ); }$/;"	f	class:eop_aux
cos	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result cos   (const eT x) { return std::cos  (x); }$/;"	f	class:eop_aux
cos	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^cos(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
cos	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^cos(const T1& A)$/;"	f
cosh	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result cosh  (const eT x) { return eT( std::cosh (double(x)) ); }$/;"	f	class:eop_aux
cosh	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result cosh  (const eT x) { return std::cosh (x); }$/;"	f	class:eop_aux
cosh	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^cosh(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
cosh	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^cosh(const T1& A)$/;"	f
count	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_meat.hpp	/^running_mean_scalar<eT>::count() const$/;"	f	class:gmm_priv::running_mean_scalar
count	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat<eT>::count() const$/;"	f	class:running_stat
count	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::count() const$/;"	f	class:running_stat_vec
counter	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^  arma_aligned uword counter;$/;"	m	class:gmm_priv::running_mean_scalar
counter	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_bones.hpp	/^  arma_aligned arma_counter<T> counter;$/;"	m	class:running_stat
counter	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  arma_aligned arma_counter<T> counter;$/;"	m	class:running_stat_vec
cov	lib/armadillo-9.800.2/docs.html	/^<a name="cov"><\/a>$/;"	a
cov	lib/armadillo-9.800.2/include/armadillo_bits/fn_cov.hpp	/^cov(const Base<typename T1::elem_type,T1>& A, const Base<typename T1::elem_type,T2>& B, const uword norm_type = 0)$/;"	f
cov	lib/armadillo-9.800.2/include/armadillo_bits/fn_cov.hpp	/^cov(const Base<typename T1::elem_type,T1>& X, const uword norm_type = 0)$/;"	f
cov	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::cov(const uword norm_type)$/;"	f	class:running_stat_vec
create	src/Polarizability/MemoryKernelFactory.cpp	/^MemoryKernel * MemoryKernelFactory::create(std::string input_file)$/;"	f	class:MemoryKernelFactory
create_mat	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::create_mat()$/;"	f	class:Cube
create_objects	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::create_objects()$/;"	f	class:field
crippled_lapack	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::crippled_lapack(const Base<typename T1::elem_type, T1>&)$/;"	f	class:auxlib
cross	lib/armadillo-9.800.2/docs.html	/^<a name="cross"><\/a>$/;"	a
cross	lib/armadillo-9.800.2/include/armadillo_bits/fn_cross.hpp	/^cross(const Base<typename T1::elem_type,T1>& X, const Base<typename T1::elem_type,T2>& Y)$/;"	f
csv_ascii	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  csv_ascii,          \/\/!< comma separated values (CSV), without any other information$/;"	e	enum:file_type
cube	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Cube<double> cube;$/;"	t
cumprod	lib/armadillo-9.800.2/docs.html	/^<a name="cumprod"><\/a>$/;"	a
cumprod	lib/armadillo-9.800.2/include/armadillo_bits/fn_cumprod.hpp	/^cumprod(const T& x)$/;"	f
cumprod	lib/armadillo-9.800.2/include/armadillo_bits/fn_cumprod.hpp	/^cumprod(const T1& X)$/;"	f
cumprod	lib/armadillo-9.800.2/include/armadillo_bits/fn_cumprod.hpp	/^cumprod(const T1& X, const uword dim)$/;"	f
cumsum	lib/armadillo-9.800.2/docs.html	/^<a name="cumsum"><\/a>$/;"	a
cumsum	lib/armadillo-9.800.2/include/armadillo_bits/fn_cumsum.hpp	/^cumsum(const T& x)$/;"	f
cumsum	lib/armadillo-9.800.2/include/armadillo_bits/fn_cumsum.hpp	/^cumsum(const T1& X)$/;"	f
cumsum	lib/armadillo-9.800.2/include/armadillo_bits/fn_cumsum.hpp	/^cumsum(const T1& X, const uword dim)$/;"	f
current_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned       uword    current_col;$/;"	m	class:Mat::const_row_col_iterator
current_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned       uword    current_col;$/;"	m	class:Mat::const_row_iterator
current_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned uword    current_col;$/;"	m	class:Mat::row_col_iterator
current_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned uword    current_col;$/;"	m	class:Mat::row_iterator
current_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned       uword    current_col;$/;"	m	class:subview::const_iterator
current_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned       uword    current_col;$/;"	m	class:subview::const_row_iterator
current_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned uword    current_col;$/;"	m	class:subview::iterator
current_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned uword    current_col;$/;"	m	class:subview::row_iterator
current_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned       uword     current_col;$/;"	m	class:subview_cube::const_iterator
current_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned uword     current_col;$/;"	m	class:subview_cube::iterator
current_ptr	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned const eT*      current_ptr;$/;"	m	class:Mat::const_row_col_iterator
current_ptr	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned const eT*      current_ptr;$/;"	m	class:Mat::const_row_iterator
current_ptr	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned eT*      current_ptr;$/;"	m	class:Mat::row_col_iterator
current_ptr	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned eT*      current_ptr;$/;"	m	class:Mat::row_iterator
current_ptr	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned const eT*      current_ptr;$/;"	m	class:subview::const_iterator
current_ptr	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned const eT*      current_ptr;$/;"	m	class:subview::const_row_iterator
current_ptr	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned eT*      current_ptr;$/;"	m	class:subview::iterator
current_ptr	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned eT*      current_ptr;$/;"	m	class:subview::row_iterator
current_ptr	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned const eT*       current_ptr;$/;"	m	class:subview_cube::const_iterator
current_ptr	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned eT*       current_ptr;$/;"	m	class:subview_cube::iterator
current_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned       uword    current_row;$/;"	m	class:Mat::const_row_col_iterator
current_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned       uword    current_row;$/;"	m	class:Mat::const_row_iterator
current_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned uword    current_row;$/;"	m	class:Mat::row_col_iterator
current_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    arma_aligned uword    current_row;$/;"	m	class:Mat::row_iterator
current_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned       uword    current_row;$/;"	m	class:subview::const_iterator
current_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned       uword    current_row;$/;"	m	class:subview::const_row_iterator
current_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned uword    current_row;$/;"	m	class:subview::iterator
current_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    arma_aligned uword    current_row;$/;"	m	class:subview::row_iterator
current_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned       uword     current_row;$/;"	m	class:subview_cube::const_iterator
current_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned uword     current_row;$/;"	m	class:subview_cube::iterator
current_slice	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned       uword     current_slice;$/;"	m	class:subview_cube::const_iterator
current_slice	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    arma_aligned uword     current_slice;$/;"	m	class:subview_cube::iterator
cx_attrib	lib/armadillo-9.800.2/include/armadillo_bits/newarp_cx_attrib.hpp	/^struct cx_attrib$/;"	s	namespace:newarp
cx_colvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <cx_double> cx_colvec;$/;"	t
cx_colvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_colvec::fixed<2> cx_colvec2;$/;"	t
cx_colvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_colvec::fixed<3> cx_colvec3;$/;"	t
cx_colvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_colvec::fixed<4> cx_colvec4;$/;"	t
cx_colvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_colvec::fixed<5> cx_colvec5;$/;"	t
cx_colvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_colvec::fixed<6> cx_colvec6;$/;"	t
cx_colvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_colvec::fixed<7> cx_colvec7;$/;"	t
cx_colvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_colvec::fixed<8> cx_colvec8;$/;"	t
cx_colvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_colvec::fixed<9> cx_colvec9;$/;"	t
cx_cube	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Cube<cx_double> cx_cube;$/;"	t
cx_dcolvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <cx_double> cx_dcolvec;$/;"	t
cx_dcolvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dcolvec::fixed<2> cx_dcolvec2;$/;"	t
cx_dcolvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dcolvec::fixed<3> cx_dcolvec3;$/;"	t
cx_dcolvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dcolvec::fixed<4> cx_dcolvec4;$/;"	t
cx_dcolvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dcolvec::fixed<5> cx_dcolvec5;$/;"	t
cx_dcolvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dcolvec::fixed<6> cx_dcolvec6;$/;"	t
cx_dcolvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dcolvec::fixed<7> cx_dcolvec7;$/;"	t
cx_dcolvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dcolvec::fixed<8> cx_dcolvec8;$/;"	t
cx_dcolvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dcolvec::fixed<9> cx_dcolvec9;$/;"	t
cx_dcube	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Cube<cx_double> cx_dcube;$/;"	t
cx_dmat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Mat <cx_double> cx_dmat;$/;"	t
cx_dmat22	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dmat::fixed<2,2> cx_dmat22;$/;"	t
cx_dmat33	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dmat::fixed<3,3> cx_dmat33;$/;"	t
cx_dmat44	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dmat::fixed<4,4> cx_dmat44;$/;"	t
cx_dmat55	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dmat::fixed<5,5> cx_dmat55;$/;"	t
cx_dmat66	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dmat::fixed<6,6> cx_dmat66;$/;"	t
cx_dmat77	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dmat::fixed<7,7> cx_dmat77;$/;"	t
cx_dmat88	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dmat::fixed<8,8> cx_dmat88;$/;"	t
cx_dmat99	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dmat::fixed<9,9> cx_dmat99;$/;"	t
cx_double	lib/armadillo-9.800.2/docs.html	/^<a name="cx_double"><\/a>$/;"	a
cx_double	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^typedef std::complex<double> cx_double;$/;"	t
cx_drowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Row <cx_double> cx_drowvec;$/;"	t
cx_drowvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_drowvec::fixed<2> cx_drowvec2;$/;"	t
cx_drowvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_drowvec::fixed<3> cx_drowvec3;$/;"	t
cx_drowvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_drowvec::fixed<4> cx_drowvec4;$/;"	t
cx_drowvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_drowvec::fixed<5> cx_drowvec5;$/;"	t
cx_drowvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_drowvec::fixed<6> cx_drowvec6;$/;"	t
cx_drowvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_drowvec::fixed<7> cx_drowvec7;$/;"	t
cx_drowvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_drowvec::fixed<8> cx_drowvec8;$/;"	t
cx_drowvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_drowvec::fixed<9> cx_drowvec9;$/;"	t
cx_dvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <cx_double> cx_dvec;$/;"	t
cx_dvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dvec::fixed<2> cx_dvec2;$/;"	t
cx_dvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dvec::fixed<3> cx_dvec3;$/;"	t
cx_dvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dvec::fixed<4> cx_dvec4;$/;"	t
cx_dvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dvec::fixed<5> cx_dvec5;$/;"	t
cx_dvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dvec::fixed<6> cx_dvec6;$/;"	t
cx_dvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dvec::fixed<7> cx_dvec7;$/;"	t
cx_dvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dvec::fixed<8> cx_dvec8;$/;"	t
cx_dvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_dvec::fixed<9> cx_dvec9;$/;"	t
cx_fcolvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <cx_float> cx_fcolvec;$/;"	t
cx_fcolvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fcolvec::fixed<2> cx_fcolvec2;$/;"	t
cx_fcolvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fcolvec::fixed<3> cx_fcolvec3;$/;"	t
cx_fcolvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fcolvec::fixed<4> cx_fcolvec4;$/;"	t
cx_fcolvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fcolvec::fixed<5> cx_fcolvec5;$/;"	t
cx_fcolvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fcolvec::fixed<6> cx_fcolvec6;$/;"	t
cx_fcolvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fcolvec::fixed<7> cx_fcolvec7;$/;"	t
cx_fcolvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fcolvec::fixed<8> cx_fcolvec8;$/;"	t
cx_fcolvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fcolvec::fixed<9> cx_fcolvec9;$/;"	t
cx_fcube	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Cube<cx_float> cx_fcube;$/;"	t
cx_float	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^typedef std::complex<float>  cx_float;$/;"	t
cx_fmat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Mat <cx_float> cx_fmat;$/;"	t
cx_fmat22	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fmat::fixed<2,2> cx_fmat22;$/;"	t
cx_fmat33	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fmat::fixed<3,3> cx_fmat33;$/;"	t
cx_fmat44	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fmat::fixed<4,4> cx_fmat44;$/;"	t
cx_fmat55	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fmat::fixed<5,5> cx_fmat55;$/;"	t
cx_fmat66	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fmat::fixed<6,6> cx_fmat66;$/;"	t
cx_fmat77	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fmat::fixed<7,7> cx_fmat77;$/;"	t
cx_fmat88	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fmat::fixed<8,8> cx_fmat88;$/;"	t
cx_fmat99	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fmat::fixed<9,9> cx_fmat99;$/;"	t
cx_frowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Row <cx_float> cx_frowvec;$/;"	t
cx_frowvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_frowvec::fixed<2> cx_frowvec2;$/;"	t
cx_frowvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_frowvec::fixed<3> cx_frowvec3;$/;"	t
cx_frowvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_frowvec::fixed<4> cx_frowvec4;$/;"	t
cx_frowvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_frowvec::fixed<5> cx_frowvec5;$/;"	t
cx_frowvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_frowvec::fixed<6> cx_frowvec6;$/;"	t
cx_frowvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_frowvec::fixed<7> cx_frowvec7;$/;"	t
cx_frowvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_frowvec::fixed<8> cx_frowvec8;$/;"	t
cx_frowvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_frowvec::fixed<9> cx_frowvec9;$/;"	t
cx_fvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <cx_float> cx_fvec;$/;"	t
cx_fvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fvec::fixed<2> cx_fvec2;$/;"	t
cx_fvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fvec::fixed<3> cx_fvec3;$/;"	t
cx_fvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fvec::fixed<4> cx_fvec4;$/;"	t
cx_fvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fvec::fixed<5> cx_fvec5;$/;"	t
cx_fvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fvec::fixed<6> cx_fvec6;$/;"	t
cx_fvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fvec::fixed<7> cx_fvec7;$/;"	t
cx_fvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fvec::fixed<8> cx_fvec8;$/;"	t
cx_fvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_fvec::fixed<9> cx_fvec9;$/;"	t
cx_gbcon	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_gbcon(char* norm, blas_int* n, blas_int* kl, blas_int* ku, const std::complex<T>* ab, blas_int* ldab, const blas_int* ipiv, const T* anorm, T* rcond, std::complex<T>* work, T* rwork, blas_int* info)$/;"	f	namespace:lapack
cx_gbsvx	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_gbsvx(char* fact, char* trans, blas_int* n, blas_int* kl, blas_int* ku, blas_int* nrhs, eT* ab, blas_int* ldab, eT* afb, blas_int* ldafb, blas_int* ipiv, char* equed, T* r, T* c, eT* b, blas_int* ldb, eT* x, blas_int* ldx, T* rcond, T* ferr, T* berr, eT* work, T* rwork, blas_int* info)$/;"	f	namespace:lapack
cx_gecon	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_gecon(char* norm, blas_int* n, const std::complex<T>* a, blas_int* lda, const T* anorm, T* rcond, std::complex<T>* work, T* rwork, blas_int* info)$/;"	f	namespace:lapack
cx_gees	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_gees(char* jobvs, char* sort, void* select, blas_int* n, std::complex<T>* a, blas_int* lda, blas_int* sdim, std::complex<T>* w, std::complex<T>* vs, blas_int* ldvs, std::complex<T>* work, blas_int* lwork, T* rwork, blas_int* bwork, blas_int* info)$/;"	f	namespace:lapack
cx_geev	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_geev(char* jobvl, char* jobvr, blas_int* n, eT* a, blas_int* lda, eT* w, eT* vl, blas_int* ldvl, eT* vr, blas_int* ldvr, eT* work, blas_int* lwork, typename eT::value_type* rwork, blas_int* info)$/;"	f	namespace:lapack
cx_geevx	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_geevx(char* balanc, char* jobvl, char* jobvr, char* sense, blas_int* n, eT* a, blas_int* lda, eT* w, eT* vl, blas_int* ldvl, eT* vr, blas_int* ldvr, blas_int* ilo, blas_int* ihi, typename eT::value_type* scale, typename eT::value_type* abnrm, typename eT::value_type* rconde, typename eT::value_type* rcondv, eT* work, blas_int* lwork, typename eT::value_type* rwork, blas_int* info)$/;"	f	namespace:lapack
cx_gelsd	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_gelsd(blas_int* m, blas_int* n, blas_int* nrhs, std::complex<T>* a, blas_int* lda, std::complex<T>* b, blas_int* ldb, T* S, T* rcond, blas_int* rank, std::complex<T>* work, blas_int* lwork, T* rwork, blas_int* iwork, blas_int* info)$/;"	f	namespace:lapack
cx_gesdd	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_gesdd$/;"	f	namespace:lapack
cx_gesvd	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_gesvd$/;"	f	namespace:lapack
cx_gesvx	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_gesvx(char* fact, char* trans, blas_int* n, blas_int* nrhs, eT* a, blas_int* lda, eT* af, blas_int* ldaf, blas_int* ipiv, char* equed, T* r, T* c, eT* b, blas_int* ldb, eT* x, blas_int* ldx, T* rcond, T* ferr, T* berr, eT* work, T* rwork, blas_int* info)$/;"	f	namespace:lapack
cx_gges	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_gges$/;"	f	namespace:lapack
cx_ggev	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_ggev$/;"	f	namespace:lapack
cx_gtsvx	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_gtsvx(char* fact, char* trans, blas_int* n, blas_int* nrhs, eT* dl, eT* d, eT* du, eT* dlf, eT* df, eT* duf, eT* du2, blas_int* ipiv, eT* b, blas_int* ldb, eT* x, blas_int* ldx, T* rcond, T* ferr, T* berr, eT* work, T* rwork, blas_int* info)$/;"	f	namespace:lapack
cx_mat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Mat <cx_double> cx_mat;$/;"	t
cx_mat22	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_mat::fixed<2,2> cx_mat22;$/;"	t
cx_mat33	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_mat::fixed<3,3> cx_mat33;$/;"	t
cx_mat44	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_mat::fixed<4,4> cx_mat44;$/;"	t
cx_mat55	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_mat::fixed<5,5> cx_mat55;$/;"	t
cx_mat66	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_mat::fixed<6,6> cx_mat66;$/;"	t
cx_mat77	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_mat::fixed<7,7> cx_mat77;$/;"	t
cx_mat88	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_mat::fixed<8,8> cx_mat88;$/;"	t
cx_mat99	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_mat::fixed<9,9> cx_mat99;$/;"	t
cx_pocon	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_pocon(char* uplo, blas_int* n, const std::complex<T>* a, blas_int* lda, const T* anorm, T* rcond, std::complex<T>* work, T* rwork, blas_int* info)$/;"	f	namespace:lapack
cx_posvx	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_posvx(char* fact, char* uplo, blas_int* n, blas_int* nrhs, eT* a, blas_int* lda, eT* af, blas_int* ldaf, char* equed, T* s, eT* b, blas_int* ldb, eT* x, blas_int* ldx, T* rcond, T* ferr, T* berr, eT* work, T* rwork, blas_int* info)$/;"	f	namespace:lapack
cx_rowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Row <cx_double> cx_rowvec;$/;"	t
cx_rowvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_rowvec::fixed<2> cx_rowvec2;$/;"	t
cx_rowvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_rowvec::fixed<3> cx_rowvec3;$/;"	t
cx_rowvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_rowvec::fixed<4> cx_rowvec4;$/;"	t
cx_rowvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_rowvec::fixed<5> cx_rowvec5;$/;"	t
cx_rowvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_rowvec::fixed<6> cx_rowvec6;$/;"	t
cx_rowvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_rowvec::fixed<7> cx_rowvec7;$/;"	t
cx_rowvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_rowvec::fixed<8> cx_rowvec8;$/;"	t
cx_rowvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_rowvec::fixed<9> cx_rowvec9;$/;"	t
cx_select_iuc	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^cx_select_iuc(const std::complex<T>* x_ptr, const std::complex<T>* y_ptr)$/;"	f	namespace:qz_helper
cx_select_lhp	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^cx_select_lhp(const std::complex<T>* x_ptr, const std::complex<T>* y_ptr)$/;"	f	namespace:qz_helper
cx_select_ouc	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^cx_select_ouc(const std::complex<T>* x_ptr, const std::complex<T>* y_ptr)$/;"	f	namespace:qz_helper
cx_select_rhp	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^cx_select_rhp(const std::complex<T>* x_ptr, const std::complex<T>* y_ptr)$/;"	f	namespace:qz_helper
cx_trcon	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  cx_trcon(char* norm, char* uplo, char* diag, blas_int* n, const std::complex<T>* a, blas_int* lda, T* rcond, std::complex<T>* work, T* rwork, blas_int* info)$/;"	f	namespace:lapack
cx_vec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <cx_double> cx_vec;$/;"	t
cx_vec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_vec::fixed<2> cx_vec2;$/;"	t
cx_vec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_vec::fixed<3> cx_vec3;$/;"	t
cx_vec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_vec::fixed<4> cx_vec4;$/;"	t
cx_vec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_vec::fixed<5> cx_vec5;$/;"	t
cx_vec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_vec::fixed<6> cx_vec6;$/;"	t
cx_vec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_vec::fixed<7> cx_vec7;$/;"	t
cx_vec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_vec::fixed<8> cx_vec8;$/;"	t
cx_vec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef cx_vec::fixed<9> cx_vec9;$/;"	t
cxx11	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool cxx11 = false;$/;"	m	struct:arma_config
cxx11	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool cxx11 = true;$/;"	m	struct:arma_config
d_count	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_bones.hpp	/^  arma_aligned eT    d_count;$/;"	m	class:arma_counter
datum	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^typedef Datum<double> datum;$/;"	t
dcolvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <double> dcolvec;$/;"	t
dcolvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dcolvec::fixed<2> dcolvec2;$/;"	t
dcolvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dcolvec::fixed<3> dcolvec3;$/;"	t
dcolvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dcolvec::fixed<4> dcolvec4;$/;"	t
dcolvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dcolvec::fixed<5> dcolvec5;$/;"	t
dcolvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dcolvec::fixed<6> dcolvec6;$/;"	t
dcolvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dcolvec::fixed<7> dcolvec7;$/;"	t
dcolvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dcolvec::fixed<8> dcolvec8;$/;"	t
dcolvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dcolvec::fixed<9> dcolvec9;$/;"	t
dcovs	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_bones.hpp	/^  arma_aligned const Mat<eT> dcovs;$/;"	m	class:gmm_priv::gmm_diag
dcube	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Cube<double> dcube;$/;"	t
debug	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool debug = false;$/;"	m	struct:arma_config
debug	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool debug = true;$/;"	m	struct:arma_config
decomposedExpression	lib/armadillo-9.800.2/tests/catch.hpp	/^        mutable DecomposedExpression const* decomposedExpression;$/;"	m	struct:Catch::AssertionResultData
deleteAll	lib/armadillo-9.800.2/tests/catch.hpp	/^    void deleteAll( ContainerT& container ) {$/;"	f	namespace:Catch
deleteAllValues	lib/armadillo-9.800.2/tests/catch.hpp	/^    void deleteAllValues( AssociativeContainerT& container ) {$/;"	f	namespace:Catch
delete_element	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::delete_element(const uword in_row, const uword in_col)$/;"	f	class:SpMat
delete_element	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::delete_element(const uword in_row, const uword in_col)$/;"	f	class:SpSubview
delete_mat	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::delete_mat()$/;"	f	class:Cube
delete_objects	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::delete_objects()$/;"	f	class:field
dense_minus_sparse	lib/armadillo-9.800.2/include/armadillo_bits/spglue_minus_meat.hpp	/^spglue_minus_mixed::dense_minus_sparse(Mat< typename promote_type<typename T1::elem_type, typename T2::elem_type >::result>& out, const T1& X, const T2& Y)$/;"	f	class:spglue_minus_mixed
dense_plus_sparse	lib/armadillo-9.800.2/include/armadillo_bits/spglue_plus_meat.hpp	/^spglue_plus_mixed::dense_plus_sparse(Mat< typename promote_type<typename T1::elem_type, typename T2::elem_type >::result>& out, const T1& X, const T2& Y)$/;"	f	class:spglue_plus_mixed
dense_schur_sparse	lib/armadillo-9.800.2/include/armadillo_bits/spglue_schur_meat.hpp	/^spglue_schur_misc::dense_schur_sparse(SpMat<typename T1::elem_type>& out, const T1& x, const T2& y)$/;"	f	class:spglue_schur_misc
dense_schur_sparse	lib/armadillo-9.800.2/include/armadillo_bits/spglue_schur_meat.hpp	/^spglue_schur_mixed::dense_schur_sparse(SpMat< typename promote_type<typename T1::elem_type, typename T2::elem_type >::result>& out, const T1& X, const T2& Y)$/;"	f	class:spglue_schur_mixed
dense_sparse_max	lib/armadillo-9.800.2/include/armadillo_bits/spglue_max_meat.hpp	/^spglue_max::dense_sparse_max(Mat<eT>& out, const Base<eT,T1>& X, const SpBase<eT,T2>& Y)$/;"	f	class:spglue_max
dense_sparse_min	lib/armadillo-9.800.2/include/armadillo_bits/spglue_min_meat.hpp	/^spglue_min::dense_sparse_min(Mat<eT>& out, const Base<eT,T1>& X, const SpBase<eT,T2>& Y)$/;"	f	class:spglue_min
dense_times_sparse	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_meat.hpp	/^spglue_times_misc::dense_times_sparse(Mat<typename T1::elem_type>& out, const T1& x, const T2& y)$/;"	f	class:spglue_times_misc
dense_times_sparse	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_meat.hpp	/^spglue_times_mixed::dense_times_sparse(Mat< typename promote_type<typename T1::elem_type, typename T2::elem_type>::result >& out, const T1& X, const T2& Y)$/;"	f	class:spglue_times_mixed
deprecated	lib/armadillo-9.800.2/docs.html	/^<a name="deprecated"><\/a>$/;"	a
depth	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^    static const uword depth = 0;$/;"	m	struct:arma_str::format_metaprog
depth	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^    static const uword depth = 1 + format_metaprog<T1>::depth;$/;"	m	struct:arma_str::format_metaprog
depth_lhs	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^struct depth_lhs$/;"	s
depth_lhs	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^struct depth_lhs< glue_type, Glue<T1,T2,glue_type> >$/;"	s
description	lib/armadillo-9.800.2/tests/catch.hpp	/^    const char* description;$/;"	m	struct:Catch::NameAndDesc
destroy_compcol_mat	lib/armadillo-9.800.2/include/armadillo_bits/translate_superlu.hpp	/^  destroy_compcol_mat(SuperMatrix* a)$/;"	f	namespace:superlu
destroy_dense_mat	lib/armadillo-9.800.2/include/armadillo_bits/translate_superlu.hpp	/^  destroy_dense_mat(SuperMatrix* a)$/;"	f	namespace:superlu
destroy_supermatrix	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^  sp_auxlib::destroy_supermatrix(superlu::SuperMatrix& out)$/;"	f	class:sp_auxlib
destroy_supernode_mat	lib/armadillo-9.800.2/include/armadillo_bits/translate_superlu.hpp	/^  destroy_supernode_mat(SuperMatrix* a)$/;"	f	namespace:superlu
det	lib/armadillo-9.800.2/docs.html	/^<a name="det"><\/a>$/;"	a
det	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::det(const Base<eT,T1>& X)$/;"	f	class:auxlib
det	lib/armadillo-9.800.2/include/armadillo_bits/fn_det.hpp	/^det$/;"	f
det	lib/armadillo-9.800.2/include/armadillo_bits/fn_det.hpp	/^det(const T& x)$/;"	f
det_lapack	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::det_lapack(const Mat<eT>& X, const bool make_copy)$/;"	f	class:auxlib
det_tinymat	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::det_tinymat(const Mat<eT>& X, const uword N)$/;"	f	class:auxlib
diag	lib/armadillo-9.800.2/docs.html	/^<a name="diag"><\/a>$/;"	a
diag	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::diag(const sword in_id) const$/;"	f	class:Mat
diag	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::diag(const sword in_id)$/;"	f	class:Mat
diag	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::diag(const sword in_id) const$/;"	f	class:SpMat
diag	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::diag(const sword in_id)$/;"	f	class:SpMat
diag	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::diag(const sword in_id) const$/;"	f	class:subview
diag	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::diag(const sword in_id)$/;"	f	class:subview
diagmat	lib/armadillo-9.800.2/docs.html	/^<a name="diagmat"><\/a>$/;"	a
diagmat	lib/armadillo-9.800.2/include/armadillo_bits/fn_diagmat.hpp	/^diagmat(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
diagmat	lib/armadillo-9.800.2/include/armadillo_bits/fn_diagmat.hpp	/^diagmat(const SpBase<typename T1::elem_type,T1>& X, const sword k)$/;"	f
diagmat	lib/armadillo-9.800.2/include/armadillo_bits/fn_diagmat.hpp	/^diagmat(const T1& X)$/;"	f
diagmat	lib/armadillo-9.800.2/include/armadillo_bits/fn_diagmat.hpp	/^diagmat(const T1& X, const sword k)$/;"	f
diagmat_proxy	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  diagmat_proxy(const Col<eT>& X)$/;"	f	class:diagmat_proxy
diagmat_proxy	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  diagmat_proxy(const Mat<eT>& X)$/;"	f	class:diagmat_proxy
diagmat_proxy	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  diagmat_proxy(const Row<eT>& X)$/;"	f	class:diagmat_proxy
diagmat_proxy	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  diagmat_proxy(const subview_col<eT>& X)$/;"	f	class:diagmat_proxy
diagmat_proxy	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  diagmat_proxy(const subview_row<eT>& X)$/;"	f	class:diagmat_proxy
diagmat_proxy	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  inline diagmat_proxy(const T1& X)$/;"	f	class:diagmat_proxy
diagmat_proxy	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy : public diagmat_proxy_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	c
diagmat_proxy	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy< Col<eT> >$/;"	c
diagmat_proxy	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy< Mat<eT> >$/;"	c
diagmat_proxy	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy< Row<eT> >$/;"	c
diagmat_proxy	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy< subview_col<eT> >$/;"	c
diagmat_proxy	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy< subview_row<eT> >$/;"	c
diagmat_proxy_check	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  diagmat_proxy_check(const Col<eT>& X, const Mat<eT>& out)$/;"	f	class:diagmat_proxy_check
diagmat_proxy_check	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  diagmat_proxy_check(const Mat<eT>& X, const Mat<eT>& out)$/;"	f	class:diagmat_proxy_check
diagmat_proxy_check	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  diagmat_proxy_check(const Row<eT>& X, const Mat<eT>& out)$/;"	f	class:diagmat_proxy_check
diagmat_proxy_check	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  diagmat_proxy_check(const subview_col<eT>& X, const Mat<eT>& out)$/;"	f	class:diagmat_proxy_check
diagmat_proxy_check	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  diagmat_proxy_check(const subview_row<eT>& X, const Mat<eT>&)$/;"	f	class:diagmat_proxy_check
diagmat_proxy_check	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  inline diagmat_proxy_check(const T1& X, const Mat<typename T1::elem_type>& out)$/;"	f	class:diagmat_proxy_check
diagmat_proxy_check	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy_check : public diagmat_proxy_check_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	c
diagmat_proxy_check	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy_check< Col<eT> >$/;"	c
diagmat_proxy_check	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy_check< Mat<eT> >$/;"	c
diagmat_proxy_check	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy_check< Row<eT> >$/;"	c
diagmat_proxy_check	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy_check< subview_col<eT> >$/;"	c
diagmat_proxy_check	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy_check< subview_row<eT> >$/;"	c
diagmat_proxy_check_default	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  diagmat_proxy_check_default(const T1& X, const Mat<typename T1::elem_type>&)$/;"	f	class:diagmat_proxy_check_default
diagmat_proxy_check_default	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy_check_default$/;"	c
diagmat_proxy_check_fixed	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  diagmat_proxy_check_fixed(const T1& X, const Mat<eT>& out)$/;"	f	class:diagmat_proxy_check_fixed
diagmat_proxy_check_fixed	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy_check_fixed$/;"	c
diagmat_proxy_check_redirect	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^struct diagmat_proxy_check_redirect {};$/;"	s
diagmat_proxy_check_redirect	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^struct diagmat_proxy_check_redirect<T1, false> { typedef diagmat_proxy_check_default<T1> result; };$/;"	s
diagmat_proxy_check_redirect	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^struct diagmat_proxy_check_redirect<T1, true>  { typedef diagmat_proxy_check_fixed<T1>   result; };$/;"	s
diagmat_proxy_default	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  diagmat_proxy_default(const T1& X)$/;"	f	class:diagmat_proxy_default
diagmat_proxy_default	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy_default$/;"	c
diagmat_proxy_fixed	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  diagmat_proxy_fixed(const T1& X)$/;"	f	class:diagmat_proxy_fixed
diagmat_proxy_fixed	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^class diagmat_proxy_fixed$/;"	c
diagmat_proxy_redirect	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^struct diagmat_proxy_redirect {};$/;"	s
diagmat_proxy_redirect	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^struct diagmat_proxy_redirect<T1, false> { typedef diagmat_proxy_default<T1> result; };$/;"	s
diagmat_proxy_redirect	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^struct diagmat_proxy_redirect<T1, true>  { typedef diagmat_proxy_fixed<T1>   result; };$/;"	s
diagvec	lib/armadillo-9.800.2/docs.html	/^<a name="diagvec"><\/a>$/;"	a
diagvec	lib/armadillo-9.800.2/include/armadillo_bits/fn_diagvec.hpp	/^diagvec(const Base<typename T1::elem_type,T1>& X, const sword diag_id = 0)$/;"	f
diagvec	lib/armadillo-9.800.2/include/armadillo_bits/fn_diagvec.hpp	/^diagvec(const SpBase<typename T1::elem_type,T1>& X, const sword diag_id = 0)$/;"	f
diagview	lib/armadillo-9.800.2/include/armadillo_bits/diagview_bones.hpp	/^class diagview : public Base<eT, diagview<eT> >$/;"	c
diagview	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::diagview(const Mat<eT>& in_m, const uword in_row_offset, const uword in_col_offset, const uword in_len)$/;"	f	class:diagview
diagview_merge	lib/armadillo-9.800.2/include/armadillo_bits/spglue_merge_meat.hpp	/^spglue_merge::diagview_merge(SpMat<eT>& out, const SpMat<eT>& A, const SpMat<eT>& B)$/;"	f	class:spglue_merge
diff	lib/armadillo-9.800.2/docs.html	/^<a name="diff"><\/a>$/;"	a
diff	lib/armadillo-9.800.2/include/armadillo_bits/fn_diff.hpp	/^diff$/;"	f
difference_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef std::ptrdiff_t                  difference_type;  \/\/ TODO: not certain on this one$/;"	t	class:Mat::const_row_col_iterator
difference_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef std::ptrdiff_t                  difference_type;  \/\/ TODO: not certain on this one$/;"	t	class:Mat::const_row_iterator
difference_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef std::ptrdiff_t                  difference_type;  \/\/ TODO: not certain on this one$/;"	t	class:Mat::row_col_iterator
difference_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef std::ptrdiff_t                  difference_type;  \/\/ TODO: not certain on this one$/;"	t	class:Mat::row_iterator
difference_type	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    typedef std::ptrdiff_t                  difference_type;  \/\/ TODO: not certain on this one$/;"	t	class:SpMat::iterator_base
difference_type	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    typedef std::ptrdiff_t                  difference_type;  \/\/ TODO: not certain on this one$/;"	t	class:SpSubview::iterator_base
difference_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef std::ptrdiff_t            difference_type;  \/\/ TODO: not certain on this one$/;"	t	class:subview::const_iterator
difference_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef std::ptrdiff_t            difference_type;  \/\/ TODO: not certain on this one$/;"	t	class:subview::const_row_iterator
difference_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef std::ptrdiff_t            difference_type;  \/\/ TODO: not certain on this one$/;"	t	class:subview::iterator
difference_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef std::ptrdiff_t            difference_type;  \/\/ TODO: not certain on this one$/;"	t	class:subview::row_iterator
difference_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    typedef std::ptrdiff_t            difference_type;  \/\/ TODO: not certain on this one$/;"	t	class:subview_cube::const_iterator
difference_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    typedef std::ptrdiff_t            difference_type;  \/\/ TODO: not certain on this one$/;"	t	class:subview_cube::iterator
dim_n	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  const uword             dim_n;     \/\/ dimension of matrix A$/;"	m	class:newarp::GenEigsSolver
dim_n	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  const uword       dim_n;     \/\/ dimension of matrix A$/;"	m	class:newarp::SymEigsSolver
direct_cdot	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_meat.hpp	/^op_cdot::direct_cdot(const uword n_elem, const eT* const A, const eT* const B)$/;"	f	class:op_cdot
direct_cdot_arma	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_meat.hpp	/^op_cdot::direct_cdot_arma(const uword n_elem, const eT* const A, const eT* const B)$/;"	f	class:op_cdot
direct_cx_median_index	lib/armadillo-9.800.2/include/armadillo_bits/op_median_meat.hpp	/^op_median::direct_cx_median_index$/;"	f	class:op_median
direct_dot	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_meat.hpp	/^op_dot::direct_dot(const uword n_elem, const eT* const A, const eT* const B)$/;"	f	class:op_dot
direct_dot	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_meat.hpp	/^op_dot::direct_dot(const uword n_elem, const eT* const A, const eT* const B, const eT* C)$/;"	f	class:op_dot
direct_dot_arma	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_meat.hpp	/^op_dot::direct_dot_arma(const uword n_elem, const eT* const A, const eT* const B)$/;"	f	class:op_dot
direct_eps	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  direct_eps(const eT x)$/;"	f	class:eop_aux
direct_eps	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  direct_eps(const eT)$/;"	f	class:eop_aux
direct_eps	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  direct_eps(const std::complex<T>& x)$/;"	f	class:eop_aux
direct_kron	lib/armadillo-9.800.2/include/armadillo_bits/glue_kron_meat.hpp	/^glue_kron::direct_kron(Mat< std::complex<T> >& out, const Mat< std::complex<T> >& A, const Mat<T>& B)$/;"	f	class:glue_kron
direct_kron	lib/armadillo-9.800.2/include/armadillo_bits/glue_kron_meat.hpp	/^glue_kron::direct_kron(Mat< std::complex<T> >& out, const Mat<T>& A, const Mat< std::complex<T> >& B)$/;"	f	class:glue_kron
direct_kron	lib/armadillo-9.800.2/include/armadillo_bits/glue_kron_meat.hpp	/^glue_kron::direct_kron(Mat<eT>& out, const Mat<eT>& A, const Mat<eT>& B)$/;"	f	class:glue_kron
direct_max	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::direct_max(const Mat< std::complex<T> >& X, const uword row)$/;"	f	class:op_max
direct_max	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::direct_max(const Mat<eT>& X, const uword row)$/;"	f	class:op_max
direct_max	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::direct_max(const eT* const X, const uword n_elem)$/;"	f	class:op_max
direct_max	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::direct_max(const eT* const X, const uword n_elem, uword& index_of_max_val)$/;"	f	class:op_max
direct_max	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::direct_max(const std::complex<T>* const X, const uword n_elem)$/;"	f	class:op_max
direct_max	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::direct_max(const std::complex<T>* const X, const uword n_elem, uword& index_of_max_val)$/;"	f	class:op_max
direct_mean	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::direct_mean(const Mat<eT>& X, const uword row)$/;"	f	class:op_mean
direct_mean	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::direct_mean(const eT* const X, const uword n_elem)$/;"	f	class:op_mean
direct_mean	lib/armadillo-9.800.2/include/armadillo_bits/spop_mean_meat.hpp	/^spop_mean::direct_mean$/;"	f	class:spop_mean
direct_mean_robust	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::direct_mean_robust(const Mat<eT>& X, const uword row)$/;"	f	class:op_mean
direct_mean_robust	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::direct_mean_robust(const eT* const X, const uword n_elem)$/;"	f	class:op_mean
direct_mean_robust	lib/armadillo-9.800.2/include/armadillo_bits/spop_mean_meat.hpp	/^spop_mean::direct_mean_robust$/;"	f	class:spop_mean
direct_median	lib/armadillo-9.800.2/include/armadillo_bits/op_median_meat.hpp	/^op_median::direct_median(std::vector<eT>& X)$/;"	f	class:op_median
direct_min	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::direct_min(const Mat< std::complex<T> >& X, const uword row)$/;"	f	class:op_min
direct_min	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::direct_min(const Mat<eT>& X, const uword row)$/;"	f	class:op_min
direct_min	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::direct_min(const eT* const X, const uword n_elem)$/;"	f	class:op_min
direct_min	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::direct_min(const eT* const X, const uword n_elem, uword& index_of_min_val)$/;"	f	class:op_min
direct_min	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::direct_min(const std::complex<T>* const X, const uword n_elem)$/;"	f	class:op_min
direct_min	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::direct_min(const std::complex<T>* const X, const uword n_elem, uword& index_of_min_val)$/;"	f	class:op_min
direct_princomp	lib/armadillo-9.800.2/include/armadillo_bits/op_princomp_meat.hpp	/^op_princomp::direct_princomp$/;"	f	class:op_princomp
direct_rowvec_diagmat_colvec	lib/armadillo-9.800.2/include/armadillo_bits/op_dotext_meat.hpp	/^op_dotext::direct_rowvec_diagmat_colvec$/;"	f	class:op_dotext
direct_rowvec_invdiagmat_colvec	lib/armadillo-9.800.2/include/armadillo_bits/op_dotext_meat.hpp	/^op_dotext::direct_rowvec_invdiagmat_colvec$/;"	f	class:op_dotext
direct_rowvec_invdiagvec_colvec	lib/armadillo-9.800.2/include/armadillo_bits/op_dotext_meat.hpp	/^op_dotext::direct_rowvec_invdiagvec_colvec$/;"	f	class:op_dotext
direct_rowvec_mat_colvec	lib/armadillo-9.800.2/include/armadillo_bits/op_dotext_meat.hpp	/^op_dotext::direct_rowvec_mat_colvec$/;"	f	class:op_dotext
direct_rowvec_transmat_colvec	lib/armadillo-9.800.2/include/armadillo_bits/op_dotext_meat.hpp	/^op_dotext::direct_rowvec_transmat_colvec$/;"	f	class:op_dotext
direct_sort	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_meat.hpp	/^op_sort::direct_sort(eT* X, const uword n_elem, const uword sort_type)$/;"	f	class:op_sort
direct_sort_ascending	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_meat.hpp	/^op_sort::direct_sort_ascending(eT* X, const uword n_elem)$/;"	f	class:op_sort
direct_var	lib/armadillo-9.800.2/include/armadillo_bits/op_var_meat.hpp	/^op_var::direct_var(const eT* const X, const uword n_elem, const uword norm_type)$/;"	f	class:op_var
direct_var	lib/armadillo-9.800.2/include/armadillo_bits/op_var_meat.hpp	/^op_var::direct_var(const std::complex<T>* const X, const uword n_elem, const uword norm_type)$/;"	f	class:op_var
direct_var	lib/armadillo-9.800.2/include/armadillo_bits/spop_var_meat.hpp	/^spop_var::direct_var$/;"	f	class:spop_var
direct_var_robust	lib/armadillo-9.800.2/include/armadillo_bits/op_var_meat.hpp	/^op_var::direct_var_robust(const eT* const X, const uword n_elem, const uword norm_type)$/;"	f	class:op_var
direct_var_robust	lib/armadillo-9.800.2/include/armadillo_bits/op_var_meat.hpp	/^op_var::direct_var_robust(const std::complex<T>* const X, const uword n_elem, const uword norm_type)$/;"	f	class:op_var
diskio	lib/armadillo-9.800.2/include/armadillo_bits/diskio_bones.hpp	/^class diskio$/;"	c
distance	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct distance {};$/;"	s	namespace:gmm_priv
distance	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct distance<eT, uword(1)>$/;"	s	namespace:gmm_priv
distance	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct distance<eT, uword(2)>$/;"	s	namespace:gmm_priv
distr_param	lib/armadillo-9.800.2/include/armadillo_bits/distr_param.hpp	/^  inline distr_param()$/;"	f	class:distr_param
distr_param	lib/armadillo-9.800.2/include/armadillo_bits/distr_param.hpp	/^  inline explicit distr_param(const double a, const double b)$/;"	f	class:distr_param
distr_param	lib/armadillo-9.800.2/include/armadillo_bits/distr_param.hpp	/^  inline explicit distr_param(const int a, const int b)$/;"	f	class:distr_param
distr_param	lib/armadillo-9.800.2/include/armadillo_bits/distr_param.hpp	/^class distr_param$/;"	c
div	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::div(const eT in_val)$/;"	f	class:SpMat_MapMat_val
div_inplace	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::div_inplace(Mat<eT>& out, const diagview<eT>& in)$/;"	f	class:diagview
div_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::div_inplace(Cube<eT>& out, const subview_cube<eT>& in)$/;"	f	class:subview_cube
div_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::div_inplace(Mat<eT>& out, const subview_cube<eT>& in)$/;"	f	class:subview_cube
div_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::div_inplace(Cube<eT>& out, const subview_cube_slices& in)$/;"	f	class:subview_cube_slices
div_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::div_inplace(Mat<eT>& out, const subview_elem1& in)$/;"	f	class:subview_elem1
div_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::div_inplace(Mat<eT>& out, const subview_elem2& in)$/;"	f	class:subview_elem2
div_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::div_inplace(Mat<eT>& out, const subview<eT>& in)$/;"	f	class:subview
dmat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Mat <double> dmat;$/;"	t
dmat22	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dmat::fixed<2,2> dmat22;$/;"	t
dmat33	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dmat::fixed<3,3> dmat33;$/;"	t
dmat44	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dmat::fixed<4,4> dmat44;$/;"	t
dmat55	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dmat::fixed<5,5> dmat55;$/;"	t
dmat66	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dmat::fixed<6,6> dmat66;$/;"	t
dmat77	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dmat::fixed<7,7> dmat77;$/;"	t
dmat88	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dmat::fixed<8,8> dmat88;$/;"	t
dmat99	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dmat::fixed<9,9> dmat99;$/;"	t
do_diagmat	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  static const bool do_diagmat = false;$/;"	m	struct:strip_diagmat
do_diagmat	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  static const bool do_diagmat = true;$/;"	m	struct:strip_diagmat
do_inv	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  static const bool do_inv       = false;$/;"	m	struct:strip_inv
do_inv	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  static const bool do_inv       = true;$/;"	m	struct:strip_inv
do_inv_sympd	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  static const bool do_inv_sympd = false;$/;"	m	struct:strip_inv
do_inv_sympd	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  static const bool do_inv_sympd = true;$/;"	m	struct:strip_inv
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = false;$/;"	m	struct:partial_unwrap
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = false;$/;"	m	struct:partial_unwrap_check
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = false;$/;"	m	struct:partial_unwrap_check_default
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = false;$/;"	m	struct:partial_unwrap_check_fixed
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = false;$/;"	m	struct:partial_unwrap_check_htrans_default
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = false;$/;"	m	struct:partial_unwrap_check_htrans_fixed
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = false;$/;"	m	struct:partial_unwrap_default
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = false;$/;"	m	struct:partial_unwrap_fixed
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = false;$/;"	m	struct:partial_unwrap_htrans_default
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = false;$/;"	m	struct:partial_unwrap_htrans_fixed
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = true;$/;"	m	struct:partial_unwrap
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = true;$/;"	m	struct:partial_unwrap_check
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = true;$/;"	m	struct:partial_unwrap_check_htrans2_default
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = true;$/;"	m	struct:partial_unwrap_check_htrans2_fixed
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = true;$/;"	m	struct:partial_unwrap_check_neg_default
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = true;$/;"	m	struct:partial_unwrap_check_neg_fixed
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = true;$/;"	m	struct:partial_unwrap_check_scalar_times_default
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = true;$/;"	m	struct:partial_unwrap_check_scalar_times_fixed
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = true;$/;"	m	struct:partial_unwrap_htrans2_default
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = true;$/;"	m	struct:partial_unwrap_htrans2_fixed
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = true;$/;"	m	struct:partial_unwrap_neg_default
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = true;$/;"	m	struct:partial_unwrap_neg_fixed
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = true;$/;"	m	struct:partial_unwrap_scalar_times_default
do_times	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_times = true;$/;"	m	struct:partial_unwrap_scalar_times_fixed
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = false;$/;"	m	struct:partial_unwrap
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = false;$/;"	m	struct:partial_unwrap_check
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = false;$/;"	m	struct:partial_unwrap_check_default
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = false;$/;"	m	struct:partial_unwrap_check_fixed
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = false;$/;"	m	struct:partial_unwrap_check_neg_default
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = false;$/;"	m	struct:partial_unwrap_check_neg_fixed
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = false;$/;"	m	struct:partial_unwrap_check_scalar_times_default
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = false;$/;"	m	struct:partial_unwrap_check_scalar_times_fixed
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = false;$/;"	m	struct:partial_unwrap_default
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = false;$/;"	m	struct:partial_unwrap_fixed
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = false;$/;"	m	struct:partial_unwrap_neg_default
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = false;$/;"	m	struct:partial_unwrap_neg_fixed
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = false;$/;"	m	struct:partial_unwrap_scalar_times_default
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = false;$/;"	m	struct:partial_unwrap_scalar_times_fixed
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = true;$/;"	m	struct:partial_unwrap
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = true;$/;"	m	struct:partial_unwrap_check
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = true;$/;"	m	struct:partial_unwrap_check_htrans2_default
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = true;$/;"	m	struct:partial_unwrap_check_htrans2_fixed
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = true;$/;"	m	struct:partial_unwrap_check_htrans_default
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = true;$/;"	m	struct:partial_unwrap_check_htrans_fixed
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = true;$/;"	m	struct:partial_unwrap_htrans2_default
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = true;$/;"	m	struct:partial_unwrap_htrans2_fixed
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = true;$/;"	m	struct:partial_unwrap_htrans_default
do_trans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool do_trans = true;$/;"	m	struct:partial_unwrap_htrans_fixed
do_tril	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^         const bool do_tril;$/;"	m	struct:strip_trimat
do_tril	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  static const bool do_tril   = false;$/;"	m	struct:strip_trimat
do_trimat	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  static const bool do_trimat = false;$/;"	m	struct:strip_trimat
do_trimat	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  static const bool do_trimat = true;$/;"	m	struct:strip_trimat
do_triu	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^         const bool do_triu;$/;"	m	struct:strip_trimat
do_triu	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  static const bool do_triu   = false;$/;"	m	struct:strip_trimat
dot	lib/armadillo-9.800.2/docs.html	/^<a name="dot"><\/a>$/;"	a
dot	lib/armadillo-9.800.2/include/armadillo_bits/fn_dot.hpp	/^dot$/;"	f
dot	lib/armadillo-9.800.2/include/armadillo_bits/translate_blas.hpp	/^  dot(const uword n_elem, const eT* x, const eT* y)$/;"	f	namespace:blas
dot_conj_row	lib/armadillo-9.800.2/include/armadillo_bits/mul_herk.hpp	/^  dot_conj_row(const uword n_elem, const eT* const A, const Mat<eT>& B, const uword row)$/;"	f	class:herk_helper
dot_helper	lib/armadillo-9.800.2/include/armadillo_bits/fn_dot.hpp	/^  dot_helper(const SpProxy<T1>& pa, const SpProxy<T2>& pb)$/;"	f	namespace:priv
dot_row_col	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^  dot_row_col( const TA& A, const eT* x, const uword row, const uword N )$/;"	f	class:gemv_emul_helper
drowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Row <double> drowvec;$/;"	t
drowvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef drowvec::fixed<2> drowvec2;$/;"	t
drowvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef drowvec::fixed<3> drowvec3;$/;"	t
drowvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef drowvec::fixed<4> drowvec4;$/;"	t
drowvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef drowvec::fixed<5> drowvec5;$/;"	t
drowvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef drowvec::fixed<6> drowvec6;$/;"	t
drowvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef drowvec::fixed<7> drowvec7;$/;"	t
drowvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef drowvec::fixed<8> drowvec8;$/;"	t
drowvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef drowvec::fixed<9> drowvec9;$/;"	t
dsname	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  const std::string     dsname;$/;"	m	struct:hdf5_name
dual_val	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^  dual_val(eT& out1, eT& out2)$/;"	f	struct:arma_rng::randn
dvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <double> dvec;$/;"	t
dvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dvec::fixed<2> dvec2;$/;"	t
dvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dvec::fixed<3> dvec3;$/;"	t
dvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dvec::fixed<4> dvec4;$/;"	t
dvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dvec::fixed<5> dvec5;$/;"	t
dvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dvec::fixed<6> dvec6;$/;"	t
dvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dvec::fixed<7> dvec7;$/;"	t
dvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dvec::fixed<8> dvec8;$/;"	t
dvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef dvec::fixed<9> dvec9;$/;"	t
e	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT e;        \/\/!< base of the natural logarithm$/;"	m	class:Datum
e	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::e         = eT(2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274);$/;"	m	class:Datum
e	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT e()         { return eT(1.6021766208e-19); }$/;"	f	class:Phy
e	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT e()         { return eT(2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274); }  \/\/ use datum::e instead$/;"	f	class:Math
eGlue	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_bones.hpp	/^class eGlue : public Base<typename T1::elem_type, eGlue<T1, T2, eglue_type> >$/;"	c
eGlue	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_meat.hpp	/^eGlue<T1,T2,eglue_type>::eGlue(const T1& in_A, const T2& in_B)$/;"	f	class:eGlue
eGlueCube	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_bones.hpp	/^class eGlueCube : public BaseCube<typename T1::elem_type, eGlueCube<T1, T2, eglue_type> >$/;"	c
eGlueCube	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_meat.hpp	/^eGlueCube<T1,T2,eglue_type>::eGlueCube(const T1& in_A, const T2& in_B)$/;"	f	class:eGlueCube
eOp	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^class eOp : public Base<typename T1::elem_type, eOp<T1, eop_type> >$/;"	c
eOp	lib/armadillo-9.800.2/include/armadillo_bits/eOp_meat.hpp	/^eOp<T1, eop_type>::eOp(const T1& in_m)$/;"	f	class:eOp
eOp	lib/armadillo-9.800.2/include/armadillo_bits/eOp_meat.hpp	/^eOp<T1, eop_type>::eOp(const T1& in_m, const typename T1::elem_type in_aux)$/;"	f	class:eOp
eOp	lib/armadillo-9.800.2/include/armadillo_bits/eOp_meat.hpp	/^eOp<T1, eop_type>::eOp(const T1& in_m, const typename T1::elem_type in_aux, const uword in_aux_uword_a, const uword in_aux_uword_b)$/;"	f	class:eOp
eOp	lib/armadillo-9.800.2/include/armadillo_bits/eOp_meat.hpp	/^eOp<T1, eop_type>::eOp(const T1& in_m, const uword in_aux_uword_a, const uword in_aux_uword_b)$/;"	f	class:eOp
eOpCube	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_bones.hpp	/^class eOpCube : public BaseCube<typename T1::elem_type, eOpCube<T1, eop_type> >$/;"	c
eOpCube	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_meat.hpp	/^eOpCube<T1, eop_type>::eOpCube(const BaseCube<typename T1::elem_type, T1>& in_m)$/;"	f	class:eOpCube
eOpCube	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_meat.hpp	/^eOpCube<T1, eop_type>::eOpCube(const BaseCube<typename T1::elem_type, T1>& in_m, const typename T1::elem_type in_aux)$/;"	f	class:eOpCube
eOpCube	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_meat.hpp	/^eOpCube<T1, eop_type>::eOpCube(const BaseCube<typename T1::elem_type, T1>& in_m, const typename T1::elem_type in_aux, const uword in_aux_uword_a, const uword in_aux_uword_b, const uword in_aux_uword_c)$/;"	f	class:eOpCube
eOpCube	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_meat.hpp	/^eOpCube<T1, eop_type>::eOpCube(const BaseCube<typename T1::elem_type, T1>& in_m, const uword in_aux_uword_a, const uword in_aux_uword_b)$/;"	f	class:eOpCube
eOpCube	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_meat.hpp	/^eOpCube<T1, eop_type>::eOpCube(const BaseCube<typename T1::elem_type, T1>& in_m, const uword in_aux_uword_a, const uword in_aux_uword_b, const uword in_aux_uword_c)$/;"	f	class:eOpCube
eT	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename std::complex<T>  eT;$/;"	t	class:Proxy
eT	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef typename T1::elem_type                   eT;$/;"	t	class:SpProxy
eT	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_bones.hpp	/^  typedef typename T1::elem_type eT; \/\/ Convenience typedef$/;"	t	class:SpValProxy
eT	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^  typedef typename std::complex<T> eT;$/;"	t	struct:arma_geq_comparator
eT	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^  typedef typename std::complex<T> eT;$/;"	t	struct:arma_gt_comparator
eT	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^  typedef typename std::complex<T> eT;$/;"	t	struct:arma_leq_comparator
eT	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^  typedef typename std::complex<T> eT;$/;"	t	struct:arma_lt_comparator
eT	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  typedef typename T1::elem_type                   eT;$/;"	t	class:diagmat_proxy_check_fixed
eT	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_bones.hpp	/^  typedef typename std::complex<T> eT;$/;"	t	struct:arma_sort_index_helper_ascend
eT	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_bones.hpp	/^  typedef typename std::complex<T> eT;$/;"	t	struct:arma_sort_index_helper_descend
eT	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^  typedef typename promote_type<typename T1::elem_type, typename T2::elem_type>::result eT;$/;"	t	struct:eT_promoter
eT	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  typedef typename rsv_get_elem_type<obj_type>::elem_type eT;$/;"	t	class:running_stat_vec
eT	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_bones.hpp	/^  typedef typename parent::elem_type eT;$/;"	t	class:subview_each1
eT	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_bones.hpp	/^  typedef typename parent::elem_type eT;$/;"	t	class:subview_each2
eT	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_bones.hpp	/^  typedef typename parent::elem_type eT;$/;"	t	class:subview_each_common
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_check
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_check_default
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_check_fixed
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_check_htrans2_default
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_check_htrans2_fixed
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_check_htrans_default
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_check_htrans_fixed
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_check_neg_default
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_check_neg_fixed
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_check_scalar_times_default
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_check_scalar_times_fixed
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_default
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_fixed
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_htrans2_default
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_htrans2_fixed
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_htrans_default
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_htrans_fixed
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_neg_default
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_neg_fixed
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_scalar_times_default
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:partial_unwrap_scalar_times_fixed
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:quasi_unwrap
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:quasi_unwrap_default
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:quasi_unwrap_fixed
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:unwrap_check_default
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:unwrap_check_fixed
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:unwrap_default
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:unwrap_cube
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:unwrap_cube_check
eT	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  typedef typename T1::elem_type eT;$/;"	t	struct:unwrap_spmat
eT1	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename T1::elem_type eT1;$/;"	t	struct:unwrap_check_mixed
eT_promoter	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^struct eT_promoter$/;"	s
eV	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT eV;        \/\/!< electron volt (in joules)$/;"	m	class:Datum
eV	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::eV        = eT(1.6021766208e-19);$/;"	m	class:Datum
eV	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT eV()        { return eT(1.6021766208e-19); }$/;"	f	class:Phy
e_node	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^  typedef struct e_node$/;"	s	namespace:arma::superlu
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef          const elem_type*             ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const Gen<T1, gen_type>&                 ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const Proxy< subview_elem1<eT,T1> >&     ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const diagview<eT>&                      ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const diagview<elem_type>&               ea_type;$/;"	t	class:Proxy_diagvec_mat
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const eGlue<T1, T2, eglue_type>&         ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const eOp< Op<T1, op_htrans>, eop_scalar_times>& ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const eOp<T1, eop_type>&                 ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const eT*                                ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const elem_type*                         ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const elem_type*                         ea_type;$/;"	t	class:Proxy_diagvec_expr
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const elem_type*                         ea_type;$/;"	t	class:Proxy_vectorise_col_mat
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const elem_type*                         ea_type;$/;"	t	struct:Proxy_fixed
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const elem_type*                         ea_type;$/;"	t	struct:Proxy_xtrans_vector
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview<eT>&                       ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview_row<eT>&                   ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview_row_htrans<eT>&            ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview_row_htrans<eT>&     ea_type;$/;"	t	struct:Proxy_subview_row_htrans_cx
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview_row_strans<eT>&            ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview_row_strans<eT>&     ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const subview_row_strans<eT>&     ea_type;$/;"	t	struct:Proxy_subview_row_htrans_non_cx
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const xtrans_mat<elem_type,false>&       ea_type;$/;"	t	struct:Proxy_xtrans_default
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const xtrans_mat<elem_type,true>&        ea_type;$/;"	t	struct:Proxy_xtrans_default
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef const xvec_htrans<eT>&    ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename Proxy<T1>::ea_type              ea_type;$/;"	t	class:Proxy_vectorise_col_expr
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename Proxy_sv_row_ht::ea_type     ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename Proxy_xtrans::ea_type         ea_type;$/;"	t	class:Proxy
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef          const elem_type*             ea_type;$/;"	t	class:ProxyCube
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef const GenCube<eT, gen_type>&             ea_type;$/;"	t	class:ProxyCube
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef const eGlueCube<T1, T2, eglue_type>&     ea_type;$/;"	t	class:ProxyCube
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef const eOpCube<T1, eop_type>&             ea_type;$/;"	t	class:ProxyCube
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef const eT*                                ea_type;$/;"	t	class:ProxyCube
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef const elem_type*                         ea_type;$/;"	t	class:ProxyCube
ea_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef const subview_cube<eT>&                  ea_type;$/;"	t	class:ProxyCube
each_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::each_col(const std::function< void(Col<eT>&) >& F)$/;"	f	class:Mat
each_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::each_col(const std::function< void(const Col<eT>&) >& F) const$/;"	f	class:Mat
each_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::each_col() const$/;"	f	class:Mat
each_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::each_col()$/;"	f	class:Mat
each_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::each_col(const Base<uword, T1>& indices) const$/;"	f	class:Mat
each_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::each_col(const Base<uword, T1>& indices)$/;"	f	class:Mat
each_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^  subview<eT>::each_col(const std::function< void(Col<eT>&) >& F)$/;"	f	class:subview
each_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^  subview<eT>::each_col(const std::function< void(const Col<eT>&) >& F) const$/;"	f	class:subview
each_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::each_col()$/;"	f	class:subview
each_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::each_col(const Base<uword,T1>& indices)$/;"	f	class:subview
each_colrow	lib/armadillo-9.800.2/docs.html	/^<a name="each_colrow"><\/a>$/;"	a
each_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::each_row(const std::function< void(Row<eT>&) >& F)$/;"	f	class:Mat
each_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::each_row(const std::function< void(const Row<eT>&) >& F) const$/;"	f	class:Mat
each_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::each_row() const$/;"	f	class:Mat
each_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::each_row()$/;"	f	class:Mat
each_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::each_row(const Base<uword, T1>& indices) const$/;"	f	class:Mat
each_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::each_row(const Base<uword, T1>& indices)$/;"	f	class:Mat
each_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^  subview<eT>::each_row(const std::function< void(Row<eT>&) >& F)$/;"	f	class:subview
each_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^  subview<eT>::each_row(const std::function< void(const Row<eT>&) >& F) const$/;"	f	class:subview
each_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::each_row()$/;"	f	class:subview
each_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::each_row(const Base<uword,T1>& indices)$/;"	f	class:subview
each_slice	lib/armadillo-9.800.2/docs.html	/^<a name="each_slice"><\/a>$/;"	a
each_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^  Cube<eT>::each_slice(const std::function< void(Mat<eT>&) >& F)$/;"	f	class:Cube
each_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^  Cube<eT>::each_slice(const std::function< void(Mat<eT>&) >& F, const bool use_mp)$/;"	f	class:Cube
each_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^  Cube<eT>::each_slice(const std::function< void(const Mat<eT>&) >& F) const$/;"	f	class:Cube
each_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^  Cube<eT>::each_slice(const std::function< void(const Mat<eT>&) >& F, const bool use_mp) const$/;"	f	class:Cube
each_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::each_slice() const$/;"	f	class:Cube
each_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::each_slice()$/;"	f	class:Cube
each_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::each_slice(const Base<uword, T1>& indices) const$/;"	f	class:Cube
each_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::each_slice(const Base<uword, T1>& indices)$/;"	f	class:Cube
each_slice	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^  subview_cube<eT>::each_slice(const std::function< void(Mat<eT>&) >& F)$/;"	f	class:subview_cube
each_slice	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^  subview_cube<eT>::each_slice(const std::function< void(const Mat<eT>&) >& F) const$/;"	f	class:subview_cube
ec	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT ec;        \/\/!< elementary charge (in coulombs)$/;"	m	class:Datum
ec	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::ec        = eT(1.6021766208e-19);$/;"	m	class:Datum
eglue_core	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_bones.hpp	/^struct eglue_core$/;"	s
eglue_div	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_bones.hpp	/^class eglue_div : public eglue_core<eglue_div>$/;"	c
eglue_minus	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_bones.hpp	/^class eglue_minus : public eglue_core<eglue_minus>$/;"	c
eglue_plus	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_bones.hpp	/^class eglue_plus : public eglue_core<eglue_plus>$/;"	c
eglue_schur	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_bones.hpp	/^class eglue_schur : public eglue_core<eglue_schur>$/;"	c
eig_gen	lib/armadillo-9.800.2/docs.html	/^<a name="eig_gen"><\/a>$/;"	a
eig_gen	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::eig_gen$/;"	f	class:auxlib
eig_gen	lib/armadillo-9.800.2/include/armadillo_bits/fn_eig_gen.hpp	/^eig_gen$/;"	f
eig_gen_balance	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::eig_gen_balance$/;"	f	class:auxlib
eig_pair	lib/armadillo-9.800.2/docs.html	/^<a name="eig_pair"><\/a>$/;"	a
eig_pair	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::eig_pair$/;"	f	class:auxlib
eig_pair	lib/armadillo-9.800.2/include/armadillo_bits/fn_eig_pair.hpp	/^eig_pair$/;"	f
eig_sym	lib/armadillo-9.800.2/docs.html	/^<a name="eig_sym"><\/a>$/;"	a
eig_sym	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::eig_sym(Col<T>& eigval, Mat< std::complex<T> >& eigvec, const Mat< std::complex<T> >& X)$/;"	f	class:auxlib
eig_sym	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::eig_sym(Col<T>& eigval, const Base<std::complex<T>,T1>& X)$/;"	f	class:auxlib
eig_sym	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::eig_sym(Col<eT>& eigval, Mat<eT>& eigvec, const Mat<eT>& X)$/;"	f	class:auxlib
eig_sym	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::eig_sym(Col<eT>& eigval, const Base<eT,T1>& X)$/;"	f	class:auxlib
eig_sym	lib/armadillo-9.800.2/include/armadillo_bits/fn_eig_sym.hpp	/^eig_sym$/;"	f
eig_sym_dc	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::eig_sym_dc(Col<T>& eigval, Mat< std::complex<T> >& eigvec, const Mat< std::complex<T> >& X)$/;"	f	class:auxlib
eig_sym_dc	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::eig_sym_dc(Col<eT>& eigval, Mat<eT>& eigvec, const Mat<eT>& X)$/;"	f	class:auxlib
eig_sym_helper	lib/armadillo-9.800.2/include/armadillo_bits/fn_eig_sym.hpp	/^eig_sym_helper$/;"	f
eigenvalues	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_meat.hpp	/^GenEigsSolver<eT, SelectionRule, OpType>::eigenvalues()$/;"	f	class:newarp::GenEigsSolver
eigenvalues	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_meat.hpp	/^SymEigsSolver<eT, SelectionRule, OpType>::eigenvalues()$/;"	f	class:newarp::SymEigsSolver
eigenvalues	lib/armadillo-9.800.2/include/armadillo_bits/newarp_TridiagEigen_meat.hpp	/^TridiagEigen<eT>::eigenvalues()$/;"	f	class:newarp::TridiagEigen
eigenvalues	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergEigen_meat.hpp	/^UpperHessenbergEigen<eT>::eigenvalues()$/;"	f	class:newarp::UpperHessenbergEigen
eigenvectors	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  inline Mat< std::complex<eT> > eigenvectors() { return eigenvectors(nev); }$/;"	f	class:newarp::GenEigsSolver
eigenvectors	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_meat.hpp	/^GenEigsSolver<eT, SelectionRule, OpType>::eigenvectors(uword nvec)$/;"	f	class:newarp::GenEigsSolver
eigenvectors	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  inline Mat<eT> eigenvectors() { return eigenvectors(nev); }$/;"	f	class:newarp::SymEigsSolver
eigenvectors	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_meat.hpp	/^SymEigsSolver<eT, SelectionRule, OpType>::eigenvectors(uword nvec)$/;"	f	class:newarp::SymEigsSolver
eigenvectors	lib/armadillo-9.800.2/include/armadillo_bits/newarp_TridiagEigen_meat.hpp	/^TridiagEigen<eT>::eigenvectors()$/;"	f	class:newarp::TridiagEigen
eigenvectors	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergEigen_meat.hpp	/^UpperHessenbergEigen<eT>::eigenvectors()$/;"	f	class:newarp::UpperHessenbergEigen
eigs_gen	lib/armadillo-9.800.2/docs.html	/^<a name="eigs_gen"><\/a>$/;"	a
eigs_gen	lib/armadillo-9.800.2/include/armadillo_bits/fn_eigs_gen.hpp	/^eigs_gen$/;"	f
eigs_gen	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^sp_auxlib::eigs_gen(Col< std::complex<T> >& eigval, Mat< std::complex<T> >& eigvec, const SpBase< std::complex<T>, T1>& X_expr, const uword n_eigvals, const char* form_str, const T default_tol)$/;"	f	class:sp_auxlib
eigs_gen	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^sp_auxlib::eigs_gen(Col< std::complex<T> >& eigval, Mat< std::complex<T> >& eigvec, const SpBase<T, T1>& X, const uword n_eigvals, const char* form_str, const T default_tol)$/;"	f	class:sp_auxlib
eigs_gen_arpack	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^sp_auxlib::eigs_gen_arpack(Col< std::complex<T> >& eigval, Mat< std::complex<T> >& eigvec, const SpMat<T>& X, const uword n_eigvals, const char* form_str, const T default_tol)$/;"	f	class:sp_auxlib
eigs_gen_newarp	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^sp_auxlib::eigs_gen_newarp(Col< std::complex<T> >& eigval, Mat< std::complex<T> >& eigvec, const SpMat<T>& X, const uword n_eigvals, const char* form_str, const T default_tol)$/;"	f	class:sp_auxlib
eigs_sym	lib/armadillo-9.800.2/docs.html	/^<a name="eigs_sym"><\/a>$/;"	a
eigs_sym	lib/armadillo-9.800.2/include/armadillo_bits/fn_eigs_sym.hpp	/^eigs_sym$/;"	f
eigs_sym	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^sp_auxlib::eigs_sym(Col<eT>& eigval, Mat<eT>& eigvec, const SpBase<eT, T1>& X, const uword n_eigvals, const char* form_str, const eT default_tol)$/;"	f	class:sp_auxlib
eigs_sym_arpack	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^sp_auxlib::eigs_sym_arpack(Col<eT>& eigval, Mat<eT>& eigvec, const SpMat<eT>& X, const uword n_eigvals, const char* form_str, const eT default_tol)$/;"	f	class:sp_auxlib
eigs_sym_newarp	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^sp_auxlib::eigs_sym_newarp(Col<eT>& eigval, Mat<eT>& eigvec, const SpMat<eT>& X, const uword n_eigvals, const char* form_str, const eT default_tol)$/;"	f	class:sp_auxlib
elem	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::elem(const Base<uword,T1>& a) const$/;"	f	class:Cube
elem	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::elem(const Base<uword,T1>& a)$/;"	f	class:Cube
elem	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::elem(const Base<uword,T1>& a) const$/;"	f	class:Mat
elem	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::elem(const Base<uword,T1>& a)$/;"	f	class:Mat
elem	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::elem(const Base<uword,T1>& ri, const Base<uword,T2>& ci) const$/;"	f	class:Mat
elem	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::elem(const Base<uword,T1>& ri, const Base<uword,T2>& ci)$/;"	f	class:Mat
elem_max	lib/armadillo-9.800.2/include/armadillo_bits/spglue_max_meat.hpp	/^spglue_max::elem_max(const eT& a, const eT& b)$/;"	f	class:spglue_max
elem_min	lib/armadillo-9.800.2/include/armadillo_bits/spglue_min_meat.hpp	/^spglue_min::elem_min(const eT& a, const eT& b)$/;"	f	class:spglue_min
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  typedef eT                                elem_type;$/;"	t	class:Col
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  typedef eT                                elem_type;$/;"	t	class:Col::fixed
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/CubeToMatOp_bones.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:CubeToMatOp
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  typedef eT                                elem_type; \/\/!< the type of elements stored in the cube$/;"	t	class:Cube
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_bones.hpp	/^  typedef          eT                              elem_type;$/;"	t	class:GenCube
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Gen_bones.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:Gen
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/GlueCube_bones.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:GlueCube
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:Glue
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  typedef eT                                elem_type;  \/\/!< the type of elements stored in the matrix$/;"	t	class:MapMat
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  typedef eT                                elem_type;  \/\/!< the type of elements stored in the matrix$/;"	t	class:Mat
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  typedef eT                                elem_type;$/;"	t	class:Mat::fixed
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_bones.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:OpCube
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:Op
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef          out_eT                       elem_type;$/;"	t	class:Proxy
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef eT                                       elem_type;$/;"	t	class:Proxy
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef eT                                elem_type;$/;"	t	class:Proxy
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef eT                                elem_type;$/;"	t	struct:Proxy_subview_row_htrans_cx
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef eT                                elem_type;$/;"	t	struct:Proxy_subview_row_htrans_non_cx
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename Proxy_sv_row_ht::elem_type   elem_type;$/;"	t	class:Proxy
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename Proxy_xtrans::elem_type       elem_type;$/;"	t	class:Proxy
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename T1::elem_type                           elem_type;$/;"	t	class:Proxy
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:Proxy
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:Proxy_diagvec_expr
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:Proxy_diagvec_mat
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:Proxy_vectorise_col_expr
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:Proxy_vectorise_col_mat
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	struct:Proxy_fixed
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	struct:Proxy_xtrans_default
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	struct:Proxy_xtrans_vector
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename std::complex<T>  elem_type;$/;"	t	class:Proxy
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef          eT                              elem_type;$/;"	t	class:ProxyCube
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef          out_eT                       elem_type;$/;"	t	class:ProxyCube
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef eT                                       elem_type;$/;"	t	class:ProxyCube
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:ProxyCube
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  typedef eT                                elem_type;$/;"	t	class:Row
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  typedef eT                                elem_type;$/;"	t	class:Row::fixed
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_bones.hpp	/^  typedef eT                                elem_type;$/;"	t	class:SpCol
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/SpGlue_bones.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:SpGlue
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  typedef eT                                elem_type;  \/\/!< the type of elements stored in the matrix$/;"	t	class:SpMat
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_bones.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:SpOp
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef          out_eT                          elem_type;$/;"	t	class:SpProxy
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef eT                                           elem_type;$/;"	t	class:SpProxy
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef eT                                       elem_type;$/;"	t	class:SpProxy
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:SpProxy
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_bones.hpp	/^  typedef eT                                elem_type;$/;"	t	class:SpRow
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  typedef eT elem_type;$/;"	t	class:SpSubview
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/SpToDOp_bones.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:SpToDOp
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  typedef          eT                              elem_type;$/;"	t	class:diagmat_proxy
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  typedef          eT                              elem_type;$/;"	t	class:diagmat_proxy_check
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:diagmat_proxy_check_default
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:diagmat_proxy_check_fixed
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:diagmat_proxy_default
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:diagmat_proxy_fixed
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/diagview_bones.hpp	/^  typedef eT                                elem_type;$/;"	t	class:diagview
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_bones.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:eGlueCube
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_bones.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:eGlue
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_bones.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:eOpCube
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^  typedef typename T1::elem_type                   elem_type;$/;"	t	class:eOp
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  typedef typename T1::elem_type elem_type;$/;"	t	class:mat_injector
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/mtGlueCube_bones.hpp	/^  typedef          out_eT                       elem_type;$/;"	t	class:mtGlueCube
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/mtGlue_bones.hpp	/^  typedef          out_eT                       elem_type;$/;"	t	class:mtGlue
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_bones.hpp	/^  typedef          out_eT                       elem_type;$/;"	t	class:mtOpCube
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_bones.hpp	/^  typedef          out_eT                       elem_type;$/;"	t	class:mtOp
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/mtSpGlue_bones.hpp	/^  typedef          out_eT                       elem_type;$/;"	t	class:mtSpGlue
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_bones.hpp	/^  typedef          out_eT                       elem_type;$/;"	t	class:mtSpOp
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename obj_type> struct rsv_get_elem_type { typedef typename rsv_get_elem_type_worker<obj_type, is_Mat<obj_type>::value>::result elem_type; };$/;"	t	struct:rsv_get_elem_type
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_bones.hpp	/^  typedef eT                                elem_type;$/;"	t	class:spdiagview
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  typedef eT                                       elem_type;$/;"	t	class:subview
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  typedef eT                                       elem_type;$/;"	t	class:subview_col
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  typedef eT                                       elem_type;$/;"	t	class:subview_row
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  typedef eT                                       elem_type;$/;"	t	class:subview_row_htrans
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  typedef eT                                       elem_type;$/;"	t	class:subview_row_strans
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^  typedef eT                                       elem_type;$/;"	t	class:subview_cube
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_bones.hpp	/^  typedef eT                                       elem_type;$/;"	t	class:subview_cube_slices
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_bones.hpp	/^  typedef eT                                       elem_type;$/;"	t	class:subview_elem1
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_bones.hpp	/^  typedef eT                                       elem_type;$/;"	t	class:subview_elem2
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_bones.hpp	/^  typedef eT                                       elem_type;$/;"	t	class:xtrans_mat
elem_type	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_bones.hpp	/^  typedef eT                                       elem_type;$/;"	t	class:xvec_htrans
element_access	lib/armadillo-9.800.2/docs.html	/^<a name="element_access"><\/a>$/;"	a
element_access_bounds_check_note	lib/armadillo-9.800.2/docs.html	/^<a name="element_access_bounds_check_note"><\/a>$/;"	a
element_initialisation	lib/armadillo-9.800.2/docs.html	/^<a name="element_initialisation"><\/a>$/;"	a
em_fix_params	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::em_fix_params(const eT var_floor)$/;"	f	class:gmm_priv::gmm_diag
em_fix_params	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::em_fix_params(const eT var_floor)$/;"	f	class:gmm_priv::gmm_full
em_generate_acc	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::em_generate_acc$/;"	f	class:gmm_priv::gmm_diag
em_generate_acc	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::em_generate_acc$/;"	f	class:gmm_priv::gmm_full
em_iterate	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::em_iterate(const Mat<eT>& X, const uword max_iter, const eT var_floor, const bool verbose)$/;"	f	class:gmm_priv::gmm_diag
em_iterate	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::em_iterate(const Mat<eT>& X, const uword max_iter, const eT var_floor, const bool verbose)$/;"	f	class:gmm_priv::gmm_full
em_update_params	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::em_update_params$/;"	f	class:gmm_priv::gmm_diag
em_update_params	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::em_update_params$/;"	f	class:gmm_priv::gmm_full
empty	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::empty() const$/;"	f	class:Cube
empty	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::empty() const$/;"	f	class:Mat
empty	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::empty() const$/;"	f	class:SpMat
empty	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::empty() const$/;"	f	class:field
enable_if	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<>     struct enable_if<true> { typedef int result; };$/;"	s
enable_if	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<bool> struct enable_if       {                     };$/;"	s
enable_if2	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<      typename result_type > struct enable_if2<true, result_type> { typedef result_type result; };$/;"	s
enable_if2	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<bool, typename result_type > struct enable_if2                    {                             };$/;"	s
end	include/catch.hpp	/^        const_iterator end() const { return m_start + m_size; }$/;"	f	class:Catch::StringRef
end	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::end() const$/;"	f	class:Cube
end	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::end()$/;"	f	class:Cube
end	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::end() const$/;"	f	class:Mat
end	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::end()$/;"	f	class:Mat
end	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::end() const$/;"	f	class:SpMat
end	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::end()$/;"	f	class:SpMat
end	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const_iterator_type     end()                        const { return Q.end();            }$/;"	f	class:SpProxy
end	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::end() const$/;"	f	class:SpSubview
end	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::end()$/;"	f	class:SpSubview
end	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::end() const$/;"	f	class:field
end	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::end()$/;"	f	class:field
end	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::end() const$/;"	f	class:subview_cube
end	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::end()$/;"	f	class:subview_cube
end	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::end() const$/;"	f	class:subview
end	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::end()$/;"	f	class:subview
end	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::end() const$/;"	f	class:subview_row
end	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::end()$/;"	f	class:subview_row
end_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::end_col(const uword col_num) const$/;"	f	class:Mat
end_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::end_col(const uword col_num)$/;"	f	class:Mat
end_col	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::end_col(const uword col_num) const$/;"	f	class:SpMat
end_col	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::end_col(const uword col_num)$/;"	f	class:SpMat
end_col_no_sync	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::end_col_no_sync(const uword col_num) const$/;"	f	class:SpMat
end_col_no_sync	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::end_col_no_sync(const uword col_num)$/;"	f	class:SpMat
end_of_row	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^field_injector<T1>::end_of_row() const$/;"	f	class:field_injector
end_of_row	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^mat_injector<T1>::end_of_row() const$/;"	f	class:mat_injector
end_row	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::end_row(const uword row_num) const$/;"	f	class:Col
end_row	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::end_row(const uword row_num)$/;"	f	class:Col
end_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::end_row(const uword row_num) const$/;"	f	class:Mat
end_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::end_row(const uword row_num)$/;"	f	class:Mat
end_row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::end_row(const uword row_num) const$/;"	f	class:Row
end_row	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::end_row(const uword row_num)$/;"	f	class:Row
end_row	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::end_row(const uword row_num) const$/;"	f	class:SpCol
end_row	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::end_row(const uword row_num)$/;"	f	class:SpCol
end_row	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::end_row() const$/;"	f	class:SpMat
end_row	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::end_row()$/;"	f	class:SpMat
end_row	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::end_row(const uword row_num) const$/;"	f	class:SpMat
end_row	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::end_row(const uword row_num)$/;"	f	class:SpMat
end_row	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const_row_iterator_type end_row()                    const { return Q.end_row();        }$/;"	f	class:SpProxy
end_row	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const_row_iterator_type end_row(const uword row_num) const { return Q.end_row(row_num); }$/;"	f	class:SpProxy
end_row	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::end_row(const uword row_num) const$/;"	f	class:SpRow
end_row	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::end_row(const uword row_num)$/;"	f	class:SpRow
end_row	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::end_row() const$/;"	f	class:SpSubview
end_row	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::end_row()$/;"	f	class:SpSubview
end_row	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::end_row(const uword row_num) const$/;"	f	class:SpSubview
end_row	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::end_row(const uword row_num)$/;"	f	class:SpSubview
end_row_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::end_row_col() const$/;"	f	class:Mat
end_row_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::end_row_col()$/;"	f	class:Mat
end_row_col	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::end_row_col() const$/;"	f	class:SpMat
end_row_col	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::end_row_col()$/;"	f	class:SpMat
end_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::end_slice(const uword slice_num) const$/;"	f	class:Cube
end_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::end_slice(const uword slice_num)$/;"	f	class:Cube
endr	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^static const injector_end_of_row<> endr = injector_end_of_row<>();$/;"	v
engine	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^  arma_aligned std::mt19937_64 engine;                           \/\/ typedef for std::mersenne_twister_engine with preset parameters$/;"	m	class:arma_rng_cxx11
enlarge_to_mult_of_chunksize	lib/armadillo-9.800.2/include/armadillo_bits/memory.hpp	/^memory::enlarge_to_mult_of_chunksize(const uword n_elem)$/;"	f	class:memory
eop_abs	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_abs               : public eop_core<eop_abs>               , public eop_use_mp_false {};$/;"	c
eop_acos	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_acos              : public eop_core<eop_acos>              , public eop_use_mp_true  {};$/;"	c
eop_acosh	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_acosh             : public eop_core<eop_acosh>             , public eop_use_mp_true  {};$/;"	c
eop_approx_exp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_approx_exp {};$/;"	c
eop_approx_log	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_approx_log {};$/;"	c
eop_arg	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_arg               : public eop_core<eop_arg>               , public eop_use_mp_false {};$/;"	c
eop_asin	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_asin              : public eop_core<eop_asin>              , public eop_use_mp_true  {};$/;"	c
eop_asinh	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_asinh             : public eop_core<eop_asinh>             , public eop_use_mp_true  {};$/;"	c
eop_atan	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_atan              : public eop_core<eop_atan>              , public eop_use_mp_true  {};$/;"	c
eop_atanh	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_atanh             : public eop_core<eop_atanh>             , public eop_use_mp_true  {};$/;"	c
eop_aux	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^class eop_aux$/;"	c
eop_ceil	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_ceil              : public eop_core<eop_ceil>              , public eop_use_mp_false {};$/;"	c
eop_conj	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_conj              : public eop_core<eop_conj>              , public eop_use_mp_false {};$/;"	c
eop_core	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_core$/;"	c
eop_cos	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_cos               : public eop_core<eop_cos>               , public eop_use_mp_true  {};$/;"	c
eop_cosh	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_cosh              : public eop_core<eop_cosh>              , public eop_use_mp_true  {};$/;"	c
eop_eps	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_eps               : public eop_core<eop_eps>               , public eop_use_mp_true  {};$/;"	c
eop_erf	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_erf               : public eop_core<eop_erf>               , public eop_use_mp_true  {};$/;"	c
eop_erfc	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_erfc              : public eop_core<eop_erfc>              , public eop_use_mp_true  {};$/;"	c
eop_exp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_exp               : public eop_core<eop_exp>               , public eop_use_mp_true  {};$/;"	c
eop_exp10	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_exp10             : public eop_core<eop_exp10>             , public eop_use_mp_true  {};$/;"	c
eop_exp2	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_exp2              : public eop_core<eop_exp2>              , public eop_use_mp_true  {};$/;"	c
eop_exp_approx	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_exp_approx {};$/;"	c
eop_expm1	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_expm1             : public eop_core<eop_expm1>             , public eop_use_mp_true  {};$/;"	c
eop_floor	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_floor             : public eop_core<eop_floor>             , public eop_use_mp_false {};$/;"	c
eop_lgamma	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_lgamma            : public eop_core<eop_lgamma>            , public eop_use_mp_true  {};$/;"	c
eop_log	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_log               : public eop_core<eop_log>               , public eop_use_mp_true  {};$/;"	c
eop_log10	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_log10             : public eop_core<eop_log10>             , public eop_use_mp_true  {};$/;"	c
eop_log1p	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_log1p             : public eop_core<eop_log1p>             , public eop_use_mp_true  {};$/;"	c
eop_log2	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_log2              : public eop_core<eop_log2>              , public eop_use_mp_true  {};$/;"	c
eop_log_approx	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_log_approx {};$/;"	c
eop_neg	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_neg               : public eop_core<eop_neg>               , public eop_use_mp_false {};$/;"	c
eop_pow	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_pow               : public eop_core<eop_pow>               , public eop_use_mp_false {};  \/\/ for pow(), use_mp is selectively enabled in eop_core_meat.hpp$/;"	c
eop_round	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_round             : public eop_core<eop_round>             , public eop_use_mp_false {};$/;"	c
eop_scalar_div_post	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_scalar_div_post   : public eop_core<eop_scalar_div_post>   , public eop_use_mp_false {};$/;"	c
eop_scalar_div_pre	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_scalar_div_pre    : public eop_core<eop_scalar_div_pre>    , public eop_use_mp_false {};$/;"	c
eop_scalar_minus_post	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_scalar_minus_post : public eop_core<eop_scalar_minus_post> , public eop_use_mp_false {};$/;"	c
eop_scalar_minus_pre	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_scalar_minus_pre  : public eop_core<eop_scalar_minus_pre>  , public eop_use_mp_false {};$/;"	c
eop_scalar_plus	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_scalar_plus       : public eop_core<eop_scalar_plus>       , public eop_use_mp_false {};$/;"	c
eop_scalar_times	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_scalar_times      : public eop_core<eop_scalar_times>      , public eop_use_mp_false {};$/;"	c
eop_sign	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_sign              : public eop_core<eop_sign>              , public eop_use_mp_false {};$/;"	c
eop_sin	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_sin               : public eop_core<eop_sin>               , public eop_use_mp_true  {};$/;"	c
eop_sinc	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_sinc              : public eop_core<eop_sinc>              , public eop_use_mp_true  {};$/;"	c
eop_sinh	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_sinh              : public eop_core<eop_sinh>              , public eop_use_mp_true  {};$/;"	c
eop_sqrt	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_sqrt              : public eop_core<eop_sqrt>              , public eop_use_mp_true  {};$/;"	c
eop_square	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_square            : public eop_core<eop_square>            , public eop_use_mp_false {};$/;"	c
eop_tan	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_tan               : public eop_core<eop_tan>               , public eop_use_mp_true  {};$/;"	c
eop_tanh	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_tanh              : public eop_core<eop_tanh>              , public eop_use_mp_true  {};$/;"	c
eop_trunc	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_trunc             : public eop_core<eop_trunc>             , public eop_use_mp_false {};$/;"	c
eop_trunc_exp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_trunc_exp         : public eop_core<eop_trunc_exp>         , public eop_use_mp_true  {};$/;"	c
eop_trunc_log	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^class eop_trunc_log         : public eop_core<eop_trunc_log>         , public eop_use_mp_true  {};$/;"	c
eop_use_mp_false	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^struct eop_use_mp_false { static const bool use_mp = false; };$/;"	s
eop_use_mp_true	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^struct eop_use_mp_true  { static const bool use_mp = true;  };$/;"	s
eps	lib/armadillo-9.800.2/docs.html	/^<a name="eps"><\/a>$/;"	a
eps	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT eps;      \/\/!< the difference between 1 and the least value greater than 1 that is representable$/;"	m	class:Datum
eps	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::eps       = std::numeric_limits<eT>::epsilon();$/;"	m	class:Datum
eps	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT eps()       { return std::numeric_limits<eT>::epsilon(); }  \/\/ use datum::eps instead$/;"	f	class:Math
eps	lib/armadillo-9.800.2/include/armadillo_bits/fn_eps.hpp	/^eps(const Base< std::complex<typename T1::pod_type>, T1>& X, const typename arma_cx_only<typename T1::elem_type>::result* junk = 0)$/;"	f
eps	lib/armadillo-9.800.2/include/armadillo_bits/fn_eps.hpp	/^eps(const Base<typename T1::elem_type, T1>& X, const typename arma_not_cx<typename T1::elem_type>::result* junk = 0)$/;"	f
eps	lib/armadillo-9.800.2/include/armadillo_bits/fn_eps.hpp	/^eps(const eT& x)$/;"	f
eps	lib/armadillo-9.800.2/include/armadillo_bits/fn_eps.hpp	/^eps(const std::complex<T>& x)$/;"	f
eps	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  const eT                eps;       \/\/ the machine precision$/;"	m	class:newarp::GenEigsSolver
eps	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  const eT          eps;       \/\/ the machine precision$/;"	m	class:newarp::SymEigsSolver
eps_0	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT eps_0;     \/\/!< electric constant (in farads per meter)$/;"	m	class:Datum
eps_0	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::eps_0     = eT(8.85418781762039e-12);$/;"	m	class:Datum
eps_0	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT eps_0()     { return eT(8.85418781762039e-12); }$/;"	f	class:Phy
eps_abs	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_bones.hpp	/^  const eT            eps_abs;$/;"	m	class:newarp::DoubleShiftQR
eps_rel	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_bones.hpp	/^  const eT            eps_rel;$/;"	m	class:newarp::DoubleShiftQR
epsilon_lapack	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::epsilon_lapack(const Base<typename T1::elem_type, T1>&)$/;"	f	class:auxlib
equilibrate	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  bool             equilibrate;$/;"	m	struct:superlu_opts
equilibrate	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const opts_equilibrate  equilibrate;$/;"	m	namespace:solve_opts
erase_val	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::erase_val(const uword index)$/;"	f	class:MapMat
erf	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static                                      eT erf (const eT  x) { arma_ignore(x); arma_stop_logic_error("erf(): C++11 compiler required"); return eT(0); }$/;"	f	class:eop_aux
erf	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_cx_only<eT>::result erf (const eT& x) { arma_ignore(x); return eT(0);          }$/;"	f	class:eop_aux
erf	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_cx_only<eT>::result erf (const eT& x) { arma_ignore(x); return eT(0);     }$/;"	f	class:eop_aux
erf	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename     arma_real_only<eT>::result erf (const eT  x) { return std::erf(x);               }$/;"	f	class:eop_aux
erf	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename     arma_real_only<eT>::result erf (const eT  x) { return std::tr1::erf(x);               }$/;"	f	class:eop_aux
erf	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result erf (const eT  x) { return eT( std::erf(double(x)) ); }$/;"	f	class:eop_aux
erf	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result erf (const eT  x) { return eT( std::tr1::erf(double(x)) ); }$/;"	f	class:eop_aux
erf	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^erf(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
erf	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^erf(const T1& A)$/;"	f
erfc	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static                                      eT erfc (const eT  x) { arma_ignore(x); arma_stop_logic_error("erfc(): C++11 compiler required"); return eT(0); }$/;"	f	class:eop_aux
erfc	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_cx_only<eT>::result erfc (const eT& x) { arma_ignore(x); return eT(0);           }$/;"	f	class:eop_aux
erfc	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_cx_only<eT>::result erfc (const eT& x) { arma_ignore(x); return eT(0);      }$/;"	f	class:eop_aux
erfc	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename     arma_real_only<eT>::result erfc (const eT  x) { return std::erfc(x);               }$/;"	f	class:eop_aux
erfc	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename     arma_real_only<eT>::result erfc (const eT  x) { return std::tr1::erfc(x);               }$/;"	f	class:eop_aux
erfc	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result erfc (const eT  x) { return eT( std::erfc(double(x)) ); }$/;"	f	class:eop_aux
erfc	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result erfc (const eT  x) { return eT( std::tr1::erfc(double(x)) ); }$/;"	f	class:eop_aux
erfc	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^erfc(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
erfc	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^erfc(const T1& A)$/;"	f
eucl_dist	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^static const gmm_dist_eucl eucl_dist;$/;"	v
euler	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT euler;    \/\/!< Euler's constant, aka Euler-Mascheroni constant$/;"	m	class:Datum
euler	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::euler     = eT(0.5772156649015328606065120900824024310421593359399235988057672348848677267776646709369470632917467495);$/;"	m	class:Datum
euler	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT euler()     { return eT(0.5772156649015328606065120900824024310421593359399235988057672348848677267776646709369470632917467495); }  \/\/ use datum::euler instead$/;"	f	class:Math
eval	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube_eval_Cube<elem_type, derived>::eval() const$/;"	f	class:BaseCube_eval_Cube
eval	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube_eval_expr<elem_type, derived>::eval() const$/;"	f	class:BaseCube_eval_expr
eval	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base_eval_Mat<elem_type, derived>::eval() const$/;"	f	class:Base_eval_Mat
eval	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base_eval_expr<elem_type, derived>::eval() const$/;"	f	class:Base_eval_expr
eval	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase_eval_SpMat<elem_type, derived>::eval() const$/;"	f	class:SpBase_eval_SpMat
eval	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase_eval_expr<elem_type, derived>::eval() const$/;"	f	class:SpBase_eval_expr
eval	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^  eval(const double x)$/;"	f	struct:arma_arg
eval	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^  eval(const eT x)$/;"	f	struct:arma_arg
eval	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^  eval(const float x)$/;"	f	struct:arma_arg
eval	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^  eval(const std::complex<double>& x)$/;"	f	struct:arma_arg
eval	lib/armadillo-9.800.2/include/armadillo_bits/arma_cmath.hpp	/^  eval(const std::complex<float>& x)$/;"	f	struct:arma_arg
eval	lib/armadillo-9.800.2/include/armadillo_bits/fn_n_unique.hpp	/^  template<typename eT> inline static eT eval(const eT& l, const eT& r) { return (l * r); }$/;"	f	struct:op_n_unique_mul
eval	lib/armadillo-9.800.2/include/armadillo_bits/fn_n_unique.hpp	/^  template<typename eT> inline static eT eval(const eT& l, const eT& r) { return (l + r); }$/;"	f	struct:op_n_unique_add
eval	lib/armadillo-9.800.2/include/armadillo_bits/fn_n_unique.hpp	/^  template<typename eT> inline static eT eval(const eT& l, const eT& r) { return (l - r); }$/;"	f	struct:op_n_unique_sub
eval	lib/armadillo-9.800.2/include/armadillo_bits/fn_n_unique.hpp	/^  template<typename eT> inline static eT eval(const eT&, const eT&) { return eT(1); }$/;"	f	struct:op_n_unique_count
eval	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_meat.hpp	/^distance<eT, uword(1)>::eval(const uword N, const eT* A, const eT* B, const eT*)$/;"	f	class:gmm_priv::distance
eval	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_meat.hpp	/^distance<eT, uword(2)>::eval(const uword N, const eT* A, const eT* B, const eT* C)$/;"	f	class:gmm_priv::distance
eval	lib/armadillo-9.800.2/include/armadillo_bits/mp_misc.hpp	/^  eval(const uword n_elem)$/;"	f	struct:mp_gate
eval_member	lib/armadillo-9.800.2/docs.html	/^<a name="eval_member"><\/a>$/;"	a
evals	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergEigen_bones.hpp	/^  Col< std::complex<eT> > evals;  \/\/ eigenvalues of H$/;"	m	class:newarp::UpperHessenbergEigen
evaluate	lib/armadillo-9.800.2/tests/catch.hpp	/^        static bool evaluate( T* lhs, int rhs) {$/;"	f	struct:Catch::Internal::Evaluator
evaluate	lib/armadillo-9.800.2/tests/catch.hpp	/^        static bool evaluate( T* lhs, long rhs) {$/;"	f	struct:Catch::Internal::Evaluator
evaluate	lib/armadillo-9.800.2/tests/catch.hpp	/^        static bool evaluate( T1 const& lhs, T2 const& rhs ) {$/;"	f	struct:Catch::Internal::Evaluator
evaluate	lib/armadillo-9.800.2/tests/catch.hpp	/^        static bool evaluate( T1 const& lhs, T2 const& rhs) {$/;"	f	struct:Catch::Internal::Evaluator
evaluate	lib/armadillo-9.800.2/tests/catch.hpp	/^        static bool evaluate( int lhs, T* rhs) {$/;"	f	struct:Catch::Internal::Evaluator
evaluate	lib/armadillo-9.800.2/tests/catch.hpp	/^        static bool evaluate( long lhs, T* rhs) {$/;"	f	struct:Catch::Internal::Evaluator
evecs	lib/armadillo-9.800.2/include/armadillo_bits/newarp_TridiagEigen_bones.hpp	/^  Mat<eT>  evecs;      \/\/ To store eigenvectors$/;"	m	class:newarp::TridiagEigen
exact	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^  bool   exact;$/;"	m	struct:hdf5_misc::hdf5_search_info
example_prog	lib/armadillo-9.800.2/docs.html	/^<a name="example_prog"><\/a>$/;"	a
exp	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result exp   (const eT x) { return eT( std::exp  (double(x)) ); }$/;"	f	class:eop_aux
exp	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result exp   (const eT x) { return std::exp  (x); }$/;"	f	class:eop_aux
exp	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^exp(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
exp	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^exp(const T1& A)$/;"	f
exp10	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename   arma_integral_only<eT>::result exp10 (const eT x) { return eT( std::pow(double(10), double(x)) );                            }$/;"	f	class:eop_aux
exp10	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result exp10 (const eT x) { typedef typename get_pod_type<eT>::result T; return std::pow( T(10), x); }$/;"	f	class:eop_aux
exp10	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^exp10(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
exp10	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^exp10(const T1& A)$/;"	f
exp2	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename         arma_cx_only<eT>::result exp2 (const eT& x) { typedef typename get_pod_type<eT>::result T; return std::pow( T(2), x); }$/;"	f	class:eop_aux
exp2	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_real_only<eT>::result exp2 (const eT  x) { return std::exp2(x);                                                    }$/;"	f	class:eop_aux
exp2	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename   arma_integral_only<eT>::result exp2 (const eT  x) { return eT( std::pow(double(2), double(x)) );                            }$/;"	f	class:eop_aux
exp2	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result exp2 (const eT  x) { typedef typename get_pod_type<eT>::result T; return std::pow( T(2), x); }$/;"	f	class:eop_aux
exp2	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^exp2(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
exp2	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^exp2(const T1& A)$/;"	f
exp_approx	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^template<typename T1> void exp_approx(const T1&) { arma_stop_logic_error("unimplemented"); }$/;"	f
expanders	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    ExpHeader* expanders;$/;"	m	struct:arma::superlu::__anon9
expansions	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int     expansions;$/;"	m	struct:arma::superlu::__anon5
expm1	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static                                        eT expm1 (const eT  x) { arma_ignore(x); arma_stop_logic_error("expm1(): C++11 compiler required"); return eT(0); }$/;"	f	class:eop_aux
expm1	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename         arma_cx_only<eT>::result expm1 (const eT& x) { arma_ignore(x); return eT(0);            }$/;"	f	class:eop_aux
expm1	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename         arma_cx_only<eT>::result expm1 (const eT& x) { arma_ignore(x); return eT(0);       }$/;"	f	class:eop_aux
expm1	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_real_only<eT>::result expm1 (const eT  x) { return std::expm1(x);               }$/;"	f	class:eop_aux
expm1	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_real_only<eT>::result expm1 (const eT  x) { return std::tr1::expm1(x);               }$/;"	f	class:eop_aux
expm1	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename   arma_integral_only<eT>::result expm1 (const eT  x) { return eT( std::expm1(double(x)) ); }$/;"	f	class:eop_aux
expm1	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename   arma_integral_only<eT>::result expm1 (const eT  x) { return eT( std::tr1::expm1(double(x)) ); }$/;"	f	class:eop_aux
expm1	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^expm1(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
expm1	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^expm1(const T1& A)$/;"	f
expmat	lib/armadillo-9.800.2/docs.html	/^<a name="expmat"><\/a>$/;"	a
expmat	lib/armadillo-9.800.2/include/armadillo_bits/fn_expmat.hpp	/^expmat(Mat<typename T1::elem_type>& B, const Base<typename T1::elem_type,T1>& A)$/;"	f
expmat	lib/armadillo-9.800.2/include/armadillo_bits/fn_expmat.hpp	/^expmat(const Base<typename T1::elem_type,T1>& A)$/;"	f
expmat_sym	lib/armadillo-9.800.2/docs.html	/^<a name="expmat_sym"><\/a>$/;"	a
expmat_sym	lib/armadillo-9.800.2/include/armadillo_bits/fn_expmat.hpp	/^expmat_sym(Mat<typename T1::elem_type>& Y, const Base<typename T1::elem_type,T1>& X)$/;"	f
expmat_sym	lib/armadillo-9.800.2/include/armadillo_bits/fn_expmat.hpp	/^expmat_sym(const Base<typename T1::elem_type,T1>& X)$/;"	f
extra_code	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool extra_code = false;$/;"	m	struct:arma_config
extra_code	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool extra_code = true;$/;"	m	struct:arma_config
extra_debug	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool extra_debug = false;$/;"	m	struct:arma_config
extra_debug	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool extra_debug = true;$/;"	m	struct:arma_config
extract	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::extract(Mat<eT>& out, const diagview<eT>& in)$/;"	f	class:diagview
extract	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::extract(Mat<eT>& out, const spdiagview<eT>& in)$/;"	f	class:spdiagview
extract	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::extract(SpMat<eT>& out, const spdiagview<eT>& d)$/;"	f	class:spdiagview
extract	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::extract(Cube<eT>& out, const subview_cube<eT>& in)$/;"	f	class:subview_cube
extract	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::extract(Mat<eT>& out, const subview_cube<eT>& in)$/;"	f	class:subview_cube
extract	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::extract(Cube<eT>& out, const subview_cube_slices<eT,T1>& in)$/;"	f	class:subview_cube_slices
extract	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::extract(Mat<eT>& actual_out, const subview_elem1<eT,T1>& in)$/;"	f	class:subview_elem1
extract	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::extract(Mat<eT>& actual_out, const subview_elem2<eT,T1,T2>& in)$/;"	f	class:subview_elem2
extract	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::extract(field<oT>& actual_out, const subview_field<oT>& in)$/;"	f	class:subview_field
extract	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::extract(Mat<eT>& out, const subview<eT>& in)$/;"	f	class:subview
extract	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row_htrans<eT>::extract(Mat<eT>& out) const$/;"	f	class:subview_row_htrans
extract	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row_strans<eT>::extract(Mat<eT>& out) const$/;"	f	class:subview_row_strans
extract	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_meat.hpp	/^xtrans_mat<eT,do_conj>::extract(Mat<eT>& out) const$/;"	f	class:xtrans_mat
extract	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_meat.hpp	/^xvec_htrans<eT>::extract(Mat<eT>& out) const$/;"	f	class:xvec_htrans
extract_tridiag	lib/armadillo-9.800.2/include/armadillo_bits/band_helper.hpp	/^extract_tridiag(Mat<eT>& out, const Mat<eT>& A)$/;"	f	namespace:band_helper
eye	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::eye()$/;"	f	class:MapMat
eye	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::eye(const SizeMat& s)$/;"	f	class:MapMat
eye	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::eye(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:MapMat
eye	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::eye()$/;"	f	class:Mat
eye	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::eye(const SizeMat& s)$/;"	f	class:Mat
eye	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::eye(const uword in_rows, const uword in_cols)$/;"	f	class:Mat
eye	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::eye()$/;"	f	class:SpMat
eye	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::eye(const SizeMat& s)$/;"	f	class:SpMat
eye	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::eye(const uword in_rows, const uword in_cols)$/;"	f	class:SpMat
eye	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::eye()$/;"	f	class:SpSubview
eye	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  static const fill_class<fill_eye  > eye;$/;"	m	namespace:fill
eye	lib/armadillo-9.800.2/include/armadillo_bits/fn_eye.hpp	/^eye(const SizeMat& s)$/;"	f
eye	lib/armadillo-9.800.2/include/armadillo_bits/fn_eye.hpp	/^eye(const SizeMat& s, const typename arma_Mat_Col_Row_only<obj_type>::result* junk = 0)$/;"	f
eye	lib/armadillo-9.800.2/include/armadillo_bits/fn_eye.hpp	/^eye(const SizeMat& s, const typename arma_SpMat_SpCol_SpRow_only<obj_type>::result* junk = NULL)$/;"	f
eye	lib/armadillo-9.800.2/include/armadillo_bits/fn_eye.hpp	/^eye(const uword n_rows, const uword n_cols)$/;"	f
eye	lib/armadillo-9.800.2/include/armadillo_bits/fn_eye.hpp	/^eye(const uword n_rows, const uword n_cols, const typename arma_Mat_Col_Row_only<obj_type>::result* junk = 0)$/;"	f
eye	lib/armadillo-9.800.2/include/armadillo_bits/fn_eye.hpp	/^eye(const uword n_rows, const uword n_cols, const typename arma_SpMat_SpCol_SpRow_only<obj_type>::result* junk = NULL)$/;"	f
eye	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::eye()$/;"	f	class:subview
eye_member	lib/armadillo-9.800.2/docs.html	/^<a name="eye_member"><\/a>$/;"	a
eye_standalone	lib/armadillo-9.800.2/docs.html	/^<a name="eye_standalone"><\/a>$/;"	a
f	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_bones.hpp	/^  const field<oT>& f;$/;"	m	class:subview_field
fac_H	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  Mat<eT>                 fac_H;     \/\/ H matrix in the Arnoldi factorisation$/;"	m	class:newarp::GenEigsSolver
fac_H	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  Mat<eT>           fac_H;     \/\/ H matrix in the Arnoldi factorisation$/;"	m	class:newarp::SymEigsSolver
fac_V	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  Mat<eT>                 fac_V;     \/\/ V matrix in the Arnoldi factorisation$/;"	m	class:newarp::GenEigsSolver
fac_V	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  Mat<eT>           fac_V;     \/\/ V matrix in the Arnoldi factorisation$/;"	m	class:newarp::SymEigsSolver
fac_f	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  Col<eT>                 fac_f;     \/\/ residual in the Arnoldi factorisation$/;"	m	class:newarp::GenEigsSolver
fac_f	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  Col<eT>           fac_f;     \/\/ residual in the Arnoldi factorisation$/;"	m	class:newarp::SymEigsSolver
factorise_from	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_meat.hpp	/^GenEigsSolver<eT, SelectionRule, OpType>::factorise_from(uword from_k, uword to_m, const Col<eT>& fk)$/;"	f	class:newarp::GenEigsSolver
factorise_from	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_meat.hpp	/^SymEigsSolver<eT, SelectionRule, OpType>::factorise_from(uword from_k, uword to_m, const Col<eT>& fk)$/;"	f	class:newarp::SymEigsSolver
fake_m	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_bones.hpp	/^  arma_aligned const Mat<eT>         fake_m;$/;"	m	class:subview_elem1
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = Proxy<T1>::fake_mat;$/;"	m	class:Proxy_vectorise_col_expr
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = Proxy_sv_row_ht::fake_mat;$/;"	m	class:Proxy
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = Proxy_xtrans::fake_mat;$/;"	m	class:Proxy
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = eGlue<T1, T2, eglue_type>::fake_mat;$/;"	m	class:Proxy
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = eOp< Op<T1, op_htrans>, eop_scalar_times>::fake_mat;$/;"	m	class:Proxy
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = eOp<T1, eop_type>::fake_mat;$/;"	m	class:Proxy
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = false;$/;"	m	class:Proxy
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = false;$/;"	m	class:Proxy_diagvec_expr
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = false;$/;"	m	class:Proxy_diagvec_mat
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = false;$/;"	m	struct:Proxy_fixed
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = false;$/;"	m	struct:Proxy_subview_row_htrans_cx
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = false;$/;"	m	struct:Proxy_subview_row_htrans_non_cx
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = false;$/;"	m	struct:Proxy_xtrans_default
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = true;$/;"	m	class:Proxy
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = true;$/;"	m	class:Proxy_vectorise_col_mat
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool fake_mat    = true;$/;"	m	struct:Proxy_xtrans_vector
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_bones.hpp	/^  static const bool fake_mat    = (Proxy<T1>::fake_mat    || Proxy<T2>::fake_mat   );$/;"	m	class:eGlue
fake_mat	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^  static const bool fake_mat    = Proxy<T1>::fake_mat;$/;"	m	class:eOp
false_type	include/catch.hpp	/^            static auto test(...)->std::false_type;$/;"	m	class:Catch::Detail::IsStreamInsertable::std
false_type	lib/armadillo-9.800.2/tests/catch.hpp	/^        static auto test(...) -> std::false_type;$/;"	m	class:Catch::Detail::IsStreamInsertable::std
fast	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const opts_fast         fast;$/;"	m	namespace:solve_opts
fcolvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <float> fcolvec;$/;"	t
fcolvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fcolvec::fixed<2> fcolvec2;$/;"	t
fcolvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fcolvec::fixed<3> fcolvec3;$/;"	t
fcolvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fcolvec::fixed<4> fcolvec4;$/;"	t
fcolvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fcolvec::fixed<5> fcolvec5;$/;"	t
fcolvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fcolvec::fixed<6> fcolvec6;$/;"	t
fcolvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fcolvec::fixed<7> fcolvec7;$/;"	t
fcolvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fcolvec::fixed<8> fcolvec8;$/;"	t
fcolvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fcolvec::fixed<9> fcolvec9;$/;"	t
fcovs	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_bones.hpp	/^  arma_aligned const Cube<eT> fcovs;$/;"	m	class:gmm_priv::gmm_full
fcube	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Cube<float> fcube;$/;"	t
fdatum	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^typedef Datum<float>  fdatum;$/;"	t
features	build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
fft	lib/armadillo-9.800.2/docs.html	/^<a name="fft"><\/a>$/;"	a
fft	lib/armadillo-9.800.2/include/armadillo_bits/fn_fft.hpp	/^fft(const T1& A)$/;"	f
fft	lib/armadillo-9.800.2/include/armadillo_bits/fn_fft.hpp	/^fft(const T1& A, const uword N)$/;"	f
fft2	lib/armadillo-9.800.2/docs.html	/^<a name="fft2"><\/a>$/;"	a
fft2	lib/armadillo-9.800.2/include/armadillo_bits/fn_fft2.hpp	/^fft2(const T1& A)$/;"	f
fft2	lib/armadillo-9.800.2/include/armadillo_bits/fn_fft2.hpp	/^fft2(const T1& A, const uword n_rows, const uword n_cols)$/;"	f
fft_engine	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  fft_engine(const uword in_N)$/;"	f	class:fft_engine
fft_engine	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^class fft_engine : public fft_store<cx_type, fixed_N, (fixed_N > 0)>$/;"	c
fft_store	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  inline fft_store()           : N(0)    {}$/;"	f	struct:fft_store
fft_store	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  inline fft_store()      {}$/;"	f	struct:fft_store
fft_store	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  inline fft_store(uword in_N) : N(in_N) { coeffs_array.set_size(N); }$/;"	f	struct:fft_store
fft_store	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  inline fft_store(uword) {}$/;"	f	struct:fft_store
fft_store	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^struct fft_store<cx_type, fixed_N, false>$/;"	s
fft_store	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^struct fft_store<cx_type, fixed_N, true>$/;"	s
fft_store	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^template<typename cx_type, uword fixed_N, bool> struct fft_store {};$/;"	s
fgmm_diag	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_bones.hpp	/^typedef gmm_priv::gmm_diag<float>  fgmm_diag;$/;"	t
fgmm_full	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_bones.hpp	/^typedef gmm_priv::gmm_full<float>  fgmm_full;$/;"	t
field	lib/armadillo-9.800.2/docs.html	/^<a name="field"><\/a>$/;"	a
field	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^class field$/;"	c
field	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^  field<oT>::field(const std::initializer_list< std::initializer_list<oT> >& list)$/;"	f	class:field
field	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^  field<oT>::field(const std::initializer_list<oT>& list)$/;"	f	class:field
field	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^  field<oT>::field(field<oT>&& X)$/;"	f	class:field
field	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::field()$/;"	f	class:field
field	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::field(const SizeCube& s)$/;"	f	class:field
field	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::field(const SizeMat& s)$/;"	f	class:field
field	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::field(const field& x)$/;"	f	class:field
field	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::field(const subview_field<oT>& X)$/;"	f	class:field
field	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::field(const uword n_elem_in)$/;"	f	class:field
field	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::field(const uword n_rows_in, const uword n_cols_in)$/;"	f	class:field
field	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::field(const uword n_rows_in, const uword n_cols_in, const uword n_slices_in)$/;"	f	class:field
field_aux	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^class field_aux$/;"	c
field_injector	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^class field_injector$/;"	c
field_injector	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^field_injector<T1>::field_injector(T1& in_X, const injector_end_of_row<>& x)$/;"	f	class:field_injector
field_injector	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^field_injector<T1>::field_injector(T1& in_X, const typename field_injector<T1>::object_type& val)$/;"	f	class:field_injector
field_injector_row	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^class field_injector_row$/;"	c
field_injector_row	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^field_injector_row<oT>::field_injector_row()$/;"	f	class:field_injector_row
field_prealloc_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^struct field_prealloc_n_elem$/;"	s
file	include/catch.hpp	/^        char const* file;$/;"	m	struct:Catch::SourceLineInfo
file	lib/armadillo-9.800.2/tests/catch.hpp	/^        char const* file;$/;"	m	struct:Catch::SourceLineInfo
file_type	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^enum file_type$/;"	g
file_type_unknown	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  file_type_unknown,$/;"	e	enum:file_type
filename	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  const std::string     filename;$/;"	m	struct:hdf5_name
fill	lib/armadillo-9.800.2/docs.html	/^<a name="fill"><\/a>$/;"	a
fill	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::fill(const eT val)$/;"	f	class:Col::fixed
fill	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fill(const eT val)$/;"	f	class:Cube
fill	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fill(const eT val)$/;"	f	class:Mat
fill	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fill(const fill::fill_class<fill_type>&)$/;"	f	class:Mat
fill	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::fill(const eT val)$/;"	f	class:Mat::fixed
fill	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::fill(const eT val)$/;"	f	class:Row::fixed
fill	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::fill(const eT val)$/;"	f	class:SpSubview
fill	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^namespace fill$/;"	n
fill	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^  fill(eT* mem, const uword N)$/;"	f	struct:arma_rng::randn
fill	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^  fill(eT* mem, const uword N)$/;"	f	struct:arma_rng::randu
fill	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^  fill(eT* mem, const uword N, const int a, const int b)$/;"	f	struct:arma_rng::randi
fill	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^  fill(std::complex<T>* mem, const uword N)$/;"	f	struct:arma_rng::randn
fill	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^  fill(std::complex<T>* mem, const uword N)$/;"	f	struct:arma_rng::randu
fill	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::fill(const eT val)$/;"	f	class:diagview
fill	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::fill(const oT& x)$/;"	f	class:field
fill	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::fill(const eT val)$/;"	f	class:podarray
fill	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::fill(const eT val)$/;"	f	class:spdiagview
fill	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::fill(const eT val)$/;"	f	class:subview_cube
fill	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::fill(const eT val)$/;"	f	class:subview_cube_slices
fill	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::fill(const eT val)$/;"	f	class:subview_elem1
fill	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::fill(const eT val)$/;"	f	class:subview_elem2
fill	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::fill(const oT& x)$/;"	f	class:subview_field
fill	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::fill(const eT val)$/;"	f	class:subview
fill	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::fill(const eT val)$/;"	f	class:subview_col
fill_class	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct fill_class { inline fill_class() {} };$/;"	f	struct:fill::fill_class
fill_class	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct fill_class { inline fill_class() {} };$/;"	s	namespace:fill
fill_constant_df	lib/armadillo-9.800.2/include/armadillo_bits/op_chi2rnd_meat.hpp	/^op_chi2rnd::fill_constant_df(Mat<eT>& out, const eT df)$/;"	f	class:op_chi2rnd
fill_eye	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct fill_eye   {};$/;"	s	namespace:fill
fill_none	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct fill_none  {};$/;"	s	namespace:fill
fill_ones	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct fill_ones  {};$/;"	s	namespace:fill
fill_randn	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct fill_randn {};$/;"	s	namespace:fill
fill_randu	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct fill_randu {};$/;"	s	namespace:fill
fill_simple	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^  fill_simple(eT* mem, const uword N)$/;"	f	struct:arma_rng::randn
fill_simple	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^  fill_simple(std::complex<T>* mem, const uword N)$/;"	f	struct:arma_rng::randn
fill_zeros	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct fill_zeros {};$/;"	s	namespace:fill
fill_zeros	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::fill_zeros(eT* dest, const uword n_elem)$/;"	f	class:arrayops
fill_zeros	lib/armadillo-9.800.2/include/armadillo_bits/op_trimat_meat.hpp	/^op_trimat::fill_zeros(Mat<eT>& out, const bool upper)$/;"	f	class:op_trimat
fill_zeros	lib/armadillo-9.800.2/include/armadillo_bits/op_trimat_meat.hpp	/^op_trimatl_ext::fill_zeros(Mat<eT>& out, const uword row_offset, const uword col_offset)$/;"	f	class:op_trimatl_ext
fill_zeros	lib/armadillo-9.800.2/include/armadillo_bits/op_trimat_meat.hpp	/^op_trimatu_ext::fill_zeros(Mat<eT>& out, const uword row_offset, const uword col_offset)$/;"	f	class:op_trimatu_ext
find	lib/armadillo-9.800.2/docs.html	/^<a name="find"><\/a>$/;"	a
find	lib/armadillo-9.800.2/include/armadillo_bits/fn_find.hpp	/^find(const Base<typename T1::elem_type,T1>& X, const uword k, const char* direction = "first")$/;"	f
find	lib/armadillo-9.800.2/include/armadillo_bits/fn_find.hpp	/^find(const BaseCube<typename T1::elem_type,T1>& X)$/;"	f
find	lib/armadillo-9.800.2/include/armadillo_bits/fn_find.hpp	/^find(const BaseCube<typename T1::elem_type,T1>& X, const uword k, const char* direction = "first")$/;"	f
find	lib/armadillo-9.800.2/include/armadillo_bits/fn_find.hpp	/^find(const SpBase<typename T1::elem_type,T1>& X, const uword k = 0)$/;"	f
find	lib/armadillo-9.800.2/include/armadillo_bits/fn_find.hpp	/^find(const SpBase<typename T1::elem_type,T1>& X, const uword k, const char* direction)$/;"	f
find	lib/armadillo-9.800.2/include/armadillo_bits/fn_find.hpp	/^find(const T1& X)$/;"	f
find	lib/armadillo-9.800.2/include/armadillo_bits/fn_find.hpp	/^find(const mtGlueCube<uword, T1, T2, glue_rel_type>& X, const uword k = 0, const char* direction = "first")$/;"	f
find	lib/armadillo-9.800.2/include/armadillo_bits/fn_find.hpp	/^find(const mtOpCube<uword, T1, op_rel_type>& X, const uword k = 0, const char* direction = "first")$/;"	f
find_finite	lib/armadillo-9.800.2/docs.html	/^<a name="find_finite"><\/a>$/;"	a
find_finite	lib/armadillo-9.800.2/include/armadillo_bits/fn_find.hpp	/^find_finite(const BaseCube<typename T1::elem_type,T1>& X)$/;"	f
find_finite	lib/armadillo-9.800.2/include/armadillo_bits/fn_find.hpp	/^find_finite(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
find_finite	lib/armadillo-9.800.2/include/armadillo_bits/fn_find.hpp	/^find_finite(const T1& X)$/;"	f
find_nonfinite	lib/armadillo-9.800.2/docs.html	/^<a name="find_nonfinite"><\/a>$/;"	a
find_nonfinite	lib/armadillo-9.800.2/include/armadillo_bits/fn_find.hpp	/^find_nonfinite(const BaseCube<typename T1::elem_type,T1>& X)$/;"	f
find_nonfinite	lib/armadillo-9.800.2/include/armadillo_bits/fn_find.hpp	/^find_nonfinite(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
find_nonfinite	lib/armadillo-9.800.2/include/armadillo_bits/fn_find.hpp	/^find_nonfinite(const T1& X)$/;"	f
find_unique	lib/armadillo-9.800.2/docs.html	/^<a name="find_unique"><\/a>$/;"	a
find_unique	lib/armadillo-9.800.2/include/armadillo_bits/fn_find_unique.hpp	/^find_unique$/;"	f
find_value_csc	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::find_value_csc(const uword in_row, const uword in_col) const$/;"	f	class:SpMat
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^class Col<eT>::fixed : public Col<eT>$/;"	c	class:Col
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^  Col<eT>::fixed<fixed_n_elem>::fixed(const std::initializer_list<eT>& list)$/;"	f	class:Col::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::fixed()$/;"	f	class:Col::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::fixed(const Base<eT,T1>& A)$/;"	f	class:Col::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::fixed(const Base<pod_type,T1>& A, const Base<pod_type,T2>& B)$/;"	f	class:Col::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::fixed(const char* text)$/;"	f	class:Col::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::fixed(const eT* aux_mem)$/;"	f	class:Col::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::fixed(const fill::fill_class<fill_type>&)$/;"	f	class:Col::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::fixed(const fixed<fixed_n_elem>& X)$/;"	f	class:Col::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::fixed(const std::string& text)$/;"	f	class:Col::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::fixed(const subview_cube<eT>& X)$/;"	f	class:Col::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^class Cube<eT>::fixed : public Cube<eT>$/;"	c	class:Cube
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::fixed()$/;"	f	class:Cube::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::fixed(const BaseCube<eT,T1>& A)$/;"	f	class:Cube::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::fixed(const BaseCube<pod_type,T1>& A, const BaseCube<pod_type,T2>& B)$/;"	f	class:Cube::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::fixed(const fill::fill_class<fill_type>&)$/;"	f	class:Cube::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::fixed(const fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>& X)$/;"	f	class:Cube::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^class Mat<eT>::fixed : public Mat<eT>$/;"	c	class:Mat
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::fixed(const std::initializer_list< std::initializer_list<eT> >& list)$/;"	f	class:Mat::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::fixed(const std::initializer_list<eT>& list)$/;"	f	class:Mat::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::fixed()$/;"	f	class:Mat::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::fixed(const Base<eT,T1>& A)$/;"	f	class:Mat::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::fixed(const Base<pod_type,T1>& A, const Base<pod_type,T2>& B)$/;"	f	class:Mat::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::fixed(const char* text)$/;"	f	class:Mat::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::fixed(const eT* aux_mem)$/;"	f	class:Mat::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::fixed(const fill::fill_class<fill_type>&)$/;"	f	class:Mat::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::fixed(const fixed<fixed_n_rows, fixed_n_cols>& X)$/;"	f	class:Mat::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::fixed(const std::string& text)$/;"	f	class:Mat::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^class Row<eT>::fixed : public Row<eT>$/;"	c	class:Row
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^  Row<eT>::fixed<fixed_n_elem>::fixed(const std::initializer_list<eT>& list)$/;"	f	class:Row::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::fixed()$/;"	f	class:Row::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::fixed(const Base<eT,T1>& A)$/;"	f	class:Row::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::fixed(const Base<pod_type,T1>& A, const Base<pod_type,T2>& B)$/;"	f	class:Row::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::fixed(const char* text)$/;"	f	class:Row::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::fixed(const eT* aux_mem)$/;"	f	class:Row::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::fixed(const fill::fill_class<fill_type>&)$/;"	f	class:Row::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::fixed(const fixed<fixed_n_elem>& X)$/;"	f	class:Row::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::fixed(const std::string& text)$/;"	f	class:Row::fixed
fixed	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::fixed(const subview_cube<eT>& X)$/;"	f	class:Row::fixed
fixed_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  static const uword fixed_n_elem       = fixed_n_rows * fixed_n_cols * fixed_n_slices;$/;"	m	class:Cube::fixed
fixed_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  static const uword fixed_n_elem = fixed_n_rows * fixed_n_cols;$/;"	m	class:Mat::fixed
fixed_n_elem_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  static const uword fixed_n_elem_slice = fixed_n_rows * fixed_n_cols;$/;"	m	class:Cube::fixed
flag_allow_ugly	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const uword flag_allow_ugly   = uword(1u <<  7);$/;"	m	namespace:solve_opts
flag_append	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  static const flag_type flag_append  = flag_type(1u << 1);$/;"	m	namespace:hdf5_opts
flag_equilibrate	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const uword flag_equilibrate  = uword(1u <<  1);$/;"	m	namespace:solve_opts
flag_fast	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const uword flag_fast         = uword(1u <<  0);$/;"	m	namespace:solve_opts
flag_likely_sympd	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const uword flag_likely_sympd = uword(1u <<  8);$/;"	m	namespace:solve_opts
flag_no_approx	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const uword flag_no_approx    = uword(1u <<  2);$/;"	m	namespace:solve_opts
flag_no_band	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const uword flag_no_band      = uword(1u <<  5);$/;"	m	namespace:solve_opts
flag_no_sympd	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const uword flag_no_sympd     = uword(1u <<  6);$/;"	m	namespace:solve_opts
flag_no_trimat	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const uword flag_no_trimat    = uword(1u << 10);$/;"	m	namespace:solve_opts
flag_none	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  static const flag_type flag_none    = flag_type(0      );$/;"	m	namespace:hdf5_opts
flag_none	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const uword flag_none         = uword(0       );$/;"	m	namespace:solve_opts
flag_refine	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const uword flag_refine       = uword(1u <<  9);$/;"	m	namespace:solve_opts
flag_replace	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  static const flag_type flag_replace = flag_type(1u << 2);$/;"	m	namespace:hdf5_opts
flag_trans	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  static const flag_type flag_trans   = flag_type(1u << 0);$/;"	m	namespace:hdf5_opts
flag_tril	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const uword flag_tril         = uword(1u <<  4);$/;"	m	namespace:solve_opts
flag_triu	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const uword flag_triu         = uword(1u <<  3);$/;"	m	namespace:solve_opts
flag_type	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  typedef unsigned int flag_type;$/;"	t	namespace:hdf5_opts
flags	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    const flag_type flags;$/;"	m	struct:hdf5_opts::opts
flags	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^    const uword flags;$/;"	m	struct:solve_opts::opts
flip	lib/armadillo-9.800.2/docs.html	/^<a name="flip"><\/a>$/;"	a
fliplr	lib/armadillo-9.800.2/include/armadillo_bits/fn_flip.hpp	/^fliplr(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
fliplr	lib/armadillo-9.800.2/include/armadillo_bits/fn_flip.hpp	/^fliplr(const T1& X)$/;"	f
flipud	lib/armadillo-9.800.2/include/armadillo_bits/fn_flip.hpp	/^flipud(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
flipud	lib/armadillo-9.800.2/include/armadillo_bits/fn_flip.hpp	/^flipud(const T1& X)$/;"	f
floor	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_cx_only<eT>::result floor (const eT& x) { return eT( std::floor(x.real()), std::floor(x.imag()) ); }$/;"	f	class:eop_aux
floor	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename     arma_real_only<eT>::result floor (const eT  x) { return std::floor(x);                                    }$/;"	f	class:eop_aux
floor	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result floor (const eT  x) { return x;                                                }$/;"	f	class:eop_aux
floor	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^floor(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
floor	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^floor(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
floor	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^floor(const T1& A)$/;"	f
fmat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Mat <float> fmat;$/;"	t
fmat22	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fmat::fixed<2,2> fmat22;$/;"	t
fmat33	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fmat::fixed<3,3> fmat33;$/;"	t
fmat44	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fmat::fixed<4,4> fmat44;$/;"	t
fmat55	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fmat::fixed<5,5> fmat55;$/;"	t
fmat66	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fmat::fixed<6,6> fmat66;$/;"	t
fmat77	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fmat::fixed<7,7> fmat77;$/;"	t
fmat88	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fmat::fixed<8,8> fmat88;$/;"	t
fmat99	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fmat::fixed<9,9> fmat99;$/;"	t
fmath	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^typedef Math<float>  fmath;$/;"	t
fn_select_c1	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	/^typedef blas_int (*fn_select_c1) (const blas_cxf*                 );$/;"	t
fn_select_c2	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	/^typedef blas_int (*fn_select_c2) (const blas_cxf*, const blas_cxf*);$/;"	t
fn_select_d2	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	/^typedef blas_int (*fn_select_d2) (const double*, const double*               );$/;"	t
fn_select_d3	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	/^typedef blas_int (*fn_select_d3) (const double*, const double*, const double*);$/;"	t
fn_select_s2	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	/^typedef blas_int (*fn_select_s2) (const float*, const float*               );$/;"	t
fn_select_s3	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	/^typedef blas_int (*fn_select_s3) (const float*, const float*,  const float*);$/;"	t
fn_select_z1	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	/^typedef blas_int (*fn_select_z1) (const blas_cxd*                 );$/;"	t
fn_select_z2	lib/armadillo-9.800.2/include/armadillo_bits/def_lapack.hpp	/^typedef blas_int (*fn_select_z2) (const blas_cxd*, const blas_cxd*);$/;"	t
for_each	lib/armadillo-9.800.2/docs.html	/^<a name="for_each"><\/a>$/;"	a
for_each	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::for_each(functor F) const$/;"	f	class:Cube
for_each	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::for_each(functor F)$/;"	f	class:Cube
for_each	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::for_each(functor F) const$/;"	f	class:Mat
for_each	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::for_each(functor F)$/;"	f	class:Mat
for_each	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::for_each(functor F) const$/;"	f	class:SpMat
for_each	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::for_each(functor F)$/;"	f	class:SpMat
for_each	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::for_each(functor F) const$/;"	f	class:SpSubview
for_each	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::for_each(functor F)$/;"	f	class:SpSubview
for_each	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^  field<oT>::for_each(const std::function< void(const oT&) >& F) const$/;"	f	class:field
for_each	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^  field<oT>::for_each(const std::function< void(oT&) >& F)$/;"	f	class:field
for_each	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^  field<oT>::for_each(functor F) const$/;"	f	class:field
for_each	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^  field<oT>::for_each(functor F)$/;"	f	class:field
for_each	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::for_each(functor F) const$/;"	f	class:subview_cube
for_each	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::for_each(functor F)$/;"	f	class:subview_cube
for_each	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::for_each(functor F) const$/;"	f	class:subview_field
for_each	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::for_each(functor F)$/;"	f	class:subview_field
for_each	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::for_each(functor F) const$/;"	f	class:subview
for_each	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::for_each(functor F)$/;"	f	class:subview
for_lu	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    float for_lu;$/;"	m	struct:arma::superlu::__anon7
force_different_type	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct force_different_type$/;"	s
force_different_type	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct force_different_type<T1,T1>$/;"	s
form_la	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_bones.hpp	/^    form_none, form_lm, form_sm, form_lr, form_la, form_sr, form_li, form_si, form_sa$/;"	e	enum:sp_auxlib::form_type
form_li	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_bones.hpp	/^    form_none, form_lm, form_sm, form_lr, form_la, form_sr, form_li, form_si, form_sa$/;"	e	enum:sp_auxlib::form_type
form_lm	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_bones.hpp	/^    form_none, form_lm, form_sm, form_lr, form_la, form_sr, form_li, form_si, form_sa$/;"	e	enum:sp_auxlib::form_type
form_lr	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_bones.hpp	/^    form_none, form_lm, form_sm, form_lr, form_la, form_sr, form_li, form_si, form_sa$/;"	e	enum:sp_auxlib::form_type
form_none	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_bones.hpp	/^    form_none, form_lm, form_sm, form_lr, form_la, form_sr, form_li, form_si, form_sa$/;"	e	enum:sp_auxlib::form_type
form_sa	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_bones.hpp	/^    form_none, form_lm, form_sm, form_lr, form_la, form_sr, form_li, form_si, form_sa$/;"	e	enum:sp_auxlib::form_type
form_si	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_bones.hpp	/^    form_none, form_lm, form_sm, form_lr, form_la, form_sr, form_li, form_si, form_sa$/;"	e	enum:sp_auxlib::form_type
form_sm	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_bones.hpp	/^    form_none, form_lm, form_sm, form_lr, form_la, form_sr, form_li, form_si, form_sa$/;"	e	enum:sp_auxlib::form_type
form_sr	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_bones.hpp	/^    form_none, form_lm, form_sm, form_lr, form_la, form_sr, form_li, form_si, form_sa$/;"	e	enum:sp_auxlib::form_type
form_type	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_bones.hpp	/^  enum form_type$/;"	g	class:sp_auxlib
format	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^    format(const char* in_fmt)$/;"	f	class:arma_str::format
format	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^    format(const std::string& in_fmt)$/;"	f	class:arma_str::format
format	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  class format$/;"	c	namespace:arma_str
format_metaprog	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  struct format_metaprog$/;"	s	namespace:arma_str
format_metaprog	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  struct format_metaprog< basic_format<T1,T2> >$/;"	s	namespace:arma_str
fphy	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^typedef Phy<float>   fphy;$/;"	t
free	lib/armadillo-9.800.2/include/armadillo_bits/translate_superlu.hpp	/^  free(void* mem)$/;"	f	namespace:superlu
free_stat	lib/armadillo-9.800.2/include/armadillo_bits/translate_superlu.hpp	/^  free_stat(SuperLUStat_t* stat)$/;"	f	namespace:superlu
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Col<out_eT> >::from(const Base<in_eT, T1>& in, const typename arma_cx_only<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Col<out_eT> >::from(const Base<in_eT, T1>& in, const typename arma_not_cx<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Col<out_eT> >::from(const std::vector<in_eT>& in, const typename arma_cx_only<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Col<out_eT> >::from(const std::vector<in_eT>& in, const typename arma_not_cx<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Cube<out_eT> >::from(const BaseCube<in_eT, T1>& in, const typename arma_cx_only<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Cube<out_eT> >::from(const BaseCube<in_eT, T1>& in, const typename arma_not_cx<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Mat<out_eT> >::from(const Base<in_eT, T1>& in, const typename arma_cx_only<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Mat<out_eT> >::from(const Base<in_eT, T1>& in, const typename arma_not_cx<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Mat<out_eT> >::from(const SpBase<out_eT, T1>& in)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Mat<out_eT> >::from(const std::vector<in_eT>& in, const typename arma_cx_only<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Mat<out_eT> >::from(const std::vector<in_eT>& in, const typename arma_not_cx<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Row<out_eT> >::from(const Base<in_eT, T1>& in, const typename arma_cx_only<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Row<out_eT> >::from(const Base<in_eT, T1>& in, const typename arma_not_cx<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Row<out_eT> >::from(const std::vector<in_eT>& in, const typename arma_cx_only<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< Row<out_eT> >::from(const std::vector<in_eT>& in, const typename arma_not_cx<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< SpMat<out_eT> >::from(const Base<out_eT, T1>& in)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< SpMat<out_eT> >::from(const SpBase<in_eT, T1>& in, const typename arma_cx_only<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< SpMat<out_eT> >::from(const SpBase<in_eT, T1>& in, const typename arma_not_cx<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< std::vector<out_eT> >::from(const Base<in_eT, T1>& in, const typename arma_cx_only<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to< std::vector<out_eT> >::from(const Base<in_eT, T1>& in, const typename arma_not_cx<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to<out_eT>::from(const Base<in_eT, T1>& in, const typename arma_cx_only<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to<out_eT>::from(const Base<in_eT, T1>& in, const typename arma_not_cx<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to<out_eT>::from(const BaseCube<in_eT, T1>& in, const typename arma_cx_only<in_eT>::result* junk)$/;"	f	class:conv_to
from	lib/armadillo-9.800.2/include/armadillo_bits/fn_conv_to.hpp	/^conv_to<out_eT>::from(const BaseCube<in_eT, T1>& in, const typename arma_not_cx<in_eT>::result* junk)$/;"	f	class:conv_to
front	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::front() const$/;"	f	class:Mat
front	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::front()$/;"	f	class:Mat
frowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Row <float> frowvec;$/;"	t
frowvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef frowvec::fixed<2> frowvec2;$/;"	t
frowvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef frowvec::fixed<3> frowvec3;$/;"	t
frowvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef frowvec::fixed<4> frowvec4;$/;"	t
frowvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef frowvec::fixed<5> frowvec5;$/;"	t
frowvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef frowvec::fixed<6> frowvec6;$/;"	t
frowvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef frowvec::fixed<7> frowvec7;$/;"	t
frowvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef frowvec::fixed<8> frowvec8;$/;"	t
frowvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef frowvec::fixed<9> frowvec9;$/;"	t
functor_abs	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_abs$/;"	s	namespace:priv
functor_arg	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_arg$/;"	s	namespace:priv
functor_ceil	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_ceil$/;"	s	namespace:priv
functor_conj	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_conj$/;"	s	namespace:priv
functor_cx_abs	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_cx_abs$/;"	s	namespace:priv
functor_cx_arg	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_cx_arg$/;"	s	namespace:priv
functor_cx_scalar_times	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    functor_cx_scalar_times(const out_eT in_k) : k(in_k) {}$/;"	f	struct:priv::functor_cx_scalar_times
functor_cx_scalar_times	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_cx_scalar_times$/;"	s	namespace:priv
functor_floor	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_floor$/;"	s	namespace:priv
functor_imag	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_imag$/;"	s	namespace:priv
functor_real	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_real$/;"	s	namespace:priv
functor_round	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_round$/;"	s	namespace:priv
functor_scalar_times	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    functor_scalar_times(const eT in_k) : k(in_k) {}$/;"	f	struct:priv::functor_scalar_times
functor_scalar_times	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_scalar_times$/;"	s	namespace:priv
functor_sign	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_sign$/;"	s	namespace:priv
functor_sqrt	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_sqrt$/;"	s	namespace:priv
functor_square	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_square$/;"	s	namespace:priv
functor_trunc	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^  struct functor_trunc$/;"	s	namespace:priv
fvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <float> fvec;$/;"	t
fvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fvec::fixed<2> fvec2;$/;"	t
fvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fvec::fixed<3> fvec3;$/;"	t
fvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fvec::fixed<4> fvec4;$/;"	t
fvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fvec::fixed<5> fvec5;$/;"	t
fvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fvec::fixed<6> fvec6;$/;"	t
fvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fvec::fixed<7> fvec7;$/;"	t
fvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fvec::fixed<8> fvec8;$/;"	t
fvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef fvec::fixed<9> fvec9;$/;"	t
gamma	src/Polarizability/OhmicMemoryKernel.h	/^    double gamma;$/;"	m	class:OhmicMemoryKernel
gbcon	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gbcon(char* norm, blas_int* n, blas_int* kl, blas_int* ku, const eT* ab, blas_int* ldab, const blas_int* ipiv, const eT* anorm, eT* rcond, eT* work, blas_int* iwork, blas_int* info)$/;"	f	namespace:lapack
gbsv	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gbsv(blas_int* n, blas_int* kl, blas_int* ku, blas_int* nrhs, eT* ab, blas_int* ldab, blas_int* ipiv, eT* b, blas_int* ldb, blas_int* info)$/;"	f	namespace:lapack
gbsvx	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gbsvx(char* fact, char* trans, blas_int* n, blas_int* kl, blas_int* ku, blas_int* nrhs, eT* ab, blas_int* ldab, eT* afb, blas_int* ldafb, blas_int* ipiv, char* equed, eT* r, eT* c, eT* b, blas_int* ldb, eT* x, blas_int* ldx, eT* rcond, eT* ferr, eT* berr, eT* work, blas_int* iwork, blas_int* info)$/;"	f	namespace:lapack
gbtrf	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gbtrf(blas_int* m, blas_int* n, blas_int* kl, blas_int* ku, eT* ab, blas_int* ldab, blas_int* ipiv, blas_int* info)$/;"	f	namespace:lapack
gbtrs	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gbtrs(char* trans, blas_int* n, blas_int* kl, blas_int* ku, blas_int* nrhs, eT* ab, blas_int* ldab, blas_int* ipiv, eT* b, blas_int* ldb, blas_int* info)$/;"	f	namespace:lapack
gecon	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gecon(char* norm, blas_int* n, const eT* a, blas_int* lda, const eT* anorm, eT* rcond, eT* work, blas_int* iwork, blas_int* info)$/;"	f	namespace:lapack
gees	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gees(char* jobvs, char* sort, void* select, blas_int* n, eT* a, blas_int* lda, blas_int* sdim, eT* wr, eT* wi, eT* vs, blas_int* ldvs, eT* work, blas_int* lwork, blas_int* bwork, blas_int* info)$/;"	f	namespace:lapack
geev	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  geev(char* jobvl, char* jobvr, blas_int* n, eT* a, blas_int* lda, eT* wr, eT* wi, eT* vl, blas_int* ldvl, eT* vr, blas_int* ldvr, eT* work, blas_int* lwork, blas_int* info)$/;"	f	namespace:lapack
geevx	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  geevx(char* balanc, char* jobvl, char* jobvr, char* sense, blas_int* n, eT* a, blas_int* lda, eT* wr, eT* wi, eT* vl, blas_int* ldvl, eT* vr, blas_int* ldvr, blas_int* ilo, blas_int* ihi, eT* scale, eT* abnrm, eT* rconde, eT* rcondv, eT* work, blas_int* lwork, blas_int* iwork, blas_int* info)$/;"	f	namespace:lapack
gehrd	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gehrd(blas_int* n, blas_int* ilo, blas_int* ihi, eT* a, blas_int* lda, eT* tao, eT* work, blas_int* lwork, blas_int* info)$/;"	f	namespace:lapack
gels	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gels(char* trans, blas_int* m, blas_int* n, blas_int* nrhs, eT* a, blas_int* lda, eT* b, blas_int* ldb, eT* work, blas_int* lwork, blas_int* info)$/;"	f	namespace:lapack
gelsd	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gelsd(blas_int* m, blas_int* n, blas_int* nrhs, eT* a, blas_int* lda, eT* b, blas_int* ldb, eT* S, eT* rcond, blas_int* rank, eT* work, blas_int* lwork, blas_int* iwork, blas_int* info)$/;"	f	namespace:lapack
gemm	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemm.hpp	/^class gemm$/;"	c
gemm	lib/armadillo-9.800.2/include/armadillo_bits/translate_blas.hpp	/^  gemm(const char* transA, const char* transB, const blas_int* m, const blas_int* n, const blas_int* k, const eT* alpha, const eT* A, const blas_int* ldA, const eT* B, const blas_int* ldB, const eT* beta, eT* C, const blas_int* ldC)$/;"	f	namespace:blas
gemm_emul	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemm.hpp	/^class gemm_emul$/;"	c
gemm_emul_large	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemm.hpp	/^class gemm_emul_large$/;"	c
gemm_emul_tinysq	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemm.hpp	/^class gemm_emul_tinysq$/;"	c
gemm_mixed	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemm_mixed.hpp	/^class gemm_mixed$/;"	c
gemm_mixed_large	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemm_mixed.hpp	/^class gemm_mixed_large$/;"	c
gemv	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^class gemv$/;"	c
gemv	lib/armadillo-9.800.2/include/armadillo_bits/translate_blas.hpp	/^  gemv(const char* transA, const blas_int* m, const blas_int* n, const eT* alpha, const eT* A, const blas_int* ldA, const eT* x, const blas_int* incx, const eT* beta, eT* y, const blas_int* incy)$/;"	f	namespace:blas
gemv_emul	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^class gemv_emul$/;"	c
gemv_emul_helper	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^class gemv_emul_helper$/;"	c
gemv_emul_tinysq	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^class gemv_emul_tinysq$/;"	c
gen_bin_header	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::gen_bin_header(const Cube<eT>&)$/;"	f	class:diskio
gen_bin_header	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::gen_bin_header(const Mat<eT>&)$/;"	f	class:diskio
gen_bin_header	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::gen_bin_header(const SpMat<eT>&)$/;"	f	class:diskio
gen_tmp_name	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::gen_tmp_name(const std::string& x)$/;"	f	class:diskio
gen_txt_header	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::gen_txt_header(const Cube<eT>&)$/;"	f	class:diskio
gen_txt_header	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::gen_txt_header(const Mat<eT>&)$/;"	f	class:diskio
generate	lib/armadillo-9.800.2/include/armadillo_bits/GenSpecialiser.hpp	/^  arma_inline elem_type generate() const { return elem_type(); }$/;"	f	struct:GenSpecialiser
generate	lib/armadillo-9.800.2/include/armadillo_bits/GenSpecialiser.hpp	/^  arma_inline elem_type generate() const { return elem_type(0); }$/;"	f	struct:GenSpecialiser
generate	lib/armadillo-9.800.2/include/armadillo_bits/GenSpecialiser.hpp	/^  arma_inline elem_type generate() const { return elem_type(1); }$/;"	f	struct:GenSpecialiser
generate	lib/armadillo-9.800.2/include/armadillo_bits/GenSpecialiser.hpp	/^  arma_inline elem_type generate() const { return elem_type(arma_rng::randn<elem_type>()); }$/;"	f	struct:GenSpecialiser
generate	lib/armadillo-9.800.2/include/armadillo_bits/GenSpecialiser.hpp	/^  arma_inline elem_type generate() const { return elem_type(arma_rng::randu<elem_type>()); }$/;"	f	struct:GenSpecialiser
generate	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::generate() const$/;"	f	class:gmm_priv::gmm_diag
generate	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::generate(const uword N_vec) const$/;"	f	class:gmm_priv::gmm_diag
generate	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::generate() const$/;"	f	class:gmm_priv::gmm_full
generate	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::generate(const uword N_vec) const$/;"	f	class:gmm_priv::gmm_full
generate_initial_means	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::generate_initial_means(const Mat<eT>& X, const gmm_seed_mode& seed_mode)$/;"	f	class:gmm_priv::gmm_diag
generate_initial_means	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::generate_initial_means(const Mat<eT>& X, const gmm_seed_mode& seed_mode)$/;"	f	class:gmm_priv::gmm_full
generate_initial_params	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::generate_initial_params(const Mat<eT>& X, const eT var_floor)$/;"	f	class:gmm_priv::gmm_diag
generate_initial_params	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::generate_initial_params(const Mat<eT>& X, const eT var_floor)$/;"	f	class:gmm_priv::gmm_full
geq	lib/armadillo-9.800.2/include/armadillo_bits/cond_rel_meat.hpp	/^cond_rel<false>::geq(const eT, const eT)$/;"	f	class:cond_rel
geq	lib/armadillo-9.800.2/include/armadillo_bits/cond_rel_meat.hpp	/^cond_rel<true>::geq(const eT A, const eT B)$/;"	f	class:cond_rel
geqrf	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  geqrf(blas_int* m, blas_int* n, eT* a, blas_int* lda, eT* tau, eT* work, blas_int* lwork, blas_int* info)$/;"	f	namespace:lapack
gesdd	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gesdd$/;"	f	namespace:lapack
gesv	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gesv(blas_int* n, blas_int* nrhs, eT* a, blas_int* lda, blas_int* ipiv, eT* b, blas_int* ldb, blas_int* info)$/;"	f	namespace:lapack
gesvd	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gesvd$/;"	f	namespace:lapack
gesvx	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gesvx(char* fact, char* trans, blas_int* n, blas_int* nrhs, eT* a, blas_int* lda, eT* af, blas_int* ldaf, blas_int* ipiv, char* equed, eT* r, eT* c, eT* b, blas_int* ldb, eT* x, blas_int* ldx, eT* rcond, eT* ferr, eT* berr, eT* work, blas_int* iwork, blas_int* info)$/;"	f	namespace:lapack
get	lib/armadillo-9.800.2/include/armadillo_bits/mp_misc.hpp	/^  get()$/;"	f	struct:mp_thread_limit
get	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^  arma_inline static T get(const std::complex<T>& val)$/;"	f	struct:newarp::SortingTarget
get	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^  arma_inline static eT get(const eT& val)$/;"	f	struct:newarp::SortingTarget
get	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^  arma_inline static typename get_pod_type<eT>::result get(const eT& val)$/;"	f	struct:newarp::SortingTarget
get	lib/armadillo-9.800.2/tests/catch.hpp	/^        T* get() const{ return m_p; }$/;"	f	class:Catch::Ptr
getName	lib/armadillo-9.800.2/tests/catch.hpp	/^    template<> struct OperatorTraits<IsEqualTo>             { static const char* getName(){ return "=="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	lib/armadillo-9.800.2/tests/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThan>         { static const char* getName(){ return ">"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	lib/armadillo-9.800.2/tests/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThanOrEqualTo>{ static const char* getName(){ return ">="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	lib/armadillo-9.800.2/tests/catch.hpp	/^    template<> struct OperatorTraits<IsLessThan>            { static const char* getName(){ return "<"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	lib/armadillo-9.800.2/tests/catch.hpp	/^    template<> struct OperatorTraits<IsLessThanOrEqualTo>   { static const char* getName(){ return "<="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	lib/armadillo-9.800.2/tests/catch.hpp	/^    template<> struct OperatorTraits<IsNotEqualTo>          { static const char* getName(){ return "!="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	lib/armadillo-9.800.2/tests/catch.hpp	/^    template<Operator Op> struct OperatorTraits             { static const char* getName(){ return "*error*"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
get_aligned_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline aligned_ea_type get_aligned_ea() const { return (*this); }$/;"	f	class:Proxy
get_aligned_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline aligned_ea_type get_aligned_ea() const { return Proxy_xtrans::get_aligned_ea(); }$/;"	f	class:Proxy
get_aligned_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline aligned_ea_type get_aligned_ea() const { return Q;          }$/;"	f	class:Proxy
get_aligned_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline aligned_ea_type get_aligned_ea() const { return Q;          }$/;"	f	class:Proxy_diagvec_expr
get_aligned_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline aligned_ea_type get_aligned_ea() const { return Q;          }$/;"	f	class:Proxy_vectorise_col_mat
get_aligned_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline aligned_ea_type get_aligned_ea() const { return Q;          }$/;"	f	struct:Proxy_fixed
get_aligned_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline aligned_ea_type get_aligned_ea() const { return Q;          }$/;"	f	struct:Proxy_xtrans_vector
get_aligned_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline aligned_ea_type get_aligned_ea() const { return Q;        }$/;"	f	class:Proxy
get_aligned_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline aligned_ea_type get_aligned_ea() const { return Q; }$/;"	f	class:Proxy
get_aligned_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline aligned_ea_type get_aligned_ea() const { return Q; }$/;"	f	class:Proxy_diagvec_mat
get_aligned_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline aligned_ea_type get_aligned_ea() const { return Q; }$/;"	f	struct:Proxy_xtrans_default
get_aligned_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline aligned_ea_type get_aligned_ea() const { return R.get_aligned_ea(); }$/;"	f	class:Proxy_vectorise_col_expr
get_aligned_ea	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline aligned_ea_type get_aligned_ea() const { return Q;          }$/;"	f	class:ProxyCube
get_aligned_ea	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline aligned_ea_type get_aligned_ea() const { return Q; }$/;"	f	class:ProxyCube
get_alpha_zero	src/Polarizability/Polarizability.cpp	/^double Polarizability::get_alpha_zero()$/;"	f	class:Polarizability
get_cerr_stream	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^get_cerr_stream()$/;"	f
get_col_ptrs	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const uword*  get_col_ptrs()    const { return Q.col_ptrs;    }$/;"	f	class:SpProxy
get_col_ptrs	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const uword* get_col_ptrs()    const { return Q.col_ptrs;    }$/;"	f	class:SpProxy
get_col_ptrs	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const uword* get_col_ptrs()    const { return Q.m.col_ptrs;    }$/;"	f	class:SpProxy
get_cout_stream	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^get_cout_stream()$/;"	f
get_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline         ea_type         get_ea() const { return (*this); }$/;"	f	class:Proxy
get_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline         ea_type         get_ea() const { return Proxy_xtrans::get_ea();         }$/;"	f	class:Proxy
get_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline         ea_type         get_ea() const { return Q.colmem; }$/;"	f	class:Proxy
get_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline         ea_type         get_ea() const { return Q.memptr(); }$/;"	f	class:Proxy
get_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline         ea_type         get_ea() const { return Q.memptr(); }$/;"	f	class:Proxy_diagvec_expr
get_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline         ea_type         get_ea() const { return Q.memptr(); }$/;"	f	class:Proxy_vectorise_col_mat
get_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline         ea_type         get_ea() const { return Q.memptr(); }$/;"	f	struct:Proxy_fixed
get_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline         ea_type         get_ea() const { return Q.memptr(); }$/;"	f	struct:Proxy_xtrans_vector
get_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline         ea_type         get_ea() const { return Q; }$/;"	f	class:Proxy
get_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline         ea_type         get_ea() const { return Q; }$/;"	f	class:Proxy_diagvec_mat
get_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline         ea_type         get_ea() const { return Q; }$/;"	f	struct:Proxy_xtrans_default
get_ea	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline         ea_type         get_ea() const { return R.get_ea();         }$/;"	f	class:Proxy_vectorise_col_expr
get_ea	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline         ea_type         get_ea() const { return Q.memptr(); }$/;"	f	class:ProxyCube
get_ea	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline         ea_type         get_ea() const { return Q; }$/;"	f	class:ProxyCube
get_fmt	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^    get_fmt(const T1& X)$/;"	f	struct:arma_str::format_metaprog
get_gamma	src/Polarizability/OhmicMemoryKernel.cpp	/^double OhmicMemoryKernel::get_gamma()$/;"	f	class:OhmicMemoryKernel
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^  get_hdf5_type< long long >()$/;"	f	namespace:hdf5_misc
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^  get_hdf5_type< unsigned long long >()$/;"	f	namespace:hdf5_misc
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^get_hdf5_type()$/;"	f	namespace:hdf5_misc
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^get_hdf5_type< char >()$/;"	f	namespace:hdf5_misc
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^get_hdf5_type< double >()$/;"	f	namespace:hdf5_misc
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^get_hdf5_type< float >()$/;"	f	namespace:hdf5_misc
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^get_hdf5_type< int >()$/;"	f	namespace:hdf5_misc
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^get_hdf5_type< long >()$/;"	f	namespace:hdf5_misc
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^get_hdf5_type< short >()$/;"	f	namespace:hdf5_misc
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^get_hdf5_type< std::complex<double> >()$/;"	f	namespace:hdf5_misc
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^get_hdf5_type< std::complex<float> >()$/;"	f	namespace:hdf5_misc
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^get_hdf5_type< unsigned char >()$/;"	f	namespace:hdf5_misc
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^get_hdf5_type< unsigned int >()$/;"	f	namespace:hdf5_misc
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^get_hdf5_type< unsigned long >()$/;"	f	namespace:hdf5_misc
get_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^get_hdf5_type< unsigned short >()$/;"	f	namespace:hdf5_misc
get_locval_format	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::get_locval_format(umat& locs, Col<eT>& vals) const$/;"	f	class:MapMat
get_mat_ref	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each_common<parent,mode>::get_mat_ref() const$/;"	f	class:subview_each_common
get_mat_ref_helper	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each_common<parent,mode>::get_mat_ref_helper(const Mat<typename parent::elem_type>& X) const$/;"	f	class:subview_each_common
get_mat_ref_helper	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each_common<parent,mode>::get_mat_ref_helper(const subview<typename parent::elem_type>& X) const$/;"	f	class:subview_each_common
get_mu	src/Polarizability/PolarizabilityBath.cpp	/^std::complex<double> PolarizabilityBath::get_mu(double omega)$/;"	f	class:PolarizabilityBath
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline static uword get_n_cols() { return T1::n_cols; }$/;"	f	struct:Proxy_fixed
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_cols() const { return (is_col ? 1 : Q.n_cols);                           }$/;"	f	class:Proxy
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_cols() const { return 1;              }$/;"	f	class:Proxy
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_cols() const { return 1;              }$/;"	f	class:Proxy_vectorise_col_expr
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_cols() const { return 1;        }$/;"	f	class:Proxy
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_cols() const { return 1;        }$/;"	f	class:Proxy_diagvec_expr
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_cols() const { return 1;        }$/;"	f	class:Proxy_diagvec_mat
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_cols() const { return 1;        }$/;"	f	class:Proxy_vectorise_col_mat
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_cols() const { return Q.n_cols; }$/;"	f	class:Proxy
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_cols() const { return is_col ? 1 : Q.get_n_cols(); }$/;"	f	class:Proxy
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_cols() const { return is_col ? 1 : Q.n_cols; }$/;"	f	class:Proxy
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_cols()       const { return Q.get_n_cols();       }$/;"	f	class:ProxyCube
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_cols()       const { return Q.n_cols;                     }$/;"	f	class:ProxyCube
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_cols()       const { return Q.n_cols;       }$/;"	f	class:ProxyCube
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline uword get_n_cols()    const { return 1;           }$/;"	f	class:SpProxy
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline uword get_n_cols()    const { return Q.n_cols;    }$/;"	f	class:SpProxy
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline uword get_n_cols()    const { return is_col ? 1 : Q.n_cols; }$/;"	f	class:SpProxy
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_meat.hpp	/^eGlueCube<T1,T2,eglue_type>::get_n_cols() const$/;"	f	class:eGlueCube
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_meat.hpp	/^eGlue<T1,T2,eglue_type>::get_n_cols() const$/;"	f	class:eGlue
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_meat.hpp	/^eOpCube<T1, eop_type>::get_n_cols() const$/;"	f	class:eOpCube
get_n_cols	lib/armadillo-9.800.2/include/armadillo_bits/eOp_meat.hpp	/^eOp<T1, eop_type>::get_n_cols() const$/;"	f	class:eOp
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline static uword get_n_elem() { return T1::n_elem; }$/;"	f	struct:Proxy_fixed
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_elem() const { return (is_row ? 1 : Q.n_rows) * (is_col ? 1 : Q.n_cols); }$/;"	f	class:Proxy
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_elem() const { return Q.get_n_elem();              }$/;"	f	class:Proxy
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_elem() const { return Q.n_elem;              }$/;"	f	class:Proxy
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_elem() const { return Q.n_elem; }$/;"	f	class:Proxy
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_elem() const { return Q.n_elem; }$/;"	f	class:Proxy_diagvec_expr
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_elem() const { return Q.n_elem; }$/;"	f	class:Proxy_diagvec_mat
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_elem() const { return Q.n_elem; }$/;"	f	class:Proxy_vectorise_col_mat
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_elem() const { return R.get_n_elem(); }$/;"	f	class:Proxy
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_elem() const { return R.get_n_elem(); }$/;"	f	class:Proxy_vectorise_col_expr
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_elem()       const { return Q.get_n_elem();       }$/;"	f	class:ProxyCube
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_elem()       const { return Q.n_elem;       }$/;"	f	class:ProxyCube
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_elem()       const { return Q.n_rows*Q.n_cols*Q.n_slices; }$/;"	f	class:ProxyCube
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline uword get_n_elem()    const { return Q.n_elem;              }$/;"	f	class:SpProxy
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline uword get_n_elem()    const { return Q.n_elem;    }$/;"	f	class:SpProxy
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_meat.hpp	/^eGlueCube<T1,T2,eglue_type>::get_n_elem() const$/;"	f	class:eGlueCube
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_meat.hpp	/^eGlue<T1,T2,eglue_type>::get_n_elem() const$/;"	f	class:eGlue
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_meat.hpp	/^eOpCube<T1, eop_type>::get_n_elem() const$/;"	f	class:eOpCube
get_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/eOp_meat.hpp	/^eOp<T1, eop_type>::get_n_elem() const$/;"	f	class:eOp
get_n_elem_slice	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_elem_slice() const { return Q.get_n_elem_slice(); }$/;"	f	class:ProxyCube
get_n_elem_slice	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_elem_slice() const { return Q.n_elem_slice; }$/;"	f	class:ProxyCube
get_n_elem_slice	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_elem_slice() const { return Q.n_rows*Q.n_cols;            }$/;"	f	class:ProxyCube
get_n_elem_slice	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_meat.hpp	/^eGlueCube<T1,T2,eglue_type>::get_n_elem_slice() const$/;"	f	class:eGlueCube
get_n_elem_slice	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_meat.hpp	/^eOpCube<T1, eop_type>::get_n_elem_slice() const$/;"	f	class:eOpCube
get_n_nonzero	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::get_n_nonzero() const$/;"	f	class:MapMat
get_n_nonzero	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline uword get_n_nonzero() const { return Q.n_nonzero;           }$/;"	f	class:SpProxy
get_n_nonzero	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline uword get_n_nonzero() const { return Q.n_nonzero; }$/;"	f	class:SpProxy
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline static uword get_n_rows() { return T1::n_rows; }$/;"	f	struct:Proxy_fixed
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_rows() const { return (is_row ? 1 : Q.n_rows);                           }$/;"	f	class:Proxy
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_rows() const { return 1;        }$/;"	f	class:Proxy
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_rows() const { return Q.n_rows; }$/;"	f	class:Proxy
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_rows() const { return Q.n_rows; }$/;"	f	class:Proxy_diagvec_expr
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_rows() const { return Q.n_rows; }$/;"	f	class:Proxy_diagvec_mat
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_rows() const { return Q.n_rows; }$/;"	f	class:Proxy_vectorise_col_mat
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_rows() const { return R.get_n_elem(); }$/;"	f	class:Proxy
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_rows() const { return R.get_n_elem(); }$/;"	f	class:Proxy_vectorise_col_expr
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_rows() const { return is_row ? 1 : Q.get_n_rows(); }$/;"	f	class:Proxy
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline uword get_n_rows() const { return is_row ? 1 : Q.n_rows; }$/;"	f	class:Proxy
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_rows()       const { return Q.get_n_rows();       }$/;"	f	class:ProxyCube
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_rows()       const { return Q.n_rows;                     }$/;"	f	class:ProxyCube
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_rows()       const { return Q.n_rows;       }$/;"	f	class:ProxyCube
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline uword get_n_rows()    const { return 1;           }$/;"	f	class:SpProxy
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline uword get_n_rows()    const { return Q.n_rows;    }$/;"	f	class:SpProxy
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline uword get_n_rows()    const { return is_row ? 1 : Q.n_rows; }$/;"	f	class:SpProxy
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_meat.hpp	/^eGlueCube<T1,T2,eglue_type>::get_n_rows() const$/;"	f	class:eGlueCube
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_meat.hpp	/^eGlue<T1,T2,eglue_type>::get_n_rows() const$/;"	f	class:eGlue
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_meat.hpp	/^eOpCube<T1, eop_type>::get_n_rows() const$/;"	f	class:eOpCube
get_n_rows	lib/armadillo-9.800.2/include/armadillo_bits/eOp_meat.hpp	/^eOp<T1, eop_type>::get_n_rows() const$/;"	f	class:eOp
get_n_slices	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_slices()     const { return Q.get_n_slices();     }$/;"	f	class:ProxyCube
get_n_slices	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_slices()     const { return Q.n_slices;                   }$/;"	f	class:ProxyCube
get_n_slices	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline uword get_n_slices()     const { return Q.n_slices;     }$/;"	f	class:ProxyCube
get_n_slices	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_meat.hpp	/^eGlueCube<T1,T2,eglue_type>::get_n_slices() const$/;"	f	class:eGlueCube
get_n_slices	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_meat.hpp	/^eOpCube<T1, eop_type>::get_n_slices() const$/;"	f	class:eOpCube
get_omega_a	src/Polarizability/Polarizability.cpp	/^double Polarizability::get_omega_a()$/;"	f	class:Polarizability
get_pod_type	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct get_pod_type$/;"	s
get_pod_type	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct get_pod_type< std::complex<T2> >$/;"	s
get_ref	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube<elem_type,derived>::get_ref() const$/;"	f	class:BaseCube
get_ref	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::get_ref() const$/;"	f	class:Base
get_ref	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::get_ref() const$/;"	f	class:SpBase
get_row_indices	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const uword*  get_row_indices() const { return Q.row_indices; }$/;"	f	class:SpProxy
get_row_indices	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const uword* get_row_indices() const { return Q.m.row_indices; }$/;"	f	class:SpProxy
get_row_indices	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const uword* get_row_indices() const { return Q.row_indices; }$/;"	f	class:SpProxy
get_stream_err1	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^get_stream_err1()$/;"	f
get_stream_err2	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^get_stream_err2()$/;"	f
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(-1); }$/;"	f	struct:partial_unwrap
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(-1); }$/;"	f	struct:partial_unwrap_check
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(-1); }$/;"	f	struct:partial_unwrap_check_neg_default
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(-1); }$/;"	f	struct:partial_unwrap_check_neg_fixed
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(-1); }$/;"	f	struct:partial_unwrap_neg_default
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(-1); }$/;"	f	struct:partial_unwrap_neg_fixed
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(1); }$/;"	f	struct:partial_unwrap
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(1); }$/;"	f	struct:partial_unwrap_check
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(1); }$/;"	f	struct:partial_unwrap_check_default
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(1); }$/;"	f	struct:partial_unwrap_check_fixed
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(1); }$/;"	f	struct:partial_unwrap_check_htrans_default
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(1); }$/;"	f	struct:partial_unwrap_check_htrans_fixed
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(1); }$/;"	f	struct:partial_unwrap_default
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(1); }$/;"	f	struct:partial_unwrap_fixed
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(1); }$/;"	f	struct:partial_unwrap_htrans_default
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return eT(1); }$/;"	f	struct:partial_unwrap_htrans_fixed
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return val; }$/;"	f	struct:partial_unwrap
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return val; }$/;"	f	struct:partial_unwrap_check
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return val; }$/;"	f	struct:partial_unwrap_check_htrans2_default
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return val; }$/;"	f	struct:partial_unwrap_check_htrans2_fixed
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return val; }$/;"	f	struct:partial_unwrap_check_scalar_times_default
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return val; }$/;"	f	struct:partial_unwrap_check_scalar_times_fixed
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return val; }$/;"	f	struct:partial_unwrap_htrans2_default
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return val; }$/;"	f	struct:partial_unwrap_htrans2_fixed
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return val; }$/;"	f	struct:partial_unwrap_scalar_times_default
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline eT get_val() const { return val; }$/;"	f	struct:partial_unwrap_scalar_times_fixed
get_val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  inline eT get_val() const { return val; }$/;"	f	struct:partial_unwrap
get_value	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::get_value(const uword i) const$/;"	f	class:SpMat
get_value	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::get_value(const uword in_row, const uword in_col) const$/;"	f	class:SpMat
get_value_csc	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::get_value_csc(const uword i) const$/;"	f	class:SpMat
get_value_csc	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::get_value_csc(const uword in_row, const uword in_col) const$/;"	f	class:SpMat
get_values	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const eT*    get_values()      const { return Q.m.values;      }$/;"	f	class:SpProxy
get_values	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const eT*    get_values()      const { return Q.values;      }$/;"	f	class:SpProxy
get_values	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline const out_eT* get_values()      const { return Q.values;      }$/;"	f	class:SpProxy
getrf	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  getrf(blas_int* m, blas_int* n, eT* a, blas_int* lda, blas_int* ipiv, blas_int* info)$/;"	f	namespace:lapack
getri	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  getri(blas_int* n,  eT* a, blas_int* lda, blas_int* ipiv, eT* work, blas_int* lwork, blas_int* info)$/;"	f	namespace:lapack
getrs	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  getrs(char* trans, blas_int* n, blas_int* nrhs, eT* a, blas_int* lda, blas_int* ipiv, eT* b, blas_int* ldb, blas_int* info)$/;"	f	namespace:lapack
gges	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gges$/;"	f	namespace:lapack
ggev	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  ggev$/;"	f	namespace:lapack
glue_affmul	lib/armadillo-9.800.2/include/armadillo_bits/glue_affmul_bones.hpp	/^class glue_affmul$/;"	c
glue_atan2	lib/armadillo-9.800.2/include/armadillo_bits/glue_atan2_bones.hpp	/^class glue_atan2$/;"	c
glue_conv	lib/armadillo-9.800.2/include/armadillo_bits/glue_conv_bones.hpp	/^class glue_conv$/;"	c
glue_conv2	lib/armadillo-9.800.2/include/armadillo_bits/glue_conv_bones.hpp	/^class glue_conv2$/;"	c
glue_cor	lib/armadillo-9.800.2/include/armadillo_bits/glue_cor_bones.hpp	/^class glue_cor$/;"	c
glue_cov	lib/armadillo-9.800.2/include/armadillo_bits/glue_cov_bones.hpp	/^class glue_cov$/;"	c
glue_cross	lib/armadillo-9.800.2/include/armadillo_bits/glue_cross_bones.hpp	/^class glue_cross$/;"	c
glue_hist	lib/armadillo-9.800.2/include/armadillo_bits/glue_hist_bones.hpp	/^class glue_hist$/;"	c
glue_hist_default	lib/armadillo-9.800.2/include/armadillo_bits/glue_hist_bones.hpp	/^class glue_hist_default$/;"	c
glue_histc	lib/armadillo-9.800.2/include/armadillo_bits/glue_histc_bones.hpp	/^class glue_histc$/;"	c
glue_histc_default	lib/armadillo-9.800.2/include/armadillo_bits/glue_histc_bones.hpp	/^class glue_histc_default$/;"	c
glue_hypot	lib/armadillo-9.800.2/include/armadillo_bits/glue_hypot_bones.hpp	/^class glue_hypot$/;"	c
glue_intersect	lib/armadillo-9.800.2/include/armadillo_bits/glue_intersect_bones.hpp	/^class glue_intersect$/;"	c
glue_join_cols	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_bones.hpp	/^class glue_join_cols$/;"	c
glue_join_rows	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_bones.hpp	/^class glue_join_rows$/;"	c
glue_join_slices	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_bones.hpp	/^class glue_join_slices$/;"	c
glue_kron	lib/armadillo-9.800.2/include/armadillo_bits/glue_kron_bones.hpp	/^class glue_kron$/;"	c
glue_max	lib/armadillo-9.800.2/include/armadillo_bits/glue_max_bones.hpp	/^class glue_max$/;"	c
glue_min	lib/armadillo-9.800.2/include/armadillo_bits/glue_min_bones.hpp	/^class glue_min$/;"	c
glue_mixed_div	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_bones.hpp	/^class glue_mixed_div$/;"	c
glue_mixed_minus	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_bones.hpp	/^class glue_mixed_minus$/;"	c
glue_mixed_plus	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_bones.hpp	/^class glue_mixed_plus$/;"	c
glue_mixed_schur	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_bones.hpp	/^class glue_mixed_schur$/;"	c
glue_mixed_times	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_bones.hpp	/^class glue_mixed_times$/;"	c
glue_mvnrnd	lib/armadillo-9.800.2/include/armadillo_bits/glue_mvnrnd_bones.hpp	/^class glue_mvnrnd$/;"	c
glue_mvnrnd_vec	lib/armadillo-9.800.2/include/armadillo_bits/glue_mvnrnd_bones.hpp	/^class glue_mvnrnd_vec$/;"	c
glue_polyfit	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyfit_bones.hpp	/^class glue_polyfit$/;"	c
glue_polyval	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyval_bones.hpp	/^class glue_polyval$/;"	c
glue_rel_and	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_bones.hpp	/^class glue_rel_and$/;"	c
glue_rel_eq	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_bones.hpp	/^class glue_rel_eq$/;"	c
glue_rel_gt	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_bones.hpp	/^class glue_rel_gt$/;"	c
glue_rel_gteq	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_bones.hpp	/^class glue_rel_gteq$/;"	c
glue_rel_lt	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_bones.hpp	/^class glue_rel_lt$/;"	c
glue_rel_lteq	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_bones.hpp	/^class glue_rel_lteq$/;"	c
glue_rel_noteq	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_bones.hpp	/^class glue_rel_noteq$/;"	c
glue_rel_or	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_bones.hpp	/^class glue_rel_or$/;"	c
glue_solve_gen	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^class glue_solve_gen$/;"	c
glue_solve_tri	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^class glue_solve_tri$/;"	c
glue_solve_tri_default	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^class glue_solve_tri_default$/;"	c
glue_times	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^class glue_times$/;"	c
glue_times_diag	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^class glue_times_diag$/;"	c
glue_times_redirect	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^struct glue_times_redirect$/;"	s
glue_times_redirect	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^struct glue_times_redirect<2>$/;"	s
glue_times_redirect	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^struct glue_times_redirect<3>$/;"	s
glue_times_redirect	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^struct glue_times_redirect<4>$/;"	s
glue_times_redirect2_helper	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^struct glue_times_redirect2_helper$/;"	s
glue_times_redirect2_helper	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^struct glue_times_redirect2_helper<true>$/;"	s
glue_times_redirect3_helper	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^struct glue_times_redirect3_helper$/;"	s
glue_times_redirect3_helper	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^struct glue_times_redirect3_helper<true>$/;"	s
glue_toeplitz	lib/armadillo-9.800.2/include/armadillo_bits/glue_toeplitz_bones.hpp	/^class glue_toeplitz$/;"	c
glue_trapz	lib/armadillo-9.800.2/include/armadillo_bits/glue_trapz_bones.hpp	/^class glue_trapz$/;"	c
gmm_diag	lib/armadillo-9.800.2/docs.html	/^<a name="gmm_diag"><\/a>$/;"	a
gmm_diag	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_bones.hpp	/^class gmm_diag$/;"	c	namespace:gmm_priv
gmm_diag	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_bones.hpp	/^typedef gmm_priv::gmm_diag<double>  gmm_diag;$/;"	t
gmm_diag	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::gmm_diag()$/;"	f	class:gmm_priv::gmm_diag
gmm_diag	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::gmm_diag(const gmm_diag<eT>& x)$/;"	f	class:gmm_priv::gmm_diag
gmm_diag	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::gmm_diag(const gmm_full<eT>& x)$/;"	f	class:gmm_priv::gmm_diag
gmm_diag	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::gmm_diag(const uword in_n_dims, const uword in_n_gaus)$/;"	f	class:gmm_priv::gmm_diag
gmm_dist_eucl	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_dist_eucl : public gmm_dist_mode { inline gmm_dist_eucl() : gmm_dist_mode(1) {} };$/;"	f	struct:gmm_dist_eucl
gmm_dist_eucl	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_dist_eucl : public gmm_dist_mode { inline gmm_dist_eucl() : gmm_dist_mode(1) {} };$/;"	s
gmm_dist_maha	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_dist_maha : public gmm_dist_mode { inline gmm_dist_maha() : gmm_dist_mode(2) {} };$/;"	f	struct:gmm_dist_maha
gmm_dist_maha	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_dist_maha : public gmm_dist_mode { inline gmm_dist_maha() : gmm_dist_mode(2) {} };$/;"	s
gmm_dist_mode	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_dist_mode { const uword id;  inline explicit gmm_dist_mode(const uword in_id) : id(in_id) {} };$/;"	f	struct:gmm_dist_mode
gmm_dist_mode	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_dist_mode { const uword id;  inline explicit gmm_dist_mode(const uword in_id) : id(in_id) {} };$/;"	s
gmm_dist_prob	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_dist_prob : public gmm_dist_mode { inline gmm_dist_prob() : gmm_dist_mode(3) {} };$/;"	f	struct:gmm_dist_prob
gmm_dist_prob	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_dist_prob : public gmm_dist_mode { inline gmm_dist_prob() : gmm_dist_mode(3) {} };$/;"	s
gmm_empty_arg	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_empty_arg {};$/;"	s	namespace:gmm_priv
gmm_full	lib/armadillo-9.800.2/docs.html	/^<a name="gmm_full"><\/a>$/;"	a
gmm_full	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_bones.hpp	/^class gmm_full$/;"	c	namespace:gmm_priv
gmm_full	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_bones.hpp	/^typedef gmm_priv::gmm_full<double>  gmm_full;$/;"	t
gmm_full	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::gmm_full()$/;"	f	class:gmm_priv::gmm_full
gmm_full	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::gmm_full(const gmm_diag<eT>& x)$/;"	f	class:gmm_priv::gmm_full
gmm_full	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::gmm_full(const gmm_full<eT>& x)$/;"	f	class:gmm_priv::gmm_full
gmm_full	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::gmm_full(const uword in_n_dims, const uword in_n_gaus)$/;"	f	class:gmm_priv::gmm_full
gmm_priv	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_bones.hpp	/^namespace gmm_priv$/;"	n
gmm_priv	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^namespace gmm_priv$/;"	n
gmm_priv	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_bones.hpp	/^namespace gmm_priv$/;"	n
gmm_priv	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^namespace gmm_priv$/;"	n
gmm_priv	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^namespace gmm_priv$/;"	n
gmm_priv	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_meat.hpp	/^namespace gmm_priv$/;"	n
gmm_seed_keep_existing	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_seed_keep_existing : public gmm_seed_mode { inline gmm_seed_keep_existing() : gmm_seed_mode(1) {} };$/;"	f	struct:gmm_seed_keep_existing
gmm_seed_keep_existing	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_seed_keep_existing : public gmm_seed_mode { inline gmm_seed_keep_existing() : gmm_seed_mode(1) {} };$/;"	s
gmm_seed_mode	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_seed_mode { const uword id; inline explicit gmm_seed_mode(const uword in_id) : id(in_id) {} };$/;"	f	struct:gmm_seed_mode
gmm_seed_mode	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_seed_mode { const uword id; inline explicit gmm_seed_mode(const uword in_id) : id(in_id) {} };$/;"	s
gmm_seed_random_spread	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_seed_random_spread : public gmm_seed_mode { inline gmm_seed_random_spread() : gmm_seed_mode(5) {} };$/;"	f	struct:gmm_seed_random_spread
gmm_seed_random_spread	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_seed_random_spread : public gmm_seed_mode { inline gmm_seed_random_spread() : gmm_seed_mode(5) {} };$/;"	s
gmm_seed_random_subset	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_seed_random_subset : public gmm_seed_mode { inline gmm_seed_random_subset() : gmm_seed_mode(4) {} };$/;"	f	struct:gmm_seed_random_subset
gmm_seed_random_subset	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_seed_random_subset : public gmm_seed_mode { inline gmm_seed_random_subset() : gmm_seed_mode(4) {} };$/;"	s
gmm_seed_static_spread	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_seed_static_spread : public gmm_seed_mode { inline gmm_seed_static_spread() : gmm_seed_mode(3) {} };$/;"	f	struct:gmm_seed_static_spread
gmm_seed_static_spread	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_seed_static_spread : public gmm_seed_mode { inline gmm_seed_static_spread() : gmm_seed_mode(3) {} };$/;"	s
gmm_seed_static_subset	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_seed_static_subset : public gmm_seed_mode { inline gmm_seed_static_subset() : gmm_seed_mode(2) {} };$/;"	f	struct:gmm_seed_static_subset
gmm_seed_static_subset	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_seed_static_subset : public gmm_seed_mode { inline gmm_seed_static_subset() : gmm_seed_mode(2) {} };$/;"	s
good_comp	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool good_comp = false;$/;"	m	struct:arma_config
good_comp	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool good_comp = true;$/;"	m	struct:arma_config
gratio	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT gratio;   \/\/!< golden ratio$/;"	m	class:Datum
gratio	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::gratio    = eT(1.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374);$/;"	m	class:Datum
gratio	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT gratio()    { return eT(1.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374); }  \/\/ use datum::gratio instead$/;"	f	class:Math
greens	src/GreensTensor/GreensTensor.h	/^    std::complex<double> greens[3][3];$/;"	m	class:GreensTensor
gssv	lib/armadillo-9.800.2/include/armadillo_bits/translate_superlu.hpp	/^  gssv(superlu_options_t* options, SuperMatrix* A, int* perm_c, int* perm_r, SuperMatrix* L, SuperMatrix* U, SuperMatrix* B, SuperLUStat_t* stat, int* info)$/;"	f	namespace:superlu
gssvx	lib/armadillo-9.800.2/include/armadillo_bits/translate_superlu.hpp	/^  gssvx($/;"	f	namespace:superlu
gt	lib/armadillo-9.800.2/include/armadillo_bits/cond_rel_meat.hpp	/^cond_rel<false>::gt(const eT, const eT)$/;"	f	class:cond_rel
gt	lib/armadillo-9.800.2/include/armadillo_bits/cond_rel_meat.hpp	/^cond_rel<true>::gt(const eT A, const eT B)$/;"	f	class:cond_rel
gtsv	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gtsv(blas_int* n, blas_int* nrhs, eT* dl, eT* d, eT* du, eT* b, blas_int* ldb, blas_int* info)$/;"	f	namespace:lapack
gtsvx	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  gtsvx(char* fact, char* trans, blas_int* n, blas_int* nrhs, eT* dl, eT* d, eT* du, eT* dlf, eT* df, eT* duf, eT* du2, blas_int* ipiv, eT* b, blas_int* ldb, eT* x, blas_int* ldx, eT* rcond, eT* ferr, eT* berr, eT* work, blas_int* iwork, blas_int* info)$/;"	f	namespace:lapack
guess_file_type	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::guess_file_type(std::istream& f)$/;"	f	class:diskio
guess_sympd	lib/armadillo-9.800.2/include/armadillo_bits/sympd_helper.hpp	/^guess_sympd(const Mat<eT>& A)$/;"	f	namespace:sympd_helper
h	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT h;         \/\/!< Planck constant (in joule seconds)$/;"	m	class:Datum
h	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::h         = eT(6.626070040e-34);$/;"	m	class:Datum
h	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT h()         { return eT(6.626070040e-34); }$/;"	f	class:Phy
h_bar	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT h_bar;     \/\/!< Planck constant over 2 pi, aka reduced Planck constant (in joule seconds)$/;"	m	class:Datum
h_bar	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::h_bar     = eT(1.054571800e-34);$/;"	m	class:Datum
h_bar	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT h_bar()     { return eT(1.054571800e-34); }$/;"	f	class:Phy
has_inf	lib/armadillo-9.800.2/docs.html	/^<a name="has_inf"><\/a>$/;"	a
has_inf	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube<elem_type,derived>::has_inf() const$/;"	f	class:BaseCube
has_inf	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::has_inf() const$/;"	f	class:Base
has_inf	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::has_inf() const$/;"	f	class:Cube
has_inf	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::has_inf() const$/;"	f	class:Mat
has_inf	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::has_inf() const$/;"	f	class:SpBase
has_inf	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::has_inf() const$/;"	f	class:SpMat
has_inf	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::has_inf(const eT* src, const uword n_elem)$/;"	f	class:arrayops
has_inf	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::has_inf() const$/;"	f	class:subview_cube
has_inf	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::has_inf() const$/;"	f	class:subview
has_nan	lib/armadillo-9.800.2/docs.html	/^<a name="has_nan"><\/a>$/;"	a
has_nan	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube<elem_type,derived>::has_nan() const$/;"	f	class:BaseCube
has_nan	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::has_nan() const$/;"	f	class:Base
has_nan	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::has_nan() const$/;"	f	class:Cube
has_nan	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::has_nan() const$/;"	f	class:Mat
has_nan	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::has_nan() const$/;"	f	class:SpBase
has_nan	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::has_nan() const$/;"	f	class:SpMat
has_nan	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::has_nan(const eT* src, const uword n_elem)$/;"	f	class:arrayops
has_nan	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::has_nan() const$/;"	f	class:subview_cube
has_nan	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::has_nan() const$/;"	f	class:subview
has_nested_glue_traits	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct has_nested_glue_traits$/;"	s
has_nested_op_traits	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct has_nested_op_traits$/;"	s
has_op_inv	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct has_op_inv$/;"	s
has_op_inv	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct has_op_inv< Glue<Op<T1,op_inv>, T2, glue_times> >$/;"	s
has_op_inv	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct has_op_inv< Glue<T1, Op<T2,op_inv>, glue_times> >$/;"	s
has_op_inv	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct has_op_inv< Op<T1,op_inv> >$/;"	s
has_op_inv_sympd	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct has_op_inv_sympd$/;"	s
has_op_inv_sympd	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct has_op_inv_sympd< Glue<Op<T1,op_inv_sympd>, T2, glue_times> >$/;"	s
has_op_inv_sympd	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct has_op_inv_sympd< Glue<T1, Op<T2,op_inv_sympd>, glue_times> >$/;"	s
has_op_inv_sympd	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct has_op_inv_sympd< Op<T1,op_inv_sympd> >$/;"	s
has_orig_mem	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_orig_mem = false;  \/\/ NOTE: set to false as this is the general case; original memory is only used when the subview is a contiguous chunk$/;"	m	struct:quasi_unwrap
has_orig_mem	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_orig_mem = false;$/;"	m	struct:quasi_unwrap
has_orig_mem	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_orig_mem = false;$/;"	m	struct:quasi_unwrap_default
has_orig_mem	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_orig_mem = quasi_unwrap_Col_htrans_extra::has_orig_mem;$/;"	m	struct:quasi_unwrap
has_orig_mem	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_orig_mem = quasi_unwrap_Row_htrans_extra::has_orig_mem;$/;"	m	struct:quasi_unwrap
has_orig_mem	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_orig_mem = quasi_unwrap_extra::has_orig_mem;$/;"	m	struct:quasi_unwrap
has_orig_mem	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_orig_mem = quasi_unwrap_subview_col_htrans_extra::has_orig_mem;$/;"	m	struct:quasi_unwrap
has_orig_mem	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_orig_mem = true;$/;"	m	struct:quasi_unwrap
has_orig_mem	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_orig_mem = true;$/;"	m	struct:quasi_unwrap_Col_htrans
has_orig_mem	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_orig_mem = true;$/;"	m	struct:quasi_unwrap_Row_htrans
has_orig_mem	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_orig_mem = true;$/;"	m	struct:quasi_unwrap_fixed
has_orig_mem	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_orig_mem = true;$/;"	m	struct:quasi_unwrap_subview_col_htrans
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>& X) const { return (Q.P1.has_overlap(X) || Q.P2.has_overlap(X)); }$/;"	f	class:Proxy
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>& X) const { return Proxy_sv_row_ht::has_overlap(X); }$/;"	f	class:Proxy
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>& X) const { return Proxy_xtrans::has_overlap(X); }$/;"	f	class:Proxy
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>& X) const { return Q.P.has_overlap(X); }$/;"	f	class:Proxy
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>& X) const { return Q.check_overlap(X); }$/;"	f	class:Proxy
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>& X) const { return is_alias(X.m); }$/;"	f	class:Proxy
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>& X) const { return is_alias(X.m); }$/;"	f	class:Proxy_diagvec_mat
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>& X) const { return is_alias(X.m); }$/;"	f	class:Proxy_vectorise_col_expr
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>& X) const { return is_alias(X.m); }$/;"	f	class:Proxy_vectorise_col_mat
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>& X) const { return is_alias(X.m); }$/;"	f	struct:Proxy_fixed
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>& X) const { return is_alias(X.m); }$/;"	f	struct:Proxy_subview_row_htrans_cx
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>& X) const { return is_alias(X.m); }$/;"	f	struct:Proxy_subview_row_htrans_non_cx
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>& X) const { return is_alias(X.m); }$/;"	f	struct:Proxy_xtrans_default
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>& X) const { return is_alias(X.m); }$/;"	f	struct:Proxy_xtrans_vector
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>&) const { return false; }$/;"	f	class:Proxy
has_overlap	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool has_overlap(const subview<eT2>&) const { return false; }$/;"	f	class:Proxy_diagvec_expr
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = Proxy<T1>::has_subview;$/;"	m	class:Proxy_vectorise_col_expr
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = Proxy_sv_row_ht::has_subview;$/;"	m	class:Proxy
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = Proxy_xtrans::has_subview;$/;"	m	class:Proxy
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = eGlue<T1, T2, eglue_type>::has_subview;$/;"	m	class:Proxy
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = eOp< Op<T1, op_htrans>, eop_scalar_times>::has_subview;$/;"	m	class:Proxy
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = eOp<T1, eop_type>::has_subview;$/;"	m	class:Proxy
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = false;$/;"	m	class:Proxy
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = false;$/;"	m	class:Proxy_diagvec_expr
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = false;$/;"	m	struct:Proxy_fixed
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = quasi_unwrap<T1>::has_subview;$/;"	m	struct:Proxy_xtrans_vector
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = true;$/;"	m	class:Proxy
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = true;$/;"	m	class:Proxy_diagvec_mat
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = true;$/;"	m	class:Proxy_vectorise_col_mat
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = true;$/;"	m	struct:Proxy_subview_row_htrans_cx
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = true;$/;"	m	struct:Proxy_subview_row_htrans_non_cx
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool has_subview = true;$/;"	m	struct:Proxy_xtrans_default
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  static const bool has_subview = eGlueCube<T1, T2, eglue_type>::has_subview;$/;"	m	class:ProxyCube
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  static const bool has_subview = eOpCube<T1, eop_type>::has_subview;$/;"	m	class:ProxyCube
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  static const bool has_subview = false;$/;"	m	class:ProxyCube
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  static const bool has_subview = true;$/;"	m	class:ProxyCube
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_bones.hpp	/^  static const bool has_subview = (ProxyCube<T1>::has_subview || ProxyCube<T2>::has_subview);$/;"	m	class:eGlueCube
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_bones.hpp	/^  static const bool has_subview = (Proxy<T1>::has_subview || Proxy<T2>::has_subview);$/;"	m	class:eGlue
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_bones.hpp	/^  static const bool has_subview = ProxyCube<T1>::has_subview;$/;"	m	class:eOpCube
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^  static const bool has_subview = Proxy<T1>::has_subview;$/;"	m	class:eOp
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_subview  = false;$/;"	m	struct:quasi_unwrap
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_subview  = false;$/;"	m	struct:quasi_unwrap_default
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_subview  = false;$/;"	m	struct:quasi_unwrap_fixed
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_subview  = quasi_unwrap_Col_htrans_extra::has_subview;$/;"	m	struct:quasi_unwrap
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_subview  = quasi_unwrap_Row_htrans_extra::has_subview;$/;"	m	struct:quasi_unwrap
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_subview  = quasi_unwrap_extra::has_subview;$/;"	m	struct:quasi_unwrap
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_subview  = quasi_unwrap_subview_col_htrans_extra::has_subview;$/;"	m	struct:quasi_unwrap
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_subview  = true;$/;"	m	struct:quasi_unwrap
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_subview  = true;$/;"	m	struct:quasi_unwrap_Col_htrans
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_subview  = true;$/;"	m	struct:quasi_unwrap_Row_htrans
has_subview	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool has_subview  = true;$/;"	m	struct:quasi_unwrap_subview_col_htrans
hdf5	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool hdf5 = false;$/;"	m	struct:arma_config
hdf5	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool hdf5 = true;$/;"	m	struct:arma_config
hdf5_binary	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  hdf5_binary,        \/\/!< Open binary format, not specific to Armadillo, which can store arbitrary data$/;"	e	enum:file_type
hdf5_binary_trans	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  hdf5_binary_trans,  \/\/!< as per hdf5_binary, but save\/load the data with columns transposed to rows$/;"	e	enum:file_type
hdf5_complex_t	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^struct hdf5_complex_t$/;"	s	namespace:hdf5_misc
hdf5_misc	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^namespace hdf5_misc$/;"	n
hdf5_name	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  hdf5_name(const std::string& in_filename)$/;"	f	struct:hdf5_name
hdf5_name	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  hdf5_name(const std::string& in_filename, const std::string& in_dsname, const hdf5_opts::opts& in_opts = hdf5_opts::none)$/;"	f	struct:hdf5_name
hdf5_name	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct hdf5_name$/;"	s
hdf5_opts	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^namespace hdf5_opts$/;"	n
hdf5_search_callback	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^hdf5_search_callback$/;"	f	namespace:hdf5_misc
hdf5_search_info	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^struct hdf5_search_info$/;"	s	namespace:hdf5_misc
hdf5_suspend_printing_errors	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^    hdf5_suspend_printing_errors() {}$/;"	f	struct:hdf5_misc::hdf5_suspend_printing_errors
hdf5_suspend_printing_errors	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^struct hdf5_suspend_printing_errors$/;"	s	namespace:hdf5_misc
head	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::head(const uword N) const$/;"	f	class:Col
head	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::head(const uword N)$/;"	f	class:Col
head	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::head(const uword N) const$/;"	f	class:Row
head	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::head(const uword N)$/;"	f	class:Row
head	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::head(const uword N) const$/;"	f	class:subview_col
head	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::head(const uword N)$/;"	f	class:subview_col
head	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::head(const uword N) const$/;"	f	class:subview_row
head	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::head(const uword N)$/;"	f	class:subview_row
head_cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::head_cols(const uword N) const$/;"	f	class:Mat
head_cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::head_cols(const uword N)$/;"	f	class:Mat
head_cols	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::head_cols(const uword N) const$/;"	f	class:Row
head_cols	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::head_cols(const uword N)$/;"	f	class:Row
head_cols	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::head_cols(const uword N) const$/;"	f	class:SpMat
head_cols	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::head_cols(const uword N)$/;"	f	class:SpMat
head_rows	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::head_rows(const uword N) const$/;"	f	class:Col
head_rows	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::head_rows(const uword N)$/;"	f	class:Col
head_rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::head_rows(const uword N) const$/;"	f	class:Mat
head_rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::head_rows(const uword N)$/;"	f	class:Mat
head_rows	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::head_rows(const uword N) const$/;"	f	class:SpMat
head_rows	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::head_rows(const uword N)$/;"	f	class:SpMat
head_slices	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::head_slices(const uword N) const$/;"	f	class:Cube
head_slices	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::head_slices(const uword N)$/;"	f	class:Cube
heev	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  heev$/;"	f	namespace:lapack
heevd	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  heevd$/;"	f	namespace:lapack
hefts	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_bones.hpp	/^  arma_aligned const Row<eT> hefts;$/;"	m	class:gmm_priv::gmm_diag
hefts	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_bones.hpp	/^  arma_aligned const Row <eT> hefts;$/;"	m	class:gmm_priv::gmm_full
helper	lib/armadillo-9.800.2/include/armadillo_bits/op_find_meat.hpp	/^op_find::helper$/;"	f	class:op_find
helper	lib/armadillo-9.800.2/include/armadillo_bits/op_logmat_meat.hpp	/^op_logmat_cx::helper(Mat<eT>& A, const uword m)$/;"	f	class:op_logmat_cx
helper	lib/armadillo-9.800.2/include/armadillo_bits/op_sqrtmat_meat.hpp	/^op_sqrtmat_cx::helper(Mat< std::complex<T> >& S)$/;"	f	class:op_sqrtmat_cx
herk	lib/armadillo-9.800.2/include/armadillo_bits/mul_herk.hpp	/^class herk$/;"	c
herk	lib/armadillo-9.800.2/include/armadillo_bits/translate_blas.hpp	/^  herk(const char* uplo, const char* transA, const blas_int* n, const blas_int* k, const T* alpha, const std::complex<T>* A, const blas_int* ldA, const T* beta, std::complex<T>* C, const blas_int* ldC)$/;"	f	namespace:blas
herk_emul	lib/armadillo-9.800.2/include/armadillo_bits/mul_herk.hpp	/^class herk_emul$/;"	c
herk_helper	lib/armadillo-9.800.2/include/armadillo_bits/mul_herk.hpp	/^class herk_helper$/;"	c
herk_vec	lib/armadillo-9.800.2/include/armadillo_bits/mul_herk.hpp	/^class herk_vec$/;"	c
hess	lib/armadillo-9.800.2/docs.html	/^<a name="hess"><\/a>$/;"	a
hess	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::hess(Mat<eT>& H, const Base<eT,T1>& X, Col<eT>& tao)$/;"	f	class:auxlib
hess	lib/armadillo-9.800.2/include/armadillo_bits/fn_hess.hpp	/^hess$/;"	f
hidden_args	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool hidden_args = false;$/;"	m	struct:arma_config
hidden_args	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool hidden_args = true;$/;"	m	struct:arma_config
hist	lib/armadillo-9.800.2/docs.html	/^<a name="hist"><\/a>$/;"	a
hist	lib/armadillo-9.800.2/include/armadillo_bits/fn_hist.hpp	/^hist(const T1& A, const uword n_bins = 10)$/;"	f
hist	lib/armadillo-9.800.2/include/armadillo_bits/fn_hist.hpp	/^hist(const T1& X, const T2& Y)$/;"	f
hist	lib/armadillo-9.800.2/include/armadillo_bits/fn_hist.hpp	/^hist(const T1& X, const T2& Y, const uword dim)$/;"	f
histc	lib/armadillo-9.800.2/docs.html	/^<a name="histc"><\/a>$/;"	a
histc	lib/armadillo-9.800.2/include/armadillo_bits/fn_histc.hpp	/^histc(const T1& X, const T2& Y)$/;"	f
histc	lib/armadillo-9.800.2/include/armadillo_bits/fn_histc.hpp	/^histc(const T1& X, const T2& Y, const uword dim)$/;"	f
ht	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base_trans_cx<derived>::ht() const$/;"	f	class:Base_trans_cx
ht	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base_trans_default<derived>::ht() const$/;"	f	class:Base_trans_default
ht	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::ht() const$/;"	f	class:Col::fixed
ht	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::ht() const$/;"	f	class:Col
ht	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::ht() const$/;"	f	class:Mat::fixed
ht	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::ht() const$/;"	f	class:Row::fixed
ht	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::ht() const$/;"	f	class:Row
ht	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::ht() const$/;"	f	class:SpBase
ht	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::ht() const$/;"	f	class:diagview
ht	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::ht() const$/;"	f	class:subview_elem1
ht	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::ht() const$/;"	f	class:subview_col
ht	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::ht() const$/;"	f	class:subview_row
htrans	lib/armadillo-9.800.2/include/armadillo_bits/fn_trans.hpp	/^htrans$/;"	f
hypot	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^hypot(const BaseCube<typename T1::elem_type,T1>& X, const BaseCube<typename T1::elem_type,T2>& Y)$/;"	f
hypot	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^hypot(const T1& X, const T2& Y)$/;"	f
i	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base_extra_yes<elem_type, derived>::i() const$/;"	f	class:Base_extra_yes
i	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base_extra_yes<elem_type, derived>::i(const bool) const   \/\/ argument kept only for compatibility with old user code$/;"	f	class:Base_extra_yes
i	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base_extra_yes<elem_type, derived>::i(const char*) const   \/\/ argument kept only for compatibility with old user code$/;"	f	class:Base_extra_yes
i	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^    arma_aligned       uword      i;$/;"	m	class:field::const_iterator
i	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^    arma_aligned uword      i;$/;"	m	class:field::iterator
i_count	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_bones.hpp	/^  arma_aligned uword i_count;$/;"	m	class:arma_counter
i_distr	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^  arma_aligned std::uniform_int_distribution<int>     i_distr;   \/\/ by default uses a=0, b=std::numeric_limits<int>::max()$/;"	m	class:arma_rng_cxx11
i_member	lib/armadillo-9.800.2/docs.html	/^<a name="i_member"><\/a>$/;"	a
icolvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <sword> icolvec;$/;"	t
icolvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef icolvec::fixed<2> icolvec2;$/;"	t
icolvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef icolvec::fixed<3> icolvec3;$/;"	t
icolvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef icolvec::fixed<4> icolvec4;$/;"	t
icolvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef icolvec::fixed<5> icolvec5;$/;"	t
icolvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef icolvec::fixed<6> icolvec6;$/;"	t
icolvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef icolvec::fixed<7> icolvec7;$/;"	t
icolvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef icolvec::fixed<8> icolvec8;$/;"	t
icolvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef icolvec::fixed<9> icolvec9;$/;"	t
icube	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Cube<sword> icube;$/;"	t
id	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  const unsigned int id;$/;"	m	struct:spsolve_opts_base
id	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_dist_mode { const uword id;  inline explicit gmm_dist_mode(const uword in_id) : id(in_id) {} };$/;"	m	struct:gmm_dist_mode
id	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^struct gmm_seed_mode { const uword id; inline explicit gmm_seed_mode(const uword in_id) : id(in_id) {} };$/;"	m	struct:gmm_seed_mode
ifft	lib/armadillo-9.800.2/include/armadillo_bits/fn_fft.hpp	/^ifft(const T1& A)$/;"	f
ifft	lib/armadillo-9.800.2/include/armadillo_bits/fn_fft.hpp	/^ifft(const T1& A, const uword N)$/;"	f
ifft2	lib/armadillo-9.800.2/include/armadillo_bits/fn_fft2.hpp	/^ifft2(const T1& A)$/;"	f
ifft2	lib/armadillo-9.800.2/include/armadillo_bits/fn_fft2.hpp	/^ifft2(const T1& A, const uword n_rows, const uword n_cols)$/;"	f
imag	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat_val<eT>::imag() const$/;"	f	class:MapMat_val
imag	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::imag() const$/;"	f	class:SpMat_MapMat_val
imag	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::imag() const$/;"	f	class:SpValProxy
imag	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^imag(const Base<typename T1::pod_type,T1>& X)$/;"	f
imag	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^imag(const BaseCube<std::complex<typename T1::pod_type>,T1>& X)$/;"	f
imag	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^imag(const BaseCube<typename T1::pod_type,T1>& X)$/;"	f
imag	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^imag(const SpBase<std::complex<typename T1::pod_type>,T1>& A)$/;"	f
imag	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^imag(const SpBase<typename T1::pod_type,T1>& A)$/;"	f
imag	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^imag(const T1& X)$/;"	f
imag	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^  eT imag;$/;"	m	struct:hdf5_misc::hdf5_complex_t
imag_real	lib/armadillo-9.800.2/docs.html	/^<a name="imag_real"><\/a>$/;"	a
imat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Mat <sword> imat;$/;"	t
imat22	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef imat::fixed<2,2> imat22;$/;"	t
imat33	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef imat::fixed<3,3> imat33;$/;"	t
imat44	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef imat::fixed<4,4> imat44;$/;"	t
imat55	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef imat::fixed<5,5> imat55;$/;"	t
imat66	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef imat::fixed<6,6> imat66;$/;"	t
imat77	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef imat::fixed<7,7> imat77;$/;"	t
imat88	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef imat::fixed<8,8> imat88;$/;"	t
imat99	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef imat::fixed<9,9> imat99;$/;"	t
imbue	lib/armadillo-9.800.2/docs.html	/^<a name="imbue"><\/a>$/;"	a
imbue	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::imbue(functor F)$/;"	f	class:Cube
imbue	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::imbue(functor F)$/;"	f	class:Mat
imbue	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::imbue(functor F)$/;"	f	class:subview_cube
imbue	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::imbue(functor F)$/;"	f	class:subview
impl_print	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::impl_print(const std::string& extra_text) const$/;"	f	class:Cube
impl_print	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::impl_print(std::ostream& user_stream, const std::string& extra_text) const$/;"	f	class:Cube
impl_print	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::impl_print(const std::string& extra_text) const$/;"	f	class:Mat
impl_print	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::impl_print(std::ostream& user_stream, const std::string& extra_text) const$/;"	f	class:Mat
impl_print	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::impl_print(const std::string& extra_text) const$/;"	f	class:SpMat
impl_print	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::impl_print(std::ostream& user_stream, const std::string& extra_text) const$/;"	f	class:SpMat
impl_print_dense	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::impl_print_dense(const std::string& extra_text) const$/;"	f	class:SpMat
impl_print_dense	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::impl_print_dense(std::ostream& user_stream, const std::string& extra_text) const$/;"	f	class:SpMat
impl_raw_print	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::impl_raw_print(const std::string& extra_text) const$/;"	f	class:Cube
impl_raw_print	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::impl_raw_print(std::ostream& user_stream, const std::string& extra_text) const$/;"	f	class:Cube
impl_raw_print	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::impl_raw_print(const std::string& extra_text) const$/;"	f	class:Mat
impl_raw_print	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::impl_raw_print(std::ostream& user_stream, const std::string& extra_text) const$/;"	f	class:Mat
impl_raw_print	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::impl_raw_print(const std::string& extra_text) const$/;"	f	class:SpMat
impl_raw_print	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::impl_raw_print(std::ostream& user_stream, const std::string& extra_text) const$/;"	f	class:SpMat
impl_raw_print_dense	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::impl_raw_print_dense(const std::string& extra_text) const$/;"	f	class:SpMat
impl_raw_print_dense	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::impl_raw_print_dense(std::ostream& user_stream, const std::string& extra_text) const$/;"	f	class:SpMat
in_eT	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_bones.hpp	/^  typedef typename T1::elem_type                in_eT;$/;"	t	class:mtOpCube
in_eT	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_bones.hpp	/^  typedef typename T1::elem_type                in_eT;$/;"	t	class:mtOp
in_eT	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_bones.hpp	/^  typedef typename T1::elem_type                in_eT;$/;"	t	class:mtSpOp
in_parallel	lib/armadillo-9.800.2/include/armadillo_bits/mp_misc.hpp	/^  in_parallel()$/;"	f	struct:mp_thread_limit
in_range	lib/armadillo-9.800.2/docs.html	/^<a name="in_range"><\/a>$/;"	a
in_range	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::in_range(const span& row_span, const span& col_span, const span& slice_span) const$/;"	f	class:Cube
in_range	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::in_range(const span& x) const$/;"	f	class:Cube
in_range	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::in_range(const uword i) const$/;"	f	class:Cube
in_range	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::in_range(const uword in_row, const uword in_col, const uword in_slice) const$/;"	f	class:Cube
in_range	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::in_range(const uword in_row, const uword in_col, const uword in_slice, const SizeCube& s) const$/;"	f	class:Cube
in_range	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::in_range(const span& row_span, const span& col_span) const$/;"	f	class:Mat
in_range	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::in_range(const span& row_span, const uword in_col) const$/;"	f	class:Mat
in_range	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::in_range(const span& x) const$/;"	f	class:Mat
in_range	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::in_range(const uword ii) const$/;"	f	class:Mat
in_range	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::in_range(const uword in_row, const span& col_span) const$/;"	f	class:Mat
in_range	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::in_range(const uword in_row, const uword in_col) const$/;"	f	class:Mat
in_range	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::in_range(const uword in_row, const uword in_col, const SizeMat& s) const$/;"	f	class:Mat
in_range	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::in_range(const span& row_span, const span& col_span) const$/;"	f	class:SpMat
in_range	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::in_range(const span& row_span, const uword in_col) const$/;"	f	class:SpMat
in_range	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::in_range(const span& x) const$/;"	f	class:SpMat
in_range	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::in_range(const uword i) const$/;"	f	class:SpMat
in_range	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::in_range(const uword in_row, const span& col_span) const$/;"	f	class:SpMat
in_range	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::in_range(const uword in_row, const uword in_col) const$/;"	f	class:SpMat
in_range	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::in_range(const uword in_row, const uword in_col, const SizeMat& s) const$/;"	f	class:SpMat
in_range	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::in_range(const span& row_span, const span& col_span) const$/;"	f	class:field
in_range	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::in_range(const span& row_span, const span& col_span, const span& slice_span) const$/;"	f	class:field
in_range	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::in_range(const span& row_span, const uword in_col) const$/;"	f	class:field
in_range	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::in_range(const span& x) const$/;"	f	class:field
in_range	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::in_range(const uword i) const$/;"	f	class:field
in_range	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::in_range(const uword in_row, const span& col_span) const$/;"	f	class:field
in_range	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::in_range(const uword in_row, const uword in_col) const$/;"	f	class:field
in_range	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::in_range(const uword in_row, const uword in_col, const SizeMat& s) const$/;"	f	class:field
in_range	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::in_range(const uword in_row, const uword in_col, const uword in_slice) const$/;"	f	class:field
in_range	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::in_range(const uword in_row, const uword in_col, const uword in_slice, const SizeCube& s) const$/;"	f	class:field
incompat_size_string	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each_common<eT>::incompat_size_string(const Mat<eT>& A) const$/;"	f	class:subview_cube_each_common
incompat_size_string	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each_common<parent,mode>::incompat_size_string(const Mat<typename parent::elem_type>& A) const$/;"	f	class:subview_each_common
ind2sub	lib/armadillo-9.800.2/docs.html	/^<a name="ind2sub"><\/a>$/;"	a
ind2sub	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^ind2sub(const SizeCube& s, const T1& indices)$/;"	f
ind2sub	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^ind2sub(const SizeCube& s, const uword i)$/;"	f
ind2sub	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^ind2sub(const SizeMat& s, const T1& indices)$/;"	f
ind2sub	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^ind2sub(const SizeMat& s, const uword i)$/;"	f
index	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  arma_aligned const uword index;$/;"	m	class:MapMat_val
index	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^  index()$/;"	f	class:newarp::SortEigenvalue
index	lib/armadillo-9.800.2/include/armadillo_bits/op_find_unique_bones.hpp	/^  uword index;$/;"	m	struct:arma_find_unique_packet
index	lib/armadillo-9.800.2/include/armadillo_bits/op_median_bones.hpp	/^  uword index;$/;"	m	struct:arma_cx_median_packet
index	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_bones.hpp	/^  uword index;$/;"	m	struct:arma_sort_index_packet
index_max	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube<elem_type,derived>::index_max() const$/;"	f	class:BaseCube
index_max	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::index_max() const$/;"	f	class:Base
index_max	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::index_max() const$/;"	f	class:SpBase
index_max	lib/armadillo-9.800.2/include/armadillo_bits/fn_index_max.hpp	/^index_max$/;"	f
index_max	lib/armadillo-9.800.2/include/armadillo_bits/fn_index_max.hpp	/^index_max(const SizeCube& s)$/;"	f
index_max	lib/armadillo-9.800.2/include/armadillo_bits/fn_index_max.hpp	/^index_max(const SizeMat& s)$/;"	f
index_max	lib/armadillo-9.800.2/include/armadillo_bits/fn_index_max.hpp	/^index_max(const T1& X)$/;"	f
index_max	lib/armadillo-9.800.2/include/armadillo_bits/fn_index_max.hpp	/^index_max(const T1& X, const uword dim)$/;"	f
index_max	lib/armadillo-9.800.2/include/armadillo_bits/fn_index_max.hpp	/^index_max(const T1& x)$/;"	f
index_max	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::index_max() const$/;"	f	class:subview_col
index_max	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::index_max() const$/;"	f	class:subview_row
index_min	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube<elem_type,derived>::index_min() const$/;"	f	class:BaseCube
index_min	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::index_min() const$/;"	f	class:Base
index_min	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::index_min() const$/;"	f	class:SpBase
index_min	lib/armadillo-9.800.2/include/armadillo_bits/fn_index_min.hpp	/^index_min$/;"	f
index_min	lib/armadillo-9.800.2/include/armadillo_bits/fn_index_min.hpp	/^index_min(const SizeCube& s)$/;"	f
index_min	lib/armadillo-9.800.2/include/armadillo_bits/fn_index_min.hpp	/^index_min(const SizeMat& s)$/;"	f
index_min	lib/armadillo-9.800.2/include/armadillo_bits/fn_index_min.hpp	/^index_min(const T1& X)$/;"	f
index_min	lib/armadillo-9.800.2/include/armadillo_bits/fn_index_min.hpp	/^index_min(const T1& X, const uword dim)$/;"	f
index_min	lib/armadillo-9.800.2/include/armadillo_bits/fn_index_min.hpp	/^index_min(const T1& x)$/;"	f
index_min	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::index_min() const$/;"	f	class:subview_col
index_min	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::index_min() const$/;"	f	class:subview_row
index_min_and_index_max_member	lib/armadillo-9.800.2/docs.html	/^<a name="index_min_and_index_max_member"><\/a>$/;"	a
index_min_and_index_max_standalone	lib/armadillo-9.800.2/docs.html	/^<a name="index_min_and_index_max_standalone"><\/a>$/;"	a
inf	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^    inf(typename arma_cx_only<eT>::result* junk = 0)$/;"	f	class:priv::Datum_helper
inf	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^    inf(typename arma_integral_only<eT>::result* junk = 0)$/;"	f	class:priv::Datum_helper
inf	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^    inf(typename arma_real_only<eT>::result* junk = 0)$/;"	f	class:priv::Datum_helper
inf	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT inf;      \/\/!< infinity $/;"	m	class:Datum
inf	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::inf       = priv::Datum_helper::inf<eT>();$/;"	m	class:Datum
inf	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT inf()       { return priv::Datum_helper::inf<eT>(); }  \/\/ use datum::inf instead$/;"	f	class:Math
info_arch	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version_internal	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
init	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::init$/;"	f	class:Cube
init	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::init(const std::initializer_list< std::initializer_list<eT> >& list)$/;"	f	class:Mat
init	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::init(const std::initializer_list<eT>& list)$/;"	f	class:Mat
init	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::init$/;"	f	class:Mat
init	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::init(const std::string& text_orig)$/;"	f	class:Mat
init	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::init(const MapMat<eT>& x)$/;"	f	class:SpMat
init	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::init(const SpMat<eT>& x)$/;"	f	class:SpMat
init	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::init(const std::string& text)$/;"	f	class:SpMat
init	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::init(uword in_rows, uword in_cols, const uword new_n_nonzero)$/;"	f	class:SpMat
init	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::init(const field<oT>& x)$/;"	f	class:field
init	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::init(const uword n_rows_in, const uword n_cols_in)$/;"	f	class:field
init	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::init(const uword n_rows_in, const uword n_cols_in, const uword n_slices_in)$/;"	f	class:field
init	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::init(const gmm_diag<eT>& x)$/;"	f	class:gmm_priv::gmm_diag
init	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::init(const gmm_full<eT>& x)$/;"	f	class:gmm_priv::gmm_diag
init	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::init(const uword in_n_dims, const uword in_n_gaus)$/;"	f	class:gmm_priv::gmm_diag
init	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::init(const gmm_diag<eT>& x)$/;"	f	class:gmm_priv::gmm_full
init	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::init(const gmm_full<eT>& x)$/;"	f	class:gmm_priv::gmm_full
init	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::init(const uword in_n_dims, const uword in_n_gaus)$/;"	f	class:gmm_priv::gmm_full
init	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_meat.hpp	/^GenEigsSolver<eT, SelectionRule, OpType>::init()$/;"	f	class:newarp::GenEigsSolver
init	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_meat.hpp	/^GenEigsSolver<eT, SelectionRule, OpType>::init(eT* init_resid)$/;"	f	class:newarp::GenEigsSolver
init	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_meat.hpp	/^SymEigsSolver<eT, SelectionRule, OpType>::init()$/;"	f	class:newarp::SymEigsSolver
init	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_meat.hpp	/^SymEigsSolver<eT, SelectionRule, OpType>::init(eT* init_resid)$/;"	f	class:newarp::SymEigsSolver
initMatrix	lib/armadillo-9.800.2/tests/fn_princomp.cpp	/^  initMatrix(mat& m)$/;"	f	namespace:__anon11
init_batch_add	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::init_batch_add(const Mat<uword>& locs, const Mat<eT>& vals, const bool sort_locations)$/;"	f	class:SpMat
init_batch_std	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::init_batch_std(const Mat<uword>& locs, const Mat<eT>& vals, const bool sort_locations)$/;"	f	class:SpMat
init_cold	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::init_cold()$/;"	f	class:Cube
init_cold	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::init_cold()$/;"	f	class:MapMat
init_cold	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::init_cold()$/;"	f	class:Mat
init_cold	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::init_cold(uword in_rows, uword in_cols, const uword new_n_nonzero)$/;"	f	class:SpMat
init_cold	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::init_cold(const uword new_n_elem)$/;"	f	class:podarray
init_constants	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::init_constants()$/;"	f	class:gmm_priv::gmm_diag
init_constants	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::init_constants(const bool calc_chol)$/;"	f	class:gmm_priv::gmm_full
init_simple	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::init_simple(const SpMat<eT>& x)$/;"	f	class:SpMat
init_stat	lib/armadillo-9.800.2/include/armadillo_bits/translate_superlu.hpp	/^  init_stat(SuperLUStat_t* stat)$/;"	f	namespace:superlu
init_warm	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::init_warm(const uword in_n_rows, const uword in_n_cols, const uword in_n_slices)$/;"	f	class:Cube
init_warm	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::init_warm(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:MapMat
init_warm	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::init_warm(uword in_n_rows, uword in_n_cols)$/;"	f	class:Mat
init_warm	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::init_warm(const uword new_n_elem)$/;"	f	class:podarray
init_xform	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::init_xform(const SpBase<eT,T1>& A, const Functor& func)$/;"	f	class:SpMat
init_xform_mt	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::init_xform_mt(const SpBase<eT2,T1>& A, const Functor& func)$/;"	f	class:SpMat
injector_end_of_row	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^template<typename Dummy = int> struct injector_end_of_row {};$/;"	s
inplace_conj_copy_upper_tri_to_lower_tri	lib/armadillo-9.800.2/include/armadillo_bits/mul_herk.hpp	/^  inplace_conj_copy_upper_tri_to_lower_tri(Mat<eT>& C)$/;"	f	class:herk_helper
inplace_copy_upper_tri_to_lower_tri	lib/armadillo-9.800.2/include/armadillo_bits/mul_syrk.hpp	/^  inplace_copy_upper_tri_to_lower_tri(Mat<eT>& C)$/;"	f	class:syrk_helper
inplace_div	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_div(eT* dest, const eT val, const uword n_elem)$/;"	f	class:arrayops
inplace_div	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_div(eT* dest, const eT* src, const uword n_elem)$/;"	f	class:arrayops
inplace_div_base	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_div_base(eT* dest, const eT val, const uword n_elem)$/;"	f	class:arrayops
inplace_div_base	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_div_base(eT* dest, const eT* src, const uword n_elem)$/;"	f	class:arrayops
inplace_htrans	lib/armadillo-9.800.2/include/armadillo_bits/fn_inplace_trans.hpp	/^inplace_htrans$/;"	f
inplace_minus	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_minus(eT* dest, const eT val, const uword n_elem)$/;"	f	class:arrayops
inplace_minus	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_minus(eT* dest, const eT* src, const uword n_elem)$/;"	f	class:arrayops
inplace_minus_base	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_minus_base(eT* dest, const eT val, const uword n_elem)$/;"	f	class:arrayops
inplace_minus_base	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_minus_base(eT* dest, const eT* src, const uword n_elem)$/;"	f	class:arrayops
inplace_mul	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_mul(eT* dest, const eT val, const uword n_elem)$/;"	f	class:arrayops
inplace_mul	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_mul(eT* dest, const eT* src, const uword n_elem)$/;"	f	class:arrayops
inplace_mul_base	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_mul_base(eT* dest, const eT val, const uword n_elem)$/;"	f	class:arrayops
inplace_mul_base	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_mul_base(eT* dest, const eT* src, const uword n_elem)$/;"	f	class:arrayops
inplace_op	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::inplace_op(const BaseCube<eT,expr>& x)$/;"	f	class:subview_cube_slices
inplace_op	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::inplace_op(const eT val)$/;"	f	class:subview_cube_slices
inplace_op	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::inplace_op(const Base<eT,T2>& x)$/;"	f	class:subview_elem1
inplace_op	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::inplace_op(const eT val)$/;"	f	class:subview_elem1
inplace_op	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::inplace_op(const subview_elem1<eT,T2>& x)$/;"	f	class:subview_elem1
inplace_op	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::inplace_op(const Base<eT,expr>& x)$/;"	f	class:subview_elem2
inplace_op	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::inplace_op(const eT val)$/;"	f	class:subview_elem2
inplace_op	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::inplace_op(const Base<eT,T1>& in, const char* identifier)$/;"	f	class:subview
inplace_op	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::inplace_op(const eT val)$/;"	f	class:subview
inplace_op	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::inplace_op(const subview<eT>& x, const char* identifier)$/;"	f	class:subview
inplace_plus	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_plus(eT* dest, const eT val, const uword n_elem)$/;"	f	class:arrayops
inplace_plus	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_plus(eT* dest, const eT* src, const uword n_elem)$/;"	f	class:arrayops
inplace_plus_base	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_plus_base(eT* dest, const eT val, const uword n_elem)$/;"	f	class:arrayops
inplace_plus_base	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_plus_base(eT* dest, const eT* src, const uword n_elem)$/;"	f	class:arrayops
inplace_rand	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::inplace_rand(const uword rand_mode)$/;"	f	class:subview_cube_slices
inplace_set	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_set(eT* dest, const eT val, const uword n_elem)$/;"	f	class:arrayops
inplace_set_base	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_set_base(eT* dest, const eT val, const uword n_elem)$/;"	f	class:arrayops
inplace_set_fixed	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_set_fixed(eT* dest, const eT val)$/;"	f	class:arrayops
inplace_set_small	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::inplace_set_small(eT* dest, const eT val, const uword n_elem)$/;"	f	class:arrayops
inplace_strans	lib/armadillo-9.800.2/include/armadillo_bits/fn_inplace_strans.hpp	/^inplace_strans$/;"	f
inplace_trans	lib/armadillo-9.800.2/docs.html	/^<a name="inplace_trans"><\/a>$/;"	a
inplace_trans	lib/armadillo-9.800.2/include/armadillo_bits/fn_inplace_trans.hpp	/^inplace_trans$/;"	f
insert	lib/armadillo-9.800.2/docs.html	/^<a name="insert"><\/a>$/;"	a
insert	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^field_injector<T1>::insert(const typename field_injector<T1>::object_type& val) const$/;"	f	class:field_injector
insert	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^field_injector_row<oT>::insert(const oT& val) const$/;"	f	class:field_injector_row
insert	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^mat_injector<T1>::insert(const typename mat_injector<T1>::elem_type val) const$/;"	f	class:mat_injector
insert	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^mat_injector_row<eT>::insert(const eT val) const$/;"	f	class:mat_injector_row
insert_cols	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::insert_cols(const uword col_num, const BaseCube<eT,T1>& X)$/;"	f	class:Cube
insert_cols	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::insert_cols(const uword col_num, const uword N, const bool set_to_zero)$/;"	f	class:Cube
insert_cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::insert_cols(const uword col_num, const Base<eT,T1>& X)$/;"	f	class:Mat
insert_cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::insert_cols(const uword col_num, const uword N, const bool set_to_zero)$/;"	f	class:Mat
insert_cols	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::insert_cols(const uword col_num, const Base<eT,T1>& X)$/;"	f	class:Row
insert_cols	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::insert_cols(const uword col_num, const uword N, const bool set_to_zero)$/;"	f	class:Row
insert_element	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::insert_element(const uword in_row, const uword in_col, const eT val)$/;"	f	class:SpMat
insert_element	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::insert_element(const uword in_row, const uword in_col, const eT in_val)$/;"	f	class:SpSubview
insert_rows	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::insert_rows(const uword row_num, const Base<eT,T1>& X)$/;"	f	class:Col
insert_rows	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::insert_rows(const uword row_num, const uword N, const bool set_to_zero)$/;"	f	class:Col
insert_rows	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::insert_rows(const uword row_num, const BaseCube<eT,T1>& X)$/;"	f	class:Cube
insert_rows	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::insert_rows(const uword row_num, const uword N, const bool set_to_zero)$/;"	f	class:Cube
insert_rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::insert_rows(const uword row_num, const Base<eT,T1>& X)$/;"	f	class:Mat
insert_rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::insert_rows(const uword row_num, const uword N, const bool set_to_zero)$/;"	f	class:Mat
insert_slices	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::insert_slices(const uword slice_num, const BaseCube<eT,T1>& X)$/;"	f	class:Cube
insert_slices	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::insert_slices(const uword slice_num, const uword N, const bool set_to_zero)$/;"	f	class:Cube
int_t	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^  typedef int int_t;$/;"	t	namespace:arma::superlu
internal_approx_equal_abs_diff	lib/armadillo-9.800.2/include/armadillo_bits/fn_approx_equal.hpp	/^internal_approx_equal_abs_diff(const eT& x, const eT& y, const typename get_pod_type<eT>::result tol)$/;"	f
internal_approx_equal_handler	lib/armadillo-9.800.2/include/armadillo_bits/fn_approx_equal.hpp	/^internal_approx_equal_handler(const T1& A, const T2& B, const char* method, const typename T1::pod_type abs_tol, const typename T1::pod_type rel_tol)$/;"	f
internal_approx_equal_handler	lib/armadillo-9.800.2/include/armadillo_bits/fn_approx_equal.hpp	/^internal_approx_equal_handler(const T1& A, const T2& B, const char* method, const typename T1::pod_type tol)$/;"	f
internal_approx_equal_rel_diff	lib/armadillo-9.800.2/include/armadillo_bits/fn_approx_equal.hpp	/^internal_approx_equal_rel_diff(const eT& a, const eT& b, const typename get_pod_type<eT>::result tol)$/;"	f
internal_approx_equal_worker	lib/armadillo-9.800.2/include/armadillo_bits/fn_approx_equal.hpp	/^internal_approx_equal_worker$/;"	f
internal_avg_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::internal_avg_log_p(const Mat<eT>& X) const$/;"	f	class:gmm_priv::gmm_diag
internal_avg_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::internal_avg_log_p(const Mat<eT>& X, const uword gaus_id) const$/;"	f	class:gmm_priv::gmm_diag
internal_avg_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::internal_avg_log_p(const Mat<eT>& X) const$/;"	f	class:gmm_priv::gmm_full
internal_avg_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::internal_avg_log_p(const Mat<eT>& X, const uword gaus_id) const$/;"	f	class:gmm_priv::gmm_full
internal_col	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    arma_aligned       uword  internal_col;$/;"	m	class:SpMat::iterator_base
internal_col	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    arma_aligned       uword      internal_col;$/;"	m	class:SpSubview::iterator_base
internal_gen_boundaries	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::internal_gen_boundaries(const uword N) const$/;"	f	class:gmm_priv::gmm_diag
internal_gen_boundaries	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::internal_gen_boundaries(const uword N) const$/;"	f	class:gmm_priv::gmm_full
internal_pos	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    arma_aligned       uword  internal_pos;$/;"	m	class:SpMat::iterator_base
internal_pos	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    arma_aligned       uword      internal_pos;$/;"	m	class:SpSubview::iterator_base
internal_randperm_helper	lib/armadillo-9.800.2/include/armadillo_bits/fn_randperm.hpp	/^internal_randperm_helper(obj_type& x, const uword N, const uword N_keep)$/;"	f
internal_raw_hist	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::internal_raw_hist(urowvec& hist, const Mat<eT>& X, const gmm_dist_mode& dist_mode) const$/;"	f	class:gmm_priv::gmm_diag
internal_raw_hist	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::internal_raw_hist(urowvec& hist, const Mat<eT>& X, const gmm_dist_mode& dist_mode) const$/;"	f	class:gmm_priv::gmm_full
internal_regspace_default_delta	lib/armadillo-9.800.2/include/armadillo_bits/fn_regspace.hpp	/^internal_regspace_default_delta$/;"	f
internal_regspace_var_delta	lib/armadillo-9.800.2/include/armadillo_bits/fn_regspace.hpp	/^internal_regspace_var_delta$/;"	f
internal_row	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    uword internal_row; \/\/ hold row internally$/;"	m	class:SpMat::const_row_iterator
internal_row	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    uword internal_row; \/\/ Hold row internally because we use internal_pos differently.$/;"	m	class:SpSubview::const_row_iterator
internal_scalar_assign	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::internal_scalar_assign(const Mat<eT>& X, const gmm_dist_mode& dist_mode) const$/;"	f	class:gmm_priv::gmm_diag
internal_scalar_assign	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::internal_scalar_assign(const Mat<eT>& X, const gmm_dist_mode& dist_mode) const$/;"	f	class:gmm_priv::gmm_full
internal_scalar_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::internal_scalar_log_p(const eT* x) const$/;"	f	class:gmm_priv::gmm_diag
internal_scalar_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::internal_scalar_log_p(const eT* x, const uword g) const$/;"	f	class:gmm_priv::gmm_diag
internal_scalar_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::internal_scalar_log_p(const eT* x) const$/;"	f	class:gmm_priv::gmm_full
internal_scalar_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::internal_scalar_log_p(const eT* x, const uword g) const$/;"	f	class:gmm_priv::gmm_full
internal_sum_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::internal_sum_log_p(const Mat<eT>& X) const$/;"	f	class:gmm_priv::gmm_diag
internal_sum_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::internal_sum_log_p(const Mat<eT>& X, const uword gaus_id) const$/;"	f	class:gmm_priv::gmm_diag
internal_sum_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::internal_sum_log_p(const Mat<eT>& X) const$/;"	f	class:gmm_priv::gmm_full
internal_sum_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::internal_sum_log_p(const Mat<eT>& X, const uword gaus_id) const$/;"	f	class:gmm_priv::gmm_full
internal_vec_assign	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::internal_vec_assign(urowvec& out, const Mat<eT>& X, const gmm_dist_mode& dist_mode) const$/;"	f	class:gmm_priv::gmm_diag
internal_vec_assign	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::internal_vec_assign(urowvec& out, const Mat<eT>& X, const gmm_dist_mode& dist_mode) const$/;"	f	class:gmm_priv::gmm_full
internal_vec_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::internal_vec_log_p(const Mat<eT>& X) const$/;"	f	class:gmm_priv::gmm_diag
internal_vec_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::internal_vec_log_p(const Mat<eT>& X, const uword gaus_id) const$/;"	f	class:gmm_priv::gmm_diag
internal_vec_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::internal_vec_log_p(const Mat<eT>& X) const$/;"	f	class:gmm_priv::gmm_full
internal_vec_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::internal_vec_log_p(const Mat<eT>& X, const uword gaus_id) const$/;"	f	class:gmm_priv::gmm_full
interp1	lib/armadillo-9.800.2/docs.html	/^<a name="interp1"><\/a>$/;"	a
interp1	lib/armadillo-9.800.2/include/armadillo_bits/fn_interp1.hpp	/^interp1$/;"	f
interp1_helper	lib/armadillo-9.800.2/include/armadillo_bits/fn_interp1.hpp	/^interp1_helper(const Mat<eT>& X, const Mat<eT>& Y, const Mat<eT>& XI, Mat<eT>& YI, const uword sig, const eT extrap_val)$/;"	f
interp1_helper_linear	lib/armadillo-9.800.2/include/armadillo_bits/fn_interp1.hpp	/^interp1_helper_linear(const Mat<eT>& XG, const Mat<eT>& YG, const Mat<eT>& XI, Mat<eT>& YI, const eT extrap_val)$/;"	f
interp1_helper_nearest	lib/armadillo-9.800.2/include/armadillo_bits/fn_interp1.hpp	/^interp1_helper_nearest(const Mat<eT>& XG, const Mat<eT>& YG, const Mat<eT>& XI, Mat<eT>& YI, const eT extrap_val)$/;"	f
interp2	lib/armadillo-9.800.2/docs.html	/^<a name="interp2"><\/a>$/;"	a
interp2	lib/armadillo-9.800.2/include/armadillo_bits/fn_interp2.hpp	/^interp2$/;"	f
interp2_helper_linear	lib/armadillo-9.800.2/include/armadillo_bits/fn_interp2.hpp	/^interp2_helper_linear(const Mat<eT>& XG, const Mat<eT>& ZG, const Mat<eT>& XI, Mat<eT>& ZI, const eT extrap_val, const uword mode)$/;"	f
interp2_helper_nearest	lib/armadillo-9.800.2/include/armadillo_bits/fn_interp2.hpp	/^interp2_helper_nearest(const Mat<eT>& XG, const Mat<eT>& ZG, const Mat<eT>& XI, Mat<eT>& ZI, const eT extrap_val, const uword mode)$/;"	f
interpret_form_str	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^sp_auxlib::interpret_form_str(const char* form_str)$/;"	f	class:sp_auxlib
intersect	lib/armadillo-9.800.2/docs.html	/^<a name="intersect"><\/a>$/;"	a
intersect	lib/armadillo-9.800.2/include/armadillo_bits/fn_intersect.hpp	/^intersect$/;"	f
inv	lib/armadillo-9.800.2/docs.html	/^<a name="inv"><\/a>$/;"	a
inv	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::inv(Mat<eT>& out, const Mat<eT>& A)$/;"	f	class:auxlib
inv	lib/armadillo-9.800.2/include/armadillo_bits/fn_inv.hpp	/^inv$/;"	f
inv_dcovs	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_bones.hpp	/^  arma_aligned Mat<eT> inv_dcovs;$/;"	m	class:gmm_priv::gmm_diag
inv_fcovs	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_bones.hpp	/^  arma_aligned Cube<eT> inv_fcovs;$/;"	m	class:gmm_priv::gmm_full
inv_sympd	lib/armadillo-9.800.2/docs.html	/^<a name="inv_sympd"><\/a>$/;"	a
inv_sympd	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::inv_sympd(Mat<eT>& out, const Base<eT,T1>& X)$/;"	f	class:auxlib
inv_sympd	lib/armadillo-9.800.2/include/armadillo_bits/fn_inv.hpp	/^inv_sympd$/;"	f
inv_sympd_tiny	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::inv_sympd_tiny(Mat<eT>& out, const Mat<eT>& X)$/;"	f	class:auxlib
inv_tiny	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::inv_tiny(Mat<eT>& out, const Mat<eT>& X)$/;"	f	class:auxlib
inv_tr	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::inv_tr(Mat<eT>& out, const Base<eT,T1>& X, const uword layout)$/;"	f	class:auxlib
invalidate_cache	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::invalidate_cache() const$/;"	f	class:SpMat
invalidate_cache	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::invalidate_cache() const$/;"	f	class:SpSubview
invalidate_csc	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::invalidate_csc() const$/;"	f	class:SpMat
invoke	lib/armadillo-9.800.2/tests/catch.hpp	/^    virtual void invoke() const {$/;"	f	class:Catch::MethodTestCase
irowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Row <sword> irowvec;$/;"	t
irowvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef irowvec::fixed<2> irowvec2;$/;"	t
irowvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef irowvec::fixed<3> irowvec3;$/;"	t
irowvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef irowvec::fixed<4> irowvec4;$/;"	t
irowvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef irowvec::fixed<5> irowvec5;$/;"	t
irowvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef irowvec::fixed<6> irowvec6;$/;"	t
irowvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef irowvec::fixed<7> irowvec7;$/;"	t
irowvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef irowvec::fixed<8> irowvec8;$/;"	t
irowvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef irowvec::fixed<9> irowvec9;$/;"	t
isBinaryExpression	lib/armadillo-9.800.2/tests/catch.hpp	/^        virtual bool isBinaryExpression() const {$/;"	f	struct:Catch::DecomposedExpression
isFalseTest	include/catch.hpp	/^    inline bool isFalseTest( int flags ) { return ( flags & ResultDisposition::FalseTest ) != 0; }$/;"	f	namespace:Catch
isFalseTest	lib/armadillo-9.800.2/tests/catch.hpp	/^    inline bool isFalseTest( int flags )                { return ( flags & ResultDisposition::FalseTest ) != 0; }$/;"	f	namespace:Catch
isJustInfo	lib/armadillo-9.800.2/tests/catch.hpp	/^    inline bool isJustInfo( int flags ) {$/;"	f	namespace:Catch
isOk	lib/armadillo-9.800.2/tests/catch.hpp	/^    inline bool isOk( ResultWas::OfType resultType ) {$/;"	f	namespace:Catch
isTrue	lib/armadillo-9.800.2/tests/catch.hpp	/^    inline bool isTrue( bool value ){ return value; }$/;"	f	namespace:Catch
is_Col	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Col$/;"	s
is_Col	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Col< Col<eT> >$/;"	s
is_Col	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Col< const Col<eT> >$/;"	s
is_Col_fixed_only	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Col_fixed_only$/;"	s
is_Cube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Cube$/;"	s
is_Cube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Cube< Cube<eT> >$/;"	s
is_Cube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Cube< const Cube<eT> >$/;"	s
is_CubeToMatOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_CubeToMatOp$/;"	s
is_CubeToMatOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_CubeToMatOp< CubeToMatOp<T1,op_type> >$/;"	s
is_CubeToMatOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_CubeToMatOp< const CubeToMatOp<T1,op_type> >$/;"	s
is_Gen	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Gen$/;"	s
is_Gen	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Gen< Gen<T1,gen_type> >$/;"	s
is_Gen	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Gen< const Gen<T1,gen_type> >$/;"	s
is_GenCube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_GenCube$/;"	s
is_GenCube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_GenCube< GenCube<eT,gen_type> >$/;"	s
is_Glue	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Glue$/;"	s
is_Glue	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Glue< Glue<T1,T2,glue_type> >$/;"	s
is_Glue	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Glue< const Glue<T1,T2,glue_type> >$/;"	s
is_GlueCube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_GlueCube$/;"	s
is_GlueCube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_GlueCube< GlueCube<T1,T2,glue_type> >$/;"	s
is_Mat	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat$/;"	s
is_Mat	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat< Col<eT> >$/;"	s
is_Mat	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat< Mat<eT> >$/;"	s
is_Mat	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat< Row<eT> >$/;"	s
is_Mat	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat< const Col<eT> >$/;"	s
is_Mat	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat< const Mat<eT> >$/;"	s
is_Mat	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat< const Row<eT> >$/;"	s
is_Mat_fixed	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat_fixed$/;"	s
is_Mat_fixed_only	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat_fixed_only$/;"	s
is_Mat_only	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat_only$/;"	s
is_Mat_only	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat_only< Mat<eT> >$/;"	s
is_Mat_only	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat_only< const Mat<eT> >$/;"	s
is_Mat_trans	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat_trans$/;"	s
is_Mat_trans	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat_trans< Op<T1,op_htrans2> >$/;"	s
is_Mat_trans	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Mat_trans< Op<T1,op_htrans> >$/;"	s
is_Op	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Op$/;"	s
is_Op	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Op< Op<T1,op_type> >$/;"	s
is_Op	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Op< const Op<T1,op_type> >$/;"	s
is_OpCube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_OpCube$/;"	s
is_OpCube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_OpCube< OpCube<T1,op_type> >$/;"	s
is_Row	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Row$/;"	s
is_Row	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Row< Row<eT> >$/;"	s
is_Row	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Row< const Row<eT> >$/;"	s
is_Row_fixed_only	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_Row_fixed_only$/;"	s
is_SpCol	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpCol$/;"	s
is_SpCol	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpCol< SpCol<eT> >$/;"	s
is_SpGlue	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpGlue$/;"	s
is_SpGlue	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpGlue< SpGlue<T1,T2,glue_type> >$/;"	s
is_SpMat	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpMat$/;"	s
is_SpMat	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpMat< SpCol<eT> >$/;"	s
is_SpMat	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpMat< SpMat<eT> >$/;"	s
is_SpMat	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpMat< SpRow<eT> >$/;"	s
is_SpOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpOp$/;"	s
is_SpOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpOp< SpOp<T1,op_type> >$/;"	s
is_SpRow	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpRow$/;"	s
is_SpRow	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpRow< SpRow<eT> >$/;"	s
is_SpSubview	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpSubview$/;"	s
is_SpSubview	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpSubview< SpSubview<eT> >$/;"	s
is_SpToDOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpToDOp$/;"	s
is_SpToDOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpToDOp< SpToDOp<T1,op_type> >$/;"	s
is_SpToDOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_SpToDOp< const SpToDOp<T1,op_type> >$/;"	s
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return ( (void_ptr(&X) == void_ptr(&(Q.m))) || (R.is_alias(X)) ); }$/;"	f	class:Proxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return ( void_ptr(&X) == void_ptr(&(U.M)) ); }$/;"	f	class:Proxy_vectorise_col_mat
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (Q.P1.is_alias(X) || Q.P2.is_alias(X)); }$/;"	f	class:Proxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (is_same_type<eT,eT2>::value) ? (void_ptr(&(Q.m)) == void_ptr(&X)) : false; }$/;"	f	class:Proxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (is_same_type<eT,eT2>::value) ? (void_ptr(&Q) == void_ptr(&X)) : false; }$/;"	f	class:Proxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&(Q.sv_row.m)) == void_ptr(&X)); }$/;"	f	class:Proxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&(Q.sv_row.m)) == void_ptr(&X)); }$/;"	f	struct:Proxy_subview_row_htrans_cx
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&(Q.sv_row.m)) == void_ptr(&X)); }$/;"	f	struct:Proxy_subview_row_htrans_non_cx
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&Q) == void_ptr(&X)); }$/;"	f	struct:Proxy_fixed
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&R) == void_ptr(&X)); }$/;"	f	class:Proxy_diagvec_mat
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return Proxy_sv_row_ht::is_alias(X); }$/;"	f	class:Proxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return Proxy_xtrans::is_alias(X); }$/;"	f	class:Proxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return Q.P.is_alias(X); }$/;"	f	class:Proxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return R.is_alias(X); }$/;"	f	class:Proxy_vectorise_col_expr
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return U.is_alias(X); }$/;"	f	struct:Proxy_xtrans_vector
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return void_ptr(&(U.M)) == void_ptr(&X); }$/;"	f	struct:Proxy_xtrans_default
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return void_ptr(&src) == void_ptr(&X); }$/;"	f	class:Proxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return void_ptr(&src.m) == void_ptr(&X); }$/;"	f	class:Proxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>&) const { return false; }$/;"	f	class:Proxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT2>&) const { return false; }$/;"	f	class:Proxy_diagvec_expr
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline bool is_alias(const Cube<eT2>& X) const { return (Q.P1.is_alias(X) || Q.P2.is_alias(X)); }$/;"	f	class:ProxyCube
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline bool is_alias(const Cube<eT2>& X) const { return (void_ptr(&(Q.m)) == void_ptr(&X)); }$/;"	f	class:ProxyCube
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline bool is_alias(const Cube<eT2>& X) const { return (void_ptr(&Q) == void_ptr(&X)); }$/;"	f	class:ProxyCube
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline bool is_alias(const Cube<eT2>& X) const { return Q.P.is_alias(X); }$/;"	f	class:ProxyCube
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline bool is_alias(const Cube<eT2>&) const { return false; }$/;"	f	class:ProxyCube
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::is_alias(const SpMat<elem_type>& X) const$/;"	f	class:SpBase
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/SpGlue_meat.hpp	/^SpGlue<T1,T2,spglue_type>::is_alias(const SpMat<typename T1::elem_type>& X) const$/;"	f	class:SpGlue
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::is_alias(const SpMat<eT>& X) const$/;"	f	class:SpMat
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_meat.hpp	/^SpOp<T1, op_type>::is_alias(const SpMat<typename T1::elem_type>& X) const$/;"	f	class:SpOp
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline bool is_alias(const SpMat<eT2>& X) const { return (void_ptr(&Q) == void_ptr(&X)); }$/;"	f	class:SpProxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline bool is_alias(const SpMat<eT2>& X) const { return (void_ptr(&Q.m) == void_ptr(&X)); }$/;"	f	class:SpProxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline bool is_alias(const SpMat<eT2>&) const { return false; }$/;"	f	class:SpProxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::is_alias(const SpMat<eT>& X) const$/;"	f	class:SpSubview
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT>& X) const { return (void_ptr(&X) == void_ptr(&(P.m))); }$/;"	f	class:diagmat_proxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline bool is_alias(const Mat<eT>& X) const { return (void_ptr(&X) == void_ptr(&P)); }$/;"	f	class:diagmat_proxy
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline bool is_alias(const Mat<elem_type>& X) const { return (void_ptr(&X) == void_ptr(&P)); }$/;"	f	class:diagmat_proxy_fixed
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline bool is_alias(const Mat<elem_type>&) const { return false; }$/;"	f	class:diagmat_proxy_default
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/mtSpGlue_meat.hpp	/^mtSpGlue<out_eT,T1,T2,spglue_type>::is_alias(const SpMat<eT2>& X) const$/;"	f	class:mtSpGlue
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_meat.hpp	/^mtSpOp<out_eT, T1, op_type>::is_alias(const SpMat<eT2>& X) const$/;"	f	class:mtSpOp
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return ( ((sv.aux_row1 == 0) && (sv.n_rows == sv.m.n_rows)) ? (void_ptr(&(sv.m)) == void_ptr(&X)) : false ); }$/;"	f	struct:partial_unwrap
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return ( ((sv.aux_row1 == 0) && (sv.n_rows == sv.m.n_rows)) ? (void_ptr(&(sv.m)) == void_ptr(&X)) : false ); }$/;"	f	struct:quasi_unwrap
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&(U.M)) == void_ptr(&X)); }$/;"	f	struct:quasi_unwrap
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&M) == void_ptr(&X)); }$/;"	f	struct:quasi_unwrap
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&M) == void_ptr(&X)); }$/;"	f	struct:quasi_unwrap_fixed
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&X) == void_ptr(&M)); }$/;"	f	struct:partial_unwrap
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&X) == void_ptr(&M)); }$/;"	f	struct:partial_unwrap_fixed
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&X) == void_ptr(&M)); }$/;"	f	struct:partial_unwrap_htrans2_fixed
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&X) == void_ptr(&M)); }$/;"	f	struct:partial_unwrap_htrans_fixed
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&X) == void_ptr(&M)); }$/;"	f	struct:partial_unwrap_neg_fixed
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&X) == void_ptr(&M)); }$/;"	f	struct:partial_unwrap_scalar_times_fixed
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&X) == void_ptr(&orig)); }$/;"	f	struct:partial_unwrap
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&X) == void_ptr(&orig)); }$/;"	f	struct:quasi_unwrap
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&orig) == void_ptr(&X)); }$/;"	f	struct:quasi_unwrap
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&orig) == void_ptr(&X)); }$/;"	f	struct:quasi_unwrap_Col_htrans
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&orig) == void_ptr(&X)); }$/;"	f	struct:quasi_unwrap_Row_htrans
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>& X) const { return (void_ptr(&orig) == void_ptr(&X)); }$/;"	f	struct:quasi_unwrap_subview_col_htrans
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>&) const { return false; }$/;"	f	struct:partial_unwrap
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>&) const { return false; }$/;"	f	struct:partial_unwrap_default
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>&) const { return false; }$/;"	f	struct:partial_unwrap_htrans2_default
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>&) const { return false; }$/;"	f	struct:partial_unwrap_htrans_default
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>&) const { return false; }$/;"	f	struct:partial_unwrap_neg_default
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>&) const { return false; }$/;"	f	struct:partial_unwrap_scalar_times_default
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>&) const { return false; }$/;"	f	struct:quasi_unwrap
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  arma_inline bool is_alias(const Mat<eT2>&) const { return false; }$/;"	f	struct:quasi_unwrap_default
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^  arma_inline bool is_alias(const Cube<eT2>& X) const { return (void_ptr(&M) == void_ptr(&X)); }$/;"	f	struct:unwrap_cube
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^  arma_inline bool is_alias(const Cube<eT2>&) const { return false; }$/;"	f	struct:unwrap_cube
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  arma_inline bool is_alias(const SpMat<eT2>& X) const { return (void_ptr(&M) == void_ptr(&X)); }$/;"	f	struct:unwrap_spmat
is_alias	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  arma_inline bool is_alias(const SpMat<eT2>&) const { return false; }$/;"	f	struct:unwrap_spmat
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_aligned() const { return (Q.P1.is_aligned() && Q.P2.is_aligned()); }$/;"	f	class:Proxy
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_aligned() const { return Gen<T1, gen_type>::is_simple; }$/;"	f	class:Proxy
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_aligned() const { return Proxy_xtrans::is_aligned(); }$/;"	f	class:Proxy
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_aligned() const { return Q.P.is_aligned(); }$/;"	f	class:Proxy
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_aligned() const { return R.is_aligned(); }$/;"	f	class:Proxy_vectorise_col_expr
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_aligned() const { return false; }$/;"	f	class:Proxy
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_aligned() const { return false; }$/;"	f	class:Proxy_diagvec_mat
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_aligned() const { return false; }$/;"	f	struct:Proxy_xtrans_default
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_aligned() const { return memory::is_aligned(Q.colmem); }$/;"	f	class:Proxy
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_aligned() const { return memory::is_aligned(Q.memptr()); }$/;"	f	class:Proxy
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_aligned() const { return memory::is_aligned(Q.memptr()); }$/;"	f	class:Proxy_diagvec_expr
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_aligned() const { return memory::is_aligned(Q.memptr()); }$/;"	f	class:Proxy_vectorise_col_mat
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_aligned() const { return memory::is_aligned(Q.memptr()); }$/;"	f	struct:Proxy_xtrans_vector
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline bool is_aligned() const$/;"	f	struct:Proxy_fixed
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline bool is_aligned() const { return GenCube<eT, gen_type>::is_simple; }$/;"	f	class:ProxyCube
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline bool is_aligned() const { return Q.P.is_aligned(); }$/;"	f	class:ProxyCube
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline bool is_aligned() const { return Q.P1.is_aligned() && Q.P2.is_aligned(); }$/;"	f	class:ProxyCube
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline bool is_aligned() const { return false; }$/;"	f	class:ProxyCube
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline bool is_aligned() const { return memory::is_aligned(Q.memptr()); }$/;"	f	class:ProxyCube
is_aligned	lib/armadillo-9.800.2/include/armadillo_bits/memory.hpp	/^memory::is_aligned(const eT* mem)$/;"	f	class:memory
is_arma_cube_type	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_arma_cube_type$/;"	s
is_arma_sparse_type	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_arma_sparse_type$/;"	s
is_arma_type	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_arma_type$/;"	s
is_arma_type2	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_arma_type2$/;"	s
is_band	lib/armadillo-9.800.2/include/armadillo_bits/band_helper.hpp	/^is_band(uword& out_KL, uword& out_KU, const Mat<eT>& A, const uword N_min)$/;"	f	namespace:band_helper
is_band_lower	lib/armadillo-9.800.2/include/armadillo_bits/band_helper.hpp	/^is_band_lower(uword& out_KD, const Mat<eT>& A, const uword N_min)$/;"	f	namespace:band_helper
is_band_upper	lib/armadillo-9.800.2/include/armadillo_bits/band_helper.hpp	/^is_band_upper(uword& out_KD, const Mat<eT>& A, const uword N_min)$/;"	f	namespace:band_helper
is_callable	include/catch.hpp	/^struct is_callable<Fun(Args...)> : decltype(is_callable_tester::test<Fun, Args...>(0)) {};$/;"	s	namespace:Catch
is_callable_tester	include/catch.hpp	/^struct is_callable_tester {$/;"	s	namespace:Catch
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  static const bool is_col  = true;$/;"	m	class:Col
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  static const bool is_col  = true;$/;"	m	class:Col::fixed
is_col	lib/armadillo-9.800.2/include/armadillo_bits/CubeToMatOp_bones.hpp	/^  static const bool is_col  = op_type::template traits<T1>::is_col;$/;"	m	class:CubeToMatOp
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Gen_bones.hpp	/^  static const bool is_col  = T1::is_col;$/;"	m	class:Gen
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^  static const bool is_col  = false;$/;"	m	struct:Glue_traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^  static const bool is_col  = glue_type::template traits<T1,T2>::is_col;$/;"	m	struct:Glue_traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  static const bool is_col  = false;$/;"	m	class:MapMat
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  static const bool is_col  = (fixed_n_cols == 1);$/;"	m	class:Mat::fixed
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  static const bool is_col  = false;$/;"	m	class:Mat
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^  static const bool is_col  = false;$/;"	m	struct:Op_traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^  static const bool is_col  = op_type::template traits<T1>::is_col;$/;"	m	struct:Op_traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = CubeToMatOp<T1, op_type>::is_col;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = Gen<T1, gen_randn>::is_col;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = Gen<T1, gen_randu>::is_col;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = Gen<T1, gen_type>::is_col;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = Glue<T1, T2, glue_type>::is_col;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = Op<T1, op_htrans>::is_col;$/;"	m	struct:Proxy_xtrans_vector
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = Op<T1, op_strans>::is_col;$/;"	m	struct:Proxy_xtrans_vector
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = Op<T1, op_type>::is_col;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = Proxy_xtrans::is_col;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = SpToDOp<T1, op_type>::is_col;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = T1::is_col;$/;"	m	struct:Proxy_fixed
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = eGlue<T1, T2, eglue_type>::is_col;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = eOp< Op<T1, op_htrans>, eop_scalar_times>::is_col;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = eOp<T1, eop_type>::is_col;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = false;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = false;$/;"	m	struct:Proxy_xtrans_default
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = mtGlue<out_eT, T1, T2, glue_type>::is_col;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = mtOp<out_eT, T1, op_type>::is_col;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = true;$/;"	m	class:Proxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = true;$/;"	m	class:Proxy_diagvec_expr
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = true;$/;"	m	class:Proxy_diagvec_mat
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = true;$/;"	m	class:Proxy_vectorise_col_expr
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = true;$/;"	m	class:Proxy_vectorise_col_mat
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = true;$/;"	m	struct:Proxy_subview_row_htrans_cx
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_col  = true;$/;"	m	struct:Proxy_subview_row_htrans_non_cx
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  static const bool is_col  = false;$/;"	m	class:Row
is_col	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  static const bool is_col  = false;$/;"	m	class:Row::fixed
is_col	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_bones.hpp	/^  static const bool is_col  = true;$/;"	m	class:SpCol
is_col	lib/armadillo-9.800.2/include/armadillo_bits/SpGlue_bones.hpp	/^  static const bool is_col  = spglue_type::template traits<T1,T2>::is_col;$/;"	m	class:SpGlue
is_col	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  static const bool is_col  = false;$/;"	m	class:SpMat
is_col	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_bones.hpp	/^  static const bool is_col  = op_type::template traits<T1>::is_col;$/;"	m	class:SpOp
is_col	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_col  = SpGlue<T1, T2, spglue_type>::is_col;$/;"	m	class:SpProxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_col  = SpOp<T1, spop_type>::is_col;$/;"	m	class:SpProxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_col  = false;$/;"	m	class:SpProxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_col  = mtSpGlue<out_eT, T1, T2, spglue_type>::is_col;$/;"	m	class:SpProxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_col  = mtSpOp<out_eT, T1, spop_type>::is_col;$/;"	m	class:SpProxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_col  = true;$/;"	m	class:SpProxy
is_col	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_bones.hpp	/^  static const bool is_col  = false;$/;"	m	class:SpRow
is_col	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  static const bool is_col  = false;$/;"	m	class:SpSubview
is_col	lib/armadillo-9.800.2/include/armadillo_bits/SpToDOp_bones.hpp	/^  static const bool is_col  = op_type::template traits<T1>::is_col;$/;"	m	class:SpToDOp
is_col	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_col  = (T1::is_col  || T2::is_col );$/;"	m	struct:traits_glue_or::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_col  = T1::is_col;$/;"	m	struct:traits_op_passthru::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_col  = false;$/;"	m	struct:traits_glue_default::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_col  = false;$/;"	m	struct:traits_op_default::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_col  = false;$/;"	m	struct:traits_op_row::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_col  = false;$/;"	m	struct:traits_op_xvec::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_col  = true;$/;"	m	struct:traits_op_col::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/diagview_bones.hpp	/^  static const bool is_col  = true;$/;"	m	class:diagview
is_col	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_bones.hpp	/^  static const bool is_col  = (Proxy<T1>::is_col  || Proxy<T2>::is_col );$/;"	m	class:eGlue
is_col	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^  static const bool is_col  = Proxy<T1>::is_col;$/;"	m	class:eOp
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_affmul_bones.hpp	/^    static const bool is_col  = T2::is_col;$/;"	m	struct:glue_affmul::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_conv_bones.hpp	/^    static const bool is_col  = T1::is_col;$/;"	m	struct:glue_conv::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_cor_bones.hpp	/^    static const bool is_col  = false; \/\/ T2::is_col;  \/\/ TODO: check$/;"	m	struct:glue_cor::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_cov_bones.hpp	/^    static const bool is_col  = false; \/\/ T2::is_col;  \/\/ TODO: check$/;"	m	struct:glue_cov::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_cross_bones.hpp	/^    static const bool is_col  = T1::is_col;$/;"	m	struct:glue_cross::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_hist_bones.hpp	/^    static const bool is_col  = T1::is_col;$/;"	m	struct:glue_hist_default::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_histc_bones.hpp	/^    static const bool is_col  = T1::is_col;$/;"	m	struct:glue_histc_default::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_intersect_bones.hpp	/^    static const bool is_col  = (T1::is_col || T2::is_col);$/;"	m	struct:glue_intersect::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_bones.hpp	/^    static const bool is_col  = (T1::is_col && T2::is_col);$/;"	m	struct:glue_join_cols::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_bones.hpp	/^    static const bool is_col  = false;$/;"	m	struct:glue_join_rows::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_kron_bones.hpp	/^    static const bool is_col  = (T1::is_col && T2::is_col);$/;"	m	struct:glue_kron::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_bones.hpp	/^    static const bool is_col  = T2::is_col;$/;"	m	struct:glue_mixed_times::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_mvnrnd_bones.hpp	/^    static const bool is_col  = true;$/;"	m	struct:glue_mvnrnd_vec::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyfit_bones.hpp	/^    static const bool is_col  = true;$/;"	m	struct:glue_polyfit::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyval_bones.hpp	/^    static const bool is_col  = T2::is_col;$/;"	m	struct:glue_polyval::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^    static const bool is_col  = T2::is_col;$/;"	m	struct:glue_solve_gen::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^    static const bool is_col  = T2::is_col;$/;"	m	struct:glue_solve_tri::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^    static const bool is_col  = T2::is_col;$/;"	m	struct:glue_solve_tri_default::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^    static const bool is_col  = T2::is_col;$/;"	m	struct:glue_times::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^    static const bool is_col  = T2::is_col;$/;"	m	struct:glue_times_diag::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/glue_trapz_bones.hpp	/^    static const bool is_col  = false;$/;"	m	struct:glue_trapz::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/mtGlue_bones.hpp	/^  static const bool is_col  = glue_type::template traits<T1,T2>::is_col;$/;"	m	class:mtGlue
is_col	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_bones.hpp	/^  static const bool is_col  = op_type::template traits<T1>::is_col;$/;"	m	class:mtOp
is_col	lib/armadillo-9.800.2/include/armadillo_bits/mtSpGlue_bones.hpp	/^  static const bool is_col  = spglue_type::template traits<T1,T2>::is_col;$/;"	m	class:mtSpGlue
is_col	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_bones.hpp	/^  static const bool is_col  = spop_type::template traits<T1>::is_col;$/;"	m	class:mtSpOp
is_col	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_bones.hpp	/^    static const bool is_col  = T1::is_row;$/;"	m	struct:op_htrans2::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_bones.hpp	/^    static const bool is_col  = T1::is_row;$/;"	m	struct:op_htrans::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^    static const bool is_col  = T1::is_row;$/;"	m	struct:op_strans2::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^    static const bool is_col  = T1::is_row;$/;"	m	struct:op_strans::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_bones.hpp	/^  static const bool is_col  = true;$/;"	m	class:spdiagview
is_col	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_bones.hpp	/^    static const bool is_col  = (T1::is_col && T2::is_col);$/;"	m	struct:spglue_join_cols::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_bones.hpp	/^    static const bool is_col  = false;$/;"	m	struct:spglue_join_rows::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/spglue_kron_bones.hpp	/^    static const bool is_col  = (T1::is_col && T2::is_col);$/;"	m	struct:spglue_kron::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^    static const bool is_col  = T2::is_col;$/;"	m	struct:spglue_times::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^    static const bool is_col  = T2::is_col;$/;"	m	struct:spglue_times_misc::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^    static const bool is_col  = T2::is_col;$/;"	m	struct:spglue_times_mixed::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/spop_htrans_bones.hpp	/^    static const bool is_col  = T1::is_row;$/;"	m	struct:spop_htrans::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/spop_strans_bones.hpp	/^    static const bool is_col  = T1::is_row;$/;"	m	struct:spop_strans::traits
is_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_col  = false;$/;"	m	class:subview
is_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_col  = false;$/;"	m	class:subview_row
is_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_col  = true;$/;"	m	class:subview_col
is_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_col  = true;$/;"	m	class:subview_row_htrans
is_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_col  = true;$/;"	m	class:subview_row_strans
is_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_bones.hpp	/^  static const bool is_col  = true;$/;"	m	class:subview_elem1
is_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_bones.hpp	/^  static const bool is_col  = false;$/;"	m	class:subview_elem2
is_col	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_bones.hpp	/^  static const bool is_col  = false;$/;"	m	class:xtrans_mat
is_col	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_bones.hpp	/^  static const bool is_col  = false;$/;"	m	class:xvec_htrans
is_colvec	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::is_colvec() const$/;"	f	class:Base
is_colvec	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::is_colvec() const$/;"	f	class:MapMat
is_colvec	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::is_colvec() const$/;"	f	class:Mat
is_colvec	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::is_colvec() const$/;"	f	class:SpBase
is_colvec	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::is_colvec() const$/;"	f	class:SpMat
is_complex	lib/armadillo-9.800.2/include/armadillo_bits/newarp_cx_attrib.hpp	/^  arma_inline static bool is_complex(const std::complex<T>& v, const T eps) { return (std::abs(v.imag()) >  eps); }$/;"	f	struct:newarp::cx_attrib
is_conj	lib/armadillo-9.800.2/include/armadillo_bits/newarp_cx_attrib.hpp	/^  arma_inline static bool is_conj(const std::complex<T>& v1, const std::complex<T>& v2, const T eps)  { return (std::abs(v1 - std::conj(v2)) <= eps); }$/;"	f	struct:newarp::cx_attrib
is_const	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool is_const     = false;$/;"	m	struct:quasi_unwrap
is_const	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool is_const     = false;$/;"	m	struct:quasi_unwrap_default
is_const	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool is_const     = quasi_unwrap_Col_htrans_extra::is_const;$/;"	m	struct:quasi_unwrap
is_const	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool is_const     = quasi_unwrap_Row_htrans_extra::is_const;$/;"	m	struct:quasi_unwrap
is_const	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool is_const     = quasi_unwrap_extra::is_const;$/;"	m	struct:quasi_unwrap
is_const	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool is_const     = quasi_unwrap_subview_col_htrans_extra::is_const;$/;"	m	struct:quasi_unwrap
is_const	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool is_const     = true;$/;"	m	struct:quasi_unwrap
is_const	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool is_const     = true;$/;"	m	struct:quasi_unwrap_Col_htrans
is_const	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool is_const     = true;$/;"	m	struct:quasi_unwrap_Row_htrans
is_const	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool is_const     = true;$/;"	m	struct:quasi_unwrap_fixed
is_const	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  static const bool is_const     = true;$/;"	m	struct:quasi_unwrap_subview_col_htrans
is_cx	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_cx$/;"	s
is_cx	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_cx< std::complex<T> >$/;"	s
is_cx_double	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_cx_double$/;"	s
is_cx_double	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_cx_double< std::complex<double> >$/;"	s
is_cx_float	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_cx_float$/;"	s
is_cx_float	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_cx_float< std::complex<float> >$/;"	s
is_diagmat	lib/armadillo-9.800.2/docs.html	/^<a name="is_diagmat"><\/a>$/;"	a
is_diagmat	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::is_diagmat() const$/;"	f	class:Base
is_diagmat	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::is_diagmat() const$/;"	f	class:SpBase
is_diagview	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_diagview$/;"	s
is_diagview	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_diagview< const diagview<eT> >$/;"	s
is_diagview	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_diagview< diagview<eT> >$/;"	s
is_double	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_double$/;"	s
is_double	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_double<double>$/;"	s
is_eGlue	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_eGlue$/;"	s
is_eGlue	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_eGlue< const eGlue<T1,T2,eglue_type> >$/;"	s
is_eGlue	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_eGlue< eGlue<T1,T2,eglue_type> >$/;"	s
is_eGlueCube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_eGlueCube$/;"	s
is_eGlueCube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_eGlueCube< eGlueCube<T1,T2,eglue_type> >$/;"	s
is_eOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_eOp$/;"	s
is_eOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_eOp< const eOp<T1,eop_type> >$/;"	s
is_eOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_eOp< eOp<T1,eop_type> >$/;"	s
is_eOpCube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_eOpCube$/;"	s
is_eOpCube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_eOpCube< eOpCube<T1,eop_type> >$/;"	s
is_empty	lib/armadillo-9.800.2/docs.html	/^<a name="is_empty"><\/a>$/;"	a
is_empty	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube<elem_type,derived>::is_empty() const$/;"	f	class:BaseCube
is_empty	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::is_empty() const$/;"	f	class:Base
is_empty	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::is_empty() const$/;"	f	class:Cube
is_empty	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::is_empty() const$/;"	f	class:MapMat
is_empty	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::is_empty() const$/;"	f	class:Mat
is_empty	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::is_empty() const$/;"	f	class:SpBase
is_empty	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::is_empty() const$/;"	f	class:SpMat
is_empty	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::is_empty() const$/;"	f	class:field
is_empty	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::is_empty() const$/;"	f	class:subview_field
is_finite	lib/armadillo-9.800.2/docs.html	/^<a name="is_finite"><\/a>$/;"	a
is_finite	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube<elem_type,derived>::is_finite() const$/;"	f	class:BaseCube
is_finite	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::is_finite() const$/;"	f	class:Base
is_finite	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::is_finite() const$/;"	f	class:Cube
is_finite	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::is_finite() const$/;"	f	class:Mat
is_finite	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::is_finite() const$/;"	f	class:SpBase
is_finite	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::is_finite() const$/;"	f	class:SpMat
is_finite	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::is_finite(const eT* src, const uword n_elem)$/;"	f	class:arrayops
is_finite	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^is_finite(const Base<typename T1::elem_type,T1>& X)$/;"	f
is_finite	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^is_finite(const BaseCube<typename T1::elem_type,T1>& X)$/;"	f
is_finite	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^is_finite(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
is_finite	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^is_finite(const eT x, const typename arma_scalar_only<eT>::result* junk = 0)$/;"	f
is_finite	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::is_finite() const$/;"	f	class:subview_cube
is_finite	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::is_finite() const$/;"	f	class:subview
is_finite_member	lib/armadillo-9.800.2/docs.html	/^<a name="is_finite_member"><\/a>$/;"	a
is_float	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_float$/;"	s
is_float	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_float<float>$/;"	s
is_glue_times_diag	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_glue_times_diag$/;"	s
is_glue_times_diag	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_glue_times_diag< Glue<T1,T2,glue_times_diag> >$/;"	s
is_glue_times_diag	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_glue_times_diag< const Glue<T1,T2,glue_times_diag> >$/;"	s
is_hermitian	lib/armadillo-9.800.2/docs.html	/^<a name="is_hermitian"><\/a>$/;"	a
is_hermitian	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::is_hermitian() const$/;"	f	class:Base
is_hermitian	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::is_hermitian(const typename get_pod_type<elem_type>::result tol) const$/;"	f	class:Base
is_hermitian	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::is_hermitian() const$/;"	f	class:SpBase
is_hermitian	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::is_hermitian(const typename get_pod_type<elem_type>::result tol) const$/;"	f	class:SpBase
is_hermitian	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::is_hermitian() const$/;"	f	class:SpMat
is_hermitian	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::is_hermitian(const typename get_pod_type<elem_type>::result tol) const$/;"	f	class:SpMat
is_mtGlue	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_mtGlue$/;"	s
is_mtGlue	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_mtGlue< const mtGlue<eT, T1, T2, glue_type> >$/;"	s
is_mtGlue	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_mtGlue< mtGlue<eT, T1, T2, glue_type> >$/;"	s
is_mtGlueCube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_mtGlueCube$/;"	s
is_mtGlueCube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_mtGlueCube< mtGlueCube<eT, T1, T2, glue_type> >$/;"	s
is_mtOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_mtOp$/;"	s
is_mtOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_mtOp< const mtOp<eT, T1, op_type> >$/;"	s
is_mtOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_mtOp< mtOp<eT, T1, op_type> >$/;"	s
is_mtOpCube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_mtOpCube$/;"	s
is_mtOpCube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_mtOpCube< mtOpCube<eT, T1, op_type> >$/;"	s
is_mtSpGlue	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_mtSpGlue$/;"	s
is_mtSpGlue	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_mtSpGlue< mtSpGlue<eT, T1, T2, spglue_type> >$/;"	s
is_mtSpOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_mtSpOp$/;"	s
is_mtSpOp	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_mtSpOp< mtSpOp<eT, T1, spop_type> >$/;"	s
is_non_integral	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_non_integral$/;"	s
is_non_integral	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_non_integral<              double  > { static const bool value = true; };$/;"	s
is_non_integral	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_non_integral<              float   > { static const bool value = true; };$/;"	s
is_non_integral	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_non_integral< std::complex<double> > { static const bool value = true; };$/;"	s
is_non_integral	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_non_integral< std::complex<float>  > { static const bool value = true; };$/;"	s
is_op_diagmat	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_op_diagmat$/;"	s
is_op_diagmat	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_op_diagmat< Op<T1,op_diagmat> >$/;"	s
is_op_diagmat	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_op_diagmat< const Op<T1,op_diagmat> >$/;"	s
is_outer_product	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_outer_product$/;"	s
is_outer_product	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_outer_product< Glue<T1,T2,glue_times> >$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^struct is_promotable$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double,              std::complex<float>  > : public is_promotable_ok { typedef std::complex<double> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, float > : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, s16   > : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, s32   > : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, s64   > : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, s8    > : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, slng_t> : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, u16   > : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, u32   > : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, u64   > : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, u8    > : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, ulng_t> : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float,               std::complex<double> > : public is_promotable_ok { typedef std::complex<double> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float,  double> : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, s16   > : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, s32   > : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, s64   > : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, s8    > : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, slng_t> : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, u16   > : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, u32   > : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, u64   > : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, u8    > : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, ulng_t> : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16,    double> : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16,    float> : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16, s32> : public is_promotable_ok { typedef s32 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16, s64> : public is_promotable_ok { typedef s64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16, s8 > : public is_promotable_ok { typedef s16 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16, u16> : public is_promotable_ok { typedef s16 result; };  \/\/ s32 ?$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16, u32> : public is_promotable_ok { typedef s32 result; };  \/\/ float ?$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16, u8 > : public is_promotable_ok { typedef s16 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32,    double> : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32,    float> : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32, s16> : public is_promotable_ok { typedef s32 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32, s64> : public is_promotable_ok { typedef s64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32, s8 > : public is_promotable_ok { typedef s32 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32, u16> : public is_promotable_ok { typedef s32 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32, u32> : public is_promotable_ok { typedef s32 result; };  \/\/ float ?  $/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32, u8 > : public is_promotable_ok { typedef s32 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64,    double> : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64,    float> : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64, s16> : public is_promotable_ok { typedef s64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64, s32> : public is_promotable_ok { typedef s64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64, s8 > : public is_promotable_ok { typedef s64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64, u16> : public is_promotable_ok { typedef s64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64, u32> : public is_promotable_ok { typedef s64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64, u64> : public is_promotable_ok { typedef s64 result; };  \/\/ float ?  $/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64, u8 > : public is_promotable_ok { typedef s64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8 , s16> : public is_promotable_ok { typedef s16 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8 , s32> : public is_promotable_ok { typedef s32 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8 , s64> : public is_promotable_ok { typedef s64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8 , u32> : public is_promotable_ok { typedef s32 result; };  \/\/ float ?$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8,     double> : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8,     float> : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8, u16> : public is_promotable_ok { typedef s16 result; };  \/\/ s32 ?$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8, u8> : public is_promotable_ok { typedef s8 result; };  \/\/ s16 ?$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<slng_t, double> : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<slng_t, float> : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<std::complex<double>, float>                : public is_promotable_ok { typedef std::complex<double> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<std::complex<double>, std::complex<float> > : public is_promotable_ok { typedef std::complex<double> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<std::complex<float>,  double>               : public is_promotable_ok { typedef std::complex<double> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<std::complex<float>, std::complex<double> > : public is_promotable_ok { typedef std::complex<double> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16,    double> : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16,    float> : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16, s16> : public is_promotable_ok { typedef s16 result; };  \/\/ s32 ?$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16, s32> : public is_promotable_ok { typedef s32 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16, s64> : public is_promotable_ok { typedef s64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16, s8> : public is_promotable_ok { typedef s16 result; };  \/\/ s32 ?$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16, u32> : public is_promotable_ok { typedef u32 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16, u64> : public is_promotable_ok { typedef u64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16, u8> : public is_promotable_ok { typedef u16 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32,    double> : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32,    float> : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32, s16> : public is_promotable_ok { typedef s32 result; };  \/\/ float ?$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32, s32> : public is_promotable_ok { typedef s32 result; };  \/\/ float ?  $/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32, s64> : public is_promotable_ok { typedef s64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32, s8 > : public is_promotable_ok { typedef s32 result; };  \/\/ float ?$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32, u16> : public is_promotable_ok { typedef u32 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32, u64> : public is_promotable_ok { typedef u64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32, u8 > : public is_promotable_ok { typedef u32 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u64,    double> : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u64,    float> : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u64, s64> : public is_promotable_ok { typedef s64 result; };  \/\/ float ?  $/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u64, u16> : public is_promotable_ok { typedef u64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u64, u32> : public is_promotable_ok { typedef u64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u64, u8 > : public is_promotable_ok { typedef u64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8 , s16> : public is_promotable_ok { typedef s16 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8 , s32> : public is_promotable_ok { typedef s32 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8 , s64> : public is_promotable_ok { typedef s64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8 , u32> : public is_promotable_ok { typedef u32 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8,     double> : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8,     float> : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8,  u64> : public is_promotable_ok { typedef u64 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8, s8> : public is_promotable_ok { typedef s8 result; };  \/\/ s16 ?$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8, u16> : public is_promotable_ok { typedef u16 result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<ulng_t, double> : public is_promotable_ok { typedef double result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<ulng_t, float> : public is_promotable_ok { typedef float result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<T,               T> : public is_promotable_ok { typedef T               result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<T, std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<s16,    std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<s32,    std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<s64,    std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<s8,     std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<slng_t, std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<std::complex<T>, T> : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<std::complex<T>, s16>    : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<std::complex<T>, s32>    : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<std::complex<T>, s8>     : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<std::complex<T>, u16>    : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<std::complex<T>, u32>    : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<std::complex<T>, u8>     : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<u16,    std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<u32,    std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<u64,    std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<u8,     std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<ulng_t, std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename t> struct is_promotable<std::complex<t>, s64>    : public is_promotable_ok { typedef std::complex<t> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename t> struct is_promotable<std::complex<t>, slng_t> : public is_promotable_ok { typedef std::complex<t> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename t> struct is_promotable<std::complex<t>, u64>    : public is_promotable_ok { typedef std::complex<t> result; };$/;"	s
is_promotable	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename t> struct is_promotable<std::complex<t>, ulng_t> : public is_promotable_ok { typedef std::complex<t> result; };$/;"	s
is_promotable_ok	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^struct is_promotable_ok$/;"	s
is_real	lib/armadillo-9.800.2/include/armadillo_bits/newarp_cx_attrib.hpp	/^  arma_inline static bool is_real   (const std::complex<T>& v, const T eps) { return (std::abs(v.imag()) <= eps); }$/;"	f	struct:newarp::cx_attrib
is_real	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_real$/;"	s
is_real	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_real<double>$/;"	s
is_real	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_real<float>$/;"	s
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:Col
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:Col::fixed
is_row	lib/armadillo-9.800.2/include/armadillo_bits/CubeToMatOp_bones.hpp	/^  static const bool is_row  = op_type::template traits<T1>::is_row;$/;"	m	class:CubeToMatOp
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Gen_bones.hpp	/^  static const bool is_row  = T1::is_row;$/;"	m	class:Gen
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^  static const bool is_row  = false;$/;"	m	struct:Glue_traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^  static const bool is_row  = glue_type::template traits<T1,T2>::is_row;$/;"	m	struct:Glue_traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:MapMat
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  static const bool is_row  = (fixed_n_rows == 1);$/;"	m	class:Mat::fixed
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:Mat
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^  static const bool is_row  = false;$/;"	m	struct:Op_traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^  static const bool is_row  = op_type::template traits<T1>::is_row;$/;"	m	struct:Op_traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = CubeToMatOp<T1, op_type>::is_row;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = Gen<T1, gen_randn>::is_row;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = Gen<T1, gen_randu>::is_row;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = Gen<T1, gen_type>::is_row;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = Glue<T1, T2, glue_type>::is_row;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = Op<T1, op_htrans>::is_row;$/;"	m	struct:Proxy_xtrans_vector
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = Op<T1, op_strans>::is_row;$/;"	m	struct:Proxy_xtrans_vector
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = Op<T1, op_type>::is_row;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = Proxy_xtrans::is_row;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = SpToDOp<T1, op_type>::is_row;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = T1::is_row;$/;"	m	struct:Proxy_fixed
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = eGlue<T1, T2, eglue_type>::is_row;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = eOp< Op<T1, op_htrans>, eop_scalar_times>::is_row;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = eOp<T1, eop_type>::is_row;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = false;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = false;$/;"	m	class:Proxy_diagvec_expr
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = false;$/;"	m	class:Proxy_diagvec_mat
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = false;$/;"	m	class:Proxy_vectorise_col_expr
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = false;$/;"	m	class:Proxy_vectorise_col_mat
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = false;$/;"	m	struct:Proxy_subview_row_htrans_cx
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = false;$/;"	m	struct:Proxy_subview_row_htrans_non_cx
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = false;$/;"	m	struct:Proxy_xtrans_default
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = mtGlue<out_eT, T1, T2, glue_type>::is_row;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = mtOp<out_eT, T1, op_type>::is_row;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_row  = true;$/;"	m	class:Proxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  static const bool is_row  = true;$/;"	m	class:Row
is_row	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  static const bool is_row  = true;$/;"	m	class:Row::fixed
is_row	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:SpCol
is_row	lib/armadillo-9.800.2/include/armadillo_bits/SpGlue_bones.hpp	/^  static const bool is_row  = spglue_type::template traits<T1,T2>::is_row;$/;"	m	class:SpGlue
is_row	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:SpMat
is_row	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_bones.hpp	/^  static const bool is_row  = op_type::template traits<T1>::is_row;$/;"	m	class:SpOp
is_row	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_row  = SpGlue<T1, T2, spglue_type>::is_row;$/;"	m	class:SpProxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_row  = SpOp<T1, spop_type>::is_row;$/;"	m	class:SpProxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_row  = false;$/;"	m	class:SpProxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_row  = mtSpGlue<out_eT, T1, T2, spglue_type>::is_row;$/;"	m	class:SpProxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_row  = mtSpOp<out_eT, T1, spop_type>::is_row;$/;"	m	class:SpProxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_row  = true;$/;"	m	class:SpProxy
is_row	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_bones.hpp	/^  static const bool is_row  = true;$/;"	m	class:SpRow
is_row	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:SpSubview
is_row	lib/armadillo-9.800.2/include/armadillo_bits/SpToDOp_bones.hpp	/^  static const bool is_row  = op_type::template traits<T1>::is_row;$/;"	m	class:SpToDOp
is_row	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_row  = (T1::is_row  || T2::is_row );$/;"	m	struct:traits_glue_or::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_row  = T1::is_row;$/;"	m	struct:traits_op_passthru::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_row  = false;$/;"	m	struct:traits_glue_default::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_row  = false;$/;"	m	struct:traits_op_col::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_row  = false;$/;"	m	struct:traits_op_default::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_row  = false;$/;"	m	struct:traits_op_xvec::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_row  = true;$/;"	m	struct:traits_op_row::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/diagview_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:diagview
is_row	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_bones.hpp	/^  static const bool is_row  = (Proxy<T1>::is_row  || Proxy<T2>::is_row );$/;"	m	class:eGlue
is_row	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^  static const bool is_row  = Proxy<T1>::is_row;$/;"	m	class:eOp
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_affmul_bones.hpp	/^    static const bool is_row  = T1::is_row;$/;"	m	struct:glue_affmul::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_conv_bones.hpp	/^    static const bool is_row  = T1::is_row;$/;"	m	struct:glue_conv::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_cor_bones.hpp	/^    static const bool is_row  = false; \/\/ T1::is_col;  \/\/ TODO: check$/;"	m	struct:glue_cor::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_cov_bones.hpp	/^    static const bool is_row  = false; \/\/ T1::is_col;  \/\/ TODO: check$/;"	m	struct:glue_cov::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_cross_bones.hpp	/^    static const bool is_row  = T1::is_row;$/;"	m	struct:glue_cross::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_hist_bones.hpp	/^    static const bool is_row  = T1::is_row;$/;"	m	struct:glue_hist_default::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_histc_bones.hpp	/^    static const bool is_row  = T1::is_row;$/;"	m	struct:glue_histc_default::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_intersect_bones.hpp	/^    static const bool is_row  = (T1::is_row && T2::is_row);$/;"	m	struct:glue_intersect::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_bones.hpp	/^    static const bool is_row  = (T1::is_row && T2::is_row);$/;"	m	struct:glue_join_rows::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_bones.hpp	/^    static const bool is_row  = false;$/;"	m	struct:glue_join_cols::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_kron_bones.hpp	/^    static const bool is_row  = (T1::is_row && T2::is_row);$/;"	m	struct:glue_kron::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_bones.hpp	/^    static const bool is_row  = T1::is_row;$/;"	m	struct:glue_mixed_times::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_mvnrnd_bones.hpp	/^    static const bool is_row  = false;$/;"	m	struct:glue_mvnrnd_vec::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyfit_bones.hpp	/^    static const bool is_row  = false;$/;"	m	struct:glue_polyfit::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyval_bones.hpp	/^    static const bool is_row  = T2::is_row;$/;"	m	struct:glue_polyval::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^    static const bool is_row  = false;$/;"	m	struct:glue_solve_gen::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^    static const bool is_row  = false;$/;"	m	struct:glue_solve_tri::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^    static const bool is_row  = false;$/;"	m	struct:glue_solve_tri_default::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^    static const bool is_row  = T1::is_row;$/;"	m	struct:glue_times::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^    static const bool is_row  = T1::is_row;$/;"	m	struct:glue_times_diag::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/glue_trapz_bones.hpp	/^    static const bool is_row  = false;$/;"	m	struct:glue_trapz::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/mtGlue_bones.hpp	/^  static const bool is_row  = glue_type::template traits<T1,T2>::is_row;$/;"	m	class:mtGlue
is_row	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_bones.hpp	/^  static const bool is_row  = op_type::template traits<T1>::is_row;$/;"	m	class:mtOp
is_row	lib/armadillo-9.800.2/include/armadillo_bits/mtSpGlue_bones.hpp	/^  static const bool is_row  = spglue_type::template traits<T1,T2>::is_row;$/;"	m	class:mtSpGlue
is_row	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_bones.hpp	/^  static const bool is_row  = spop_type::template traits<T1>::is_row;$/;"	m	class:mtSpOp
is_row	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_bones.hpp	/^    static const bool is_row  = T1::is_col;  \/\/ deliberately swapped$/;"	m	struct:op_htrans2::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_bones.hpp	/^    static const bool is_row  = T1::is_col;  \/\/ deliberately swapped$/;"	m	struct:op_htrans::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^    static const bool is_row  = T1::is_col;  \/\/ deliberately swapped$/;"	m	struct:op_strans2::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^    static const bool is_row  = T1::is_col;  \/\/ deliberately swapped$/;"	m	struct:op_strans::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:spdiagview
is_row	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_bones.hpp	/^    static const bool is_row  = (T1::is_row && T2::is_row);$/;"	m	struct:spglue_join_rows::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_bones.hpp	/^    static const bool is_row  = false;$/;"	m	struct:spglue_join_cols::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/spglue_kron_bones.hpp	/^    static const bool is_row  = (T1::is_row && T2::is_row);$/;"	m	struct:spglue_kron::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^    static const bool is_row  = T1::is_row;$/;"	m	struct:spglue_times::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^    static const bool is_row  = T1::is_row;$/;"	m	struct:spglue_times_misc::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^    static const bool is_row  = T1::is_row;$/;"	m	struct:spglue_times_mixed::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/spop_htrans_bones.hpp	/^    static const bool is_row  = T1::is_col;  \/\/ deliberately swapped$/;"	m	struct:spop_htrans::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/spop_strans_bones.hpp	/^    static const bool is_row  = T1::is_col;  \/\/ deliberately swapped$/;"	m	struct:spop_strans::traits
is_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:subview
is_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:subview_col
is_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:subview_row_htrans
is_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:subview_row_strans
is_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_row  = true;$/;"	m	class:subview_row
is_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:subview_elem1
is_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:subview_elem2
is_row	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:xtrans_mat
is_row	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_bones.hpp	/^  static const bool is_row  = false;$/;"	m	class:xvec_htrans
is_rowvec	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::is_rowvec() const$/;"	f	class:Base
is_rowvec	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::is_rowvec() const$/;"	f	class:MapMat
is_rowvec	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::is_rowvec() const$/;"	f	class:Mat
is_rowvec	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::is_rowvec() const$/;"	f	class:SpBase
is_rowvec	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::is_rowvec() const$/;"	f	class:SpMat
is_s16	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_s16$/;"	s
is_s16	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_s16<s16>$/;"	s
is_s32	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_s32$/;"	s
is_s32	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_s32<s32>$/;"	s
is_s64	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  struct is_s64$/;"	s
is_s64	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  struct is_s64<s64>$/;"	s
is_s8	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_s8$/;"	s
is_s8	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_s8<s8>$/;"	s
is_same_type	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_same_type$/;"	s
is_same_type	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_same_type<T1,T1>$/;"	s
is_signed	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_signed$/;"	s
is_signed	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_signed<u16>    { static const bool value = false; };$/;"	s
is_signed	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_signed<u32>    { static const bool value = false; };$/;"	s
is_signed	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_signed<u64>    { static const bool value = false; };$/;"	s
is_signed	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_signed<u8>     { static const bool value = false; };$/;"	s
is_signed	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_signed<ulng_t> { static const bool value = false; };$/;"	s
is_simple	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_bones.hpp	/^  static const bool is_simple = (is_same_type<gen_type, gen_ones>::value) || (is_same_type<gen_type, gen_zeros>::value); $/;"	m	class:GenCube
is_simple	lib/armadillo-9.800.2/include/armadillo_bits/Gen_bones.hpp	/^  static const bool is_simple = (is_same_type<gen_type, gen_ones>::value) || (is_same_type<gen_type, gen_zeros>::value); $/;"	m	class:Gen
is_slng_t	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_slng_t$/;"	s
is_slng_t	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_slng_t<slng_t>$/;"	s
is_slng_t_32	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_slng_t_32$/;"	s
is_slng_t_32	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_slng_t_32<slng_t>$/;"	s
is_slng_t_64	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_slng_t_64$/;"	s
is_slng_t_64	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_slng_t_64<slng_t>$/;"	s
is_sorted	lib/armadillo-9.800.2/docs.html	/^<a name="is_sorted"><\/a>$/;"	a
is_sorted	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::is_sorted(const char* direction) const$/;"	f	class:Mat
is_sorted	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::is_sorted(const char* direction, const uword dim) const$/;"	f	class:Mat
is_sorted_helper	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::is_sorted_helper(const comparator& comp, const uword dim) const$/;"	f	class:Mat
is_spdiagview	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_spdiagview$/;"	s
is_spdiagview	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_spdiagview< spdiagview<eT> >$/;"	s
is_square	lib/armadillo-9.800.2/docs.html	/^<a name="is_square"><\/a>$/;"	a
is_square	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::is_square() const$/;"	f	class:Base
is_square	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::is_square() const$/;"	f	class:MapMat
is_square	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::is_square() const$/;"	f	class:Mat
is_square	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::is_square() const$/;"	f	class:SpBase
is_square	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::is_square() const$/;"	f	class:SpMat
is_subview	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview$/;"	s
is_subview	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview< const subview<eT> >$/;"	s
is_subview	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview< subview<eT> >$/;"	s
is_subview_col	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_col$/;"	s
is_subview_col	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_col< const subview_col<eT> >$/;"	s
is_subview_col	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_col< subview_col<eT> >$/;"	s
is_subview_cube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_cube$/;"	s
is_subview_cube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_cube< const subview_cube<eT> >$/;"	s
is_subview_cube	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_cube< subview_cube<eT> >$/;"	s
is_subview_cube_slices	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_cube_slices$/;"	s
is_subview_cube_slices	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_cube_slices< const subview_cube_slices<eT,T1> >$/;"	s
is_subview_cube_slices	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_cube_slices< subview_cube_slices<eT,T1> >$/;"	s
is_subview_elem1	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_elem1$/;"	s
is_subview_elem1	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_elem1< const subview_elem1<eT, T1> >$/;"	s
is_subview_elem1	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_elem1< subview_elem1<eT, T1> >$/;"	s
is_subview_elem2	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_elem2$/;"	s
is_subview_elem2	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_elem2< const subview_elem2<eT, T1, T2> >$/;"	s
is_subview_elem2	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_elem2< subview_elem2<eT, T1, T2> >$/;"	s
is_subview_row	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_row$/;"	s
is_subview_row	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_row< const subview_row<eT> >$/;"	s
is_subview_row	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_subview_row< subview_row<eT> >$/;"	s
is_supported_arma_hdf5_type	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^is_supported_arma_hdf5_type(hid_t datatype)$/;"	f	namespace:hdf5_misc
is_supported_blas_type	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_supported_blas_type$/;"	s
is_supported_elem_type	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_supported_elem_type$/;"	s
is_sword	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_sword$/;"	s
is_sword	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_sword<sword>$/;"	s
is_symmetric	lib/armadillo-9.800.2/docs.html	/^<a name="is_symmetric"><\/a>$/;"	a
is_symmetric	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::is_symmetric() const$/;"	f	class:Base
is_symmetric	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::is_symmetric(const typename get_pod_type<elem_type>::result tol) const$/;"	f	class:Base
is_symmetric	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::is_symmetric() const$/;"	f	class:SpBase
is_symmetric	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::is_symmetric(const typename get_pod_type<elem_type>::result tol) const$/;"	f	class:SpBase
is_symmetric	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::is_symmetric() const$/;"	f	class:SpMat
is_symmetric	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::is_symmetric(const typename get_pod_type<elem_type>::result tol) const$/;"	f	class:SpMat
is_sympd	lib/armadillo-9.800.2/docs.html	/^<a name="is_sympd"><\/a>$/;"	a
is_sympd	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base_extra_yes<elem_type,derived>::is_sympd() const$/;"	f	class:Base_extra_yes
is_sympd	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base_extra_yes<elem_type,derived>::is_sympd(typename get_pod_type<elem_type>::result tol) const$/;"	f	class:Base_extra_yes
is_tril	lib/armadillo-9.800.2/include/armadillo_bits/trimat_helper.hpp	/^is_tril(const Mat<eT>& A)$/;"	f	namespace:trimat_helper
is_trimat	lib/armadillo-9.800.2/docs.html	/^<a name="is_trimat"><\/a>$/;"	a
is_trimatl	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::is_trimatl() const$/;"	f	class:Base
is_trimatl	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::is_trimatl() const$/;"	f	class:SpBase
is_trimatu	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::is_trimatu() const$/;"	f	class:Base
is_trimatu	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::is_trimatu() const$/;"	f	class:SpBase
is_triu	lib/armadillo-9.800.2/include/armadillo_bits/trimat_helper.hpp	/^is_triu(const Mat<eT>& A)$/;"	f	namespace:trimat_helper
is_u16	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_u16$/;"	s
is_u16	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_u16<u16>$/;"	s
is_u32	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_u32$/;"	s
is_u32	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_u32<u32>$/;"	s
is_u64	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  struct is_u64$/;"	s
is_u64	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  struct is_u64<u64>$/;"	s
is_u8	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_u8$/;"	s
is_u8	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_u8<u8>$/;"	s
is_ulng_t	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_ulng_t$/;"	s
is_ulng_t	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_ulng_t<ulng_t>$/;"	s
is_ulng_t_32	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_ulng_t_32$/;"	s
is_ulng_t_32	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_ulng_t_32<ulng_t>$/;"	s
is_ulng_t_64	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_ulng_t_64$/;"	s
is_ulng_t_64	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_ulng_t_64<ulng_t>$/;"	s
is_uword	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_uword$/;"	s
is_uword	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct is_uword<uword>$/;"	s
is_vec	lib/armadillo-9.800.2/docs.html	/^<a name="is_vec"><\/a>$/;"	a
is_vec	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::is_vec() const$/;"	f	class:Base
is_vec	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::is_vec() const$/;"	f	class:MapMat
is_vec	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::is_vec() const$/;"	f	class:Mat::fixed
is_vec	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::is_vec() const$/;"	f	class:Mat
is_vec	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::is_vec() const$/;"	f	class:SpBase
is_vec	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::is_vec() const$/;"	f	class:SpMat
is_vec	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::is_vec() const$/;"	f	class:SpSubview
is_vec	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::is_vec() const$/;"	f	class:subview
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:Col
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:Col::fixed
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/CubeToMatOp_bones.hpp	/^  static const bool is_xvec = op_type::template traits<T1>::is_xvec;$/;"	m	class:CubeToMatOp
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Gen_bones.hpp	/^  static const bool is_xvec = T1::is_xvec;$/;"	m	class:Gen
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	struct:Glue_traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^  static const bool is_xvec = glue_type::template traits<T1,T2>::is_xvec;$/;"	m	struct:Glue_traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:MapMat
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:Mat
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:Mat::fixed
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	struct:Op_traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^  static const bool is_xvec = op_type::template traits<T1>::is_xvec;$/;"	m	struct:Op_traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = CubeToMatOp<T1, op_type>::is_xvec;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = Gen<T1, gen_randn>::is_xvec;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = Gen<T1, gen_randu>::is_xvec;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = Gen<T1, gen_type>::is_xvec;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = Glue<T1, T2, glue_type>::is_xvec;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = Op<T1, op_htrans>::is_xvec;$/;"	m	struct:Proxy_xtrans_vector
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = Op<T1, op_strans>::is_xvec;$/;"	m	struct:Proxy_xtrans_vector
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = Op<T1, op_type>::is_xvec;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = Proxy_xtrans::is_xvec;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = SpToDOp<T1, op_type>::is_xvec;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = T1::is_xvec;$/;"	m	struct:Proxy_fixed
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = eGlue<T1, T2, eglue_type>::is_xvec;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = eOp< Op<T1, op_htrans>, eop_scalar_times>::is_xvec;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = eOp<T1, eop_type>::is_xvec;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = false;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = false;$/;"	m	class:Proxy_diagvec_expr
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = false;$/;"	m	class:Proxy_diagvec_mat
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = false;$/;"	m	class:Proxy_vectorise_col_expr
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = false;$/;"	m	class:Proxy_vectorise_col_mat
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = false;$/;"	m	struct:Proxy_subview_row_htrans_cx
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = false;$/;"	m	struct:Proxy_subview_row_htrans_non_cx
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = false;$/;"	m	struct:Proxy_xtrans_default
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = mtGlue<out_eT, T1, T2, glue_type>::is_xvec;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = mtOp<out_eT, T1, op_type>::is_xvec;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool is_xvec = true;$/;"	m	class:Proxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:Row
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:Row::fixed
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:SpCol
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/SpGlue_bones.hpp	/^  static const bool is_xvec = spglue_type::template traits<T1,T2>::is_xvec;$/;"	m	class:SpGlue
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:SpMat
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_bones.hpp	/^  static const bool is_xvec = op_type::template traits<T1>::is_xvec;$/;"	m	class:SpOp
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_xvec = SpGlue<T1, T2, spglue_type>::is_xvec;$/;"	m	class:SpProxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_xvec = SpOp<T1, spop_type>::is_xvec;$/;"	m	class:SpProxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_xvec = false;$/;"	m	class:SpProxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_xvec = mtSpGlue<out_eT, T1, T2, spglue_type>::is_xvec;$/;"	m	class:SpProxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool is_xvec = mtSpOp<out_eT, T1, spop_type>::is_xvec;$/;"	m	class:SpProxy
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:SpRow
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:SpSubview
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/SpToDOp_bones.hpp	/^  static const bool is_xvec = op_type::template traits<T1>::is_xvec;$/;"	m	class:SpToDOp
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_xvec = (T1::is_xvec || T2::is_xvec);$/;"	m	struct:traits_glue_or::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_xvec = T1::is_xvec;$/;"	m	struct:traits_op_passthru::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:traits_glue_default::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:traits_op_col::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:traits_op_default::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:traits_op_row::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^    static const bool is_xvec = true;$/;"	m	struct:traits_op_xvec::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/diagview_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:diagview
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_bones.hpp	/^  static const bool is_xvec = (Proxy<T1>::is_xvec || Proxy<T2>::is_xvec);$/;"	m	class:eGlue
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^  static const bool is_xvec = Proxy<T1>::is_xvec;$/;"	m	class:eOp
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_affmul_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_affmul::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_conv_bones.hpp	/^    static const bool is_xvec = T1::is_xvec;$/;"	m	struct:glue_conv::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_cor_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_cor::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_cov_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_cov::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_cross_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_cross::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_hist_bones.hpp	/^    static const bool is_xvec = T1::is_xvec;$/;"	m	struct:glue_hist_default::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_histc_bones.hpp	/^    static const bool is_xvec = T1::is_xvec;$/;"	m	struct:glue_histc_default::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_intersect_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_intersect::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_join_cols::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_join_rows::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_kron_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_kron::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_mixed_times::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_mvnrnd_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_mvnrnd_vec::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyfit_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_polyfit::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyval_bones.hpp	/^    static const bool is_xvec = T2::is_xvec;$/;"	m	struct:glue_polyval::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_solve_gen::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_solve_tri::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_solve_tri_default::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_times::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:glue_times_diag::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/glue_trapz_bones.hpp	/^    static const bool is_xvec = true;$/;"	m	struct:glue_trapz::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/mtGlue_bones.hpp	/^  static const bool is_xvec = glue_type::template traits<T1,T2>::is_xvec;$/;"	m	class:mtGlue
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_bones.hpp	/^  static const bool is_xvec = op_type::template traits<T1>::is_xvec;$/;"	m	class:mtOp
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/mtSpGlue_bones.hpp	/^  static const bool is_xvec = spglue_type::template traits<T1,T2>::is_xvec;$/;"	m	class:mtSpGlue
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_bones.hpp	/^  static const bool is_xvec = spop_type::template traits<T1>::is_xvec;$/;"	m	class:mtSpOp
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_bones.hpp	/^    static const bool is_xvec = T1::is_xvec;$/;"	m	struct:op_htrans2::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_bones.hpp	/^    static const bool is_xvec = T1::is_xvec;$/;"	m	struct:op_htrans::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^    static const bool is_xvec = T1::is_xvec;$/;"	m	struct:op_strans2::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^    static const bool is_xvec = T1::is_xvec;$/;"	m	struct:op_strans::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:spdiagview
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:spglue_join_cols::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:spglue_join_rows::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/spglue_kron_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:spglue_kron::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:spglue_times::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:spglue_times_misc::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^    static const bool is_xvec = false;$/;"	m	struct:spglue_times_mixed::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/spop_htrans_bones.hpp	/^    static const bool is_xvec = T1::is_xvec;$/;"	m	struct:spop_htrans::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/spop_strans_bones.hpp	/^    static const bool is_xvec = T1::is_xvec;$/;"	m	struct:spop_strans::traits
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:subview
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:subview_col
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:subview_row
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:subview_row_htrans
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:subview_row_strans
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:subview_elem1
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:subview_elem2
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_bones.hpp	/^  static const bool is_xvec = false;$/;"	m	class:xtrans_mat
is_xvec	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_bones.hpp	/^  static const bool is_xvec = true;$/;"	m	class:xvec_htrans
iterator	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  typedef       eT*       iterator;$/;"	t	class:Cube
iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  typedef       eT*       iterator;$/;"	t	class:Mat
iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    inline iterator() : const_iterator() { }$/;"	f	class:SpMat::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    inline iterator(SpMat& in_M, uword in_row, uword in_col) : const_iterator(in_M, in_row, in_col) { }$/;"	f	class:SpMat::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    inline iterator(SpMat& in_M, uword in_row, uword in_col, uword in_pos) : const_iterator(in_M, in_row, in_col, in_pos) { }$/;"	f	class:SpMat::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    inline iterator(SpMat& in_M, uword initial_pos = 0) : const_iterator(in_M, initial_pos) { }$/;"	f	class:SpMat::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    inline iterator(const iterator& other) : const_iterator(other) { }$/;"	f	class:SpMat::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  class iterator : public const_iterator$/;"	c	class:SpMat
iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    inline iterator(SpSubview& in_M, const uword in_row, const uword in_col) : const_iterator(in_M, in_row, in_col) { }$/;"	f	class:SpSubview::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    inline iterator(SpSubview& in_M, const uword in_row, const uword in_col, const uword in_pos, const uword in_skip_pos) : const_iterator(in_M, in_row, in_col, in_pos, in_skip_pos) { }$/;"	f	class:SpSubview::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    inline iterator(SpSubview& in_M, const uword initial_pos = 0) : const_iterator(in_M, initial_pos) { }$/;"	f	class:SpSubview::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    inline iterator(const iterator& other) : const_iterator(other) { }$/;"	f	class:SpSubview::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  class iterator : public const_iterator$/;"	c	class:SpSubview
iterator	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^  class iterator$/;"	c	class:field
iterator	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::iterator::iterator(field<oT>& in_M, const bool at_end)$/;"	f	class:field::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  class iterator$/;"	c	class:subview
iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^  class iterator$/;"	c	class:subview_cube
iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::iterator::iterator()$/;"	f	class:subview_cube::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::iterator::iterator(const iterator& X)$/;"	f	class:subview_cube::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::iterator::iterator(subview_cube<eT>& in_sv, const uword in_row, const uword in_col, const uword in_slice)$/;"	f	class:subview_cube::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::iterator::iterator()$/;"	f	class:subview::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::iterator::iterator(const iterator& X)$/;"	f	class:subview::iterator
iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::iterator::iterator(subview<eT>& in_sv, const uword in_row, const uword in_col)$/;"	f	class:subview::iterator
iterator_base	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  class iterator_base$/;"	c	class:SpMat
iterator_base	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::iterator_base::iterator_base()$/;"	f	class:SpMat::iterator_base
iterator_base	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::iterator_base::iterator_base(const SpMat<eT>& in_M)$/;"	f	class:SpMat::iterator_base
iterator_base	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::iterator_base::iterator_base(const SpMat<eT>& in_M, const uword in_col, const uword in_pos)$/;"	f	class:SpMat::iterator_base
iterator_base	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  class iterator_base$/;"	c	class:SpSubview
iterator_base	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::iterator_base::iterator_base(const SpSubview<eT>& in_M)$/;"	f	class:SpSubview::iterator_base
iterator_base	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::iterator_base::iterator_base(const SpSubview<eT>& in_M, const uword in_col, const uword in_pos)$/;"	f	class:SpSubview::iterator_base
iterator_category	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:Mat::const_row_col_iterator
iterator_category	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:Mat::const_row_iterator
iterator_category	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:Mat::row_col_iterator
iterator_category	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:Mat::row_iterator
iterator_category	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:SpMat::iterator_base
iterator_category	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:SpSubview::iterator_base
iterator_category	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:subview::const_iterator
iterator_category	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:subview::const_row_iterator
iterator_category	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:subview::iterator
iterator_category	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:subview::row_iterator
iterator_category	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:subview_cube::const_iterator
iterator_category	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:subview_cube::iterator
iterator_mean	lib/armadillo-9.800.2/include/armadillo_bits/spop_mean_meat.hpp	/^spop_mean::iterator_mean(T1& it, const T1& end, const uword n_zero, const eT junk)$/;"	f	class:spop_mean
iterator_mean_robust	lib/armadillo-9.800.2/include/armadillo_bits/spop_mean_meat.hpp	/^spop_mean::iterator_mean_robust(T1& it, const T1& end, const uword n_zero, const eT junk)$/;"	f	class:spop_mean
iterator_var	lib/armadillo-9.800.2/include/armadillo_bits/spop_var_meat.hpp	/^spop_var::iterator_var$/;"	f	class:spop_var
iterators_cube	lib/armadillo-9.800.2/docs.html	/^<a name="iterators_cube"><\/a>$/;"	a
iterators_mat	lib/armadillo-9.800.2/docs.html	/^<a name="iterators_mat"><\/a>$/;"	a
iterators_spmat	lib/armadillo-9.800.2/docs.html	/^<a name="iterators_spmat"><\/a>$/;"	a
iterators_submat	lib/armadillo-9.800.2/docs.html	/^<a name="iterators_submat"><\/a>$/;"	a
ivec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <sword> ivec;$/;"	t
ivec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ivec::fixed<2> ivec2;$/;"	t
ivec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ivec::fixed<3> ivec3;$/;"	t
ivec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ivec::fixed<4> ivec4;$/;"	t
ivec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ivec::fixed<5> ivec5;$/;"	t
ivec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ivec::fixed<6> ivec6;$/;"	t
ivec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ivec::fixed<7> ivec7;$/;"	t
ivec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ivec::fixed<8> ivec8;$/;"	t
ivec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ivec::fixed<9> ivec9;$/;"	t
iwishrnd	lib/armadillo-9.800.2/docs.html	/^<a name="iwishrnd"><\/a>$/;"	a
iwishrnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_wishrnd.hpp	/^iwishrnd(Mat<typename T1::elem_type>& W, const Base<typename T1::elem_type, T1>& T, typename T1::elem_type df)$/;"	f
iwishrnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_wishrnd.hpp	/^iwishrnd(Mat<typename T1::elem_type>& W, const Base<typename T1::elem_type, T1>& T, typename T1::elem_type df, const Base<typename T1::elem_type, T2>& Dinv)$/;"	f
iwishrnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_wishrnd.hpp	/^iwishrnd(const Base<typename T1::elem_type, T1>& T, typename T1::elem_type df)$/;"	f
iwishrnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_wishrnd.hpp	/^iwishrnd(const Base<typename T1::elem_type, T1>& T, typename T1::elem_type df, const Base<typename T1::elem_type, T2>& Dinv)$/;"	f
join	lib/armadillo-9.800.2/docs.html	/^<a name="join"><\/a>$/;"	a
join_cols	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_cols(const Base<eT,T1>& A, const Base<eT,T2>& B, const Base<eT,T3>& C)$/;"	f
join_cols	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_cols(const Base<eT,T1>& A, const Base<eT,T2>& B, const Base<eT,T3>& C, const Base<eT,T4>& D)$/;"	f
join_cols	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_cols(const SpBase<eT,T1>& A, const SpBase<eT,T2>& B, const SpBase<eT,T3>& C)$/;"	f
join_cols	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_cols(const SpBase<eT,T1>& A, const SpBase<eT,T2>& B, const SpBase<eT,T3>& C, const SpBase<eT,T4>& D)$/;"	f
join_cols	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_cols(const SpBase<typename T1::elem_type,T1>& A, const SpBase<typename T1::elem_type,T2>& B)$/;"	f
join_cols	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_cols(const T1& A, const T2& B)$/;"	f
join_horiz	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_horiz(const Base<eT,T1>& A, const Base<eT,T2>& B, const Base<eT,T3>& C)$/;"	f
join_horiz	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_horiz(const Base<eT,T1>& A, const Base<eT,T2>& B, const Base<eT,T3>& C, const Base<eT,T4>& D)$/;"	f
join_horiz	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_horiz(const SpBase<eT,T1>& A, const SpBase<eT,T2>& B, const SpBase<eT,T3>& C)$/;"	f
join_horiz	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_horiz(const SpBase<eT,T1>& A, const SpBase<eT,T2>& B, const SpBase<eT,T3>& C, const SpBase<eT,T4>& D)$/;"	f
join_horiz	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_horiz(const SpBase<typename T1::elem_type,T1>& A, const SpBase<typename T1::elem_type,T2>& B)$/;"	f
join_horiz	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_horiz(const T1& A, const T2& B)$/;"	f
join_rows	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_rows(const Base<eT,T1>& A, const Base<eT,T2>& B, const Base<eT,T3>& C)$/;"	f
join_rows	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_rows(const Base<eT,T1>& A, const Base<eT,T2>& B, const Base<eT,T3>& C, const Base<eT,T4>& D)$/;"	f
join_rows	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_rows(const SpBase<eT,T1>& A, const SpBase<eT,T2>& B, const SpBase<eT,T3>& C)$/;"	f
join_rows	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_rows(const SpBase<eT,T1>& A, const SpBase<eT,T2>& B, const SpBase<eT,T3>& C, const SpBase<eT,T4>& D)$/;"	f
join_rows	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_rows(const SpBase<typename T1::elem_type,T1>& A, const SpBase<typename T1::elem_type,T2>& B)$/;"	f
join_rows	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_rows(const T1& A, const T2& B)$/;"	f
join_slices	lib/armadillo-9.800.2/docs.html	/^<a name="join_slices"><\/a>$/;"	a
join_slices	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_slices(const Base<typename T1::elem_type,T1>& A, const Base<typename T1::elem_type,T2>& B)$/;"	f
join_slices	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_slices(const Base<typename T1::elem_type,T1>& A, const BaseCube<typename T1::elem_type,T2>& B)$/;"	f
join_slices	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_slices(const BaseCube<typename T1::elem_type,T1>& A, const Base<typename T1::elem_type,T2>& B)$/;"	f
join_slices	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_slices(const BaseCube<typename T1::elem_type,T1>& A, const BaseCube<typename T1::elem_type,T2>& B)$/;"	f
join_vert	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_vert(const Base<eT,T1>& A, const Base<eT,T2>& B, const Base<eT,T3>& C)$/;"	f
join_vert	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_vert(const Base<eT,T1>& A, const Base<eT,T2>& B, const Base<eT,T3>& C, const Base<eT,T4>& D)$/;"	f
join_vert	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_vert(const SpBase<eT,T1>& A, const SpBase<eT,T2>& B, const SpBase<eT,T3>& C)$/;"	f
join_vert	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_vert(const SpBase<eT,T1>& A, const SpBase<eT,T2>& B, const SpBase<eT,T3>& C, const SpBase<eT,T4>& D)$/;"	f
join_vert	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_vert(const SpBase<typename T1::elem_type,T1>& A, const SpBase<typename T1::elem_type,T2>& B)$/;"	f
join_vert	lib/armadillo-9.800.2/include/armadillo_bits/fn_join.hpp	/^join_vert(const T1& A, const T2& B)$/;"	f
junk	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^  namespace junk$/;"	n
junk	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem_check.hpp	/^namespace junk$/;"	n
k	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT k;         \/\/!< Boltzmann constant (in joules per kelvin)$/;"	m	class:Datum
k	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::k         = eT(1.38064852e-23);$/;"	m	class:Datum
k	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT k()         {  return eT(1.38064852e-23); }$/;"	f	class:Phy
k	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    const eT k;$/;"	m	struct:priv::functor_scalar_times
k	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    const out_eT k;$/;"	m	struct:priv::functor_cx_scalar_times
k_e	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT k_e;       \/\/!< Coulomb's constant (in meters per farad)$/;"	m	class:Datum
k_e	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::k_e       = eT(8.9875517873681764e9);$/;"	m	class:Datum
k_e	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT k_e()       { return eT(8.9875517873681764e9); }$/;"	f	class:Phy
k_evk	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT k_evk;     \/\/!< Boltzmann constant (in eV\/K)$/;"	m	class:Datum
k_evk	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::k_evk     = eT(8.6173303e-5);$/;"	m	class:Datum
k_evk	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT k_evk()     {  return eT(8.6173303e-5); }$/;"	f	class:Phy
keep_existing	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^static const gmm_seed_keep_existing keep_existing;$/;"	v
km_iterate	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::km_iterate(const Mat<eT>& X, const uword max_iter, const bool verbose, const char* signature)$/;"	f	class:gmm_priv::gmm_diag
km_iterate	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::km_iterate(const Mat<eT>& X, const uword max_iter, const bool verbose)$/;"	f	class:gmm_priv::gmm_full
kmeans	lib/armadillo-9.800.2/docs.html	/^<a name="kmeans"><\/a>$/;"	a
kmeans	lib/armadillo-9.800.2/include/armadillo_bits/fn_kmeans.hpp	/^kmeans$/;"	f
kmeans_wrapper	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::kmeans_wrapper$/;"	f	class:gmm_priv::gmm_diag
kron	lib/armadillo-9.800.2/docs.html	/^<a name="kron"><\/a>$/;"	a
kron	lib/armadillo-9.800.2/include/armadillo_bits/fn_kron.hpp	/^kron(const Base<T,T1>& X, const Base<std::complex<T>,T2>& Y)$/;"	f
kron	lib/armadillo-9.800.2/include/armadillo_bits/fn_kron.hpp	/^kron(const Base<std::complex<T>,T1>& X, const Base<T,T2>& Y)$/;"	f
kron	lib/armadillo-9.800.2/include/armadillo_bits/fn_kron.hpp	/^kron(const Base<typename T1::elem_type,T1>& A, const Base<typename T1::elem_type,T2>& B)$/;"	f
kron	lib/armadillo-9.800.2/include/armadillo_bits/fn_kron.hpp	/^kron(const SpBase<typename T1::elem_type,T1>& A, const SpBase<typename T1::elem_type,T2>& B)$/;"	f
laenv	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  laenv(blas_int* ispec, char* name, char* opts, blas_int* n1, blas_int* n2, blas_int* n3, blas_int* n4, blas_len name_len, blas_len opts_len)$/;"	f	namespace:lapack
lahqr	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  lahqr(blas_int* wantt, blas_int* wantz, blas_int* n, blas_int* ilo, blas_int* ihi, eT* h, blas_int* ldh, eT* wr, eT* wi, blas_int* iloz, blas_int* ihiz, eT* z, blas_int* ldz, blas_int* info)$/;"	f	namespace:lapack
langb	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  langb(char* norm, blas_int* n, blas_int* kl, blas_int* ku, eT* ab, blas_int* ldab, typename get_pod_type<eT>::result* work)$/;"	f	namespace:lapack
lange	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  lange(char* norm, blas_int* m, blas_int* n, eT* a, blas_int* lda, typename get_pod_type<eT>::result* work)$/;"	f	namespace:lapack
lanhe	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  lanhe(char* norm, char* uplo, blas_int* n, eT* a, blas_int* lda, typename get_pod_type<eT>::result* work)$/;"	f	namespace:lapack
lansy	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  lansy(char* norm, char* uplo, blas_int* n, eT* a, blas_int* lda, typename get_pod_type<eT>::result* work)$/;"	f	namespace:lapack
lapack	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool lapack = false;$/;"	m	struct:arma_config
lapack	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool lapack = true;$/;"	m	struct:arma_config
lapack	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^namespace lapack$/;"	n
larnv	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  larnv(blas_int* idist, blas_int* iseed, const blas_int* n, eT* x)$/;"	f	namespace:lapack
learn	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::learn$/;"	f	class:gmm_priv::gmm_diag
learn	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::learn$/;"	f	class:gmm_priv::gmm_full
leq	lib/armadillo-9.800.2/include/armadillo_bits/cond_rel_meat.hpp	/^cond_rel<false>::leq(const eT, const eT)$/;"	f	class:cond_rel
leq	lib/armadillo-9.800.2/include/armadillo_bits/cond_rel_meat.hpp	/^cond_rel<true>::leq(const eT A, const eT B)$/;"	f	class:cond_rel
lgamma	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static                                      eT lgamma (const eT  x) { arma_ignore(x); arma_stop_logic_error("lgamma(): C++11 compiler required"); return eT(0); }$/;"	f	class:eop_aux
lgamma	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_cx_only<eT>::result lgamma (const eT& x) { arma_ignore(x); return eT(0);             }$/;"	f	class:eop_aux
lgamma	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_cx_only<eT>::result lgamma (const eT& x) { arma_ignore(x); return eT(0);        }$/;"	f	class:eop_aux
lgamma	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename     arma_real_only<eT>::result lgamma (const eT  x) { return std::lgamma(x);               }$/;"	f	class:eop_aux
lgamma	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename     arma_real_only<eT>::result lgamma (const eT  x) { return std::tr1::lgamma(x);               }$/;"	f	class:eop_aux
lgamma	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result lgamma (const eT  x) { return eT( std::lgamma(double(x)) ); }$/;"	f	class:eop_aux
lgamma	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result lgamma (const eT  x) { return eT( std::tr1::lgamma(double(x)) ); }$/;"	f	class:eop_aux
lgamma	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^lgamma(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
lgamma	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^lgamma(const T1& A)$/;"	f
likely_sympd	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const opts_likely_sympd likely_sympd;$/;"	m	namespace:solve_opts
line	include/catch.hpp	/^            line( _line )$/;"	f	struct:Catch::SourceLineInfo
line	include/catch.hpp	/^        std::size_t line;$/;"	m	struct:Catch::SourceLineInfo
line	lib/armadillo-9.800.2/tests/catch.hpp	/^        std::size_t line;$/;"	m	struct:Catch::SourceLineInfo
lineInfo	include/catch.hpp	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::AssertionInfo
lineInfo	lib/armadillo-9.800.2/tests/catch.hpp	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::AssertionInfo
linspace	lib/armadillo-9.800.2/docs.html	/^<a name="linspace"><\/a>$/;"	a
linspace	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^linspace$/;"	f
linspace	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^linspace(const double start, const double end, const uword num = 100u)$/;"	f
load	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::load(const hdf5_name& spec, const file_type type, const bool print_status)$/;"	f	class:Cube
load	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::load(const std::string name, const file_type type, const bool print_status)$/;"	f	class:Cube
load	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::load(std::istream& is, const file_type type, const bool print_status)$/;"	f	class:Cube
load	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::load(const hdf5_name& spec, const file_type type, const bool print_status)$/;"	f	class:Mat
load	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::load(const std::string name, const file_type type, const bool print_status)$/;"	f	class:Mat
load	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::load(std::istream& is, const file_type type, const bool print_status)$/;"	f	class:Mat
load	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::load(const std::string name, const file_type type, const bool print_status)$/;"	f	class:SpMat
load	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::load(std::istream& is, const file_type type, const bool print_status)$/;"	f	class:SpMat
load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::load(const std::string name, const file_type type, const bool print_status)$/;"	f	class:field
load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::load(std::istream& is, const file_type type, const bool print_status)$/;"	f	class:field
load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::load(field< Col<eT> >& x, const std::string& name, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::load(field< Col<eT> >& x, std::istream& is, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::load(field< Cube<eT> >& x, const std::string& name, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::load(field< Cube<eT> >& x, std::istream& is, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::load(field< Mat<eT> >& x, const std::string& name, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::load(field< Mat<eT> >& x, std::istream& is, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::load(field< Row<eT> >& x, const std::string& name, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::load(field< Row<eT> >& x, std::istream& is, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::load(field< std::string >& x, const std::string& name, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::load(field< std::string >& x, std::istream& is, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::load(field<oT>&, const std::string&, const file_type, std::string& err_msg)$/;"	f	class:field_aux
load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::load(field<oT>&, std::istream&, const file_type, std::string& err_msg)$/;"	f	class:field_aux
load	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::load(const std::string name)$/;"	f	class:gmm_priv::gmm_diag
load	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::load(const std::string name)$/;"	f	class:gmm_priv::gmm_full
load_and_convert_hdf5	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^load_and_convert_hdf5$/;"	f	namespace:hdf5_misc
load_arma_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_arma_ascii(Cube<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_arma_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_arma_ascii(Cube<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_arma_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_arma_ascii(Mat<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_arma_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_arma_ascii(Mat<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_arma_binary(Cube<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_arma_binary(Cube<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_arma_binary(Mat<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_arma_binary(Mat<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_arma_binary(SpMat<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_arma_binary(SpMat<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_arma_binary(field<T1>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_arma_binary(field<T1>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_auto_detect	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_auto_detect(Cube<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_auto_detect	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_auto_detect(Cube<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_auto_detect	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_auto_detect(Mat<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_auto_detect	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_auto_detect(Mat<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_auto_detect	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_auto_detect(field<T1>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_auto_detect	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_auto_detect(field<T1>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_coord_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_coord_ascii(SpMat< std::complex<T> >& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_coord_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_coord_ascii(SpMat<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_coord_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_coord_ascii(SpMat<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_csv_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_csv_ascii(Mat< std::complex<T> >& x, std::istream& f, std::string&)$/;"	f	class:diskio
load_csv_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_csv_ascii(Mat<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_csv_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_csv_ascii(Mat<eT>& x, std::istream& f, std::string&)$/;"	f	class:diskio
load_csv_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_csv_ascii(SpMat< std::complex<T> >& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_csv_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_csv_ascii(SpMat<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_csv_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_csv_ascii(SpMat<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_hdf5_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_hdf5_binary(Cube<eT>& x, const hdf5_name& spec, std::string& err_msg)$/;"	f	class:diskio
load_hdf5_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_hdf5_binary(Mat<eT>& x, const hdf5_name& spec, std::string& err_msg)$/;"	f	class:diskio
load_pgm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_pgm_binary(Mat< std::complex<T> >& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_pgm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_pgm_binary(Mat< std::complex<T> >& x, std::istream& is, std::string& err_msg)$/;"	f	class:diskio
load_pgm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_pgm_binary(Mat<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_pgm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_pgm_binary(Mat<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_ppm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_ppm_binary(Cube<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_ppm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_ppm_binary(Cube<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_ppm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_ppm_binary(field<T1>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_ppm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_ppm_binary(field<T1>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_raw_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_raw_ascii(Cube<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_raw_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_raw_ascii(Cube<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_raw_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_raw_ascii(Mat<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_raw_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_raw_ascii(Mat<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_raw_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_raw_binary(Cube<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_raw_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_raw_binary(Cube<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_raw_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_raw_binary(Mat<eT>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_raw_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_raw_binary(Mat<eT>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
load_std_string	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_std_string(field<std::string>& x, const std::string& name, std::string& err_msg)$/;"	f	class:diskio
load_std_string	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::load_std_string(field<std::string>& x, std::istream& f, std::string& err_msg)$/;"	f	class:diskio
log	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result log   (const eT x) { return eT( std::log  (double(x)) ); }$/;"	f	class:eop_aux
log	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result log   (const eT x) { return std::log  (x); }$/;"	f	class:eop_aux
log	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^log(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
log	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^log(const T1& A)$/;"	f
log10	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result log10 (const eT x) { return eT( std::log10(double(x)) ); }$/;"	f	class:eop_aux
log10	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result log10 (const eT x) { return std::log10(x); }$/;"	f	class:eop_aux
log10	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^log10(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
log10	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^log10(const T1& A)$/;"	f
log1p	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static                                        eT log1p (const eT  x) { arma_ignore(x); arma_stop_logic_error("log1p(): C++11 compiler required"); return eT(0); }$/;"	f	class:eop_aux
log1p	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename         arma_cx_only<eT>::result log1p (const eT& x) { arma_ignore(x); return eT(0);            }$/;"	f	class:eop_aux
log1p	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename         arma_cx_only<eT>::result log1p (const eT& x) { arma_ignore(x); return eT(0);       }$/;"	f	class:eop_aux
log1p	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_real_only<eT>::result log1p (const eT  x) { return std::log1p(x);               }$/;"	f	class:eop_aux
log1p	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_real_only<eT>::result log1p (const eT  x) { return std::tr1::log1p(x);               }$/;"	f	class:eop_aux
log1p	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename   arma_integral_only<eT>::result log1p (const eT  x) { return eT( std::log1p(double(x)) ); }$/;"	f	class:eop_aux
log1p	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename   arma_integral_only<eT>::result log1p (const eT  x) { return eT( std::tr1::log1p(double(x)) ); }$/;"	f	class:eop_aux
log1p	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^log1p(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
log1p	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^log1p(const T1& A)$/;"	f
log2	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	558;"	d
log2	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename         arma_cx_only<eT>::result log2 (const eT& x) { typedef typename get_pod_type<eT>::result T; return std::log(x) \/ T(0.69314718055994530942); }$/;"	f	class:eop_aux
log2	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_real_only<eT>::result log2 (const eT  x) { return std::log2(x);                                                                         }$/;"	f	class:eop_aux
log2	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename   arma_integral_only<eT>::result log2 (const eT  x) { return eT( std::log(double(x))\/ double(0.69314718055994530942) );                            }$/;"	f	class:eop_aux
log2	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result log2 (const eT  x) { typedef typename get_pod_type<eT>::result T; return std::log(x) \/ T(0.69314718055994530942); }$/;"	f	class:eop_aux
log2	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^log2(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
log2	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^log2(const T1& A)$/;"	f
log_add	lib/armadillo-9.800.2/docs.html	/^<a name="log_add"><\/a>$/;"	a
log_add	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^log_add(eT log_a, eT log_b)$/;"	f
log_add_exp	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^log_add_exp(eT log_a, eT log_b)$/;"	f
log_approx	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^template<typename T1> void log_approx(const T1&) { arma_stop_logic_error("unimplemented"); }$/;"	f
log_det	lib/armadillo-9.800.2/docs.html	/^<a name="log_det"><\/a>$/;"	a
log_det	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::log_det(eT& out_val, typename get_pod_type<eT>::result& out_sign, const Base<eT,T1>& X)$/;"	f	class:auxlib
log_det	lib/armadillo-9.800.2/include/armadillo_bits/fn_log_det.hpp	/^log_det$/;"	f
log_det_etc	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_bones.hpp	/^  arma_aligned Row<eT> log_det_etc;$/;"	m	class:gmm_priv::gmm_diag
log_det_etc	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_bones.hpp	/^  arma_aligned Row<eT>  log_det_etc;$/;"	m	class:gmm_priv::gmm_full
log_hefts	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_bones.hpp	/^  arma_aligned Row<eT> log_hefts;$/;"	m	class:gmm_priv::gmm_diag
log_hefts	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_bones.hpp	/^  arma_aligned Row<eT>  log_hefts;$/;"	m	class:gmm_priv::gmm_full
log_max	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT log_max;  \/\/!< log of the maximum representable value$/;"	m	class:Datum
log_max	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::log_max   = std::log(std::numeric_limits<eT>::max());$/;"	m	class:Datum
log_max	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT log_max()   { static const eT out = std::log(std::numeric_limits<eT>::max()); return out; }  \/\/ use datum::log_max instead$/;"	f	class:Math
log_min	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT log_min;  \/\/!< log of the minimum representable value$/;"	m	class:Datum
log_min	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::log_min   = std::log(std::numeric_limits<eT>::min());$/;"	m	class:Datum
log_min	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT log_min()   { static const eT out = std::log(std::numeric_limits<eT>::min()); return out; }  \/\/ use datum::log_min instead$/;"	f	class:Math
log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::log_p(const T1& expr, const gmm_empty_arg& junk1, typename enable_if<((is_arma_type<T1>::value) && (resolves_to_colvector<T1>::value == false))>::result* junk2) const$/;"	f	class:gmm_priv::gmm_diag
log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::log_p(const T1& expr, const gmm_empty_arg& junk1, typename enable_if<((is_arma_type<T1>::value) && (resolves_to_colvector<T1>::value == true))>::result* junk2) const$/;"	f	class:gmm_priv::gmm_diag
log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::log_p(const T1& expr, const uword gaus_id, typename enable_if<((is_arma_type<T1>::value) && (resolves_to_colvector<T1>::value == false))>::result* junk2) const$/;"	f	class:gmm_priv::gmm_diag
log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::log_p(const T1& expr, const uword gaus_id, typename enable_if<((is_arma_type<T1>::value) && (resolves_to_colvector<T1>::value == true))>::result* junk2) const$/;"	f	class:gmm_priv::gmm_diag
log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::log_p(const T1& expr, const gmm_empty_arg& junk1, typename enable_if<((is_arma_type<T1>::value) && (resolves_to_colvector<T1>::value == false))>::result* junk2) const$/;"	f	class:gmm_priv::gmm_full
log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::log_p(const T1& expr, const gmm_empty_arg& junk1, typename enable_if<((is_arma_type<T1>::value) && (resolves_to_colvector<T1>::value == true))>::result* junk2) const$/;"	f	class:gmm_priv::gmm_full
log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::log_p(const T1& expr, const uword gaus_id, typename enable_if<((is_arma_type<T1>::value) && (resolves_to_colvector<T1>::value == false))>::result* junk2) const$/;"	f	class:gmm_priv::gmm_full
log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::log_p(const T1& expr, const uword gaus_id, typename enable_if<((is_arma_type<T1>::value) && (resolves_to_colvector<T1>::value == true))>::result* junk2) const$/;"	f	class:gmm_priv::gmm_full
logging	lib/armadillo-9.800.2/docs.html	/^<a name="logging"><\/a>$/;"	a
logmat	lib/armadillo-9.800.2/docs.html	/^<a name="logmat"><\/a>$/;"	a
logmat	lib/armadillo-9.800.2/include/armadillo_bits/fn_logmat.hpp	/^logmat(Mat< std::complex<typename T1::elem_type> >& Y, const Base<typename T1::elem_type,T1>& X, const uword n_iters = 100u)$/;"	f
logmat	lib/armadillo-9.800.2/include/armadillo_bits/fn_logmat.hpp	/^logmat(Mat<typename T1::elem_type>& Y, const Base<typename T1::elem_type,T1>& X, const uword n_iters = 100u)$/;"	f
logmat	lib/armadillo-9.800.2/include/armadillo_bits/fn_logmat.hpp	/^logmat(const Base<typename T1::elem_type,T1>& X, const uword n_iters = 100u)$/;"	f
logmat_sympd	lib/armadillo-9.800.2/docs.html	/^<a name="logmat_sympd"><\/a>$/;"	a
logmat_sympd	lib/armadillo-9.800.2/include/armadillo_bits/fn_logmat.hpp	/^logmat_sympd(Mat<typename T1::elem_type>& Y, const Base<typename T1::elem_type,T1>& X)$/;"	f
logmat_sympd	lib/armadillo-9.800.2/include/armadillo_bits/fn_logmat.hpp	/^logmat_sympd(const Base<typename T1::elem_type,T1>& X)$/;"	f
logspace	lib/armadillo-9.800.2/docs.html	/^<a name="logspace"><\/a>$/;"	a
logspace	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^logspace$/;"	f
logspace	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^logspace(const double A, const double B, const uword N = 50u)$/;"	f
lookahead_etree	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    yes_no_t      lookahead_etree;$/;"	m	struct:arma::superlu::__anon6
lsub	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int*       lsub;$/;"	m	struct:arma::superlu::__anon9
lt	lib/armadillo-9.800.2/include/armadillo_bits/cond_rel_meat.hpp	/^cond_rel<false>::lt(const eT, const eT)$/;"	f	class:cond_rel
lt	lib/armadillo-9.800.2/include/armadillo_bits/cond_rel_meat.hpp	/^cond_rel<true>::lt(const eT A, const eT B)$/;"	f	class:cond_rel
lu	lib/armadillo-9.800.2/docs.html	/^<a name="lu"><\/a>$/;"	a
lu	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::lu(Mat<eT>& L, Mat<eT>& U, Mat<eT>& P, const Base<eT,T1>& X)$/;"	f	class:auxlib
lu	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::lu(Mat<eT>& L, Mat<eT>& U, const Base<eT,T1>& X)$/;"	f	class:auxlib
lu	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::lu(Mat<eT>& L, Mat<eT>& U, podarray<blas_int>& ipiv, const Base<eT,T1>& X)$/;"	f	class:auxlib
lu	lib/armadillo-9.800.2/include/armadillo_bits/fn_lu.hpp	/^lu$/;"	f
lu_rcond	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::lu_rcond(const Mat< std::complex<T> >& A, const T norm_val)$/;"	f	class:auxlib
lu_rcond	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::lu_rcond(const Mat<eT>& A, const eT norm_val)$/;"	f	class:auxlib
lu_rcond_band	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::lu_rcond_band(const Mat< std::complex<T> >& AB, const uword KL, const uword KU, const podarray<blas_int>& ipiv, const T norm_val)$/;"	f	class:auxlib
lu_rcond_band	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::lu_rcond_band(const Mat<eT>& AB, const uword KL, const uword KU, const podarray<blas_int>& ipiv, const eT norm_val)$/;"	f	class:auxlib
lu_rcond_sympd	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::lu_rcond_sympd(const Mat< std::complex<T> >& A, const T norm_val)$/;"	f	class:auxlib
lu_rcond_sympd	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::lu_rcond_sympd(const Mat<eT>& A, const eT norm_val)$/;"	f	class:auxlib
lusup	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    void*      lusup;$/;"	m	struct:arma::superlu::__anon9
m	lib/armadillo-9.800.2/include/armadillo_bits/CubeToMatOp_bones.hpp	/^  arma_aligned const T1&       m;            \/\/!< the operand; must be derived from BaseCube$/;"	m	class:CubeToMatOp
m	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_bones.hpp	/^  arma_aligned const T1&       m;            \/\/!< the operand; must be derived from BaseCube$/;"	m	class:OpCube
m	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^  arma_aligned const T1&       m;            \/\/!< the operand; must be derived from Base$/;"	m	class:Op
m	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_bones.hpp	/^  arma_aligned const T1&       m;            \/\/!< the operand; must be derived from SpBase$/;"	m	class:SpOp
m	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  const SpMat<eT>& m;$/;"	m	class:SpSubview
m	lib/armadillo-9.800.2/include/armadillo_bits/SpToDOp_bones.hpp	/^  arma_aligned const T1&       m;            \/\/!< the operand; must be derived from SpBase$/;"	m	class:SpToDOp
m	lib/armadillo-9.800.2/include/armadillo_bits/diagview_bones.hpp	/^  arma_aligned const Mat<eT>& m;$/;"	m	class:diagview
m	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_bones.hpp	/^  arma_aligned const T1&    m;            \/\/!< the operand; must be derived from BaseCube$/;"	m	class:mtOpCube
m	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_bones.hpp	/^  arma_aligned const T1&    m;            \/\/!< the operand; must be derived from Base$/;"	m	class:mtOp
m	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_bones.hpp	/^  arma_aligned const T1&    m;            \/\/!< the operand; must be derived from SpBase$/;"	m	class:mtSpOp
m	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_bones.hpp	/^  arma_aligned const SpMat<eT>& m;$/;"	m	class:spdiagview
m	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  arma_aligned const Mat<eT>& m;$/;"	m	class:subview
m	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^  arma_aligned const Cube<eT>& m;$/;"	m	class:subview_cube
m	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_bones.hpp	/^  arma_aligned const Cube<eT>& m;$/;"	m	class:subview_cube_slices
m	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_bones.hpp	/^  arma_aligned const Mat<eT>&        m;$/;"	m	class:subview_elem1
m	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_bones.hpp	/^  arma_aligned const Mat<eT>& m;$/;"	m	class:subview_elem2
m_args	include/catch.hpp	/^        std::vector<Arg> m_args;$/;"	m	struct:Catch::Parser
m_assertionInfo	lib/armadillo-9.800.2/tests/catch.hpp	/^        AssertionInfo m_assertionInfo;$/;"	m	class:Catch::ResultBuilder
m_cachedToString	lib/armadillo-9.800.2/tests/catch.hpp	/^            mutable std::string m_cachedToString;$/;"	m	class:Catch::Matchers::Impl::MatcherUntypedBase
m_count	lib/armadillo-9.800.2/tests/catch.hpp	/^        std::size_t m_count;$/;"	m	struct:Catch::pluralise
m_data	include/catch.hpp	/^            m_data( other.m_data )$/;"	f	class:Catch::StringRef
m_data	include/catch.hpp	/^        char* m_data = nullptr;$/;"	m	class:Catch::StringRef
m_data	lib/armadillo-9.800.2/tests/catch.hpp	/^        AssertionResultData m_data;$/;"	m	class:Catch::ResultBuilder
m_description	include/catch.hpp	/^        std::string m_description;$/;"	m	class:Catch::ParserRefImpl
m_e	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT m_e;       \/\/!< electron mass (in kg)$/;"	m	class:Datum
m_e	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::m_e       = eT(9.10938356e-31);$/;"	m	class:Datum
m_e	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT m_e()       { return eT(9.10938356e-31); }$/;"	f	class:Phy
m_exeName	include/catch.hpp	/^        mutable ExeName m_exeName;$/;"	m	struct:Catch::Parser
m_guardException	lib/armadillo-9.800.2/tests/catch.hpp	/^        bool m_guardException;$/;"	m	class:Catch::ResultBuilder
m_hint	include/catch.hpp	/^        std::string m_hint;$/;"	m	class:Catch::ParserRefImpl
m_index	include/catch.hpp	/^        std::size_t m_index;$/;"	m	class:Catch::ReusableStringStream
m_info	lib/armadillo-9.800.2/tests/catch.hpp	/^        AssertionInfo m_info;$/;"	m	class:Catch::AssertionResult
m_label	lib/armadillo-9.800.2/tests/catch.hpp	/^        std::string m_label;$/;"	m	struct:Catch::pluralise
m_lineInfo	lib/armadillo-9.800.2/tests/catch.hpp	/^        SourceLineInfo m_lineInfo;$/;"	m	class:Catch::NotImplementedException
m_matchers	lib/armadillo-9.800.2/tests/catch.hpp	/^            std::vector<MatcherBase<ArgT> const*> m_matchers;$/;"	m	struct:Catch::Matchers::Impl::MatchAllOf
m_matchers	lib/armadillo-9.800.2/tests/catch.hpp	/^            std::vector<MatcherBase<ArgT> const*> m_matchers;$/;"	m	struct:Catch::Matchers::Impl::MatchAnyOf
m_method	lib/armadillo-9.800.2/tests/catch.hpp	/^    void (C::*m_method)();$/;"	m	class:Catch::MethodTestCase
m_name	include/catch.hpp	/^            StringRef m_name;$/;"	m	struct:Catch::Detail::EnumInfo
m_name	include/catch.hpp	/^        std::shared_ptr<std::string> m_name;$/;"	m	class:Catch::ExeName
m_optNames	include/catch.hpp	/^        std::vector<std::string> m_optNames;$/;"	m	class:Catch::Opt
m_optionality	include/catch.hpp	/^        Optionality m_optionality = Optionality::Optional;$/;"	m	class:Catch::ParserRefImpl
m_options	include/catch.hpp	/^        std::vector<Opt> m_options;$/;"	m	struct:Catch::Parser
m_oss	include/catch.hpp	/^        std::ostream* m_oss;$/;"	m	class:Catch::ReusableStringStream
m_p	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT m_p;       \/\/!< proton mass (in kg)$/;"	m	class:Datum
m_p	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::m_p       = eT(1.672621898e-27);$/;"	m	class:Datum
m_p	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT m_p()       { return eT(1.672621898e-27); }$/;"	f	class:Phy
m_p	lib/armadillo-9.800.2/tests/catch.hpp	/^        T* m_p;$/;"	m	class:Catch::Ptr
m_parent	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  arma_aligned MapMat<eT>& m_parent;$/;"	m	class:SpMat_MapMat_val
m_rc	lib/armadillo-9.800.2/tests/catch.hpp	/^        mutable unsigned int m_rc;$/;"	m	struct:Catch::SharedImpl
m_ref	include/catch.hpp	/^        std::shared_ptr<BoundRef> m_ref;$/;"	m	class:Catch::ParserRefImpl
m_ref	include/catch.hpp	/^        std::shared_ptr<BoundValueRefBase> m_ref;$/;"	m	class:Catch::ExeName
m_resultData	lib/armadillo-9.800.2/tests/catch.hpp	/^        AssertionResultData m_resultData;$/;"	m	class:Catch::AssertionResult
m_shouldDebugBreak	lib/armadillo-9.800.2/tests/catch.hpp	/^        bool m_shouldDebugBreak;$/;"	m	class:Catch::ResultBuilder
m_shouldThrow	lib/armadillo-9.800.2/tests/catch.hpp	/^        bool m_shouldThrow;$/;"	m	class:Catch::ResultBuilder
m_size	include/catch.hpp	/^            m_size( other.m_size )$/;"	f	class:Catch::StringRef
m_size	include/catch.hpp	/^            m_size( size )$/;"	f	class:Catch::StringRef
m_size	include/catch.hpp	/^            m_size( stdString.size() )$/;"	f	class:Catch::StringRef
m_size	include/catch.hpp	/^        size_type m_size;$/;"	m	class:Catch::StringRef
m_start	include/catch.hpp	/^        char const* m_start;$/;"	m	class:Catch::StringRef
m_stream	lib/armadillo-9.800.2/tests/catch.hpp	/^        static CopyableStream &m_stream()$/;"	f	class:Catch::ResultBuilder
m_testAsMethod	include/catch.hpp	/^    TestInvokerAsMethod( void (C::*testAsMethod)() ) noexcept : m_testAsMethod( testAsMethod ) {}$/;"	f	class:Catch::TestInvokerAsMethod
m_testAsMethod	include/catch.hpp	/^    void (C::*m_testAsMethod)();$/;"	m	class:Catch::TestInvokerAsMethod
m_u	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT m_u;       \/\/!< atomic mass constant (in kg)$/;"	m	class:Datum
m_u	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::m_u       = eT(1.660539040e-27);$/;"	m	class:Datum
m_u	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT m_u()       {  return eT(1.660539040e-27); }$/;"	f	class:Phy
m_underlyingMatcher	lib/armadillo-9.800.2/tests/catch.hpp	/^            MatcherBase<ArgT> const& m_underlyingMatcher;$/;"	m	struct:Catch::Matchers::Impl::MatchNotOf
m_usedStream	lib/armadillo-9.800.2/tests/catch.hpp	/^        bool m_usedStream;$/;"	m	class:Catch::ResultBuilder
m_values	include/catch.hpp	/^            std::vector<std::pair<int, StringRef>> m_values;$/;"	m	struct:Catch::Detail::EnumInfo
m_what	lib/armadillo-9.800.2/tests/catch.hpp	/^        std::string m_what;$/;"	m	class:Catch::NotImplementedException
macroName	include/catch.hpp	/^        StringRef macroName;$/;"	m	struct:Catch::AssertionInfo
macroName	lib/armadillo-9.800.2/tests/catch.hpp	/^        char const * macroName;$/;"	m	struct:Catch::AssertionInfo
mah_aux	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_bones.hpp	/^  arma_aligned Col<eT> mah_aux;$/;"	m	class:gmm_priv::gmm_diag
mah_aux	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_bones.hpp	/^  arma_aligned Col<eT>  mah_aux;$/;"	m	class:gmm_priv::gmm_full
maha_dist	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^static const gmm_dist_maha maha_dist;$/;"	v
main	app/Friction/friction.cpp	/^int main(int argc, char *argv[])$/;"	f
main	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	lib/armadillo-9.800.2/examples/example1.cpp	/^main(int argc, char** argv)$/;"	f
main	lib/armadillo-9.800.2/tests/main.cpp	/^main(int argc, char** argv)$/;"	f
main_diag	lib/armadillo-9.800.2/include/armadillo_bits/newarp_TridiagEigen_bones.hpp	/^  Col<eT>  main_diag;  \/\/ Main diagonal elements of the matrix$/;"	m	class:newarp::TridiagEigen
major	lib/armadillo-9.800.2/include/armadillo_bits/arma_version.hpp	/^  static const unsigned int major = ARMA_VERSION_MAJOR;$/;"	m	struct:arma_version
major	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	581;"	d
makeSafe	lib/armadillo-9.800.2/tests/catch.hpp	/^        static type makeSafe( bool value ) {$/;"	f	class:Catch::SafeBool
make_neg	lib/armadillo-9.800.2/include/armadillo_bits/cond_rel_meat.hpp	/^cond_rel<false>::make_neg(const eT)$/;"	f	class:cond_rel
make_neg	lib/armadillo-9.800.2/include/armadillo_bits/cond_rel_meat.hpp	/^cond_rel<true>::make_neg(const eT val)$/;"	f	class:cond_rel
malloc	lib/armadillo-9.800.2/include/armadillo_bits/translate_superlu.hpp	/^  malloc(size_t N)$/;"	f	namespace:superlu
map_ptr	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  arma_aligned map_type* map_ptr;$/;"	m	class:MapMat
map_type	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  typedef typename std::map<uword, eT> map_type;$/;"	t	class:MapMat
mark_as_aligned	lib/armadillo-9.800.2/include/armadillo_bits/memory.hpp	/^memory::mark_as_aligned(const eT*& mem)$/;"	f	class:memory
mark_as_aligned	lib/armadillo-9.800.2/include/armadillo_bits/memory.hpp	/^memory::mark_as_aligned(eT*& mem)$/;"	f	class:memory
mat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Mat <double> mat;$/;"	t
mat22	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef mat::fixed<2,2> mat22;$/;"	t
mat33	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef mat::fixed<3,3> mat33;$/;"	t
mat44	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef mat::fixed<4,4> mat44;$/;"	t
mat55	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef mat::fixed<5,5> mat55;$/;"	t
mat66	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef mat::fixed<6,6> mat66;$/;"	t
mat77	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef mat::fixed<7,7> mat77;$/;"	t
mat88	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef mat::fixed<8,8> mat88;$/;"	t
mat99	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef mat::fixed<9,9> mat99;$/;"	t
mat_H	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_bones.hpp	/^  Mat<eT>             mat_H;    \/\/ A copy of the matrix to be factorised$/;"	m	class:newarp::DoubleShiftQR
mat_T	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergEigen_bones.hpp	/^  Mat<eT>                 mat_T;  \/\/ H = ZTZ', T is a Schur form matrix$/;"	m	class:newarp::UpperHessenbergEigen
mat_T	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_bones.hpp	/^  Mat<eT> mat_T;$/;"	m	class:newarp::UpperHessenbergQR
mat_Z	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergEigen_bones.hpp	/^  Mat<eT>                 mat_Z;  \/\/ In the first stage, H = ZTZ', Z is an orthogonal matrix$/;"	m	class:newarp::UpperHessenbergEigen
mat_injector	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^class mat_injector$/;"	c
mat_injector	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^mat_injector<T1>::mat_injector(T1& in_X, const injector_end_of_row<>& x)$/;"	f	class:mat_injector
mat_injector	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^mat_injector<T1>::mat_injector(T1& in_X, const typename mat_injector<T1>::elem_type val)$/;"	f	class:mat_injector
mat_injector_row	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^class mat_injector_row$/;"	c
mat_injector_row	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^mat_injector_row<eT>::mat_injector_row()$/;"	f	class:mat_injector_row
mat_inplace_op	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::mat_inplace_op(Mat<eT>& out, const subview_elem1& in)$/;"	f	class:subview_elem1
mat_norm_1	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::mat_norm_1(const Proxy<T1>& P)$/;"	f	class:op_norm
mat_norm_1	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::mat_norm_1(const SpProxy<T1>& P)$/;"	f	class:op_norm
mat_norm_2	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::mat_norm_2(const Proxy<T1>& P)$/;"	f	class:op_norm
mat_norm_2	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::mat_norm_2(const SpProxy<T1>& P, const typename arma_cx_only<typename T1::elem_type>::result* junk)$/;"	f	class:op_norm
mat_norm_2	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::mat_norm_2(const SpProxy<T1>& P, const typename arma_real_only<typename T1::elem_type>::result* junk)$/;"	f	class:op_norm
mat_norm_inf	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::mat_norm_inf(const Proxy<T1>& P)$/;"	f	class:op_norm
mat_norm_inf	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::mat_norm_inf(const SpProxy<T1>& P)$/;"	f	class:op_norm
mat_prealloc	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const uword mat_prealloc = (sword(ARMA_MAT_PREALLOC) > 0) ? uword(ARMA_MAT_PREALLOC) : 1;$/;"	m	struct:arma_config
mat_ptrs	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  arma_aligned const Mat<eT>** const mat_ptrs;$/;"	m	class:Cube
mat_ptrs_local	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  arma_align_mem Mat<eT>* mat_ptrs_local[ Cube_prealloc::mat_ptrs_size ];$/;"	m	class:Cube
mat_ptrs_local_extra	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  arma_aligned   Mat<eT>* mat_ptrs_local_extra[ (fixed_n_slices > Cube_prealloc::mat_ptrs_size) ? fixed_n_slices : 1 ];$/;"	m	class:Cube::fixed
mat_ptrs_size	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  static const uword mat_ptrs_size = 4;$/;"	m	struct:Cube_prealloc
math	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^typedef Math<double> math;$/;"	t
matrix_QtHQ	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_meat.hpp	/^DoubleShiftQR<eT>::matrix_QtHQ()$/;"	f	class:newarp::DoubleShiftQR
matrix_RQ	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_meat.hpp	/^TridiagQR<eT>::matrix_RQ()$/;"	f	class:newarp::TridiagQR
matrix_RQ	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_meat.hpp	/^UpperHessenbergQR<eT>::matrix_RQ()$/;"	f	class:newarp::UpperHessenbergQR
max	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube<elem_type,derived>::max() const$/;"	f	class:BaseCube
max	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::max() const$/;"	f	class:Base
max	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::max(uword& index_of_max_val) const$/;"	f	class:Base
max	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::max(uword& row_of_max_val, uword& col_of_max_val) const$/;"	f	class:Base
max	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::max() const$/;"	f	class:Cube
max	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::max(uword& index_of_max_val) const$/;"	f	class:Cube
max	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::max(uword& row_of_max_val, uword& col_of_max_val, uword& slice_of_max_val) const$/;"	f	class:Cube
max	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::max() const$/;"	f	class:Mat
max	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::max(uword& index_of_max_val) const$/;"	f	class:Mat
max	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::max(uword& row_of_max_val, uword& col_of_max_val) const$/;"	f	class:Mat
max	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type, derived>::max() const$/;"	f	class:SpBase
max	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type, derived>::max(uword& index_of_max_val) const$/;"	f	class:SpBase
max	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type, derived>::max(uword& row_of_max_val, uword& col_of_max_val) const$/;"	f	class:SpBase
max	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	569;"	d
max	lib/armadillo-9.800.2/include/armadillo_bits/fn_max.hpp	/^max$/;"	f
max	lib/armadillo-9.800.2/include/armadillo_bits/fn_max.hpp	/^max(const SizeCube& s)$/;"	f
max	lib/armadillo-9.800.2/include/armadillo_bits/fn_max.hpp	/^max(const SizeMat& s)$/;"	f
max	lib/armadillo-9.800.2/include/armadillo_bits/fn_max.hpp	/^max(const T& x)$/;"	f
max	lib/armadillo-9.800.2/include/armadillo_bits/fn_max.hpp	/^max(const T1& X)$/;"	f
max	lib/armadillo-9.800.2/include/armadillo_bits/fn_max.hpp	/^max(const T1& X, const uword dim)$/;"	f
max	lib/armadillo-9.800.2/include/armadillo_bits/fn_max.hpp	/^max(const T1& x)$/;"	f
max	lib/armadillo-9.800.2/include/armadillo_bits/fn_max.hpp	/^max(const T1& x, const T2& y)$/;"	f
max	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::max(const Base<typename T1::elem_type,T1>& X)$/;"	f	class:op_max
max	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::max(const BaseCube<typename T1::elem_type,T1>& X)$/;"	f	class:op_max
max	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::max(const subview< std::complex<T> >& X)$/;"	f	class:op_max
max	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::max(const subview<eT>& X)$/;"	f	class:op_max
max	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat<eT>::max() const$/;"	f	class:running_stat
max	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::max() const$/;"	f	class:running_stat_vec
max	lib/armadillo-9.800.2/include/armadillo_bits/spop_max_meat.hpp	/^spop_max::max(const SpBase<typename T1::elem_type, T1>& X)$/;"	f	class:spop_max
max	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::max() const$/;"	f	class:subview_col
max	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::max(uword& index_of_max_val) const$/;"	f	class:subview_col
max_n_nonzero_plus	lib/armadillo-9.800.2/include/armadillo_bits/spglue_elem_helper_meat.hpp	/^spglue_elem_helper::max_n_nonzero_plus(const SpProxy<T1>& pa, const SpProxy<T2>& pb)$/;"	f	class:spglue_elem_helper
max_n_nonzero_schur	lib/armadillo-9.800.2/include/armadillo_bits/spglue_elem_helper_meat.hpp	/^spglue_elem_helper::max_n_nonzero_schur(const SpProxy<T1>& pa, const SpProxy<T2>& pb)$/;"	f	class:spglue_elem_helper
max_val	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^  max_val()$/;"	f	struct:arma_rng::randi
max_val	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_bones.hpp	/^  arma_aligned eT max_val;$/;"	m	class:running_stat
max_val	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  arma_aligned return_type1 max_val;$/;"	m	class:running_stat_vec
max_val_norm	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_bones.hpp	/^  arma_aligned  T max_val_norm;$/;"	m	class:running_stat
max_val_norm	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  arma_aligned Mat< T> max_val_norm;$/;"	m	class:running_stat_vec
max_with_index	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::max_with_index(const Proxy<T1>& P, uword& index_of_max_val)$/;"	f	class:op_max
max_with_index	lib/armadillo-9.800.2/include/armadillo_bits/op_max_meat.hpp	/^op_max::max_with_index(const ProxyCube<T1>& P, uword& index_of_max_val)$/;"	f	class:op_max
max_with_index	lib/armadillo-9.800.2/include/armadillo_bits/spop_max_meat.hpp	/^spop_max::max_with_index(const SpProxy<T1>& P, uword& index_of_max_val)$/;"	f	class:spop_max
mean	lib/armadillo-9.800.2/include/armadillo_bits/fn_mean.hpp	/^mean$/;"	f
mean	lib/armadillo-9.800.2/include/armadillo_bits/fn_mean.hpp	/^mean(const T& x)$/;"	f
mean	lib/armadillo-9.800.2/include/armadillo_bits/fn_mean.hpp	/^mean(const T1& X)$/;"	f
mean	lib/armadillo-9.800.2/include/armadillo_bits/fn_mean.hpp	/^mean(const T1& X, const uword dim)$/;"	f
mean	lib/armadillo-9.800.2/include/armadillo_bits/fn_mean.hpp	/^mean(const T1& x)$/;"	f
mean	lib/armadillo-9.800.2/include/armadillo_bits/fn_mean.hpp	/^mean(const T1& x, const uword dim)$/;"	f
mean	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_meat.hpp	/^running_mean_scalar<eT>::mean() const$/;"	f	class:gmm_priv::running_mean_scalar
mean	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat<eT>::mean() const$/;"	f	class:running_stat
mean	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::mean() const$/;"	f	class:running_stat_vec
mean_all	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::mean_all(const Base<typename T1::elem_type, T1>& X)$/;"	f	class:op_mean
mean_all	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::mean_all(const Op<T1,op_vectorise_col>& X)$/;"	f	class:op_mean
mean_all	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::mean_all(const diagview<eT>& X)$/;"	f	class:op_mean
mean_all	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::mean_all(const subview<eT>& X)$/;"	f	class:op_mean
mean_all	lib/armadillo-9.800.2/include/armadillo_bits/spop_mean_meat.hpp	/^spop_mean::mean_all(const SpBase<typename T1::elem_type, T1>& X)$/;"	f	class:spop_mean
mean_all	lib/armadillo-9.800.2/include/armadillo_bits/spop_mean_meat.hpp	/^spop_mean::mean_all(const SpOp<T1, spop_type>& expr)$/;"	f	class:spop_mean
mean_all_robust	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::mean_all_robust(const diagview<eT>& X)$/;"	f	class:op_mean
mean_all_robust	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::mean_all_robust(const subview<eT>& X)$/;"	f	class:op_mean
means	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_bones.hpp	/^  arma_aligned const Mat<eT> means;$/;"	m	class:gmm_priv::gmm_diag
means	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_bones.hpp	/^  arma_aligned const Mat <eT> means;$/;"	m	class:gmm_priv::gmm_full
median	lib/armadillo-9.800.2/include/armadillo_bits/fn_median.hpp	/^median(const T& x)$/;"	f
median	lib/armadillo-9.800.2/include/armadillo_bits/fn_median.hpp	/^median(const T1& X)$/;"	f
median	lib/armadillo-9.800.2/include/armadillo_bits/fn_median.hpp	/^median(const T1& X, const uword dim)$/;"	f
median_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_median_meat.hpp	/^op_median::median_vec$/;"	f	class:op_median
mem	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  arma_aligned const eT* const mem;  \/\/!< pointer to the memory used for storing elements (memory is read-only)$/;"	m	class:Cube
mem	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  arma_aligned const eT* const mem;  \/\/!< pointer to the memory used for storing elements (memory is read-only)$/;"	m	class:Mat
mem	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^  arma_aligned oT** mem;                                     \/\/!< pointers to stored objects$/;"	m	class:field
mem	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    void* mem;$/;"	m	struct:arma::superlu::e_node
mem	lib/armadillo-9.800.2/include/armadillo_bits/podarray_bones.hpp	/^  arma_aligned       eT*   mem;    \/\/!< pointer to memory used by the object$/;"	m	class:podarray
mem	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_bones.hpp	/^  arma_aligned const eT* const mem;$/;"	m	class:xvec_htrans
mem_local	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  arma_align_mem eT            mem_local[ Cube_prealloc::mem_n_elem    ];  \/\/ local storage, for small cubes$/;"	m	class:Cube
mem_local	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  arma_align_mem eT mem_local[ arma_config::mat_prealloc ];  \/\/ local storage, for small vectors and matrices$/;"	m	class:Mat
mem_local	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^  arma_aligned oT*  mem_local[ field_prealloc_n_elem::val ]; \/\/!< local storage, for small fields$/;"	m	class:field
mem_local	lib/armadillo-9.800.2/include/armadillo_bits/podarray_bones.hpp	/^  arma_align_mem eT mem_local[ podarray_prealloc_n_elem::val ];$/;"	m	class:podarray
mem_local_extra	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  arma_align_mem eT mem_local_extra[ (use_extra) ? fixed_n_elem : 1 ];$/;"	m	class:Col::fixed
mem_local_extra	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  arma_align_mem eT       mem_local_extra     [ use_extra                                       ? fixed_n_elem   : 1 ];$/;"	m	class:Cube::fixed
mem_local_extra	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  arma_align_mem eT mem_local_extra[ (use_extra) ? fixed_n_elem : 1 ];$/;"	m	class:Mat::fixed
mem_local_extra	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  arma_align_mem eT mem_local_extra[ (use_extra) ? fixed_n_elem : 1 ];$/;"	m	class:Row::fixed
mem_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  static const uword mem_n_elem    = 64;$/;"	m	struct:Cube_prealloc
mem_resize	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::mem_resize(const uword new_n_nonzero)$/;"	f	class:SpMat
mem_setup	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::mem_setup()$/;"	f	class:Cube::fixed
mem_state	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  const uword  mem_state;$/;"	m	class:Cube
mem_state	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  const uhword mem_state;$/;"	m	class:Mat
mem_usage_t	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    } mem_usage_t;$/;"	t	namespace:arma::superlu	typeref:struct:arma::superlu::__anon7
memory	lib/armadillo-9.800.2/include/armadillo_bits/memory.hpp	/^class memory$/;"	c
memorykernel	src/Polarizability/PolarizabilityBath.h	/^    MemoryKernel *memorykernel;$/;"	m	class:PolarizabilityBath
memptr	lib/armadillo-9.800.2/docs.html	/^<a name="memptr"><\/a>$/;"	a
memptr	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::memptr() const$/;"	f	class:Col::fixed
memptr	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::memptr()$/;"	f	class:Col::fixed
memptr	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::memptr() const$/;"	f	class:Cube
memptr	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::memptr()$/;"	f	class:Cube
memptr	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::memptr() const$/;"	f	class:Mat::fixed
memptr	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::memptr()$/;"	f	class:Mat::fixed
memptr	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::memptr() const$/;"	f	class:Mat
memptr	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::memptr()$/;"	f	class:Mat
memptr	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::memptr() const$/;"	f	class:Row::fixed
memptr	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::memptr()$/;"	f	class:Row::fixed
memptr	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::memptr() const$/;"	f	class:podarray
memptr	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::memptr()$/;"	f	class:podarray
message	lib/armadillo-9.800.2/tests/catch.hpp	/^        std::string message;$/;"	m	struct:Catch::AssertionResultData
mexFunction	lib/armadillo-9.800.2/mex_interface/armaMex_demo.cpp	/^mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])$/;"	f
mexFunction	lib/armadillo-9.800.2/mex_interface/readMatTest.cpp	/^mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])$/;"	f
min	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube<elem_type,derived>::min() const$/;"	f	class:BaseCube
min	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::min() const$/;"	f	class:Base
min	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::min(uword& index_of_min_val) const$/;"	f	class:Base
min	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::min(uword& row_of_min_val, uword& col_of_min_val) const$/;"	f	class:Base
min	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::min() const$/;"	f	class:Cube
min	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::min(uword& index_of_min_val) const$/;"	f	class:Cube
min	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::min(uword& row_of_min_val, uword& col_of_min_val, uword& slice_of_min_val) const$/;"	f	class:Cube
min	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::min() const$/;"	f	class:Mat
min	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::min(uword& index_of_min_val) const$/;"	f	class:Mat
min	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::min(uword& row_of_min_val, uword& col_of_min_val) const$/;"	f	class:Mat
min	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type, derived>::min() const$/;"	f	class:SpBase
min	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type, derived>::min(uword& index_of_min_val) const$/;"	f	class:SpBase
min	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type, derived>::min(uword& row_of_min_val, uword& col_of_min_val) const$/;"	f	class:SpBase
min	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	568;"	d
min	lib/armadillo-9.800.2/include/armadillo_bits/fn_min.hpp	/^min$/;"	f
min	lib/armadillo-9.800.2/include/armadillo_bits/fn_min.hpp	/^min(const SizeCube& s)$/;"	f
min	lib/armadillo-9.800.2/include/armadillo_bits/fn_min.hpp	/^min(const SizeMat& s)$/;"	f
min	lib/armadillo-9.800.2/include/armadillo_bits/fn_min.hpp	/^min(const T& x)$/;"	f
min	lib/armadillo-9.800.2/include/armadillo_bits/fn_min.hpp	/^min(const T1& X)$/;"	f
min	lib/armadillo-9.800.2/include/armadillo_bits/fn_min.hpp	/^min(const T1& X, const uword dim)$/;"	f
min	lib/armadillo-9.800.2/include/armadillo_bits/fn_min.hpp	/^min(const T1& x)$/;"	f
min	lib/armadillo-9.800.2/include/armadillo_bits/fn_min.hpp	/^min(const T1& x, const T2& y)$/;"	f
min	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::min(const Base<typename T1::elem_type,T1>& X)$/;"	f	class:op_min
min	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::min(const BaseCube<typename T1::elem_type,T1>& X)$/;"	f	class:op_min
min	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::min(const subview< std::complex<T> >& X)$/;"	f	class:op_min
min	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::min(const subview<eT>& X)$/;"	f	class:op_min
min	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat<eT>::min() const$/;"	f	class:running_stat
min	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::min() const$/;"	f	class:running_stat_vec
min	lib/armadillo-9.800.2/include/armadillo_bits/spop_min_meat.hpp	/^spop_min::min(const SpBase<typename T1::elem_type, T1>& X)$/;"	f	class:spop_min
min	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::min() const$/;"	f	class:subview_col
min	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::min(uword& index_of_min_val) const$/;"	f	class:subview_col
min_and_max	lib/armadillo-9.800.2/docs.html	/^<a name="min_and_max"><\/a>$/;"	a
min_and_max_member	lib/armadillo-9.800.2/docs.html	/^<a name="min_and_max_member"><\/a>$/;"	a
min_val	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_bones.hpp	/^  arma_aligned eT min_val;$/;"	m	class:running_stat
min_val	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  arma_aligned return_type1 min_val;$/;"	m	class:running_stat_vec
min_val_norm	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_bones.hpp	/^  arma_aligned  T min_val_norm;$/;"	m	class:running_stat
min_val_norm	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  arma_aligned Mat< T> min_val_norm;$/;"	m	class:running_stat_vec
min_with_index	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::min_with_index(const Proxy<T1>& P, uword& index_of_min_val)$/;"	f	class:op_min
min_with_index	lib/armadillo-9.800.2/include/armadillo_bits/op_min_meat.hpp	/^op_min::min_with_index(const ProxyCube<T1>& P, uword& index_of_min_val)$/;"	f	class:op_min
min_with_index	lib/armadillo-9.800.2/include/armadillo_bits/spop_min_meat.hpp	/^spop_min::min_with_index(const SpProxy<T1>& P, uword& index_of_min_val)$/;"	f	class:spop_min
minor	lib/armadillo-9.800.2/include/armadillo_bits/arma_version.hpp	/^  static const unsigned int minor = ARMA_VERSION_MINOR;$/;"	m	struct:arma_version
minor	lib/armadillo-9.800.2/include/armadillo_bits/compiler_setup.hpp	580;"	d
minus_inplace	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::minus_inplace(Mat<eT>& out, const diagview<eT>& in)$/;"	f	class:diagview
minus_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::minus_inplace(Cube<eT>& out, const subview_cube<eT>& in)$/;"	f	class:subview_cube
minus_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::minus_inplace(Mat<eT>& out, const subview_cube<eT>& in)$/;"	f	class:subview_cube
minus_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::minus_inplace(Cube<eT>& out, const subview_cube_slices& in)$/;"	f	class:subview_cube_slices
minus_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::minus_inplace(Mat<eT>& out, const subview_elem1& in)$/;"	f	class:subview_elem1
minus_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::minus_inplace(Mat<eT>& out, const subview_elem2& in)$/;"	f	class:subview_elem2
minus_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::minus_inplace(Mat<eT>& out, const subview<eT>& in)$/;"	f	class:subview
misc_fns	lib/armadillo-9.800.2/docs.html	/^<a name="misc_fns"><\/a>$/;"	a
modify_stream	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::modify_stream(std::ostream& o, const eT* data, const uword n_elem)$/;"	f	class:arma_ostream
modify_stream	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::modify_stream(std::ostream& o, const std::complex<T>* data, const uword n_elem)$/;"	f	class:arma_ostream
modify_stream	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::modify_stream(std::ostream& o, typename SpMat<T>::const_iterator begin, const uword n_elem, const typename arma_cx_only<T>::result* junk)$/;"	f	class:arma_ostream
modify_stream	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::modify_stream(std::ostream& o, typename SpMat<eT>::const_iterator begin, const uword n_elem, const typename arma_not_cx<eT>::result* junk)$/;"	f	class:arma_ostream
most_neg	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  most_neg(typename arma_integral_only<eT>::result* junk = 0)$/;"	f	namespace:priv
most_neg	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  most_neg(typename arma_real_only<eT>::result* junk = 0)$/;"	f	namespace:priv
most_pos	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  most_pos(typename arma_integral_only<eT>::result* junk = 0)$/;"	f	namespace:priv
most_pos	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  most_pos(typename arma_real_only<eT>::result* junk = 0)$/;"	f	namespace:priv
motor	lib/armadillo-9.800.2/include/armadillo_bits/op_chi2rnd_bones.hpp	/^  arma_aligned std::mt19937_64 motor;$/;"	m	class:op_chi2rnd_varying_df
mp_gate	lib/armadillo-9.800.2/include/armadillo_bits/mp_misc.hpp	/^struct mp_gate$/;"	s
mp_thread_limit	lib/armadillo-9.800.2/include/armadillo_bits/mp_misc.hpp	/^struct mp_thread_limit$/;"	s
mp_threads	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const uword mp_threads = (sword(ARMA_OPENMP_THREADS) > 0) ? uword(ARMA_OPENMP_THREADS) : 10;$/;"	m	struct:arma_config
mp_threads	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const uword mp_threads = 10;$/;"	m	struct:arma_config
mp_threshold	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const uword mp_threshold = (sword(ARMA_OPENMP_THRESHOLD) > 0) ? uword(ARMA_OPENMP_THRESHOLD) : 240;$/;"	m	struct:arma_config
mp_threshold	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const uword mp_threshold = 240;$/;"	m	struct:arma_config
mpl_	include/catch.hpp	/^namespace mpl_{$/;"	n
mtGlue	lib/armadillo-9.800.2/include/armadillo_bits/mtGlue_bones.hpp	/^class mtGlue : public Base<out_eT, mtGlue<out_eT, T1, T2, glue_type> >$/;"	c
mtGlue	lib/armadillo-9.800.2/include/armadillo_bits/mtGlue_meat.hpp	/^mtGlue<out_eT,T1,T2,glue_type>::mtGlue(const T1& in_A, const T2& in_B)$/;"	f	class:mtGlue
mtGlue	lib/armadillo-9.800.2/include/armadillo_bits/mtGlue_meat.hpp	/^mtGlue<out_eT,T1,T2,glue_type>::mtGlue(const T1& in_A, const T2& in_B, const uword in_aux_uword)$/;"	f	class:mtGlue
mtGlueCube	lib/armadillo-9.800.2/include/armadillo_bits/mtGlueCube_bones.hpp	/^class mtGlueCube : public BaseCube<out_eT, mtGlueCube<out_eT, T1, T2, glue_type> >$/;"	c
mtGlueCube	lib/armadillo-9.800.2/include/armadillo_bits/mtGlueCube_meat.hpp	/^mtGlueCube<out_eT,T1,T2,glue_type>::mtGlueCube(const T1& in_A, const T2& in_B)$/;"	f	class:mtGlueCube
mtGlueCube	lib/armadillo-9.800.2/include/armadillo_bits/mtGlueCube_meat.hpp	/^mtGlueCube<out_eT,T1,T2,glue_type>::mtGlueCube(const T1& in_A, const T2& in_B, const uword in_aux_uword)$/;"	f	class:mtGlueCube
mtOp	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_bones.hpp	/^class mtOp : public Base<out_eT, mtOp<out_eT, T1, op_type> >$/;"	c
mtOp	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_meat.hpp	/^mtOp<out_eT, T1, op_type>::mtOp(const T1& in_m)$/;"	f	class:mtOp
mtOp	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_meat.hpp	/^mtOp<out_eT, T1, op_type>::mtOp(const T1& in_m, const typename T1::elem_type in_aux)$/;"	f	class:mtOp
mtOp	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_meat.hpp	/^mtOp<out_eT, T1, op_type>::mtOp(const T1& in_m, const typename T1::elem_type in_aux, const uword in_aux_uword_a, const uword in_aux_uword_b)$/;"	f	class:mtOp
mtOp	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_meat.hpp	/^mtOp<out_eT, T1, op_type>::mtOp(const T1& in_m, const uword in_aux_uword_a, const uword in_aux_uword_b)$/;"	f	class:mtOp
mtOp	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_meat.hpp	/^mtOp<out_eT, T1, op_type>::mtOp(const char junk, const T1& in_m, const out_eT in_aux)$/;"	f	class:mtOp
mtOp	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_meat.hpp	/^mtOp<out_eT, T1, op_type>::mtOp(const mtOp_dual_aux_indicator&, const T1& in_m, const typename T1::elem_type in_aux_a, const out_eT in_aux_b)$/;"	f	class:mtOp
mtOpCube	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_bones.hpp	/^class mtOpCube : public BaseCube<out_eT, mtOpCube<out_eT, T1, op_type> >$/;"	c
mtOpCube	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_meat.hpp	/^mtOpCube<out_eT, T1, op_type>::mtOpCube(const T1& in_m)$/;"	f	class:mtOpCube
mtOpCube	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_meat.hpp	/^mtOpCube<out_eT, T1, op_type>::mtOpCube(const T1& in_m, const typename T1::elem_type in_aux)$/;"	f	class:mtOpCube
mtOpCube	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_meat.hpp	/^mtOpCube<out_eT, T1, op_type>::mtOpCube(const T1& in_m, const typename T1::elem_type in_aux, const uword in_aux_uword_a, const uword in_aux_uword_b, const uword in_aux_uword_c)$/;"	f	class:mtOpCube
mtOpCube	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_meat.hpp	/^mtOpCube<out_eT, T1, op_type>::mtOpCube(const T1& in_m, const uword in_aux_uword_a, const uword in_aux_uword_b, const uword in_aux_uword_c)$/;"	f	class:mtOpCube
mtOpCube	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_meat.hpp	/^mtOpCube<out_eT, T1, op_type>::mtOpCube(const char junk, const T1& in_m, const out_eT in_aux)$/;"	f	class:mtOpCube
mtOpCube	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_meat.hpp	/^mtOpCube<out_eT, T1, op_type>::mtOpCube(const mtOpCube_dual_aux_indicator&, const T1& in_m, const typename T1::elem_type in_aux_a, const out_eT in_aux_b)$/;"	f	class:mtOpCube
mtOpCube_dual_aux_indicator	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_bones.hpp	/^struct mtOpCube_dual_aux_indicator {};$/;"	s
mtOp_dual_aux_indicator	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_bones.hpp	/^struct mtOp_dual_aux_indicator {};$/;"	s
mtSpGlue	lib/armadillo-9.800.2/include/armadillo_bits/mtSpGlue_bones.hpp	/^class mtSpGlue : public SpBase<out_eT, mtSpGlue<out_eT, T1, T2, spglue_type> >$/;"	c
mtSpGlue	lib/armadillo-9.800.2/include/armadillo_bits/mtSpGlue_meat.hpp	/^mtSpGlue<out_eT,T1,T2,spglue_type>::mtSpGlue(const T1& in_A, const T2& in_B)$/;"	f	class:mtSpGlue
mtSpOp	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_bones.hpp	/^class mtSpOp : public SpBase<out_eT, mtSpOp<out_eT, T1, spop_type> >$/;"	c
mtSpOp	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_meat.hpp	/^mtSpOp<out_eT, T1, op_type>::mtSpOp(const T1& in_m)$/;"	f	class:mtSpOp
mtSpOp	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_meat.hpp	/^mtSpOp<out_eT, T1, op_type>::mtSpOp(const T1& in_m, const uword in_aux_uword_a, const uword in_aux_uword_b)$/;"	f	class:mtSpOp
mtSpOp	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_meat.hpp	/^mtSpOp<out_eT, T1, op_type>::mtSpOp(const char junk, const T1& in_m, const out_eT in_aux)$/;"	f	class:mtSpOp
mu	src/Polarizability/OhmicMemoryKernel.cpp	/^std::complex<double> OhmicMemoryKernel::mu(double omega)$/;"	f	class:OhmicMemoryKernel
mu_0	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT mu_0;      \/\/!< magnetic constant (in henries per meter)$/;"	m	class:Datum
mu_0	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::mu_0      = eT(1.25663706143592e-06);$/;"	m	class:Datum
mu_0	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT mu_0()      { return eT(1.25663706143592e-06); }$/;"	f	class:Phy
mu_B	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT mu_B;      \/\/!< Bohr magneton$/;"	m	class:Datum
mu_B	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::mu_B      = eT(927.4009994e-26);$/;"	m	class:Datum
mu_B	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT mu_B()      { return eT(927.4009994e-26); }$/;"	f	class:Phy
mul	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::mul(const eT in_val)$/;"	f	class:SpMat_MapMat_val
mul_storage_cost	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_meat.hpp	/^glue_times::mul_storage_cost(const TA& A, const TB& B)$/;"	f	class:glue_times
mvnrnd	lib/armadillo-9.800.2/docs.html	/^<a name="mvnrnd"><\/a>$/;"	a
mvnrnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_mvnrnd.hpp	/^mvnrnd(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type, T1>& M, const Base<typename T1::elem_type, T2>& C)$/;"	f
mvnrnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_mvnrnd.hpp	/^mvnrnd(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type, T1>& M, const Base<typename T1::elem_type, T2>& C, const uword N)$/;"	f
mvnrnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_mvnrnd.hpp	/^mvnrnd(const Base<typename T1::elem_type, T1>& M, const Base<typename T1::elem_type, T2>& C)$/;"	f
mvnrnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_mvnrnd.hpp	/^mvnrnd(const Base<typename T1::elem_type, T1>& M, const Base<typename T1::elem_type, T2>& C, const uword N)$/;"	f
n	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int        n;$/;"	m	struct:arma::superlu::__anon9
n	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_bones.hpp	/^  uword               n;        \/\/ Dimension of the matrix$/;"	m	class:newarp::DoubleShiftQR
n	lib/armadillo-9.800.2/include/armadillo_bits/newarp_TridiagEigen_bones.hpp	/^  blas_int n;$/;"	m	class:newarp::TridiagEigen
n	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergEigen_bones.hpp	/^  blas_int                n;$/;"	m	class:newarp::UpperHessenbergEigen
n	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_bones.hpp	/^  uword   n;$/;"	m	class:newarp::UpperHessenbergQR
n2	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_bones.hpp	/^    static const uword n2 = row + col*2;$/;"	m	struct:auxlib::pos
n2	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^    static const uword n2 = (do_trans_A == false) ? (row + col*2) : (col + row*2);$/;"	m	struct:gemv_emul_tinysq::pos
n2	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^    static const uword n2 = (do_flip == false) ? (row + col*2) : (col + row*2);$/;"	m	struct:op_strans2::pos
n2	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^    static const uword n2 = (do_flip == false) ? (row + col*2) : (col + row*2);$/;"	m	struct:op_strans::pos
n3	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_bones.hpp	/^    static const uword n3 = row + col*3;$/;"	m	struct:auxlib::pos
n3	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^    static const uword n3 = (do_trans_A == false) ? (row + col*3) : (col + row*3);$/;"	m	struct:gemv_emul_tinysq::pos
n3	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^    static const uword n3 = (do_flip == false) ? (row + col*3) : (col + row*3);$/;"	m	struct:op_strans2::pos
n3	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^    static const uword n3 = (do_flip == false) ? (row + col*3) : (col + row*3);$/;"	m	struct:op_strans::pos
n4	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_bones.hpp	/^    static const uword n4 = row + col*4;$/;"	m	struct:auxlib::pos
n4	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^    static const uword n4 = (do_trans_A == false) ? (row + col*4) : (col + row*4);$/;"	m	struct:gemv_emul_tinysq::pos
n4	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^    static const uword n4 = (do_flip == false) ? (row + col*4) : (col + row*4);$/;"	m	struct:op_strans2::pos
n4	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^    static const uword n4 = (do_flip == false) ? (row + col*4) : (col + row*4);$/;"	m	struct:op_strans::pos
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  static const uword n_cols;  \/\/ value provided below the class definition$/;"	m	class:Col::fixed
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^const uword Col<eT>::fixed<fixed_n_elem>::n_cols = 1u;$/;"	m	class:Col::fixed
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  const uword  n_cols;       \/\/!< number of columns  in each slice (read-only)$/;"	m	class:Cube
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_bones.hpp	/^  arma_aligned const uword n_cols;$/;"	m	class:GenCube
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Gen_bones.hpp	/^  arma_aligned const uword n_cols;$/;"	m	class:Gen
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  const uword n_cols;    \/\/!< number of columns  (read-only)$/;"	m	class:MapMat
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  const uword  n_cols;    \/\/!< number of columns  (read-only)$/;"	m	class:Mat
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  static const uword n_cols;  \/\/ value provided below the class definition$/;"	m	class:Mat::fixed
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^const uword Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::n_cols = fixed_n_cols;$/;"	m	class:Mat::fixed
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  static const uword n_cols;  \/\/ value provided below the class definition$/;"	m	class:Row::fixed
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^const uword Row<eT>::fixed<fixed_n_elem>::n_cols = fixed_n_elem;$/;"	m	class:Row::fixed
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_bones.hpp	/^  const uword n_cols;$/;"	m	class:SizeCube
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/SizeMat_bones.hpp	/^  const uword n_cols;$/;"	m	class:SizeMat
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  const uword n_cols;    \/\/!< number of columns          (read-only)$/;"	m	class:SpMat
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  const uword n_cols;$/;"	m	class:SpSubview
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const uword            n_cols;$/;"	m	class:diagmat_proxy
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const uword          n_cols;$/;"	m	class:diagmat_proxy_check_default
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const uword     n_cols;$/;"	m	class:diagmat_proxy_default
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const uword    n_cols;$/;"	m	class:diagmat_proxy
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const uword    n_cols;$/;"	m	class:diagmat_proxy_check
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const uword   n_cols;$/;"	m	class:diagmat_proxy_check
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  static const uword n_cols   = P_is_vec ? T1::n_elem : T1::n_cols;$/;"	m	class:diagmat_proxy_check_fixed
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  static const uword n_cols   = P_is_vec ? T1::n_elem : T1::n_cols;$/;"	m	class:diagmat_proxy_fixed
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/diagview_bones.hpp	/^  static const uword n_cols = 1;$/;"	m	class:diagview
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^  const uword n_cols;     \/\/!< number of columns  (read-only)$/;"	m	class:field
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  mutable uword        n_cols;$/;"	m	class:mat_injector_row
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  mutable uword      n_cols;$/;"	m	class:field_injector_row
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DenseGenMatProd_bones.hpp	/^  const uword n_cols;  \/\/ number of columns of the underlying matrix$/;"	m	class:newarp::DenseGenMatProd
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SparseGenMatProd_bones.hpp	/^  const uword n_cols;  \/\/ number of columns of the underlying matrix$/;"	m	class:newarp::SparseGenMatProd
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_bones.hpp	/^  static const uword n_cols = 1;$/;"	m	class:spdiagview
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  const uword n_cols;$/;"	m	class:subview
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const uword n_cols = 1;$/;"	m	class:subview_row_htrans
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  static const uword n_cols = 1;$/;"	m	class:subview_row_strans
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^  const uword n_cols;$/;"	m	class:subview_cube
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_bones.hpp	/^  const uword n_cols;$/;"	m	class:subview_field
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_bones.hpp	/^  arma_aligned const uword n_cols;$/;"	m	class:xtrans_mat
n_cols	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_bones.hpp	/^  const uword n_cols;$/;"	m	class:xvec_htrans
n_dims	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::n_dims() const$/;"	f	class:gmm_priv::gmm_diag
n_dims	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::n_dims() const$/;"	f	class:gmm_priv::gmm_full
n_distr	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^  arma_aligned std::normal_distribution<double>       n_distr;   \/\/ by default uses mean=0.0 and stddev=1.0$/;"	m	class:arma_rng_cxx11
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  static const uword n_elem;  \/\/ value provided below the class definition$/;"	m	class:Col::fixed
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^const uword Col<eT>::fixed<fixed_n_elem>::n_elem = fixed_n_elem;$/;"	m	class:Col::fixed
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  const uword  n_elem;       \/\/!< number of elements in the cube   (read-only)$/;"	m	class:Cube
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  const uword n_elem;    \/\/!< number of elements (read-only)$/;"	m	class:MapMat
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  const uword  n_elem;    \/\/!< number of elements (read-only)$/;"	m	class:Mat
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  static const uword n_elem;  \/\/ value provided below the class definition$/;"	m	class:Mat::fixed
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^const uword Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::n_elem = fixed_n_rows * fixed_n_cols;$/;"	m	class:Mat::fixed
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  static const uword n_elem;  \/\/ value provided below the class definition$/;"	m	class:Row::fixed
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^const uword Row<eT>::fixed<fixed_n_elem>::n_elem = fixed_n_elem;$/;"	m	class:Row::fixed
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  const uword n_elem;    \/\/!< number of elements         (read-only)$/;"	m	class:SpMat
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  const uword n_elem;$/;"	m	class:SpSubview
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/diagview_bones.hpp	/^  const uword n_elem;$/;"	m	class:diagview
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^  const uword n_elem;     \/\/!< number of elements (read-only)$/;"	m	class:field
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/podarray_bones.hpp	/^  arma_aligned const uword n_elem; \/\/!< number of elements held$/;"	m	class:podarray
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_bones.hpp	/^  const uword n_elem;$/;"	m	class:spdiagview
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^         const uword n_elem;$/;"	m	class:subview_row_htrans
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^         const uword n_elem;$/;"	m	class:subview_row_strans
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  const uword n_elem;$/;"	m	class:subview
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^  const uword n_elem;$/;"	m	class:subview_cube
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_bones.hpp	/^  const uword n_elem;$/;"	m	class:subview_field
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_bones.hpp	/^  arma_aligned const uword n_elem;$/;"	m	class:xtrans_mat
n_elem	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_bones.hpp	/^  const uword n_elem;$/;"	m	class:xvec_htrans
n_elem_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  const uword  n_elem_slice; \/\/!< number of elements in each slice (read-only)$/;"	m	class:Cube
n_elem_slice	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^  const uword n_elem_slice;$/;"	m	class:subview_cube
n_gaus	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::n_gaus() const$/;"	f	class:gmm_priv::gmm_diag
n_gaus	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::n_gaus() const$/;"	f	class:gmm_priv::gmm_full
n_nonzero	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  const uword n_nonzero; \/\/!< number of nonzero elements (read-only)$/;"	m	class:SpMat
n_nonzero	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  const uword n_nonzero;$/;"	m	class:SpSubview
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  static const uword n_rows;  \/\/ value provided below the class definition$/;"	m	class:Col::fixed
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^const uword Col<eT>::fixed<fixed_n_elem>::n_rows = fixed_n_elem;$/;"	m	class:Col::fixed
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  const uword  n_rows;       \/\/!< number of rows     in each slice (read-only)$/;"	m	class:Cube
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_bones.hpp	/^  arma_aligned const uword n_rows;$/;"	m	class:GenCube
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Gen_bones.hpp	/^  arma_aligned const uword n_rows;$/;"	m	class:Gen
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  const uword n_rows;    \/\/!< number of rows     (read-only)$/;"	m	class:MapMat
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  const uword  n_rows;    \/\/!< number of rows     (read-only)$/;"	m	class:Mat
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  static const uword n_rows;  \/\/ value provided below the class definition$/;"	m	class:Mat::fixed
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^const uword Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::n_rows = fixed_n_rows;$/;"	m	class:Mat::fixed
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  static const uword n_rows;  \/\/ value provided below the class definition$/;"	m	class:Row::fixed
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^const uword Row<eT>::fixed<fixed_n_elem>::n_rows = 1u;$/;"	m	class:Row::fixed
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_bones.hpp	/^  const uword n_rows;$/;"	m	class:SizeCube
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/SizeMat_bones.hpp	/^  const uword n_rows;$/;"	m	class:SizeMat
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  const uword n_rows;    \/\/!< number of rows             (read-only)$/;"	m	class:SpMat
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  const uword n_rows;$/;"	m	class:SpSubview
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const uword            n_rows;$/;"	m	class:diagmat_proxy
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const uword          n_rows;$/;"	m	class:diagmat_proxy_check_default
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const uword     n_rows;$/;"	m	class:diagmat_proxy_default
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const uword    n_rows;$/;"	m	class:diagmat_proxy
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const uword    n_rows;$/;"	m	class:diagmat_proxy_check
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  const uword   n_rows;$/;"	m	class:diagmat_proxy_check
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  static const uword n_rows   = P_is_vec ? T1::n_elem : T1::n_rows;$/;"	m	class:diagmat_proxy_check_fixed
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  static const uword n_rows   = P_is_vec ? T1::n_elem : T1::n_rows;$/;"	m	class:diagmat_proxy_fixed
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/diagview_bones.hpp	/^  const uword n_rows;     \/\/ equal to n_elem$/;"	m	class:diagview
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^  const uword n_rows;     \/\/!< number of rows     (read-only)$/;"	m	class:field
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  mutable uword n_rows;$/;"	m	class:field_injector
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  mutable uword n_rows;$/;"	m	class:mat_injector
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DenseGenMatProd_bones.hpp	/^  const uword n_rows;  \/\/ number of rows of the underlying matrix$/;"	m	class:newarp::DenseGenMatProd
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SparseGenMatProd_bones.hpp	/^  const uword n_rows;  \/\/ number of rows of the underlying matrix$/;"	m	class:newarp::SparseGenMatProd
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_bones.hpp	/^  const uword n_rows;     \/\/ equal to n_elem$/;"	m	class:spdiagview
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^         const uword n_rows;     \/\/ equal to n_elem$/;"	m	class:subview_row_htrans
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^         const uword n_rows;     \/\/ equal to n_elem$/;"	m	class:subview_row_strans
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  const uword n_rows;$/;"	m	class:subview
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^  const uword n_rows;$/;"	m	class:subview_cube
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_bones.hpp	/^  const uword n_rows;$/;"	m	class:subview_field
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_bones.hpp	/^  arma_aligned const uword n_rows;$/;"	m	class:xtrans_mat
n_rows	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_bones.hpp	/^  const uword n_rows;$/;"	m	class:xvec_htrans
n_slices	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  const uword  n_slices;     \/\/!< number of slices   in the cube   (read-only)$/;"	m	class:Cube
n_slices	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_bones.hpp	/^  arma_aligned const uword n_slices;$/;"	m	class:GenCube
n_slices	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_bones.hpp	/^  const uword n_slices;$/;"	m	class:SizeCube
n_slices	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^  const uword n_slices;   \/\/!< number of slices   (read-only)$/;"	m	class:field
n_slices	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^  const uword n_slices;$/;"	m	class:subview_cube
n_slices	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_bones.hpp	/^  const uword n_slices;$/;"	m	class:subview_field
n_unique	lib/armadillo-9.800.2/include/armadillo_bits/fn_n_unique.hpp	/^n_unique$/;"	f
name	include/catch.hpp	/^    StringRef name;$/;"	m	struct:Catch::NameAndTags
name	lib/armadillo-9.800.2/tests/catch.hpp	/^    const char* name;$/;"	m	struct:Catch::NameAndDesc
names	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^  const  std::vector<std::string>& names;$/;"	m	struct:hdf5_misc::hdf5_search_info
nan	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^    nan(typename arma_cx_only<eT>::result* junk = 0)$/;"	f	class:priv::Datum_helper
nan	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^    nan(typename arma_integral_only<eT>::result* junk = 0)$/;"	f	class:priv::Datum_helper
nan	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^    nan(typename arma_real_only<eT>::result* junk = 0)$/;"	f	class:priv::Datum_helper
nan	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT nan;      \/\/!< "not a number"$/;"	m	class:Datum
nan	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::nan       = priv::Datum_helper::nan<eT>();$/;"	m	class:Datum
nan	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT nan()       { return priv::Datum_helper::nan<eT>(); }  \/\/ use datum::nan instead$/;"	f	class:Math
naupd	lib/armadillo-9.800.2/include/armadillo_bits/translate_arpack.hpp	/^  naupd(blas_int* ido, char* bmat, blas_int* n, char* which, blas_int* nev, eeT* tol, eT* resid, blas_int* ncv, eT* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, eT* workd, eT* workl, blas_int* lworkl, eeT* rwork, blas_int* info)$/;"	f	namespace:arpack
ncv	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  const uword             ncv;       \/\/ number of ritz values$/;"	m	class:newarp::GenEigsSolver
ncv	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  const uword       ncv;       \/\/ number of ritz values$/;"	m	class:newarp::SymEigsSolver
neg	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename            arma_signed_only<eT>::result neg (const eT x) { return -x; }$/;"	f	class:eop_aux
neg	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_unsigned_integral_only<eT>::result neg (const eT x) { return  x; }$/;"	f	class:eop_aux
negate	lib/armadillo-9.800.2/tests/catch.hpp	/^        void negate( bool parenthesize ) {$/;"	f	struct:Catch::AssertionResultData
negated	lib/armadillo-9.800.2/tests/catch.hpp	/^        bool negated;$/;"	m	struct:Catch::AssertionResultData
neupd	lib/armadillo-9.800.2/include/armadillo_bits/translate_arpack.hpp	/^  neupd(blas_int* rvec, char* howmny, blas_int* select, eT* dr, eT* di, eT* z, blas_int* ldz, eT* sigmar, eT* sigmai, eT* workev, char* bmat, blas_int* n, char* which, blas_int* nev, eeT* tol, eT* resid, blas_int* ncv, eT* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, eT* workd, eT* workl, blas_int* lworkl, eeT* rwork, blas_int* info)$/;"	f	namespace:arpack
nev	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  const uword             nev;       \/\/ number of eigenvalues requested$/;"	m	class:newarp::GenEigsSolver
nev	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  const uword       nev;       \/\/ number of eigenvalues requested$/;"	m	class:newarp::SymEigsSolver
nev_adjusted	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_meat.hpp	/^GenEigsSolver<eT, SelectionRule, OpType>::nev_adjusted(uword nconv)$/;"	f	class:newarp::GenEigsSolver
nev_adjusted	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_meat.hpp	/^SymEigsSolver<eT, SelectionRule, OpType>::nev_adjusted(uword nconv)$/;"	f	class:newarp::SymEigsSolver
newarp	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool newarp = false;$/;"	m	struct:arma_config
newarp	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool newarp = true;$/;"	m	struct:arma_config
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DenseGenMatProd_bones.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DenseGenMatProd_meat.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_bones.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_meat.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_EigsSelect.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_meat.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SparseGenMatProd_bones.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SparseGenMatProd_meat.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_meat.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_TridiagEigen_bones.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_TridiagEigen_meat.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergEigen_bones.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergEigen_meat.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_bones.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_meat.hpp	/^namespace newarp$/;"	n
newarp	lib/armadillo-9.800.2/include/armadillo_bits/newarp_cx_attrib.hpp	/^namespace newarp$/;"	n
niter	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  uword                   niter;     \/\/ number of restarting iterations$/;"	m	class:newarp::GenEigsSolver
niter	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  uword             niter;     \/\/ number of restarting iterations$/;"	m	class:newarp::SymEigsSolver
nmatop	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  uword                   nmatop;    \/\/ number of matrix operations called$/;"	m	class:newarp::GenEigsSolver
nmatop	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  uword             nmatop;    \/\/ number of matrix operations called$/;"	m	class:newarp::SymEigsSolver
nnzL	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int           nnzL, nnzU;$/;"	m	struct:arma::superlu::__anon6
nnzU	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int           nnzL, nnzU;$/;"	m	struct:arma::superlu::__anon6
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool no    = ((T1::is_col || T1::is_row || T1::is_xvec) == false);$/;"	m	struct:resolves_to_vector_test
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool no    = false;$/;"	m	struct:is_cx
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool no    = false;$/;"	m	struct:is_cx_double
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool no    = false;$/;"	m	struct:is_cx_float
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool no    = false;$/;"	m	struct:is_same_type
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool no    = true;$/;"	m	struct:is_cx
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool no    = true;$/;"	m	struct:is_cx_double
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool no    = true;$/;"	m	struct:is_cx_float
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool no    = true;$/;"	m	struct:is_same_type
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool no    = true;$/;"	m	struct:resolves_to_vector_default
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  typedef char  no[2];$/;"	t	struct:has_nested_glue_traits
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  typedef char  no[2];$/;"	t	struct:has_nested_op_traits
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  typedef char  no[2];$/;"	t	struct:is_Col_fixed_only
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  typedef char  no[2];$/;"	t	struct:is_Mat_fixed_only
no	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  typedef char  no[2];$/;"	t	struct:is_Row_fixed_only
no_approx	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const opts_no_approx    no_approx;$/;"	m	namespace:solve_opts
no_band	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const opts_no_band      no_band;$/;"	m	namespace:solve_opts
no_sympd	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const opts_no_sympd     no_sympd;$/;"	m	namespace:solve_opts
no_trimat	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const opts_no_trimat    no_trimat;$/;"	m	namespace:solve_opts
noexcept	include/catch.hpp	/^        SourceLineInfo& operator = ( SourceLineInfo&& ) noexcept = default;$/;"	m	struct:Catch::SourceLineInfo
noexcept	include/catch.hpp	/^        SourceLineInfo( SourceLineInfo&& )              noexcept = default;$/;"	m	struct:Catch::SourceLineInfo
noexcept	include/catch.hpp	/^        SourceLineInfo( char const* _file, std::size_t _line ) noexcept$/;"	m	struct:Catch::SourceLineInfo
noexcept	include/catch.hpp	/^        StringRef( char const* rawChars ) noexcept;$/;"	m	class:Catch::StringRef
noexcept	include/catch.hpp	/^        bool operator < ( SourceLineInfo const& other ) const noexcept;$/;"	m	struct:Catch::SourceLineInfo
noexcept	include/catch.hpp	/^        bool operator == ( SourceLineInfo const& other ) const noexcept;$/;"	m	struct:Catch::SourceLineInfo
noexcept	include/catch.hpp	/^        void swap( StringRef& other ) noexcept;$/;"	m	class:Catch::StringRef
noexcept	include/catch.hpp	/^    AutoReg( ITestInvoker* invoker, SourceLineInfo const& lineInfo, StringRef const& classOrMethod, NameAndTags const& nameAndTags ) noexcept;$/;"	m	struct:Catch::AutoReg
noexcept	include/catch.hpp	/^    NameAndTags( StringRef const& name_ = StringRef(), StringRef const& tags_ = StringRef() ) noexcept;$/;"	m	struct:Catch::NameAndTags
none	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  static const fill_class<fill_none > none;$/;"	m	namespace:fill
none	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  static const opts_none    none;$/;"	m	namespace:hdf5_opts
none	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const opts_none         none;$/;"	m	namespace:solve_opts
nonzeros	lib/armadillo-9.800.2/docs.html	/^<a name="nonzeros"><\/a>$/;"	a
nonzeros	lib/armadillo-9.800.2/include/armadillo_bits/fn_nonzeros.hpp	/^nonzeros(const Base<typename T1::elem_type,T1>& X)$/;"	f
nonzeros	lib/armadillo-9.800.2/include/armadillo_bits/fn_nonzeros.hpp	/^nonzeros(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
norm	lib/armadillo-9.800.2/docs.html	/^<a name="norm"><\/a>$/;"	a
norm	lib/armadillo-9.800.2/include/armadillo_bits/fn_norm.hpp	/^norm$/;"	f
norm_dot	lib/armadillo-9.800.2/include/armadillo_bits/fn_dot.hpp	/^norm_dot$/;"	f
norm_hist	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::norm_hist(const Base<eT,T1>& expr, const gmm_dist_mode& dist_mode) const$/;"	f	class:gmm_priv::gmm_diag
norm_hist	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::norm_hist(const Base<eT,T1>& expr, const gmm_dist_mode& dist_mode) const$/;"	f	class:gmm_priv::gmm_full
normalise	lib/armadillo-9.800.2/docs.html	/^<a name="normalise"><\/a>$/;"	a
normalise	lib/armadillo-9.800.2/include/armadillo_bits/fn_normalise.hpp	/^normalise$/;"	f
normalise	lib/armadillo-9.800.2/include/armadillo_bits/fn_normalise.hpp	/^normalise(const T& val)$/;"	f
normcdf	lib/armadillo-9.800.2/docs.html	/^<a name="normcdf"><\/a>$/;"	a
normcdf	lib/armadillo-9.800.2/include/armadillo_bits/fn_normcdf.hpp	/^normcdf(const Base<typename T1::elem_type, T1>& X_expr)$/;"	f
normcdf	lib/armadillo-9.800.2/include/armadillo_bits/fn_normcdf.hpp	/^normcdf(const Base<typename T1::elem_type, T1>& X_expr, const Base<typename T1::elem_type, T2>& M_expr, const Base<typename T1::elem_type, T3>& S_expr)$/;"	f
normcdf	lib/armadillo-9.800.2/include/armadillo_bits/fn_normcdf.hpp	/^normcdf(const Base<typename T1::elem_type, T1>& X_expr, const typename T1::elem_type mu, const typename T1::elem_type sigma)$/;"	f
normcdf	lib/armadillo-9.800.2/include/armadillo_bits/fn_normcdf.hpp	/^normcdf(const eT x)$/;"	f
normcdf	lib/armadillo-9.800.2/include/armadillo_bits/fn_normcdf.hpp	/^normcdf(const eT x, const Base<eT, T2>& M_expr, const Base<eT, T3>& S_expr)$/;"	f
normcdf	lib/armadillo-9.800.2/include/armadillo_bits/fn_normcdf.hpp	/^normcdf(const eT x, const eT mu, const eT sigma)$/;"	f
normcdf_helper	lib/armadillo-9.800.2/include/armadillo_bits/fn_normcdf.hpp	/^normcdf_helper(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type, T1>& X_expr, const Base<typename T1::elem_type, T2>& M_expr, const Base<typename T1::elem_type, T3>& S_expr)$/;"	f
normpdf	lib/armadillo-9.800.2/docs.html	/^<a name="normpdf"><\/a>$/;"	a
normpdf	lib/armadillo-9.800.2/include/armadillo_bits/fn_normpdf.hpp	/^normpdf(const Base<typename T1::elem_type, T1>& X_expr)$/;"	f
normpdf	lib/armadillo-9.800.2/include/armadillo_bits/fn_normpdf.hpp	/^normpdf(const Base<typename T1::elem_type, T1>& X_expr, const Base<typename T1::elem_type, T2>& M_expr, const Base<typename T1::elem_type, T3>& S_expr)$/;"	f
normpdf	lib/armadillo-9.800.2/include/armadillo_bits/fn_normpdf.hpp	/^normpdf(const Base<typename T1::elem_type, T1>& X_expr, const typename T1::elem_type mu, const typename T1::elem_type sigma)$/;"	f
normpdf	lib/armadillo-9.800.2/include/armadillo_bits/fn_normpdf.hpp	/^normpdf(const eT x)$/;"	f
normpdf	lib/armadillo-9.800.2/include/armadillo_bits/fn_normpdf.hpp	/^normpdf(const eT x, const Base<eT, T2>& M_expr, const Base<eT, T3>& S_expr)$/;"	f
normpdf	lib/armadillo-9.800.2/include/armadillo_bits/fn_normpdf.hpp	/^normpdf(const eT x, const eT mu, const eT sigma)$/;"	f
normpdf_helper	lib/armadillo-9.800.2/include/armadillo_bits/fn_normpdf.hpp	/^normpdf_helper(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type, T1>& X_expr, const Base<typename T1::elem_type, T2>& M_expr, const Base<typename T1::elem_type, T3>& S_expr)$/;"	f
nrm2	lib/armadillo-9.800.2/include/armadillo_bits/translate_blas.hpp	/^  nrm2(const uword n_elem, const eT* x)$/;"	f	namespace:blas
null	lib/armadillo-9.800.2/docs.html	/^<a name="null"><\/a>$/;"	a
null	lib/armadillo-9.800.2/include/armadillo_bits/fn_orth_null.hpp	/^null(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type, T1>& X, const typename T1::pod_type tol = 0.0)$/;"	f
null	lib/armadillo-9.800.2/include/armadillo_bits/fn_orth_null.hpp	/^null(const Base<typename T1::elem_type, T1>& X, const typename T1::pod_type tol = 0.0)$/;"	f
num	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^  static const uword num = 0;$/;"	m	struct:depth_lhs
num	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^  static const uword num = 1 + depth_lhs<glue_type, T1>::num;$/;"	m	struct:depth_lhs
num_converged	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_meat.hpp	/^GenEigsSolver<eT, SelectionRule, OpType>::num_converged(eT tol)$/;"	f	class:newarp::GenEigsSolver
num_converged	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_meat.hpp	/^SymEigsSolver<eT, SelectionRule, OpType>::num_converged(eT tol)$/;"	f	class:newarp::SymEigsSolver
num_dims	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^  int    num_dims;$/;"	m	struct:hdf5_misc::hdf5_search_info
num_expansions	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int        num_expansions;$/;"	m	struct:arma::superlu::__anon9
num_iterations	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  inline int num_iterations() { return niter; }$/;"	f	class:newarp::GenEigsSolver
num_iterations	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  inline uword num_iterations() { return niter; }$/;"	f	class:newarp::SymEigsSolver
num_lookaheads	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int           num_lookaheads;$/;"	m	struct:arma::superlu::__anon6
num_operations	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  inline int num_operations() { return nmatop; }$/;"	f	class:newarp::GenEigsSolver
num_operations	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  inline uword num_operations() { return nmatop; }$/;"	f	class:newarp::SymEigsSolver
numel	lib/armadillo-9.800.2/include/armadillo_bits/fn_numel.hpp	/^numel(const T1& X)$/;"	f
numel	lib/armadillo-9.800.2/include/armadillo_bits/fn_numel.hpp	/^numel(const field<oT>& X)$/;"	f
numel	lib/armadillo-9.800.2/include/armadillo_bits/fn_numel.hpp	/^numel(const subview_field<oT>& X)$/;"	f
nzlmax	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int        nzlmax;$/;"	m	struct:arma::superlu::__anon9
nzlumax	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int        nzlumax;$/;"	m	struct:arma::superlu::__anon9
nzumax	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int        nzumax;$/;"	m	struct:arma::superlu::__anon9
object_type	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^  typedef oT object_type;$/;"	t	class:field
object_type	lib/armadillo-9.800.2/include/armadillo_bits/injector_bones.hpp	/^  typedef typename T1::object_type object_type;$/;"	t	class:field_injector
object_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_bones.hpp	/^  typedef oT object_type;$/;"	t	class:subview_field
omega_a	src/Polarizability/Polarizability.h	/^    double omega_a;$/;"	m	class:Polarizability
ones	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::ones()$/;"	f	class:Col::fixed
ones	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::ones()$/;"	f	class:Cube
ones	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::ones(const SizeCube& s)$/;"	f	class:Cube
ones	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::ones(const uword in_rows, const uword in_cols, const uword in_slices)$/;"	f	class:Cube
ones	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::ones()$/;"	f	class:Mat::fixed
ones	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::ones()$/;"	f	class:Mat
ones	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::ones(const SizeMat& s)$/;"	f	class:Mat
ones	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::ones(const uword in_elem)$/;"	f	class:Mat
ones	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::ones(const uword in_rows, const uword in_cols)$/;"	f	class:Mat
ones	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::ones()$/;"	f	class:Row::fixed
ones	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::ones()$/;"	f	class:SpSubview
ones	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  static const fill_class<fill_ones > ones;$/;"	m	namespace:fill
ones	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::ones()$/;"	f	class:diagview
ones	lib/armadillo-9.800.2/include/armadillo_bits/fn_ones.hpp	/^ones(const SizeCube& s)$/;"	f
ones	lib/armadillo-9.800.2/include/armadillo_bits/fn_ones.hpp	/^ones(const SizeCube& s, const typename arma_Cube_only<cube_type>::result* junk = 0)$/;"	f
ones	lib/armadillo-9.800.2/include/armadillo_bits/fn_ones.hpp	/^ones(const SizeMat& s)$/;"	f
ones	lib/armadillo-9.800.2/include/armadillo_bits/fn_ones.hpp	/^ones(const SizeMat& s, const typename arma_Mat_Col_Row_only<obj_type>::result* junk = 0)$/;"	f
ones	lib/armadillo-9.800.2/include/armadillo_bits/fn_ones.hpp	/^ones(const uword n_elem)$/;"	f
ones	lib/armadillo-9.800.2/include/armadillo_bits/fn_ones.hpp	/^ones(const uword n_elem, const arma_empty_class junk1 = arma_empty_class(), const typename arma_Mat_Col_Row_only<obj_type>::result* junk2 = 0)$/;"	f
ones	lib/armadillo-9.800.2/include/armadillo_bits/fn_ones.hpp	/^ones(const uword n_rows, const uword n_cols)$/;"	f
ones	lib/armadillo-9.800.2/include/armadillo_bits/fn_ones.hpp	/^ones(const uword n_rows, const uword n_cols, const typename arma_Mat_Col_Row_only<obj_type>::result* junk = 0)$/;"	f
ones	lib/armadillo-9.800.2/include/armadillo_bits/fn_ones.hpp	/^ones(const uword n_rows, const uword n_cols, const uword n_slices)$/;"	f
ones	lib/armadillo-9.800.2/include/armadillo_bits/fn_ones.hpp	/^ones(const uword n_rows, const uword n_cols, const uword n_slices, const typename arma_Cube_only<cube_type>::result* junk = 0)$/;"	f
ones	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::ones()$/;"	f	class:spdiagview
ones	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::ones()$/;"	f	class:subview_cube
ones	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::ones()$/;"	f	class:subview_cube_slices
ones	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::ones()$/;"	f	class:subview_elem1
ones	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::ones()$/;"	f	class:subview_elem2
ones	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::ones()$/;"	f	class:subview
ones	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::ones()$/;"	f	class:subview_col
ones_member	lib/armadillo-9.800.2/docs.html	/^<a name="ones_member"><\/a>$/;"	a
ones_standalone	lib/armadillo-9.800.2/docs.html	/^<a name="ones_standalone"><\/a>$/;"	a
op	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  const OpType&           op;        \/\/ object to conduct matrix operation, e.g. matrix-vector product$/;"	m	class:newarp::GenEigsSolver
op	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  const OpType&     op;        \/\/ object to conduct matrix operation, e.g. matrix-vector product$/;"	m	class:newarp::SymEigsSolver
op_abs	lib/armadillo-9.800.2/include/armadillo_bits/op_misc_bones.hpp	/^class op_abs$/;"	c
op_all	lib/armadillo-9.800.2/include/armadillo_bits/op_all_bones.hpp	/^class op_all$/;"	c
op_any	lib/armadillo-9.800.2/include/armadillo_bits/op_any_bones.hpp	/^class op_any$/;"	c
op_arg	lib/armadillo-9.800.2/include/armadillo_bits/op_misc_bones.hpp	/^class op_arg$/;"	c
op_cdot	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_bones.hpp	/^class op_cdot$/;"	c
op_chi2rnd	lib/armadillo-9.800.2/include/armadillo_bits/op_chi2rnd_bones.hpp	/^class op_chi2rnd$/;"	c
op_chi2rnd_varying_df	lib/armadillo-9.800.2/include/armadillo_bits/op_chi2rnd_bones.hpp	/^class op_chi2rnd_varying_df$/;"	c
op_chi2rnd_varying_df	lib/armadillo-9.800.2/include/armadillo_bits/op_chi2rnd_meat.hpp	/^op_chi2rnd_varying_df<eT>::op_chi2rnd_varying_df()$/;"	f	class:op_chi2rnd_varying_df
op_chol	lib/armadillo-9.800.2/include/armadillo_bits/op_chol_bones.hpp	/^class op_chol$/;"	c
op_clamp	lib/armadillo-9.800.2/include/armadillo_bits/op_clamp_bones.hpp	/^class op_clamp$/;"	c
op_cond	lib/armadillo-9.800.2/include/armadillo_bits/op_cond_bones.hpp	/^class op_cond$/;"	c
op_cor	lib/armadillo-9.800.2/include/armadillo_bits/op_cor_bones.hpp	/^class op_cor$/;"	c
op_cov	lib/armadillo-9.800.2/include/armadillo_bits/op_cov_bones.hpp	/^class op_cov$/;"	c
op_cumprod	lib/armadillo-9.800.2/include/armadillo_bits/op_cumprod_bones.hpp	/^class op_cumprod$/;"	c
op_cumprod_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_cumprod_bones.hpp	/^class op_cumprod_vec$/;"	c
op_cumsum	lib/armadillo-9.800.2/include/armadillo_bits/op_cumsum_bones.hpp	/^class op_cumsum$/;"	c
op_cumsum_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_cumsum_bones.hpp	/^class op_cumsum_vec$/;"	c
op_cx_scalar_div_post	lib/armadillo-9.800.2/include/armadillo_bits/op_cx_scalar_bones.hpp	/^class op_cx_scalar_div_post$/;"	c
op_cx_scalar_div_pre	lib/armadillo-9.800.2/include/armadillo_bits/op_cx_scalar_bones.hpp	/^class op_cx_scalar_div_pre$/;"	c
op_cx_scalar_minus_post	lib/armadillo-9.800.2/include/armadillo_bits/op_cx_scalar_bones.hpp	/^class op_cx_scalar_minus_post$/;"	c
op_cx_scalar_minus_pre	lib/armadillo-9.800.2/include/armadillo_bits/op_cx_scalar_bones.hpp	/^class op_cx_scalar_minus_pre$/;"	c
op_cx_scalar_plus	lib/armadillo-9.800.2/include/armadillo_bits/op_cx_scalar_bones.hpp	/^class op_cx_scalar_plus$/;"	c
op_cx_scalar_times	lib/armadillo-9.800.2/include/armadillo_bits/op_cx_scalar_bones.hpp	/^class op_cx_scalar_times$/;"	c
op_diagmat	lib/armadillo-9.800.2/include/armadillo_bits/op_diagmat_bones.hpp	/^class op_diagmat$/;"	c
op_diagmat2	lib/armadillo-9.800.2/include/armadillo_bits/op_diagmat_bones.hpp	/^class op_diagmat2$/;"	c
op_diagvec	lib/armadillo-9.800.2/include/armadillo_bits/op_diagvec_bones.hpp	/^class op_diagvec$/;"	c
op_diff	lib/armadillo-9.800.2/include/armadillo_bits/op_diff_bones.hpp	/^class op_diff$/;"	c
op_diff_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_diff_bones.hpp	/^class op_diff_vec$/;"	c
op_dot	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_bones.hpp	/^class op_dot$/;"	c
op_dot_mixed	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_bones.hpp	/^class op_dot_mixed$/;"	c
op_dotext	lib/armadillo-9.800.2/include/armadillo_bits/op_dotext_bones.hpp	/^class op_dotext$/;"	c
op_expmat	lib/armadillo-9.800.2/include/armadillo_bits/op_expmat_bones.hpp	/^class op_expmat$/;"	c
op_expmat_sym	lib/armadillo-9.800.2/include/armadillo_bits/op_expmat_bones.hpp	/^class op_expmat_sym$/;"	c
op_fft_cx	lib/armadillo-9.800.2/include/armadillo_bits/op_fft_bones.hpp	/^class op_fft_cx$/;"	c
op_fft_real	lib/armadillo-9.800.2/include/armadillo_bits/op_fft_bones.hpp	/^class op_fft_real$/;"	c
op_find	lib/armadillo-9.800.2/include/armadillo_bits/op_find_bones.hpp	/^class op_find$/;"	c
op_find_finite	lib/armadillo-9.800.2/include/armadillo_bits/op_find_bones.hpp	/^class op_find_finite$/;"	c
op_find_nonfinite	lib/armadillo-9.800.2/include/armadillo_bits/op_find_bones.hpp	/^class op_find_nonfinite$/;"	c
op_find_simple	lib/armadillo-9.800.2/include/armadillo_bits/op_find_bones.hpp	/^class op_find_simple$/;"	c
op_find_unique	lib/armadillo-9.800.2/include/armadillo_bits/op_find_unique_bones.hpp	/^class op_find_unique$/;"	c
op_fliplr	lib/armadillo-9.800.2/include/armadillo_bits/op_flip_bones.hpp	/^class op_fliplr$/;"	c
op_flipud	lib/armadillo-9.800.2/include/armadillo_bits/op_flip_bones.hpp	/^class op_flipud$/;"	c
op_hist	lib/armadillo-9.800.2/include/armadillo_bits/op_hist_bones.hpp	/^class op_hist$/;"	c
op_htrans	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_bones.hpp	/^class op_htrans$/;"	c
op_htrans2	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_bones.hpp	/^class op_htrans2$/;"	c
op_ifft_cx	lib/armadillo-9.800.2/include/armadillo_bits/op_fft_bones.hpp	/^class op_ifft_cx$/;"	c
op_imag	lib/armadillo-9.800.2/include/armadillo_bits/op_misc_bones.hpp	/^class op_imag$/;"	c
op_index_max	lib/armadillo-9.800.2/include/armadillo_bits/op_index_max_bones.hpp	/^class op_index_max$/;"	c
op_index_min	lib/armadillo-9.800.2/include/armadillo_bits/op_index_min_bones.hpp	/^class op_index_min$/;"	c
op_inv	lib/armadillo-9.800.2/include/armadillo_bits/op_inv_bones.hpp	/^class op_inv$/;"	c
op_inv_sympd	lib/armadillo-9.800.2/include/armadillo_bits/op_inv_bones.hpp	/^class op_inv_sympd$/;"	c
op_inv_tr	lib/armadillo-9.800.2/include/armadillo_bits/op_inv_bones.hpp	/^class op_inv_tr$/;"	c
op_iwishrnd	lib/armadillo-9.800.2/include/armadillo_bits/op_wishrnd_bones.hpp	/^class op_iwishrnd$/;"	c
op_logmat	lib/armadillo-9.800.2/include/armadillo_bits/op_logmat_bones.hpp	/^class op_logmat$/;"	c
op_logmat_cx	lib/armadillo-9.800.2/include/armadillo_bits/op_logmat_bones.hpp	/^class op_logmat_cx$/;"	c
op_logmat_sympd	lib/armadillo-9.800.2/include/armadillo_bits/op_logmat_bones.hpp	/^class op_logmat_sympd$/;"	c
op_mat	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DenseGenMatProd_bones.hpp	/^  const Mat<eT>& op_mat;$/;"	m	class:newarp::DenseGenMatProd
op_mat	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SparseGenMatProd_bones.hpp	/^  const SpMat<eT>& op_mat;$/;"	m	class:newarp::SparseGenMatProd
op_max	lib/armadillo-9.800.2/include/armadillo_bits/op_max_bones.hpp	/^class op_max$/;"	c
op_mean	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_bones.hpp	/^class op_mean$/;"	c
op_median	lib/armadillo-9.800.2/include/armadillo_bits/op_median_bones.hpp	/^class op_median$/;"	c
op_min	lib/armadillo-9.800.2/include/armadillo_bits/op_min_bones.hpp	/^class op_min$/;"	c
op_n_unique_add	lib/armadillo-9.800.2/include/armadillo_bits/fn_n_unique.hpp	/^struct op_n_unique_add$/;"	s
op_n_unique_count	lib/armadillo-9.800.2/include/armadillo_bits/fn_n_unique.hpp	/^struct op_n_unique_count$/;"	s
op_n_unique_mul	lib/armadillo-9.800.2/include/armadillo_bits/fn_n_unique.hpp	/^struct op_n_unique_mul$/;"	s
op_n_unique_sub	lib/armadillo-9.800.2/include/armadillo_bits/fn_n_unique.hpp	/^struct op_n_unique_sub$/;"	s
op_nonzeros	lib/armadillo-9.800.2/include/armadillo_bits/op_nonzeros_bones.hpp	/^class op_nonzeros$/;"	c
op_nonzeros_spmat	lib/armadillo-9.800.2/include/armadillo_bits/op_nonzeros_bones.hpp	/^class op_nonzeros_spmat$/;"	c
op_norm	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_bones.hpp	/^class op_norm$/;"	c
op_norm_dot	lib/armadillo-9.800.2/include/armadillo_bits/op_dot_bones.hpp	/^class op_norm_dot$/;"	c
op_normalise_mat	lib/armadillo-9.800.2/include/armadillo_bits/op_normalise_bones.hpp	/^class op_normalise_mat$/;"	c
op_normalise_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_normalise_bones.hpp	/^class op_normalise_vec$/;"	c
op_null	lib/armadillo-9.800.2/include/armadillo_bits/op_orth_null_bones.hpp	/^class op_null$/;"	c
op_orth	lib/armadillo-9.800.2/include/armadillo_bits/op_orth_null_bones.hpp	/^class op_orth$/;"	c
op_pinv	lib/armadillo-9.800.2/include/armadillo_bits/op_pinv_bones.hpp	/^class op_pinv$/;"	c
op_princomp	lib/armadillo-9.800.2/include/armadillo_bits/op_princomp_bones.hpp	/^class op_princomp$/;"	c
op_prod	lib/armadillo-9.800.2/include/armadillo_bits/op_prod_bones.hpp	/^class op_prod$/;"	c
op_range	lib/armadillo-9.800.2/include/armadillo_bits/op_range_bones.hpp	/^class op_range$/;"	c
op_real	lib/armadillo-9.800.2/include/armadillo_bits/op_misc_bones.hpp	/^class op_real$/;"	c
op_rel_eq	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_bones.hpp	/^class op_rel_eq$/;"	c
op_rel_gt_post	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_bones.hpp	/^class op_rel_gt_post$/;"	c
op_rel_gt_pre	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_bones.hpp	/^class op_rel_gt_pre$/;"	c
op_rel_gteq_post	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_bones.hpp	/^class op_rel_gteq_post$/;"	c
op_rel_gteq_pre	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_bones.hpp	/^class op_rel_gteq_pre$/;"	c
op_rel_lt_post	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_bones.hpp	/^class op_rel_lt_post$/;"	c
op_rel_lt_pre	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_bones.hpp	/^class op_rel_lt_pre$/;"	c
op_rel_lteq_post	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_bones.hpp	/^class op_rel_lteq_post$/;"	c
op_rel_lteq_pre	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_bones.hpp	/^class op_rel_lteq_pre$/;"	c
op_rel_noteq	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_bones.hpp	/^class op_rel_noteq$/;"	c
op_repelem	lib/armadillo-9.800.2/include/armadillo_bits/op_repelem_bones.hpp	/^class op_repelem$/;"	c
op_repmat	lib/armadillo-9.800.2/include/armadillo_bits/op_repmat_bones.hpp	/^class op_repmat$/;"	c
op_reshape	lib/armadillo-9.800.2/include/armadillo_bits/op_reshape_bones.hpp	/^class op_reshape$/;"	c
op_reshape_ext	lib/armadillo-9.800.2/include/armadillo_bits/op_reshape_bones.hpp	/^class op_reshape_ext$/;"	c
op_resize	lib/armadillo-9.800.2/include/armadillo_bits/op_resize_bones.hpp	/^class op_resize$/;"	c
op_reverse	lib/armadillo-9.800.2/include/armadillo_bits/op_reverse_bones.hpp	/^class op_reverse$/;"	c
op_reverse_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_reverse_bones.hpp	/^class op_reverse_vec$/;"	c
op_roots	lib/armadillo-9.800.2/include/armadillo_bits/op_roots_bones.hpp	/^class op_roots$/;"	c
op_shift	lib/armadillo-9.800.2/include/armadillo_bits/op_shift_bones.hpp	/^class op_shift$/;"	c
op_shift_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_shift_bones.hpp	/^class op_shift_vec$/;"	c
op_shuffle	lib/armadillo-9.800.2/include/armadillo_bits/op_shuffle_bones.hpp	/^class op_shuffle$/;"	c
op_shuffle_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_shuffle_bones.hpp	/^class op_shuffle_vec$/;"	c
op_sort	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_bones.hpp	/^class op_sort$/;"	c
op_sort_index	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_bones.hpp	/^class op_sort_index$/;"	c
op_sort_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_bones.hpp	/^class op_sort_vec$/;"	c
op_sp_minus_post	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_minus_bones.hpp	/^class op_sp_minus_post$/;"	c
op_sp_minus_pre	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_minus_bones.hpp	/^class op_sp_minus_pre$/;"	c
op_sp_plus	lib/armadillo-9.800.2/include/armadillo_bits/op_sp_plus_bones.hpp	/^class op_sp_plus$/;"	c
op_sqrtmat	lib/armadillo-9.800.2/include/armadillo_bits/op_sqrtmat_bones.hpp	/^class op_sqrtmat$/;"	c
op_sqrtmat_cx	lib/armadillo-9.800.2/include/armadillo_bits/op_sqrtmat_bones.hpp	/^class op_sqrtmat_cx$/;"	c
op_sqrtmat_sympd	lib/armadillo-9.800.2/include/armadillo_bits/op_sqrtmat_bones.hpp	/^class op_sqrtmat_sympd$/;"	c
op_stable_sort_index	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_bones.hpp	/^class op_stable_sort_index$/;"	c
op_stddev	lib/armadillo-9.800.2/include/armadillo_bits/op_stddev_bones.hpp	/^class op_stddev$/;"	c
op_strans	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^class op_strans$/;"	c
op_strans2	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^class op_strans2$/;"	c
op_strans_cube	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^class op_strans_cube$/;"	c
op_sum	lib/armadillo-9.800.2/include/armadillo_bits/op_sum_bones.hpp	/^class op_sum$/;"	c
op_symmat	lib/armadillo-9.800.2/include/armadillo_bits/op_symmat_bones.hpp	/^class op_symmat$/;"	c
op_symmat_cx	lib/armadillo-9.800.2/include/armadillo_bits/op_symmat_bones.hpp	/^class op_symmat_cx$/;"	c
op_toeplitz	lib/armadillo-9.800.2/include/armadillo_bits/op_toeplitz_bones.hpp	/^class op_toeplitz$/;"	c
op_toeplitz_c	lib/armadillo-9.800.2/include/armadillo_bits/op_toeplitz_bones.hpp	/^class op_toeplitz_c$/;"	c
op_trapz	lib/armadillo-9.800.2/include/armadillo_bits/glue_trapz_bones.hpp	/^class op_trapz$/;"	c
op_trimat	lib/armadillo-9.800.2/include/armadillo_bits/op_trimat_bones.hpp	/^class op_trimat$/;"	c
op_trimatl_ext	lib/armadillo-9.800.2/include/armadillo_bits/op_trimat_bones.hpp	/^class op_trimatl_ext$/;"	c
op_trimatu_ext	lib/armadillo-9.800.2/include/armadillo_bits/op_trimat_bones.hpp	/^class op_trimatu_ext$/;"	c
op_unique	lib/armadillo-9.800.2/include/armadillo_bits/op_unique_bones.hpp	/^class op_unique$/;"	c
op_unique_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_unique_bones.hpp	/^class op_unique_vec$/;"	c
op_var	lib/armadillo-9.800.2/include/armadillo_bits/op_var_bones.hpp	/^class op_var$/;"	c
op_vectorise_all	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_bones.hpp	/^class op_vectorise_all$/;"	c
op_vectorise_col	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_bones.hpp	/^class op_vectorise_col$/;"	c
op_vectorise_cube_col	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_bones.hpp	/^class op_vectorise_cube_col$/;"	c
op_vectorise_row	lib/armadillo-9.800.2/include/armadillo_bits/op_vectorise_bones.hpp	/^class op_vectorise_row$/;"	c
op_wishrnd	lib/armadillo-9.800.2/include/armadillo_bits/op_wishrnd_bones.hpp	/^class op_wishrnd$/;"	c
openmp	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool openmp = false;$/;"	m	struct:arma_config
openmp	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool openmp = true;$/;"	m	struct:arma_config
operator !	lib/armadillo-9.800.2/tests/catch.hpp	/^        MatchNotOf<ComparatorT> MatcherBase<ObjectT, ComparatorT>::operator ! () const {$/;"	f	class:Catch::Matchers::Impl::MatcherBase
operator !	lib/armadillo-9.800.2/tests/catch.hpp	/^        bool operator !() const { return m_p == CATCH_NULL; }$/;"	f	class:Catch::Ptr
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::operator!=(const const_row_col_iterator& rhs) const$/;"	f	class:Mat::const_row_col_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::operator!=(const row_col_iterator& rhs) const$/;"	f	class:Mat::const_row_col_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_iterator::operator!=(const typename Mat<eT>::const_row_iterator& X) const$/;"	f	class:Mat::const_row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_iterator::operator!=(const typename Mat<eT>::row_iterator& X) const$/;"	f	class:Mat::const_row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_col_iterator::operator!=(const const_row_col_iterator& rhs) const$/;"	f	class:Mat::row_col_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_col_iterator::operator!=(const row_col_iterator& rhs) const$/;"	f	class:Mat::row_col_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_iterator::operator!=(const typename Mat<eT>::const_row_iterator& X) const$/;"	f	class:Mat::row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_iterator::operator!=(const typename Mat<eT>::row_iterator& X) const$/;"	f	class:Mat::row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_meat.hpp	/^SizeCube::operator!=(const SizeCube& s) const$/;"	f	class:SizeCube
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SizeMat_meat.hpp	/^SizeMat::operator!=(const SizeMat& s) const$/;"	f	class:SizeMat
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::operator!=(const const_iterator& rhs) const$/;"	f	class:SpMat::const_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::operator!=(const const_row_iterator& rhs) const$/;"	f	class:SpMat::const_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::operator!=(const typename SpSubview<eT>::const_iterator& rhs) const$/;"	f	class:SpMat::const_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::operator!=(const typename SpSubview<eT>::const_row_iterator& rhs) const$/;"	f	class:SpMat::const_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::operator!=(const const_iterator& rhs) const$/;"	f	class:SpMat::const_row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::operator!=(const const_row_iterator& rhs) const$/;"	f	class:SpMat::const_row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::operator!=(const typename SpSubview<eT>::const_iterator& rhs) const$/;"	f	class:SpMat::const_row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::operator!=(const typename SpSubview<eT>::const_row_iterator& rhs) const$/;"	f	class:SpMat::const_row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::operator!=(const const_iterator& rhs) const$/;"	f	class:SpSubview::const_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::operator!=(const const_row_iterator& rhs) const$/;"	f	class:SpSubview::const_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::operator!=(const typename SpMat<eT>::const_iterator& rhs) const$/;"	f	class:SpSubview::const_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::operator!=(const typename SpMat<eT>::const_row_iterator& rhs) const$/;"	f	class:SpSubview::const_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::operator!=(const const_iterator& rhs) const$/;"	f	class:SpSubview::const_row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::operator!=(const const_row_iterator& rhs) const$/;"	f	class:SpSubview::const_row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::operator!=(const typename SpMat<eT>::const_iterator& rhs) const$/;"	f	class:SpSubview::const_row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::operator!=(const typename SpMat<eT>::const_row_iterator& rhs) const$/;"	f	class:SpSubview::const_row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::const_iterator::operator!=(const typename field<oT>::const_iterator& X) const$/;"	f	class:field::const_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::iterator::operator!=(const typename field<oT>::iterator& X) const$/;"	f	class:field::iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^inline bool operator!=(const gmm_dist_mode& a, const gmm_dist_mode& b) { return (a.id != b.id); }$/;"	f
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^inline bool operator!=(const gmm_seed_mode& a, const gmm_seed_mode& b) { return (a.id != b.id); }$/;"	f
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/operator_cube_relational.hpp	/^operator!=$/;"	f
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/operator_relational.hpp	/^operator!=$/;"	f
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::const_iterator::operator!=(const const_iterator& rhs) const$/;"	f	class:subview_cube::const_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::const_iterator::operator!=(const iterator& rhs) const$/;"	f	class:subview_cube::const_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::iterator::operator!=(const const_iterator& rhs) const$/;"	f	class:subview_cube::iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::iterator::operator!=(const iterator& rhs) const$/;"	f	class:subview_cube::iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_iterator::operator!=(const const_iterator& rhs) const$/;"	f	class:subview::const_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_iterator::operator!=(const iterator& rhs) const$/;"	f	class:subview::const_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_row_iterator::operator!=(const const_row_iterator& rhs) const$/;"	f	class:subview::const_row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_row_iterator::operator!=(const row_iterator& rhs) const$/;"	f	class:subview::const_row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::iterator::operator!=(const const_iterator& rhs) const$/;"	f	class:subview::iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::iterator::operator!=(const iterator& rhs) const$/;"	f	class:subview::iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::row_iterator::operator!=(const const_row_iterator& rhs) const$/;"	f	class:subview::row_iterator
operator !=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::row_iterator::operator!=(const row_iterator& rhs) const$/;"	f	class:subview::row_iterator
operator %	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  operator% (const basic_format<T1,T2>& X, const T3& arg)$/;"	f	namespace:arma_str
operator %	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  operator% (const format& X, const T2& arg)$/;"	f	namespace:arma_str
operator %	lib/armadillo-9.800.2/include/armadillo_bits/operator_cube_schur.hpp	/^operator%$/;"	f
operator %	lib/armadillo-9.800.2/include/armadillo_bits/operator_schur.hpp	/^operator%$/;"	f
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator%=(const Cube<eT>& m)$/;"	f	class:Cube
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator%=(const GenCube<eT, gen_type>& X)$/;"	f	class:Cube
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator%=(const GlueCube<T1, T2, glue_type>& X)$/;"	f	class:Cube
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator%=(const OpCube<T1, op_type>& X)$/;"	f	class:Cube
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator%=(const eGlueCube<T1, T2, eglue_type>& X)$/;"	f	class:Cube
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator%=(const eOpCube<T1, eop_type>& X)$/;"	f	class:Cube
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator%=(const mtGlueCube<eT, T1, T2, glue_type>& X)$/;"	f	class:Cube
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator%=(const mtOpCube<eT, T1, op_type>& X)$/;"	f	class:Cube
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator%=(const subview_cube<eT>& X)$/;"	f	class:Cube
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator%=(const subview_cube_slices<eT,T1>& X)$/;"	f	class:Cube
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const BaseCube<eT,T1>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const CubeToMatOp<T1, op_type>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const Gen<T1, gen_type>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const Glue<T1, T2, glue_type>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const Mat<eT>& m)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const Op<T1, op_type>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const SpBase<eT, T1>& m)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const SpToDOp<T1, op_type>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const diagview<eT>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const eGlue<T1, T2, eglue_type>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const eOp<T1, eop_type>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const mtGlue<eT, T1, T2, glue_type>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const mtOp<eT, T1, op_type>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const spdiagview<eT>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const subview<eT>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const subview_cube<eT>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const subview_elem1<eT,T1>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator%=(const subview_elem2<eT,T1,T2>& X)$/;"	f	class:Mat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator%=(const Base<eT, T1>& x)$/;"	f	class:SpMat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator%=(const Op<T1, op_diagmat>& expr)$/;"	f	class:SpMat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator%=(const SpGlue<T1, T2, spglue_type>& X)$/;"	f	class:SpMat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator%=(const SpMat<eT>& y)$/;"	f	class:SpMat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator%=(const SpOp<T1, spop_type>& X)$/;"	f	class:SpMat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator%=(const SpSubview<eT>& x)$/;"	f	class:SpMat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator%=(const mtSpGlue<eT, T1, T2, spglue_type>& X)$/;"	f	class:SpMat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator%=(const mtSpOp<eT, T1, spop_type>& X)$/;"	f	class:SpMat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator%=(const spdiagview<eT>& X)$/;"	f	class:SpMat
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator%=(const Base<eT, T1>& x)$/;"	f	class:SpSubview
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator%=(const SpBase<eT, T1>& x)$/;"	f	class:SpSubview
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator%=(const Base<eT,T1>& o)$/;"	f	class:diagview
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator%=(const Base<eT,T1>& o)$/;"	f	class:spdiagview
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator%=(const SpBase<eT,T1>& o)$/;"	f	class:spdiagview
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each1<eT>::operator%= (const Base<eT,T1>& in)$/;"	f	class:subview_cube_each1
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each2<eT,TB>::operator%= (const Base<eT,T1>& in)$/;"	f	class:subview_cube_each2
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator%= (const Base<eT,T1>& in)$/;"	f	class:subview_cube
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator%= (const BaseCube<eT,T1>& in)$/;"	f	class:subview_cube
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator%= (const subview_cube<eT>& x)$/;"	f	class:subview_cube
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator%= (const BaseCube<eT,expr>& x)$/;"	f	class:subview_cube_slices
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator%= (const subview_cube_slices<eT,T2>& x)$/;"	f	class:subview_cube_slices
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each1<parent,mode>::operator%= (const Base<eT,T1>& in)$/;"	f	class:subview_each1
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each2<parent,mode,TB>::operator%= (const Base<eT,T1>& in)$/;"	f	class:subview_each2
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator%= (const Base<eT,T2>& x)$/;"	f	class:subview_elem1
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator%= (const subview_elem1<eT,T2>& x)$/;"	f	class:subview_elem1
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator%= (const Base<eT,expr>& x)$/;"	f	class:subview_elem2
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator%= (const subview_elem2<eT,T3,T4>& x)$/;"	f	class:subview_elem2
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator%= (const Base<eT,T1>& in)$/;"	f	class:subview
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator%= (const subview& x)$/;"	f	class:subview
operator %=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator%=(const SpBase<eT, T1>& x)$/;"	f	class:subview
operator &&	lib/armadillo-9.800.2/include/armadillo_bits/operator_cube_relational.hpp	/^operator&&$/;"	f
operator &&	lib/armadillo-9.800.2/include/armadillo_bits/operator_relational.hpp	/^operator&&$/;"	f
operator &&	lib/armadillo-9.800.2/tests/catch.hpp	/^            MatchAllOf<ArgT>& operator && ( MatcherBase<ArgT> const& other ) {$/;"	f	struct:Catch::Matchers::Impl::MatchAllOf
operator &&	lib/armadillo-9.800.2/tests/catch.hpp	/^        MatchAllOf<ComparatorT> MatcherBase<ObjectT, ComparatorT>::operator && ( MatcherBase const& other ) const {$/;"	f	class:Catch::Matchers::Impl::MatcherBase
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::operator() (const uword ii) const$/;"	f	class:Col::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::operator() (const uword ii)$/;"	f	class:Col::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::operator() (const uword in_row, const uword in_col) const$/;"	f	class:Col::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::operator() (const uword in_row, const uword in_col)$/;"	f	class:Col::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::operator()(const span& row_span) const$/;"	f	class:Col
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::operator()(const span& row_span)$/;"	f	class:Col
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::operator() (const uword i) const$/;"	f	class:Cube::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::operator() (const uword i)$/;"	f	class:Cube::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::operator() (const uword in_row, const uword in_col, const uword in_slice) const$/;"	f	class:Cube::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::operator() (const uword in_row, const uword in_col, const uword in_slice)$/;"	f	class:Cube::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator() (const uword i) const$/;"	f	class:Cube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator() (const uword i)$/;"	f	class:Cube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator() (const uword in_row, const uword in_col, const uword in_slice) const$/;"	f	class:Cube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator() (const uword in_row, const uword in_col, const uword in_slice)$/;"	f	class:Cube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator()(const Base<uword,T1>& a) const$/;"	f	class:Cube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator()(const Base<uword,T1>& a)$/;"	f	class:Cube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator()(const span& row_span, const span& col_span, const span& slice_span) const$/;"	f	class:Cube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator()(const span& row_span, const span& col_span, const span& slice_span)$/;"	f	class:Cube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator()(const uword in_row1, const uword in_col1, const uword in_slice1, const SizeCube& s) const$/;"	f	class:Cube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator()(const uword in_row1, const uword in_col1, const uword in_slice1, const SizeCube& s)$/;"	f	class:Cube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::operator()(const uword in_row, const uword in_col) const$/;"	f	class:MapMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::operator()(const uword in_row, const uword in_col)$/;"	f	class:MapMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::operator()(const uword index) const$/;"	f	class:MapMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::operator()(const uword index)$/;"	f	class:MapMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::operator() (const uword ii) const$/;"	f	class:Mat::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::operator() (const uword ii)$/;"	f	class:Mat::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::operator() (const uword in_row, const uword in_col) const$/;"	f	class:Mat::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::operator() (const uword in_row, const uword in_col)$/;"	f	class:Mat::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator() (const uword ii) const$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator() (const uword ii)$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator() (const uword in_row, const uword in_col) const$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator() (const uword in_row, const uword in_col)$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator()(const Base<uword,T1>& a) const$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator()(const Base<uword,T1>& a)$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator()(const Base<uword,T1>& ri, const Base<uword,T2>& ci) const$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator()(const Base<uword,T1>& ri, const Base<uword,T2>& ci)$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator()(const span& row_span, const span& col_span) const$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator()(const span& row_span, const span& col_span)$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator()(const span& row_span, const uword col_num) const$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator()(const span& row_span, const uword col_num)$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator()(const uword in_row1, const uword in_col1, const SizeMat& s) const$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator()(const uword in_row1, const uword in_col1, const SizeMat& s)$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator()(const uword row_num, const span& col_span) const$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator()(const uword row_num, const span& col_span)$/;"	f	class:Mat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::operator() (const uword ii) const$/;"	f	class:Row::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::operator() (const uword ii)$/;"	f	class:Row::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::operator() (const uword in_row, const uword in_col) const$/;"	f	class:Row::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::operator() (const uword in_row, const uword in_col)$/;"	f	class:Row::fixed
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::operator()(const span& col_span) const$/;"	f	class:Row
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::operator()(const span& col_span)$/;"	f	class:Row
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_meat.hpp	/^SizeCube::operator()(const uword dim) const$/;"	f	class:SizeCube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SizeMat_meat.hpp	/^SizeMat::operator()(const uword dim) const$/;"	f	class:SizeMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator()(const span& row_span, const span& col_span) const$/;"	f	class:SpMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator()(const span& row_span, const span& col_span)$/;"	f	class:SpMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator()(const span& row_span, const uword col_num) const$/;"	f	class:SpMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator()(const span& row_span, const uword col_num)$/;"	f	class:SpMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator()(const uword i) const$/;"	f	class:SpMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator()(const uword i)$/;"	f	class:SpMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator()(const uword in_row, const uword in_col) const$/;"	f	class:SpMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator()(const uword in_row, const uword in_col)$/;"	f	class:SpMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator()(const uword in_row1, const uword in_col1, const SizeMat& s) const$/;"	f	class:SpMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator()(const uword in_row1, const uword in_col1, const SizeMat& s)$/;"	f	class:SpMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator()(const uword row_num, const span& col_span) const$/;"	f	class:SpMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator()(const uword row_num, const span& col_span)$/;"	f	class:SpMat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator()(const span& row_span, const span& col_span) const$/;"	f	class:SpSubview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator()(const span& row_span, const span& col_span)$/;"	f	class:SpSubview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator()(const span& row_span, const uword col_num) const$/;"	f	class:SpSubview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator()(const span& row_span, const uword col_num)$/;"	f	class:SpSubview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator()(const uword i) const$/;"	f	class:SpSubview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator()(const uword i)$/;"	f	class:SpSubview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator()(const uword in_row, const uword in_col) const$/;"	f	class:SpSubview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator()(const uword in_row, const uword in_col)$/;"	f	class:SpSubview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator()(const uword row_num, const span& col_span) const$/;"	f	class:SpSubview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator()(const uword row_num, const span& col_span)$/;"	f	class:SpSubview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^  arma_inline bool operator() (const eT a, const eT b) const { return (a < b); }$/;"	f	struct:arma_lt_comparator
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^  arma_inline bool operator() (const eT a, const eT b) const { return (a <= b); }$/;"	f	struct:arma_leq_comparator
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^  arma_inline bool operator() (const eT a, const eT b) const { return (a > b); }$/;"	f	struct:arma_gt_comparator
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^  arma_inline bool operator() (const eT a, const eT b) const { return (a >= b); }$/;"	f	struct:arma_geq_comparator
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^  inline bool operator() (const eT& a, const eT& b) const { return (std::abs(a) < std::abs(b)); }$/;"	f	struct:arma_lt_comparator
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^  inline bool operator() (const eT& a, const eT& b) const { return (std::abs(a) <= std::abs(b)); }$/;"	f	struct:arma_leq_comparator
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^  inline bool operator() (const eT& a, const eT& b) const { return (std::abs(a) > std::abs(b)); }$/;"	f	struct:arma_gt_comparator
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/arma_rel_comparators.hpp	/^  inline bool operator() (const eT& a, const eT& b) const { return (std::abs(a) >= std::abs(b)); }$/;"	f	struct:arma_geq_comparator
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator()(const uword ii) const$/;"	f	class:diagview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator()(const uword ii)$/;"	f	class:diagview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator()(const uword row, const uword col) const$/;"	f	class:diagview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator()(const uword row, const uword col)$/;"	f	class:diagview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator() (const uword i) const$/;"	f	class:field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator() (const uword i)$/;"	f	class:field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator() (const uword in_row, const uword in_col) const$/;"	f	class:field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator() (const uword in_row, const uword in_col)$/;"	f	class:field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator() (const uword in_row, const uword in_col, const uword in_slice) const$/;"	f	class:field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator() (const uword in_row, const uword in_col, const uword in_slice)$/;"	f	class:field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator()(const span& row_span, const span& col_span) const$/;"	f	class:field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator()(const span& row_span, const span& col_span)$/;"	f	class:field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator()(const span& row_span, const span& col_span, const span& slice_span) const$/;"	f	class:field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator()(const span& row_span, const span& col_span, const span& slice_span)$/;"	f	class:field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator()(const uword in_row1, const uword in_col1, const SizeMat& s) const$/;"	f	class:field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator()(const uword in_row1, const uword in_col1, const SizeMat& s)$/;"	f	class:field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator()(const uword in_row1, const uword in_col1, const uword in_slice1, const SizeCube& s) const$/;"	f	class:field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator()(const uword in_row1, const uword in_col1, const uword in_slice1, const SizeCube& s)$/;"	f	class:field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_meat.hpp	/^running_mean_scalar<eT>::operator() (const eT X)$/;"	f	class:gmm_priv::running_mean_scalar
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^  arma_inline bool operator() (const PairType& v1, const PairType& v2)$/;"	f	struct:newarp::PairComparator
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/op_chi2rnd_meat.hpp	/^op_chi2rnd_varying_df<eT>::operator()(const eT df)$/;"	f	class:op_chi2rnd_varying_df
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/op_find_unique_bones.hpp	/^  operator() (const arma_find_unique_packet< std::complex<T> >& A, const arma_find_unique_packet< std::complex<T> >& B) const$/;"	f	struct:arma_find_unique_comparator
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/op_find_unique_bones.hpp	/^  operator() (const arma_find_unique_packet<eT>& A, const arma_find_unique_packet<eT>& B) const$/;"	f	struct:arma_find_unique_comparator
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_bones.hpp	/^  operator() (const arma_sort_index_packet<eT>& A, const arma_sort_index_packet<eT>& B) const$/;"	f	struct:arma_sort_index_helper_ascend
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_bones.hpp	/^  operator() (const arma_sort_index_packet<eT>& A, const arma_sort_index_packet<eT>& B) const$/;"	f	struct:arma_sort_index_helper_descend
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/op_unique_bones.hpp	/^  operator() (const eT a, const eT b) const$/;"	f	struct:arma_unique_comparator
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/op_unique_bones.hpp	/^  operator() (const std::complex<T>& a, const std::complex<T>& b) const$/;"	f	struct:arma_unique_comparator
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::operator() (const uword i) const$/;"	f	class:podarray
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::operator() (const uword i)$/;"	f	class:podarray
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat<eT>::operator() (const std::complex< typename running_stat<eT>::T >& sample)$/;"	f	class:running_stat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat<eT>::operator() (const typename running_stat<eT>::T sample)$/;"	f	class:running_stat
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::operator() (const Base< std::complex<typename running_stat_vec<obj_type>::T>, T1>& X)$/;"	f	class:running_stat_vec
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::operator() (const Base<typename running_stat_vec<obj_type>::T, T1>& X)$/;"	f	class:running_stat_vec
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator()(const uword i) const$/;"	f	class:spdiagview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator()(const uword i)$/;"	f	class:spdiagview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator()(const uword row, const uword col) const$/;"	f	class:spdiagview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator()(const uword row, const uword col)$/;"	f	class:spdiagview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline T operator()(const std::complex<T>& val) const { return std::abs(val); }$/;"	f	struct:priv::functor_cx_abs
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline T operator()(const std::complex<T>& val) const { return std::arg(val); }$/;"	f	struct:priv::functor_cx_arg
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline T operator()(const std::complex<T>& val) const { return val.imag(); }$/;"	f	struct:priv::functor_imag
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline T operator()(const std::complex<T>& val) const { return val.real(); }$/;"	f	struct:priv::functor_real
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline eT operator()(const eT val) const { return arma_arg<eT>::eval(val); }$/;"	f	struct:priv::functor_arg
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline eT operator()(const eT val) const { return arma_sign(val); }$/;"	f	struct:priv::functor_sign
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline eT operator()(const eT val) const { return eop_aux::arma_abs(val); }$/;"	f	struct:priv::functor_abs
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline eT operator()(const eT val) const { return eop_aux::ceil(val); }$/;"	f	struct:priv::functor_ceil
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline eT operator()(const eT val) const { return eop_aux::conj(val); }$/;"	f	struct:priv::functor_conj
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline eT operator()(const eT val) const { return eop_aux::floor(val); }$/;"	f	struct:priv::functor_floor
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline eT operator()(const eT val) const { return eop_aux::round(val); }$/;"	f	struct:priv::functor_round
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline eT operator()(const eT val) const { return eop_aux::sqrt(val); }$/;"	f	struct:priv::functor_sqrt
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline eT operator()(const eT val) const { return eop_aux::trunc(val); }$/;"	f	struct:priv::functor_trunc
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline eT operator()(const eT val) const { return val * k; }$/;"	f	struct:priv::functor_scalar_times
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline eT operator()(const eT val) const { return val*val; }$/;"	f	struct:priv::functor_square
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    arma_inline out_eT operator()(const T val) const { return val * k; }$/;"	f	struct:priv::functor_cx_scalar_times
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator()(const uword i) const$/;"	f	class:subview_cube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator()(const uword i)$/;"	f	class:subview_cube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator()(const uword in_row, const uword in_col, const uword in_slice) const$/;"	f	class:subview_cube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator()(const uword in_row, const uword in_col, const uword in_slice)$/;"	f	class:subview_cube
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::operator()(const uword i) const$/;"	f	class:subview_field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::operator()(const uword i)$/;"	f	class:subview_field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::operator()(const uword in_row, const uword in_col) const$/;"	f	class:subview_field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::operator()(const uword in_row, const uword in_col)$/;"	f	class:subview_field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::operator()(const uword in_row, const uword in_col, const uword in_slice) const$/;"	f	class:subview_field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::operator()(const uword in_row, const uword in_col, const uword in_slice)$/;"	f	class:subview_field
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator()(const span& row_span, const span& col_span) const$/;"	f	class:subview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator()(const span& row_span, const span& col_span)$/;"	f	class:subview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator()(const span& row_span, const uword col_num) const$/;"	f	class:subview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator()(const span& row_span, const uword col_num)$/;"	f	class:subview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator()(const uword ii) const$/;"	f	class:subview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator()(const uword ii)$/;"	f	class:subview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator()(const uword in_row, const uword in_col) const$/;"	f	class:subview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator()(const uword in_row, const uword in_col)$/;"	f	class:subview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator()(const uword row_num, const span& col_span) const$/;"	f	class:subview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator()(const uword row_num, const span& col_span)$/;"	f	class:subview
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::operator()(const uword ii) const$/;"	f	class:subview_col
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::operator()(const uword ii)$/;"	f	class:subview_col
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::operator()(const uword in_row, const uword in_col) const$/;"	f	class:subview_col
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::operator()(const uword in_row, const uword in_col)$/;"	f	class:subview_col
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::operator()(const uword ii) const$/;"	f	class:subview_row
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::operator()(const uword ii)$/;"	f	class:subview_row
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::operator()(const uword in_row, const uword in_col) const$/;"	f	class:subview_row
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::operator()(const uword in_row, const uword in_col)$/;"	f	class:subview_row
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row_htrans<eT>::operator()(const uword ii) const$/;"	f	class:subview_row_htrans
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row_htrans<eT>::operator()(const uword in_row, const uword in_col) const$/;"	f	class:subview_row_htrans
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row_strans<eT>::operator()(const uword ii) const$/;"	f	class:subview_row_strans
operator ()	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row_strans<eT>::operator()(const uword in_row, const uword in_col) const$/;"	f	class:subview_row_strans
operator *	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::operator*() const$/;"	f	class:Mat::const_row_col_iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_iterator::operator*() const$/;"	f	class:Mat::const_row_iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_col_iterator::operator*()$/;"	f	class:Mat::row_col_iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_iterator::operator*()$/;"	f	class:Mat::row_iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_meat.hpp	/^SizeCube::operator*(const uword val) const$/;"	f	class:SizeCube
operator *	lib/armadillo-9.800.2/include/armadillo_bits/SizeMat_meat.hpp	/^SizeMat::operator*(const uword val) const$/;"	f	class:SizeMat
operator *	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    arma_inline eT operator*() const { return iterator_base::M->values[actual_pos]; }$/;"	f	class:SpMat::const_row_iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::iterator::operator*()$/;"	f	class:SpMat::iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::iterator_base::operator*() const$/;"	f	class:SpMat::iterator_base
operator *	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::row_iterator::operator*()$/;"	f	class:SpMat::row_iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    arma_inline eT operator*() const { return iterator_base::M->m.values[actual_pos]; }$/;"	f	class:SpSubview::const_row_iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::operator*() const$/;"	f	class:SpSubview::const_iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::iterator::operator*()$/;"	f	class:SpSubview::iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::row_iterator::operator*()$/;"	f	class:SpSubview::row_iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::const_iterator::operator*() const$/;"	f	class:field::const_iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::iterator::operator*()$/;"	f	class:field::iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/operator_cube_times.hpp	/^operator*$/;"	f
operator *	lib/armadillo-9.800.2/include/armadillo_bits/operator_times.hpp	/^operator*$/;"	f
operator *	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::const_iterator::operator*()$/;"	f	class:subview_cube::const_iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::iterator::operator*()$/;"	f	class:subview_cube::iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_iterator::operator*()$/;"	f	class:subview::const_iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_row_iterator::operator*() const$/;"	f	class:subview::const_row_iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::iterator::operator*()$/;"	f	class:subview::iterator
operator *	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::row_iterator::operator*()$/;"	f	class:subview::row_iterator
operator *	lib/armadillo-9.800.2/tests/catch.hpp	/^        T& operator*() const { return *m_p; }$/;"	f	class:Catch::Ptr
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator*=(const eT val)$/;"	f	class:Cube
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat_val<eT>::operator*=(const eT in_val)$/;"	f	class:MapMat_val
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::operator*=(const eT in_val)$/;"	f	class:SpMat_MapMat_val
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpSubview_MapMat_val<eT>::operator*=(const eT in_val)$/;"	f	class:SpSubview_MapMat_val
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const BaseCube<eT,T1>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const CubeToMatOp<T1, op_type>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const Gen<T1, gen_type>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const Glue<T1, T2, glue_type>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const Mat<eT>& m)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const Op<T1, op_type>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const SpBase<eT, T1>& m)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const SpToDOp<T1, op_type>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const diagview<eT>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const eGlue<T1, T2, eglue_type>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const eOp<T1, eop_type>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const eT val)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const mtGlue<eT, T1, T2, glue_type>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const mtOp<eT, T1, op_type>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const spdiagview<eT>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const subview<eT>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const subview_cube<eT>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const subview_elem1<eT,T1>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator*=(const subview_elem2<eT,T1,T2>& X)$/;"	f	class:Mat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator*=(const Base<eT, T1>& y)$/;"	f	class:SpMat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator*=(const Op<T1, op_diagmat>& expr)$/;"	f	class:SpMat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator*=(const SpGlue<T1, T2, spglue_type>& X)$/;"	f	class:SpMat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator*=(const SpMat<eT>& y)$/;"	f	class:SpMat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator*=(const SpOp<T1, spop_type>& X)$/;"	f	class:SpMat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator*=(const SpSubview<eT>& y)$/;"	f	class:SpMat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator*=(const eT val)$/;"	f	class:SpMat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator*=(const mtSpGlue<eT, T1, T2, spglue_type>& X)$/;"	f	class:SpMat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator*=(const mtSpOp<eT, T1, spop_type>& X)$/;"	f	class:SpMat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator*=(const spdiagview<eT>& X)$/;"	f	class:SpMat
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator*=(const Base<eT, T1>& x)$/;"	f	class:SpSubview
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator*=(const SpBase<eT, T1>& x)$/;"	f	class:SpSubview
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator*=(const eT val)$/;"	f	class:SpSubview
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::operator*=(const eT rhs)$/;"	f	class:SpValProxy
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator*=(const eT val)$/;"	f	class:diagview
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator*=(const eT val)$/;"	f	class:spdiagview
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each1<eT>::operator*= (const Base<eT,T1>& in)$/;"	f	class:subview_cube_each1
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator*= (const eT val)$/;"	f	class:subview_cube
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator*= (const eT val)$/;"	f	class:subview_cube_slices
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator*= (const eT val)$/;"	f	class:subview_elem1
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator*= (const eT val)$/;"	f	class:subview_elem2
operator *=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator*= (const eT val)$/;"	f	class:subview
operator +	include/catch.hpp	/^    T const& operator + ( T const& value, StreamEndStop ) {$/;"	f	namespace:Catch
operator +	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_meat.hpp	/^SizeCube::operator+(const SizeCube& s) const$/;"	f	class:SizeCube
operator +	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_meat.hpp	/^SizeCube::operator+(const uword val) const$/;"	f	class:SizeCube
operator +	lib/armadillo-9.800.2/include/armadillo_bits/SizeMat_meat.hpp	/^SizeMat::operator+(const SizeMat& s) const$/;"	f	class:SizeMat
operator +	lib/armadillo-9.800.2/include/armadillo_bits/SizeMat_meat.hpp	/^SizeMat::operator+(const uword val) const$/;"	f	class:SizeMat
operator +	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  opts::operator+(const opts& rhs) const$/;"	f	class:hdf5_opts::opts
operator +	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  opts::operator+(const opts& rhs) const$/;"	f	class:solve_opts::opts
operator +	lib/armadillo-9.800.2/include/armadillo_bits/operator_cube_plus.hpp	/^operator+$/;"	f
operator +	lib/armadillo-9.800.2/include/armadillo_bits/operator_plus.hpp	/^operator+$/;"	f
operator +	lib/armadillo-9.800.2/tests/catch.hpp	/^        std::string operator+() {$/;"	f	struct:Catch::StreamEndStop
operator +	lib/armadillo-9.800.2/tests/catch.hpp	/^    T const& operator + ( T const& value, StreamEndStop ) {$/;"	f	namespace:Catch
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator++()$/;"	f	class:Cube
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator++(int)$/;"	f	class:Cube
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat_val<eT>::operator++()$/;"	f	class:MapMat_val
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat_val<eT>::operator++(int)$/;"	f	class:MapMat_val
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::operator++()$/;"	f	class:SpMat_MapMat_val
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::operator++(int)$/;"	f	class:SpMat_MapMat_val
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpSubview_MapMat_val<eT>::operator++()$/;"	f	class:SpSubview_MapMat_val
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpSubview_MapMat_val<eT>::operator++(int)$/;"	f	class:SpSubview_MapMat_val
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::operator++()$/;"	f	class:Mat::const_row_col_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::operator++(int)$/;"	f	class:Mat::const_row_col_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_iterator::operator++()$/;"	f	class:Mat::const_row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_iterator::operator++(int)$/;"	f	class:Mat::const_row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator++()$/;"	f	class:Mat
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator++(int)$/;"	f	class:Mat
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_col_iterator::operator++()$/;"	f	class:Mat::row_col_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_col_iterator::operator++(int)$/;"	f	class:Mat::row_col_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_iterator::operator++()$/;"	f	class:Mat::row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_iterator::operator++(int)$/;"	f	class:Mat::row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::operator++()$/;"	f	class:SpMat::const_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::operator++(int)$/;"	f	class:SpMat::const_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::operator++()$/;"	f	class:SpMat::const_row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::operator++(int)$/;"	f	class:SpMat::const_row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::iterator::operator++()$/;"	f	class:SpMat::iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::iterator::operator++(int)$/;"	f	class:SpMat::iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::row_iterator::operator++()$/;"	f	class:SpMat::row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::row_iterator::operator++(int)$/;"	f	class:SpMat::row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::operator++()$/;"	f	class:SpSubview::const_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::operator++(int)$/;"	f	class:SpSubview::const_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::operator++()$/;"	f	class:SpSubview::const_row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::operator++(int)$/;"	f	class:SpSubview::const_row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::iterator::operator++()$/;"	f	class:SpSubview::iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::iterator::operator++(int)$/;"	f	class:SpSubview::iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::row_iterator::operator++()$/;"	f	class:SpSubview::row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::row_iterator::operator++(int)$/;"	f	class:SpSubview::row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::operator++()$/;"	f	class:SpValProxy
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::operator++(const int)$/;"	f	class:SpValProxy
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::const_iterator::operator++()$/;"	f	class:field::const_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::const_iterator::operator++(int)$/;"	f	class:field::const_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::iterator::operator++()$/;"	f	class:field::iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::iterator::operator++(int)$/;"	f	class:field::iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^arma_counter<eT>::operator++()$/;"	f	class:arma_counter
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^arma_counter<eT>::operator++(int)$/;"	f	class:arma_counter
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::const_iterator::operator++()$/;"	f	class:subview_cube::const_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::const_iterator::operator++(int)$/;"	f	class:subview_cube::const_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::iterator::operator++()$/;"	f	class:subview_cube::iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::iterator::operator++(int)$/;"	f	class:subview_cube::iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_iterator::operator++()$/;"	f	class:subview::const_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_iterator::operator++(int)$/;"	f	class:subview::const_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_row_iterator::operator++()$/;"	f	class:subview::const_row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_row_iterator::operator++(int)$/;"	f	class:subview::const_row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::iterator::operator++()$/;"	f	class:subview::iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::iterator::operator++(int)$/;"	f	class:subview::iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::row_iterator::operator++()$/;"	f	class:subview::row_iterator
operator ++	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::row_iterator::operator++(int)$/;"	f	class:subview::row_iterator
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator+=(const Cube<eT>& m)$/;"	f	class:Cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator+=(const GenCube<eT, gen_type>& X)$/;"	f	class:Cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator+=(const GlueCube<T1, T2, glue_type>& X)$/;"	f	class:Cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator+=(const OpCube<T1, op_type>& X)$/;"	f	class:Cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator+=(const eGlueCube<T1, T2, eglue_type>& X)$/;"	f	class:Cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator+=(const eOpCube<T1, eop_type>& X)$/;"	f	class:Cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator+=(const eT val)$/;"	f	class:Cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator+=(const mtGlueCube<eT, T1, T2, glue_type>& X)$/;"	f	class:Cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator+=(const mtOpCube<eT, T1, op_type>& X)$/;"	f	class:Cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator+=(const subview_cube<eT>& X)$/;"	f	class:Cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator+=(const subview_cube_slices<eT,T1>& X)$/;"	f	class:Cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat_val<eT>::operator+=(const eT in_val)$/;"	f	class:MapMat_val
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::operator+=(const eT in_val)$/;"	f	class:SpMat_MapMat_val
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpSubview_MapMat_val<eT>::operator+=(const eT in_val)$/;"	f	class:SpSubview_MapMat_val
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const BaseCube<eT,T1>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const CubeToMatOp<T1, op_type>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const Gen<T1, gen_type>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const Glue<T1, T2, glue_times>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const Glue<T1, T2, glue_type>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const Mat<eT>& m)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const Op<T1, op_type>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const SpBase<eT, T1>& m)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const SpToDOp<T1, op_type>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const diagview<eT>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const eGlue<T1, T2, eglue_type>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const eOp<T1, eop_type>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const eT val)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const mtGlue<eT, T1, T2, glue_type>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const mtOp<eT, T1, op_type>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const spdiagview<eT>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const subview<eT>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const subview_cube<eT>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const subview_elem1<eT,T1>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator+=(const subview_elem2<eT,T1,T2>& X)$/;"	f	class:Mat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator+=(const Base<eT, T1>& x)$/;"	f	class:SpMat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator+=(const Op<T1, op_diagmat>& expr)$/;"	f	class:SpMat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator+=(const SpGlue<T1, T2, spglue_type>& X)$/;"	f	class:SpMat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator+=(const SpMat<eT>& x)$/;"	f	class:SpMat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator+=(const SpOp<T1, spop_type>& X)$/;"	f	class:SpMat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator+=(const SpSubview<eT>& X)$/;"	f	class:SpMat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator+=(const mtSpGlue<eT, T1, T2, spglue_type>& X)$/;"	f	class:SpMat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator+=(const mtSpOp<eT, T1, spop_type>& X)$/;"	f	class:SpMat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator+=(const spdiagview<eT>& X)$/;"	f	class:SpMat
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator+=(const Base<eT, T1>& x)$/;"	f	class:SpSubview
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator+=(const SpBase<eT, T1>& x)$/;"	f	class:SpSubview
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator+=(const eT val)$/;"	f	class:SpSubview
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::operator+=(const eT rhs)$/;"	f	class:SpValProxy
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator+=(const Base<eT,T1>& o)$/;"	f	class:diagview
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator+=(const eT val)$/;"	f	class:diagview
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator+=(const Base<eT,T1>& o)$/;"	f	class:spdiagview
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator+=(const SpBase<eT,T1>& o)$/;"	f	class:spdiagview
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator+=(const eT val)$/;"	f	class:spdiagview
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each1<eT>::operator+= (const Base<eT,T1>& in)$/;"	f	class:subview_cube_each1
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each2<eT,TB>::operator+= (const Base<eT,T1>& in)$/;"	f	class:subview_cube_each2
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator+= (const Base<eT,T1>& in)$/;"	f	class:subview_cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator+= (const BaseCube<eT,T1>& in)$/;"	f	class:subview_cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator+= (const eT val)$/;"	f	class:subview_cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator+= (const subview_cube<eT>& x)$/;"	f	class:subview_cube
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator+= (const BaseCube<eT,expr>& x)$/;"	f	class:subview_cube_slices
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator+= (const eT val)$/;"	f	class:subview_cube_slices
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator+= (const subview_cube_slices<eT,T2>& x)$/;"	f	class:subview_cube_slices
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each1<parent,mode>::operator+= (const Base<eT,T1>& in)$/;"	f	class:subview_each1
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each2<parent,mode,TB>::operator+= (const Base<eT,T1>& in)$/;"	f	class:subview_each2
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator+= (const Base<eT,T2>& x)$/;"	f	class:subview_elem1
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator+= (const eT val)$/;"	f	class:subview_elem1
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator+= (const subview_elem1<eT,T2>& x)$/;"	f	class:subview_elem1
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator+= (const Base<eT,expr>& x)$/;"	f	class:subview_elem2
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator+= (const eT val)$/;"	f	class:subview_elem2
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator+= (const subview_elem2<eT,T3,T4>& x)$/;"	f	class:subview_elem2
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator+= (const Base<eT,T1>& in)$/;"	f	class:subview
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator+= (const eT val)$/;"	f	class:subview
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator+= (const subview<eT>& x)$/;"	f	class:subview
operator +=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator+=(const SpBase<eT, T1>& x)$/;"	f	class:subview
operator -	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_meat.hpp	/^SizeCube::operator-(const SizeCube& s) const$/;"	f	class:SizeCube
operator -	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_meat.hpp	/^SizeCube::operator-(const uword val) const$/;"	f	class:SizeCube
operator -	lib/armadillo-9.800.2/include/armadillo_bits/SizeMat_meat.hpp	/^SizeMat::operator-(const SizeMat& s) const$/;"	f	class:SizeMat
operator -	lib/armadillo-9.800.2/include/armadillo_bits/SizeMat_meat.hpp	/^SizeMat::operator-(const uword val) const$/;"	f	class:SizeMat
operator -	lib/armadillo-9.800.2/include/armadillo_bits/operator_cube_minus.hpp	/^operator-$/;"	f
operator -	lib/armadillo-9.800.2/include/armadillo_bits/operator_minus.hpp	/^operator-$/;"	f
operator --	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator--()$/;"	f	class:Cube
operator --	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator--(int)$/;"	f	class:Cube
operator --	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat_val<eT>::operator--()$/;"	f	class:MapMat_val
operator --	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat_val<eT>::operator--(int)$/;"	f	class:MapMat_val
operator --	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::operator--()$/;"	f	class:SpMat_MapMat_val
operator --	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::operator--(int)$/;"	f	class:SpMat_MapMat_val
operator --	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpSubview_MapMat_val<eT>::operator--()$/;"	f	class:SpSubview_MapMat_val
operator --	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpSubview_MapMat_val<eT>::operator--(int)$/;"	f	class:SpSubview_MapMat_val
operator --	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::operator--()$/;"	f	class:Mat::const_row_col_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::operator--(int)$/;"	f	class:Mat::const_row_col_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_iterator::operator--()$/;"	f	class:Mat::const_row_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_iterator::operator--(int)$/;"	f	class:Mat::const_row_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator--()$/;"	f	class:Mat
operator --	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator--(int)$/;"	f	class:Mat
operator --	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_col_iterator::operator--()$/;"	f	class:Mat::row_col_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_col_iterator::operator--(int)$/;"	f	class:Mat::row_col_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_iterator::operator--()$/;"	f	class:Mat::row_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_iterator::operator--(int)$/;"	f	class:Mat::row_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::operator--()$/;"	f	class:SpMat::const_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::operator--(int)$/;"	f	class:SpMat::const_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::operator--()$/;"	f	class:SpMat::const_row_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::operator--(int)$/;"	f	class:SpMat::const_row_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::iterator::operator--()$/;"	f	class:SpMat::iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::iterator::operator--(int)$/;"	f	class:SpMat::iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::row_iterator::operator--()$/;"	f	class:SpMat::row_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::row_iterator::operator--(int)$/;"	f	class:SpMat::row_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::operator--()$/;"	f	class:SpSubview::const_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::operator--(int)$/;"	f	class:SpSubview::const_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::operator--()$/;"	f	class:SpSubview::const_row_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::operator--(int)$/;"	f	class:SpSubview::const_row_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::iterator::operator--()$/;"	f	class:SpSubview::iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::iterator::operator--(int)$/;"	f	class:SpSubview::iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::row_iterator::operator--()$/;"	f	class:SpSubview::row_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::row_iterator::operator--(int)$/;"	f	class:SpSubview::row_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::operator--()$/;"	f	class:SpValProxy
operator --	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::operator--(const int)$/;"	f	class:SpValProxy
operator --	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::const_iterator::operator--()$/;"	f	class:field::const_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::const_iterator::operator--(int)$/;"	f	class:field::const_iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::iterator::operator--()$/;"	f	class:field::iterator
operator --	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::iterator::operator--(int)$/;"	f	class:field::iterator
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator-=(const Cube<eT>& m)$/;"	f	class:Cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator-=(const GenCube<eT, gen_type>& X)$/;"	f	class:Cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator-=(const GlueCube<T1, T2, glue_type>& X)$/;"	f	class:Cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator-=(const OpCube<T1, op_type>& X)$/;"	f	class:Cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator-=(const eGlueCube<T1, T2, eglue_type>& X)$/;"	f	class:Cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator-=(const eOpCube<T1, eop_type>& X)$/;"	f	class:Cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator-=(const eT val)$/;"	f	class:Cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator-=(const mtGlueCube<eT, T1, T2, glue_type>& X)$/;"	f	class:Cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator-=(const mtOpCube<eT, T1, op_type>& X)$/;"	f	class:Cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator-=(const subview_cube<eT>& X)$/;"	f	class:Cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator-=(const subview_cube_slices<eT,T1>& X)$/;"	f	class:Cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat_val<eT>::operator-=(const eT in_val)$/;"	f	class:MapMat_val
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::operator-=(const eT in_val)$/;"	f	class:SpMat_MapMat_val
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpSubview_MapMat_val<eT>::operator-=(const eT in_val)$/;"	f	class:SpSubview_MapMat_val
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const BaseCube<eT,T1>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const CubeToMatOp<T1, op_type>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const Gen<T1, gen_type>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const Glue<T1, T2, glue_times>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const Glue<T1, T2, glue_type>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const Mat<eT>& m)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const Op<T1, op_type>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const SpBase<eT, T1>& m)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const SpToDOp<T1, op_type>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const diagview<eT>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const eGlue<T1, T2, eglue_type>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const eOp<T1, eop_type>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const eT val)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const mtGlue<eT, T1, T2, glue_type>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const mtOp<eT, T1, op_type>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const spdiagview<eT>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const subview<eT>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const subview_cube<eT>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const subview_elem1<eT,T1>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator-=(const subview_elem2<eT,T1,T2>& X)$/;"	f	class:Mat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator-=(const Base<eT, T1>& x)$/;"	f	class:SpMat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator-=(const Op<T1, op_diagmat>& expr)$/;"	f	class:SpMat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator-=(const SpGlue<T1, T2, spglue_type>& X)$/;"	f	class:SpMat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator-=(const SpMat<eT>& x)$/;"	f	class:SpMat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator-=(const SpOp<T1, spop_type>& X)$/;"	f	class:SpMat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator-=(const SpSubview<eT>& X)$/;"	f	class:SpMat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator-=(const mtSpGlue<eT, T1, T2, spglue_type>& X)$/;"	f	class:SpMat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator-=(const mtSpOp<eT, T1, spop_type>& X)$/;"	f	class:SpMat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator-=(const spdiagview<eT>& X)$/;"	f	class:SpMat
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator-=(const Base<eT, T1>& x)$/;"	f	class:SpSubview
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator-=(const SpBase<eT, T1>& x)$/;"	f	class:SpSubview
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator-=(const eT val)$/;"	f	class:SpSubview
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::operator-=(const eT rhs)$/;"	f	class:SpValProxy
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator-=(const Base<eT,T1>& o)$/;"	f	class:diagview
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator-=(const eT val)$/;"	f	class:diagview
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator-=(const Base<eT,T1>& o)$/;"	f	class:spdiagview
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator-=(const SpBase<eT,T1>& o)$/;"	f	class:spdiagview
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator-=(const eT val)$/;"	f	class:spdiagview
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each1<eT>::operator-= (const Base<eT,T1>& in)$/;"	f	class:subview_cube_each1
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each2<eT,TB>::operator-= (const Base<eT,T1>& in)$/;"	f	class:subview_cube_each2
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator-= (const Base<eT,T1>& in)$/;"	f	class:subview_cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator-= (const BaseCube<eT,T1>& in)$/;"	f	class:subview_cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator-= (const eT val)$/;"	f	class:subview_cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator-= (const subview_cube<eT>& x)$/;"	f	class:subview_cube
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator-= (const BaseCube<eT,expr>& x)$/;"	f	class:subview_cube_slices
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator-= (const eT val)$/;"	f	class:subview_cube_slices
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator-= (const subview_cube_slices<eT,T2>& x)$/;"	f	class:subview_cube_slices
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each1<parent,mode>::operator-= (const Base<eT,T1>& in)$/;"	f	class:subview_each1
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each2<parent,mode,TB>::operator-= (const Base<eT,T1>& in)$/;"	f	class:subview_each2
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator-= (const Base<eT,T2>& x)$/;"	f	class:subview_elem1
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator-= (const eT val)$/;"	f	class:subview_elem1
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator-= (const subview_elem1<eT,T2>& x)$/;"	f	class:subview_elem1
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator-= (const Base<eT,expr>& x)$/;"	f	class:subview_elem2
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator-= (const eT val)$/;"	f	class:subview_elem2
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator-= (const subview_elem2<eT,T3,T4>& x)$/;"	f	class:subview_elem2
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator-= (const Base<eT,T1>& in)$/;"	f	class:subview
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator-= (const eT val)$/;"	f	class:subview
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator-= (const subview<eT>& x)$/;"	f	class:subview
operator -=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator-=(const SpBase<eT, T1>& x)$/;"	f	class:subview
operator ->	lib/armadillo-9.800.2/tests/catch.hpp	/^        T* operator->() const { return m_p; }$/;"	f	class:Catch::Ptr
operator /	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_meat.hpp	/^SizeCube::operator\/(const uword val) const$/;"	f	class:SizeCube
operator /	lib/armadillo-9.800.2/include/armadillo_bits/SizeMat_meat.hpp	/^SizeMat::operator\/(const uword val) const$/;"	f	class:SizeMat
operator /	lib/armadillo-9.800.2/include/armadillo_bits/operator_cube_div.hpp	/^operator\/$/;"	f
operator /	lib/armadillo-9.800.2/include/armadillo_bits/operator_div.hpp	/^operator\/$/;"	f
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator\/=(const Cube<eT>& m)$/;"	f	class:Cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator\/=(const GenCube<eT, gen_type>& X)$/;"	f	class:Cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator\/=(const GlueCube<T1, T2, glue_type>& X)$/;"	f	class:Cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator\/=(const OpCube<T1, op_type>& X)$/;"	f	class:Cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator\/=(const eGlueCube<T1, T2, eglue_type>& X)$/;"	f	class:Cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator\/=(const eOpCube<T1, eop_type>& X)$/;"	f	class:Cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator\/=(const eT val)$/;"	f	class:Cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator\/=(const mtGlueCube<eT, T1, T2, glue_type>& X)$/;"	f	class:Cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator\/=(const mtOpCube<eT, T1, op_type>& X)$/;"	f	class:Cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator\/=(const subview_cube<eT>& X)$/;"	f	class:Cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator\/=(const subview_cube_slices<eT,T1>& X)$/;"	f	class:Cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat_val<eT>::operator\/=(const eT in_val)$/;"	f	class:MapMat_val
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::operator\/=(const eT in_val)$/;"	f	class:SpMat_MapMat_val
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpSubview_MapMat_val<eT>::operator\/=(const eT in_val)$/;"	f	class:SpSubview_MapMat_val
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const BaseCube<eT,T1>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const CubeToMatOp<T1, op_type>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const Gen<T1, gen_type>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const Glue<T1, T2, glue_type>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const Mat<eT>& m)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const Op<T1, op_type>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const SpBase<eT, T1>& m)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const SpToDOp<T1, op_type>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const diagview<eT>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const eGlue<T1, T2, eglue_type>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const eOp<T1, eop_type>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const eT val)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const mtGlue<eT, T1, T2, glue_type>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const mtOp<eT, T1, op_type>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const spdiagview<eT>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const subview<eT>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const subview_cube<eT>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const subview_elem1<eT,T1>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator\/=(const subview_elem2<eT,T1,T2>& X)$/;"	f	class:Mat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator\/=(const Base<eT, T1>& x)$/;"	f	class:SpMat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator\/=(const Op<T1, op_diagmat>& expr)$/;"	f	class:SpMat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator\/=(const SpGlue<T1, T2, spglue_type>& X)$/;"	f	class:SpMat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator\/=(const SpMat<eT>& x)$/;"	f	class:SpMat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator\/=(const SpOp<T1, spop_type>& X)$/;"	f	class:SpMat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator\/=(const SpSubview<eT>& x)$/;"	f	class:SpMat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator\/=(const eT val)$/;"	f	class:SpMat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator\/=(const mtSpGlue<eT, T1, T2, spglue_type>& X)$/;"	f	class:SpMat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator\/=(const mtSpOp<eT, T1, spop_type>& X)$/;"	f	class:SpMat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator\/=(const spdiagview<eT>& X)$/;"	f	class:SpMat
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator\/=(const Base<eT, T1>& x)$/;"	f	class:SpSubview
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator\/=(const SpBase<eT, T1>& x)$/;"	f	class:SpSubview
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator\/=(const eT val)$/;"	f	class:SpSubview
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::operator\/=(const eT rhs)$/;"	f	class:SpValProxy
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator\/=(const Base<eT,T1>& o)$/;"	f	class:diagview
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator\/=(const eT val)$/;"	f	class:diagview
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator\/=(const Base<eT,T1>& o)$/;"	f	class:spdiagview
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator\/=(const SpBase<eT,T1>& o)$/;"	f	class:spdiagview
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator\/=(const eT val)$/;"	f	class:spdiagview
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each1<eT>::operator\/= (const Base<eT,T1>& in)$/;"	f	class:subview_cube_each1
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each2<eT,TB>::operator\/= (const Base<eT,T1>& in)$/;"	f	class:subview_cube_each2
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator\/= (const Base<eT,T1>& in)$/;"	f	class:subview_cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator\/= (const BaseCube<eT,T1>& in)$/;"	f	class:subview_cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator\/= (const eT val)$/;"	f	class:subview_cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator\/= (const subview_cube<eT>& x)$/;"	f	class:subview_cube
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator\/= (const BaseCube<eT,expr>& x)$/;"	f	class:subview_cube_slices
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator\/= (const eT val)$/;"	f	class:subview_cube_slices
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator\/= (const subview_cube_slices<eT,T2>& x)$/;"	f	class:subview_cube_slices
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each1<parent,mode>::operator\/= (const Base<eT,T1>& in)$/;"	f	class:subview_each1
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each2<parent,mode,TB>::operator\/= (const Base<eT,T1>& in)$/;"	f	class:subview_each2
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator\/= (const Base<eT,T2>& x)$/;"	f	class:subview_elem1
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator\/= (const eT val)$/;"	f	class:subview_elem1
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator\/= (const subview_elem1<eT,T2>& x)$/;"	f	class:subview_elem1
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator\/= (const Base<eT,expr>& x)$/;"	f	class:subview_elem2
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator\/= (const eT val)$/;"	f	class:subview_elem2
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator\/= (const subview_elem2<eT,T3,T4>& x)$/;"	f	class:subview_elem2
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator\/= (const Base<eT,T1>& in)$/;"	f	class:subview
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator\/= (const eT val)$/;"	f	class:subview
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator\/= (const subview& x)$/;"	f	class:subview
operator /=	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator\/=(const SpBase<eT, T1>& x)$/;"	f	class:subview
operator <	lib/armadillo-9.800.2/include/armadillo_bits/op_median_bones.hpp	/^operator< (const arma_cx_median_packet<T>& A, const arma_cx_median_packet<T>& B)$/;"	f
operator <	lib/armadillo-9.800.2/include/armadillo_bits/operator_cube_relational.hpp	/^operator<$/;"	f
operator <	lib/armadillo-9.800.2/include/armadillo_bits/operator_relational.hpp	/^operator<$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::operator<<(const eT val)$/;"	f	class:Col
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator<<(const eT val)$/;"	f	class:Mat
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator<<(const injector_end_of_row<>& x)$/;"	f	class:Mat
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::operator<<(const eT val)$/;"	f	class:Row
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  operator<< (std::ostream& o, const basic_format<T1,T2>& X)$/;"	f	namespace:arma_str
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator<<(const injector_end_of_row<>& x)$/;"	f	class:field
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator<<(const oT& val)$/;"	f	class:field
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^operator<<(const field_injector<T1>& ref, const injector_end_of_row<>& x)$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^operator<<(const field_injector<T1>& ref, const typename field_injector<T1>::object_type& val)$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^operator<<(const mat_injector<T1>& ref, const injector_end_of_row<>& x)$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^operator<<(const mat_injector<T1>& ref, const typename mat_injector<T1>::elem_type val)$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/operator_ostream.hpp	/^operator<< (std::ostream& o, const Base<eT,T1>& X)$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/operator_ostream.hpp	/^operator<< (std::ostream& o, const BaseCube<typename T1::elem_type,T1>& X)$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/operator_ostream.hpp	/^operator<< (std::ostream& o, const MapMat_val<eT>& X)$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/operator_ostream.hpp	/^operator<< (std::ostream& o, const SizeCube& S)$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/operator_ostream.hpp	/^operator<< (std::ostream& o, const SizeMat& S)$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/operator_ostream.hpp	/^operator<< (std::ostream& o, const SpBase<eT,T1>& X)$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/operator_ostream.hpp	/^operator<< (std::ostream& o, const SpMat_MapMat_val<eT>& X)$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/operator_ostream.hpp	/^operator<< (std::ostream& o, const SpSubview_MapMat_val<eT>& X)$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/operator_ostream.hpp	/^operator<< (std::ostream& o, const SpValProxy<T1>& X)$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/operator_ostream.hpp	/^operator<< (std::ostream& o, const field<T1>& X)$/;"	f
operator <<	lib/armadillo-9.800.2/include/armadillo_bits/operator_ostream.hpp	/^operator<< (std::ostream& o, const subview_field<T1>& X)$/;"	f
operator <<	lib/armadillo-9.800.2/tests/catch.hpp	/^        ResultBuilder& operator << ( T const& value ) {$/;"	f	class:Catch::ResultBuilder
operator <=	lib/armadillo-9.800.2/include/armadillo_bits/operator_cube_relational.hpp	/^operator<=$/;"	f
operator <=	lib/armadillo-9.800.2/include/armadillo_bits/operator_relational.hpp	/^operator<=$/;"	f
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^  Col<eT>::fixed<fixed_n_elem>::operator=(const eGlue<T1, T2, eglue_type>& X)$/;"	f	class:Col::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^  Col<eT>::fixed<fixed_n_elem>::operator=(const eOp<T1, eop_type>& X)$/;"	f	class:Col::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^  Col<eT>::fixed<fixed_n_elem>::operator=(const std::initializer_list<eT>& list)$/;"	f	class:Col::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^  Col<eT>::operator=(Col<eT>&& X)$/;"	f	class:Col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^  Col<eT>::operator=(const std::initializer_list<eT>& list)$/;"	f	class:Col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::operator=(const Base<eT,T1>& A)$/;"	f	class:Col::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::operator=(const char* text)$/;"	f	class:Col::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::operator=(const eT val)$/;"	f	class:Col::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::operator=(const fixed<fixed_n_elem>& X)$/;"	f	class:Col::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::operator=(const std::string& text)$/;"	f	class:Col::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::operator=(const subview_cube<eT>& X)$/;"	f	class:Col::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::operator=(const Base<eT,T1>& X)$/;"	f	class:Col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::operator=(const BaseCube<eT,T1>& X)$/;"	f	class:Col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::operator=(const Col<eT>& X)$/;"	f	class:Col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::operator=(const SpBase<eT,T1>& X)$/;"	f	class:Col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::operator=(const char* text)$/;"	f	class:Col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::operator=(const eT val)$/;"	f	class:Col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::operator=(const std::string& text)$/;"	f	class:Col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::operator=(const std::vector<eT>& x)$/;"	f	class:Col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::operator=(const subview_cube<eT>& X)$/;"	f	class:Col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^  Cube<eT>::operator=(Cube<eT>&& in_cube)$/;"	f	class:Cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::operator=(const fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>& X)$/;"	f	class:Cube::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator=(const Cube<eT>& x)$/;"	f	class:Cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator=(const GenCube<eT, gen_type>& X)$/;"	f	class:Cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator=(const GlueCube<T1, T2, glue_type>& X)$/;"	f	class:Cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator=(const OpCube<T1, op_type>& X)$/;"	f	class:Cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator=(const eGlueCube<T1, T2, eglue_type>& X)$/;"	f	class:Cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator=(const eOpCube<T1, eop_type>& X)$/;"	f	class:Cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator=(const eT val)$/;"	f	class:Cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator=(const mtGlueCube<eT, T1, T2, glue_type>& X)$/;"	f	class:Cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator=(const mtOpCube<eT, T1, op_type>& X)$/;"	f	class:Cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator=(const subview_cube<eT>& X)$/;"	f	class:Cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator=(const subview_cube_slices<eT,T1>& X)$/;"	f	class:Cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^  MapMat<eT>::operator=(MapMat<eT>&& x)$/;"	f	class:MapMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::operator=(const MapMat<eT>& x)$/;"	f	class:MapMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::operator=(const SpMat<eT>& x)$/;"	f	class:MapMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat_val<eT>::operator=(const MapMat_val<eT>& x)$/;"	f	class:MapMat_val
operator =	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat_val<eT>::operator=(const eT in_val)$/;"	f	class:MapMat_val
operator =	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::operator=(const SpMat_MapMat_val<eT>& x)$/;"	f	class:SpMat_MapMat_val
operator =	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::operator=(const eT in_val)$/;"	f	class:SpMat_MapMat_val
operator =	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpSubview_MapMat_val<eT>::operator=(const SpSubview_MapMat_val<eT>& x)$/;"	f	class:SpSubview_MapMat_val
operator =	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpSubview_MapMat_val<eT>::operator=(const eT in_val)$/;"	f	class:SpSubview_MapMat_val
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::operator=(const eGlue<T1, T2, eglue_type>& X)$/;"	f	class:Mat::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::operator=(const eOp<T1, eop_type>& X)$/;"	f	class:Mat::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::operator=(const std::initializer_list< std::initializer_list<eT> >& list)$/;"	f	class:Mat::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::operator=(const std::initializer_list<eT>& list)$/;"	f	class:Mat::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::operator=(Mat<eT>&& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::operator=(const std::initializer_list< std::initializer_list<eT> >& list)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^  Mat<eT>::operator=(const std::initializer_list<eT>& list)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::operator=(const fixed<fixed_n_rows, fixed_n_cols>& X)$/;"	f	class:Mat::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const BaseCube<eT,T1>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const CubeToMatOp<T1, op_type>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const Gen<T1, gen_type>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const Glue<T1, T2, glue_type>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const Mat<eT>& in_mat)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const Op<T1, op_type>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const SpBase<eT, T1>& m)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const SpToDOp<T1, op_type>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const char* text)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const diagview<eT>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const eGlue<T1, T2, eglue_type>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const eOp<T1, eop_type>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const eT val)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const mtGlue<eT, T1, T2, glue_type>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const mtOp<eT, T1, op_type>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const spdiagview<eT>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const std::string& text)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const std::vector<eT>& x)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const subview<eT>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const subview_cube<eT>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const subview_elem1<eT,T1>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator=(const subview_elem2<eT,T1,T2>& X)$/;"	f	class:Mat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^  Row<eT>::fixed<fixed_n_elem>::operator=(const eGlue<T1, T2, eglue_type>& X)$/;"	f	class:Row::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^  Row<eT>::fixed<fixed_n_elem>::operator=(const eOp<T1, eop_type>& X)$/;"	f	class:Row::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^  Row<eT>::fixed<fixed_n_elem>::operator=(const std::initializer_list<eT>& list)$/;"	f	class:Row::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^  Row<eT>::operator=(Row<eT>&& X)$/;"	f	class:Row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^  Row<eT>::operator=(const std::initializer_list<eT>& list)$/;"	f	class:Row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::operator=(const Base<eT,T1>& A)$/;"	f	class:Row::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::operator=(const char* text)$/;"	f	class:Row::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::operator=(const eT val)$/;"	f	class:Row::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::operator=(const fixed<fixed_n_elem>& X)$/;"	f	class:Row::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::operator=(const std::string& text)$/;"	f	class:Row::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::operator=(const subview_cube<eT>& X)$/;"	f	class:Row::fixed
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::operator=(const Base<eT,T1>& X)$/;"	f	class:Row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::operator=(const BaseCube<eT,T1>& X)$/;"	f	class:Row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::operator=(const Row<eT>& X)$/;"	f	class:Row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::operator=(const SpBase<eT,T1>& X)$/;"	f	class:Row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::operator=(const char* text)$/;"	f	class:Row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::operator=(const eT val)$/;"	f	class:Row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::operator=(const std::string& text)$/;"	f	class:Row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::operator=(const std::vector<eT>& x)$/;"	f	class:Row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::operator=(const subview_cube<eT>& X)$/;"	f	class:Row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::operator=(const Base<eT,T1>& X)$/;"	f	class:SpCol
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::operator=(const SpBase<eT,T1>& X)$/;"	f	class:SpCol
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::operator=(const char* text)$/;"	f	class:SpCol
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::operator=(const eT val)$/;"	f	class:SpCol
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::operator=(const std::string& text)$/;"	f	class:SpCol
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^  SpMat<eT>::operator=(SpMat<eT>&& in_mat)$/;"	f	class:SpMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator=(const Base<eT, T1>& expr)$/;"	f	class:SpMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator=(const MapMat<eT>& x)$/;"	f	class:SpMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator=(const Op<T1, op_diagmat>& expr)$/;"	f	class:SpMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator=(const SpGlue<T1, T2, spglue_type>& X)$/;"	f	class:SpMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator=(const SpMat<eT>& x)$/;"	f	class:SpMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator=(const SpOp<T1, spop_type>& X)$/;"	f	class:SpMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator=(const SpSubview<eT>& X)$/;"	f	class:SpMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator=(const char* text)$/;"	f	class:SpMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator=(const eT val)$/;"	f	class:SpMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator=(const mtSpGlue<eT, T1, T2, spglue_type>& X)$/;"	f	class:SpMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator=(const mtSpOp<eT, T1, spop_type>& X)$/;"	f	class:SpMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator=(const spdiagview<eT>& X)$/;"	f	class:SpMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator=(const std::string& text)$/;"	f	class:SpMat
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::operator=(const Base<eT,T1>& X)$/;"	f	class:SpRow
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::operator=(const SpBase<eT,T1>& X)$/;"	f	class:SpRow
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::operator=(const char* text)$/;"	f	class:SpRow
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::operator=(const eT val)$/;"	f	class:SpRow
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::operator=(const std::string& text)$/;"	f	class:SpRow
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator=(const Base<eT, T1>& in)$/;"	f	class:SpSubview
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator=(const SpBase<eT, T1>& x)$/;"	f	class:SpSubview
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator=(const SpSubview<eT>& x)$/;"	f	class:SpSubview
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::operator=(const SpValProxy<T1>& rhs)$/;"	f	class:SpValProxy
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::operator=(const SpValProxy<T2>& rhs)$/;"	f	class:SpValProxy
operator =	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::operator=(const eT rhs)$/;"	f	class:SpValProxy
operator =	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  operator= (const int in_state)$/;"	f	struct:state_type
operator =	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator= (const Base<eT,T1>& o)$/;"	f	class:diagview
operator =	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator= (const diagview<eT>& x)$/;"	f	class:diagview
operator =	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^  field<oT>::operator=(const std::initializer_list< std::initializer_list<oT> >& list)$/;"	f	class:field
operator =	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^  field<oT>::operator=(const std::initializer_list<oT>& list)$/;"	f	class:field
operator =	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^  field<oT>::operator=(field<oT>&& X)$/;"	f	class:field
operator =	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator=(const field& x)$/;"	f	class:field
operator =	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator=(const subview_field<oT>& X)$/;"	f	class:field
operator =	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::operator=(const gmm_diag<eT>& x)$/;"	f	class:gmm_priv::gmm_diag
operator =	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::operator=(const gmm_full<eT>& x)$/;"	f	class:gmm_priv::gmm_diag
operator =	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::operator=(const gmm_diag<eT>& x)$/;"	f	class:gmm_priv::gmm_full
operator =	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::operator=(const gmm_full<eT>& x)$/;"	f	class:gmm_priv::gmm_full
operator =	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_meat.hpp	/^running_mean_scalar<eT>::operator=(const running_mean_scalar<eT>& in)$/;"	f	class:gmm_priv::running_mean_scalar
operator =	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::operator=(const podarray& x)$/;"	f	class:podarray
operator =	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::operator=(const running_stat_vec<obj_type>& in_rsv)$/;"	f	class:running_stat_vec
operator =	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator= (const Base<eT,T1>& o)$/;"	f	class:spdiagview
operator =	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator= (const SpBase<eT,T1>& o)$/;"	f	class:spdiagview
operator =	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator= (const spdiagview<eT>& x)$/;"	f	class:spdiagview
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each1<eT>::operator= (const Base<eT,T1>& in)$/;"	f	class:subview_cube_each1
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each2<eT,TB>::operator= (const Base<eT,T1>& in)$/;"	f	class:subview_cube_each2
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator= (const Base<eT,T1>& in)$/;"	f	class:subview_cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator= (const BaseCube<eT,T1>& in)$/;"	f	class:subview_cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator= (const GenCube<eT,gen_type>& in)$/;"	f	class:subview_cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator= (const eT val)$/;"	f	class:subview_cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator= (const subview_cube<eT>& x)$/;"	f	class:subview_cube
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator= (const BaseCube<eT,expr>& x)$/;"	f	class:subview_cube_slices
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator= (const subview_cube_slices<eT,T1>& x)$/;"	f	class:subview_cube_slices
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator= (const subview_cube_slices<eT,T2>& x)$/;"	f	class:subview_cube_slices
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each1<parent,mode>::operator= (const Base<eT,T1>& in)$/;"	f	class:subview_each1
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each2<parent,mode,TB>::operator= (const Base<eT,T1>& in)$/;"	f	class:subview_each2
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator= (const Base<eT,T2>& x)$/;"	f	class:subview_elem1
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator= (const subview_elem1<eT,T1>& x)$/;"	f	class:subview_elem1
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator= (const subview_elem1<eT,T2>& x)$/;"	f	class:subview_elem1
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator= (const Base<eT,expr>& x)$/;"	f	class:subview_elem2
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator= (const subview_elem2<eT,T1,T2>& x)$/;"	f	class:subview_elem2
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator= (const subview_elem2<eT,T3,T4>& x)$/;"	f	class:subview_elem2
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::operator= (const field<oT>& x)$/;"	f	class:subview_field
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::operator= (const subview_field<oT>& x)$/;"	f	class:subview_field
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator= (const Base<eT,T1>& in)$/;"	f	class:subview
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator= (const Gen<T1,gen_type>& in)$/;"	f	class:subview
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator= (const eT val)$/;"	f	class:subview
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator= (const subview<eT>& x)$/;"	f	class:subview
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator=(const SpBase<eT, T1>& x)$/;"	f	class:subview
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::operator= (const Gen<T1,gen_type>& in)$/;"	f	class:subview_col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::operator=(const Base<eT,T1>& X)$/;"	f	class:subview_col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::operator=(const eT val)$/;"	f	class:subview_col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::operator=(const subview<eT>& X)$/;"	f	class:subview_col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::operator=(const subview_col<eT>& X)$/;"	f	class:subview_col
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::operator= (const Gen<T1,gen_type>& in)$/;"	f	class:subview_row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::operator=(const Base<eT,T1>& X)$/;"	f	class:subview_row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::operator=(const eT val)$/;"	f	class:subview_row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::operator=(const subview<eT>& X)$/;"	f	class:subview_row
operator =	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::operator=(const subview_row<eT>& X)$/;"	f	class:subview_row
operator =	lib/armadillo-9.800.2/tests/catch.hpp	/^        CopyableStream& operator=( CopyableStream const& other ) {$/;"	f	struct:Catch::CopyableStream
operator =	lib/armadillo-9.800.2/tests/catch.hpp	/^        Ptr& operator = ( Ptr const& other ){$/;"	f	class:Catch::Ptr
operator =	lib/armadillo-9.800.2/tests/catch.hpp	/^        Ptr& operator = ( T* p ){$/;"	f	class:Catch::Ptr
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::operator==(const const_row_col_iterator& rhs) const$/;"	f	class:Mat::const_row_col_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::operator==(const row_col_iterator& rhs) const$/;"	f	class:Mat::const_row_col_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_iterator::operator==(const typename Mat<eT>::const_row_iterator& X) const$/;"	f	class:Mat::const_row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_iterator::operator==(const typename Mat<eT>::row_iterator& X) const$/;"	f	class:Mat::const_row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_col_iterator::operator==(const const_row_col_iterator& rhs) const$/;"	f	class:Mat::row_col_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_col_iterator::operator==(const row_col_iterator& rhs) const$/;"	f	class:Mat::row_col_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_iterator::operator==(const typename Mat<eT>::const_row_iterator& X) const$/;"	f	class:Mat::row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_iterator::operator==(const typename Mat<eT>::row_iterator& X) const$/;"	f	class:Mat::row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_meat.hpp	/^SizeCube::operator==(const SizeCube& s) const$/;"	f	class:SizeCube
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SizeMat_meat.hpp	/^SizeMat::operator==(const SizeMat& s) const$/;"	f	class:SizeMat
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::operator==(const const_iterator& rhs) const$/;"	f	class:SpMat::const_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::operator==(const const_row_iterator& rhs) const$/;"	f	class:SpMat::const_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::operator==(const typename SpSubview<eT>::const_iterator& rhs) const$/;"	f	class:SpMat::const_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_iterator::operator==(const typename SpSubview<eT>::const_row_iterator& rhs) const$/;"	f	class:SpMat::const_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::operator==(const const_iterator& rhs) const$/;"	f	class:SpMat::const_row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::operator==(const const_row_iterator& rhs) const$/;"	f	class:SpMat::const_row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::operator==(const typename SpSubview<eT>::const_iterator& rhs) const$/;"	f	class:SpMat::const_row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_iterators_meat.hpp	/^SpMat<eT>::const_row_iterator::operator==(const typename SpSubview<eT>::const_row_iterator& rhs) const$/;"	f	class:SpMat::const_row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::operator==(const const_iterator& rhs) const$/;"	f	class:SpSubview::const_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::operator==(const const_row_iterator& rhs) const$/;"	f	class:SpSubview::const_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::operator==(const typename SpMat<eT>::const_iterator& rhs) const$/;"	f	class:SpSubview::const_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_iterator::operator==(const typename SpMat<eT>::const_row_iterator& rhs) const$/;"	f	class:SpSubview::const_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::operator==(const const_iterator& rhs) const$/;"	f	class:SpSubview::const_row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::operator==(const const_row_iterator& rhs) const$/;"	f	class:SpSubview::const_row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::operator==(const typename SpMat<eT>::const_iterator& rhs) const$/;"	f	class:SpSubview::const_row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_iterators_meat.hpp	/^SpSubview<eT>::const_row_iterator::operator==(const typename SpMat<eT>::const_row_iterator& rhs) const$/;"	f	class:SpSubview::const_row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::const_iterator::operator==(const typename field<oT>::const_iterator& X) const$/;"	f	class:field::const_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::iterator::operator==(const typename field<oT>::iterator& X) const$/;"	f	class:field::iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^inline bool operator==(const gmm_dist_mode& a, const gmm_dist_mode& b) { return (a.id == b.id); }$/;"	f
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^inline bool operator==(const gmm_seed_mode& a, const gmm_seed_mode& b) { return (a.id == b.id); }$/;"	f
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/operator_cube_relational.hpp	/^operator==$/;"	f
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/operator_relational.hpp	/^operator==$/;"	f
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::const_iterator::operator==(const const_iterator& rhs) const$/;"	f	class:subview_cube::const_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::const_iterator::operator==(const iterator& rhs) const$/;"	f	class:subview_cube::const_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::iterator::operator==(const const_iterator& rhs) const$/;"	f	class:subview_cube::iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::iterator::operator==(const iterator& rhs) const$/;"	f	class:subview_cube::iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_iterator::operator==(const const_iterator& rhs) const$/;"	f	class:subview::const_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_iterator::operator==(const iterator& rhs) const$/;"	f	class:subview::const_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_row_iterator::operator==(const const_row_iterator& rhs) const$/;"	f	class:subview::const_row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::const_row_iterator::operator==(const row_iterator& rhs) const$/;"	f	class:subview::const_row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::iterator::operator==(const const_iterator& rhs) const$/;"	f	class:subview::iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::iterator::operator==(const iterator& rhs) const$/;"	f	class:subview::iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::row_iterator::operator==(const const_row_iterator& rhs) const$/;"	f	class:subview::row_iterator
operator ==	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::row_iterator::operator==(const row_iterator& rhs) const$/;"	f	class:subview::row_iterator
operator >	lib/armadillo-9.800.2/include/armadillo_bits/operator_cube_relational.hpp	/^operator>$/;"	f
operator >	lib/armadillo-9.800.2/include/armadillo_bits/operator_relational.hpp	/^operator>$/;"	f
operator >=	lib/armadillo-9.800.2/include/armadillo_bits/operator_cube_relational.hpp	/^operator>=$/;"	f
operator >=	lib/armadillo-9.800.2/include/armadillo_bits/operator_relational.hpp	/^operator>=$/;"	f
operator SafeBool::type	lib/armadillo-9.800.2/tests/catch.hpp	/^        operator SafeBool::type() const { return SafeBool::makeSafe( m_p != CATCH_NULL ); }$/;"	f	class:Catch::Ptr
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::operator[] (const uword ii) const$/;"	f	class:Col::fixed
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::operator[] (const uword ii)$/;"	f	class:Col::fixed
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::operator[] (const uword i) const$/;"	f	class:Cube::fixed
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::fixed<fixed_n_rows, fixed_n_cols, fixed_n_slices>::operator[] (const uword i)$/;"	f	class:Cube::fixed
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator[] (const uword i) const$/;"	f	class:Cube
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::operator[] (const uword i)$/;"	f	class:Cube
operator []	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_meat.hpp	/^GenCube<eT, gen_type>::operator[](const uword) const$/;"	f	class:GenCube
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Gen_meat.hpp	/^Gen<T1, gen_type>::operator[](const uword ii) const$/;"	f	class:Gen
operator []	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::operator[](const uword index) const$/;"	f	class:MapMat
operator []	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::operator[](const uword index)$/;"	f	class:MapMat
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::operator[] (const uword ii) const$/;"	f	class:Mat::fixed
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::operator[] (const uword ii)$/;"	f	class:Mat::fixed
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator[] (const uword ii) const$/;"	f	class:Mat
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::operator[] (const uword ii)$/;"	f	class:Mat
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                    const { return Q[i];           }$/;"	f	class:Proxy
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                    const { return Q[i];           }$/;"	f	struct:Proxy_fixed
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                    const { return Q[i];          }$/;"	f	class:Proxy
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                const { const uword ii = (Proxy<T1>::use_at) ? R.at(i,  0) : R[i  ]; arma_debug_check( (ii >= Q.m.n_elem), "Mat::elem(): index out of bounds" ); return Q.m[ii]; }$/;"	f	class:Proxy
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                const { return Q[i];           }$/;"	f	class:Proxy_vectorise_col_mat
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                const { return Q[i];         }$/;"	f	class:Proxy
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                const { return Q[i];         }$/;"	f	class:Proxy_diagvec_expr
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                const { return Q[i];         }$/;"	f	class:Proxy_diagvec_mat
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                const { return Q[i];        }$/;"	f	class:Proxy
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                const { return Q[i];   }$/;"	f	class:Proxy
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                const { return R[i];         }$/;"	f	class:Proxy_vectorise_col_expr
operator []	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  arma_inline elem_type operator[] (const uword i)                                       const { return Q[i];                  }$/;"	f	class:ProxyCube
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::operator[] (const uword ii) const$/;"	f	class:Row::fixed
operator []	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::operator[] (const uword ii)$/;"	f	class:Row::fixed
operator []	lib/armadillo-9.800.2/include/armadillo_bits/SizeCube_meat.hpp	/^SizeCube::operator[](const uword dim) const$/;"	f	class:SizeCube
operator []	lib/armadillo-9.800.2/include/armadillo_bits/SizeMat_meat.hpp	/^SizeMat::operator[](const uword dim) const$/;"	f	class:SizeMat
operator []	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator[](const uword i) const$/;"	f	class:SpMat
operator []	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::operator[](const uword i)$/;"	f	class:SpMat
operator []	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  arma_inline elem_type operator[](const uword i)                    const { return Q[i];           }$/;"	f	class:SpProxy
operator []	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator[](const uword i) const$/;"	f	class:SpSubview
operator []	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator[](const uword i)$/;"	f	class:SpSubview
operator []	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline eT operator[] (const uword i)                    const { return P_is_vec ? P[i] : P.at(i,i);                                         }$/;"	f	class:diagmat_proxy_check_fixed
operator []	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                    const { return P[i];                                 }$/;"	f	class:diagmat_proxy
operator []	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                    const { return P[i];                                 }$/;"	f	class:diagmat_proxy_check
operator []	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                    const { return P_is_vec ? P[i] : P.at(i,i);                                         }$/;"	f	class:diagmat_proxy
operator []	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                    const { return P_is_vec ? P[i] : P.at(i,i);                                         }$/;"	f	class:diagmat_proxy_check
operator []	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  arma_inline elem_type operator[] (const uword i)                    const { return P_is_vec ? P[i] : P.at(i,i);                                         }$/;"	f	class:diagmat_proxy_check_default
operator []	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  operator[](const uword i) const$/;"	f	class:diagmat_proxy_default
operator []	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  operator[](const uword i) const$/;"	f	class:diagmat_proxy_fixed
operator []	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator[](const uword ii) const$/;"	f	class:diagview
operator []	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::operator[](const uword ii)$/;"	f	class:diagview
operator []	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_meat.hpp	/^eGlueCube<T1,T2,eglue_type>::operator[] (const uword i) const$/;"	f	class:eGlueCube
operator []	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_meat.hpp	/^eGlue<T1,T2,eglue_type>::operator[] (const uword ii) const$/;"	f	class:eGlue
operator []	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_meat.hpp	/^eOpCube<T1, eop_type>::operator[] (const uword i) const$/;"	f	class:eOpCube
operator []	lib/armadillo-9.800.2/include/armadillo_bits/eOp_meat.hpp	/^eOp<T1, eop_type>::operator[] (const uword ii) const$/;"	f	class:eOp
operator []	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator[] (const uword i) const$/;"	f	class:field
operator []	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::operator[] (const uword i)$/;"	f	class:field
operator []	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::operator[] (const uword i) const$/;"	f	class:podarray
operator []	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::operator[] (const uword i)$/;"	f	class:podarray
operator []	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator[](const uword i) const$/;"	f	class:spdiagview
operator []	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::operator[](const uword i)$/;"	f	class:spdiagview
operator []	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator[](const uword i) const$/;"	f	class:subview_cube
operator []	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::operator[](const uword i)$/;"	f	class:subview_cube
operator []	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::operator[](const uword i) const$/;"	f	class:subview_field
operator []	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::operator[](const uword i)$/;"	f	class:subview_field
operator []	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator[](const uword ii) const$/;"	f	class:subview
operator []	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::operator[](const uword ii)$/;"	f	class:subview
operator []	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::operator[](const uword ii) const$/;"	f	class:subview_col
operator []	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::operator[](const uword ii)$/;"	f	class:subview_col
operator []	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::operator[](const uword ii) const$/;"	f	class:subview_row
operator []	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::operator[](const uword ii)$/;"	f	class:subview_row
operator []	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row_htrans<eT>::operator[](const uword ii) const$/;"	f	class:subview_row_htrans
operator []	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row_strans<eT>::operator[](const uword ii) const$/;"	f	class:subview_row_strans
operator []	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_meat.hpp	/^xtrans_mat<eT,do_conj>::operator[](const uword ii) const$/;"	f	class:xtrans_mat
operator []	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_meat.hpp	/^xvec_htrans<eT>::operator[](const uword ii) const$/;"	f	class:xvec_htrans
operator eT	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat_val<eT>::operator eT() const$/;"	f	class:MapMat_val
operator eT	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::operator eT() const$/;"	f	class:SpMat_MapMat_val
operator eT	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::operator eT() const$/;"	f	class:SpValProxy
operator eT	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^  operator eT () const$/;"	f	struct:arma_rng::randn
operator eT	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^  operator eT ()$/;"	f	struct:arma_rng::randi
operator eT	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^  operator eT ()$/;"	f	struct:arma_rng::randu
operator int	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  operator int () const$/;"	f	struct:state_type
operator std::complex<T>	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^  operator std::complex<T> () const$/;"	f	struct:arma_rng::randn
operator std::complex<T>	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^  operator std::complex<T> ()$/;"	f	struct:arma_rng::randu
operator std::string	include/catch.hpp	/^        explicit operator std::string() const {$/;"	f	class:Catch::StringRef
operator |	lib/armadillo-9.800.2/tests/catch.hpp	/^    inline ResultDisposition::Flags operator | ( ResultDisposition::Flags lhs, ResultDisposition::Flags rhs ) {$/;"	f	namespace:Catch
operator ||	lib/armadillo-9.800.2/include/armadillo_bits/operator_cube_relational.hpp	/^operator||$/;"	f
operator ||	lib/armadillo-9.800.2/include/armadillo_bits/operator_relational.hpp	/^operator||$/;"	f
operator ||	lib/armadillo-9.800.2/tests/catch.hpp	/^            MatchAnyOf<ArgT>& operator || ( MatcherBase<ArgT> const& other ) {$/;"	f	struct:Catch::Matchers::Impl::MatchAnyOf
operator ||	lib/armadillo-9.800.2/tests/catch.hpp	/^        MatchAnyOf<ComparatorT> MatcherBase<ObjectT, ComparatorT>::operator || ( MatcherBase const& other ) const {$/;"	f	class:Catch::Matchers::Impl::MatcherBase
operatorA	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	26;"	d
operatorA	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	25;"	d
operatorB	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_meat.hpp	27;"	d
operator_div	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each1_aux::operator_div$/;"	f	class:subview_cube_each1_aux
operator_div	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each2_aux::operator_div$/;"	f	class:subview_cube_each2_aux
operator_div	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each1_aux::operator_div$/;"	f	class:subview_each1_aux
operator_div	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each2_aux::operator_div$/;"	f	class:subview_each2_aux
operator_equ	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::operator_equ(const subview_cube_slices<eT,T2>& x)$/;"	f	class:subview_cube_slices
operator_equ	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::operator_equ(const subview_elem1<eT,T2>& x)$/;"	f	class:subview_elem1
operator_equ	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::operator_equ(const subview_elem2<eT,T3,T4>& x)$/;"	f	class:subview_elem2
operator_equ_common	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::operator_equ_common(const SpBase<eT, T1>& in)$/;"	f	class:SpSubview
operator_minus	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each1_aux::operator_minus$/;"	f	class:subview_cube_each1_aux
operator_minus	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each2_aux::operator_minus$/;"	f	class:subview_cube_each2_aux
operator_minus	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each1_aux::operator_minus$/;"	f	class:subview_each1_aux
operator_minus	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each2_aux::operator_minus$/;"	f	class:subview_each2_aux
operator_plus	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each1_aux::operator_plus$/;"	f	class:subview_cube_each1_aux
operator_plus	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each2_aux::operator_plus$/;"	f	class:subview_cube_each2_aux
operator_plus	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each1_aux::operator_plus$/;"	f	class:subview_each1_aux
operator_plus	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each2_aux::operator_plus$/;"	f	class:subview_each2_aux
operator_rel	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	22;"	d
operator_rel	lib/armadillo-9.800.2/include/armadillo_bits/op_relational_meat.hpp	21;"	d
operator_schur	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each1_aux::operator_schur$/;"	f	class:subview_cube_each1_aux
operator_schur	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each2_aux::operator_schur$/;"	f	class:subview_cube_each2_aux
operator_schur	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each1_aux::operator_schur$/;"	f	class:subview_each1_aux
operator_schur	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each2_aux::operator_schur$/;"	f	class:subview_each2_aux
operator_str	lib/armadillo-9.800.2/include/armadillo_bits/glue_relational_meat.hpp	23;"	d
operator_times	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each1_aux::operator_times$/;"	f	class:subview_cube_each1_aux
operators	lib/armadillo-9.800.2/docs.html	/^<a name="operators"><\/a>$/;"	a
ops	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    float*  ops;$/;"	m	struct:arma::superlu::__anon5
opts	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  const hdf5_opts::opts opts;$/;"	m	struct:hdf5_name
opts	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  opts::opts(const flag_type in_flags)$/;"	f	class:hdf5_opts::opts
opts	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct opts$/;"	s	namespace:hdf5_opts
opts	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  opts::opts(const uword in_flags)$/;"	f	class:solve_opts::opts
opts	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts$/;"	s	namespace:solve_opts
opts_allow_ugly	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_allow_ugly   : public opts { inline opts_allow_ugly()   : opts(flag_allow_ugly  ) {} };$/;"	f	struct:solve_opts::opts_allow_ugly
opts_allow_ugly	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_allow_ugly   : public opts { inline opts_allow_ugly()   : opts(flag_allow_ugly  ) {} };$/;"	s	namespace:solve_opts
opts_append	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct opts_append  : public opts { inline opts_append()  : opts(flag_append ) {} };$/;"	f	struct:hdf5_opts::opts_append
opts_append	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct opts_append  : public opts { inline opts_append()  : opts(flag_append ) {} };$/;"	s	namespace:hdf5_opts
opts_equilibrate	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_equilibrate  : public opts { inline opts_equilibrate()  : opts(flag_equilibrate ) {} };$/;"	f	struct:solve_opts::opts_equilibrate
opts_equilibrate	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_equilibrate  : public opts { inline opts_equilibrate()  : opts(flag_equilibrate ) {} };$/;"	s	namespace:solve_opts
opts_fast	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_fast         : public opts { inline opts_fast()         : opts(flag_fast        ) {} };$/;"	f	struct:solve_opts::opts_fast
opts_fast	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_fast         : public opts { inline opts_fast()         : opts(flag_fast        ) {} };$/;"	s	namespace:solve_opts
opts_likely_sympd	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_likely_sympd : public opts { inline opts_likely_sympd() : opts(flag_likely_sympd) {} };$/;"	f	struct:solve_opts::opts_likely_sympd
opts_likely_sympd	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_likely_sympd : public opts { inline opts_likely_sympd() : opts(flag_likely_sympd) {} };$/;"	s	namespace:solve_opts
opts_no_approx	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_no_approx    : public opts { inline opts_no_approx()    : opts(flag_no_approx   ) {} };$/;"	f	struct:solve_opts::opts_no_approx
opts_no_approx	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_no_approx    : public opts { inline opts_no_approx()    : opts(flag_no_approx   ) {} };$/;"	s	namespace:solve_opts
opts_no_band	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_no_band      : public opts { inline opts_no_band()      : opts(flag_no_band     ) {} };$/;"	f	struct:solve_opts::opts_no_band
opts_no_band	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_no_band      : public opts { inline opts_no_band()      : opts(flag_no_band     ) {} };$/;"	s	namespace:solve_opts
opts_no_sympd	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_no_sympd     : public opts { inline opts_no_sympd()     : opts(flag_no_sympd    ) {} };$/;"	f	struct:solve_opts::opts_no_sympd
opts_no_sympd	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_no_sympd     : public opts { inline opts_no_sympd()     : opts(flag_no_sympd    ) {} };$/;"	s	namespace:solve_opts
opts_no_trimat	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_no_trimat    : public opts { inline opts_no_trimat()    : opts(flag_no_trimat   ) {} };$/;"	f	struct:solve_opts::opts_no_trimat
opts_no_trimat	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_no_trimat    : public opts { inline opts_no_trimat()    : opts(flag_no_trimat   ) {} };$/;"	s	namespace:solve_opts
opts_none	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct opts_none    : public opts { inline opts_none()    : opts(flag_none   ) {} };$/;"	f	struct:hdf5_opts::opts_none
opts_none	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct opts_none    : public opts { inline opts_none()    : opts(flag_none   ) {} };$/;"	s	namespace:hdf5_opts
opts_none	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_none         : public opts { inline opts_none()         : opts(flag_none        ) {} };$/;"	f	struct:solve_opts::opts_none
opts_none	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_none         : public opts { inline opts_none()         : opts(flag_none        ) {} };$/;"	s	namespace:solve_opts
opts_refine	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_refine       : public opts { inline opts_refine()       : opts(flag_refine      ) {} };$/;"	f	struct:solve_opts::opts_refine
opts_refine	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_refine       : public opts { inline opts_refine()       : opts(flag_refine      ) {} };$/;"	s	namespace:solve_opts
opts_replace	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct opts_replace : public opts { inline opts_replace() : opts(flag_replace) {} };$/;"	f	struct:hdf5_opts::opts_replace
opts_replace	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct opts_replace : public opts { inline opts_replace() : opts(flag_replace) {} };$/;"	s	namespace:hdf5_opts
opts_trans	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct opts_trans   : public opts { inline opts_trans()   : opts(flag_trans  ) {} };$/;"	f	struct:hdf5_opts::opts_trans
opts_trans	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct opts_trans   : public opts { inline opts_trans()   : opts(flag_trans  ) {} };$/;"	s	namespace:hdf5_opts
opts_tril	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_tril         : public opts { inline opts_tril()         : opts(flag_tril        ) {} };$/;"	f	struct:solve_opts::opts_tril
opts_tril	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_tril         : public opts { inline opts_tril()         : opts(flag_tril        ) {} };$/;"	s	namespace:solve_opts
opts_triu	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_triu         : public opts { inline opts_triu()         : opts(flag_triu        ) {} };$/;"	f	struct:solve_opts::opts_triu
opts_triu	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct opts_triu         : public opts { inline opts_triu()         : opts(flag_triu        ) {} };$/;"	s	namespace:solve_opts
orgqr	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  orgqr(blas_int* m, blas_int* n, blas_int* k, eT* a, blas_int* lda, eT* tau, eT* work, blas_int* lwork, blas_int* info)$/;"	f	namespace:lapack
orig	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT>& orig;$/;"	m	struct:quasi_unwrap
orig	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Col<eT>& orig;$/;"	m	struct:quasi_unwrap_Col_htrans
orig	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>& orig;$/;"	m	struct:partial_unwrap
orig	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>& orig;$/;"	m	struct:quasi_unwrap
orig	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Mat<eT>& orig;$/;"	m	struct:quasi_unwrap_subview_col_htrans
orig	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT>& orig;$/;"	m	struct:quasi_unwrap
orig	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const Row<eT>& orig;$/;"	m	struct:quasi_unwrap_Row_htrans
orig_fill	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_bones.hpp	/^  const char            orig_fill;$/;"	m	class:arma_ostream_state
orig_flags	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_bones.hpp	/^  const ios::fmtflags   orig_flags;$/;"	m	class:arma_ostream_state
orig_precision	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_bones.hpp	/^  const std::streamsize orig_precision;$/;"	m	class:arma_ostream_state
orig_width	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_bones.hpp	/^  const std::streamsize orig_width;$/;"	m	class:arma_ostream_state
orth	lib/armadillo-9.800.2/docs.html	/^<a name="orth"><\/a>$/;"	a
orth	lib/armadillo-9.800.2/include/armadillo_bits/fn_orth_null.hpp	/^orth(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type, T1>& X, const typename T1::pod_type tol = 0.0)$/;"	f
orth	lib/armadillo-9.800.2/include/armadillo_bits/fn_orth_null.hpp	/^orth(const Base<typename T1::elem_type, T1>& X, const typename T1::pod_type tol = 0.0)$/;"	f
oss	lib/armadillo-9.800.2/tests/catch.hpp	/^        std::ostringstream oss;$/;"	m	struct:Catch::CopyableStream
ostream	include/catch.hpp	/^    auto operator << ( std::ostream& os, StringRef const& sr ) -> std::ostream&;$/;"	m	class:Catch::std
other	include/catch.hpp	/^        SourceLineInfo( SourceLineInfo const& other )            = default;$/;"	m	struct:Catch::SourceLineInfo
other	lib/armadillo-9.800.2/tests/catch.hpp	/^        SourceLineInfo(SourceLineInfo const& other)          = default;$/;"	m	struct:Catch::SourceLineInfo
out_eT	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^    typedef std::complex<T> out_eT;$/;"	t	struct:priv::functor_cx_scalar_times
pair_sort	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SortEigenvalue.hpp	/^  std::vector<PairType> pair_sort;$/;"	m	class:newarp::SortEigenvalue
panel_histo	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int*    panel_histo;$/;"	m	struct:arma::superlu::__anon5
parent	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  arma_aligned MapMat<eT>& parent;$/;"	m	class:MapMat_val
parent	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_bones.hpp	/^  arma_aligned T1& parent; \/\/ We will call this object if we need to insert or delete an element.$/;"	m	class:SpValProxy
parenthesized	lib/armadillo-9.800.2/tests/catch.hpp	/^        bool parenthesized;$/;"	m	struct:Catch::AssertionResultData
part_classes	lib/armadillo-9.800.2/docs.html	/^<a name="part_classes"><\/a>$/;"	a
part_decompdense	lib/armadillo-9.800.2/docs.html	/^<a name="part_decompdense"><\/a>$/;"	a
part_decompsparse	lib/armadillo-9.800.2/docs.html	/^<a name="part_decompsparse"><\/a>$/;"	a
part_fns	lib/armadillo-9.800.2/docs.html	/^<a name="part_fns"><\/a>$/;"	a
part_gen	lib/armadillo-9.800.2/docs.html	/^<a name="part_gen"><\/a>$/;"	a
part_membfns	lib/armadillo-9.800.2/docs.html	/^<a name="part_membfns"><\/a>$/;"	a
part_misc	lib/armadillo-9.800.2/docs.html	/^<a name="part_misc"><\/a>$/;"	a
part_sigproc	lib/armadillo-9.800.2/docs.html	/^<a name="part_sigproc"><\/a>$/;"	a
part_stats	lib/armadillo-9.800.2/docs.html	/^<a name="part_stats"><\/a>$/;"	a
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  inline partial_unwrap(const Op<T1, op_htrans2>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  inline partial_unwrap(const Op<T1, op_htrans>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const Col<eT>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const Mat<eT>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const Op< Col<eT>, op_htrans2>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const Op< Col<eT>, op_htrans>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const Op< Mat<eT>, op_htrans2>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const Op< Mat<eT>, op_htrans>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const Op< Row<eT>, op_htrans2>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const Op< Row<eT>, op_htrans>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const Op< subview_col<eT>, op_htrans2>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const Op< subview_col<eT>, op_htrans>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const Op< subview_row<eT>, op_htrans2>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const Op< subview_row<eT>, op_htrans>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const Row<eT>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const T1& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const eOp<Col<eT>,eop_neg>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const eOp<Col<eT>,eop_scalar_times>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const eOp<Mat<eT>,eop_neg>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const eOp<Mat<eT>,eop_scalar_times>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const eOp<Row<eT>,eop_neg>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const eOp<Row<eT>,eop_scalar_times>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const eOp<T1, eop_neg>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const eOp<T1, eop_scalar_times>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const eOp<subview_col<eT>,eop_neg>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const eOp<subview_col<eT>,eop_scalar_times>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const eOp<subview_row<eT>,eop_neg>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const eOp<subview_row<eT>,eop_scalar_times>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const subview<eT>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const subview_col<eT>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap(const subview_row<eT>& A)$/;"	f	struct:partial_unwrap
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap : public partial_unwrap_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Col<eT> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Mat<eT> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Op< Col<eT>, op_htrans2> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Op< Col<eT>, op_htrans> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Op< Mat<eT>, op_htrans2> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Op< Mat<eT>, op_htrans> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Op< Row<eT>, op_htrans2> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Op< Row<eT>, op_htrans> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Op< subview_col<eT>, op_htrans2> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Op< subview_col<eT>, op_htrans> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Op< subview_row<eT>, op_htrans2> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Op< subview_row<eT>, op_htrans> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Op<T1, op_htrans2> > : public partial_unwrap_htrans2_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Op<T1, op_htrans> > : public partial_unwrap_htrans_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< Row<eT> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< eOp<Col<eT>, eop_neg> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< eOp<Col<eT>, eop_scalar_times> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< eOp<Mat<eT>, eop_neg> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< eOp<Mat<eT>, eop_scalar_times> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< eOp<Row<eT>, eop_neg> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< eOp<Row<eT>, eop_scalar_times> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< eOp<T1, eop_neg> > : public partial_unwrap_neg_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< eOp<T1, eop_scalar_times> > : public partial_unwrap_scalar_times_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< eOp<subview_col<eT>, eop_neg> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< eOp<subview_col<eT>, eop_scalar_times> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< eOp<subview_row<eT>, eop_neg> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< eOp<subview_row<eT>, eop_scalar_times> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< subview<eT> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< subview_col<eT> >$/;"	s
partial_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap< subview_row<eT> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  inline partial_unwrap_check(const Op<T1, op_htrans2>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  inline partial_unwrap_check(const Op<T1, op_htrans>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  inline partial_unwrap_check(const T1& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  inline partial_unwrap_check(const eOp<T1, eop_neg>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  inline partial_unwrap_check(const eOp<T1, eop_scalar_times>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const Col<eT>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const Mat<eT>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const Op< Col<eT>, op_htrans2>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const Op< Col<eT>, op_htrans>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const Op< Mat<eT>, op_htrans2>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const Op< Mat<eT>, op_htrans>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const Op< Row<eT>, op_htrans2>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const Op< Row<eT>, op_htrans>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const Op< subview_col<eT>, op_htrans2>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const Op< subview_col<eT>, op_htrans>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const Row<eT>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const eOp<Col<eT>,eop_neg>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const eOp<Col<eT>,eop_scalar_times>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const eOp<Mat<eT>,eop_neg>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const eOp<Mat<eT>,eop_scalar_times>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const eOp<Row<eT>,eop_neg>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const eOp<Row<eT>,eop_scalar_times>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const eOp<subview_col<eT>,eop_neg>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const eOp<subview_col<eT>,eop_scalar_times>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check(const subview_col<eT>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check : public partial_unwrap_check_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< Col<eT> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< Mat<eT> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< Op< Col<eT>, op_htrans2> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< Op< Col<eT>, op_htrans> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< Op< Mat<eT>, op_htrans2> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< Op< Mat<eT>, op_htrans> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< Op< Row<eT>, op_htrans2> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< Op< Row<eT>, op_htrans> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< Op< subview_col<eT>, op_htrans2> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< Op< subview_col<eT>, op_htrans> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< Op<T1, op_htrans2> > : public partial_unwrap_check_htrans2_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< Op<T1, op_htrans> > : public partial_unwrap_check_htrans_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< Row<eT> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< eOp<Col<eT>, eop_neg> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< eOp<Col<eT>, eop_scalar_times> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< eOp<Mat<eT>, eop_neg> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< eOp<Mat<eT>, eop_scalar_times> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< eOp<Row<eT>, eop_neg> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< eOp<Row<eT>, eop_scalar_times> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< eOp<T1, eop_neg> > : public partial_unwrap_check_neg_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< eOp<T1, eop_scalar_times> > : public partial_unwrap_check_scalar_times_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< eOp<subview_col<eT>, eop_neg> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< eOp<subview_col<eT>, eop_scalar_times> >$/;"	s
partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check< subview_col<eT> >$/;"	s
partial_unwrap_check_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check_default(const T1& A, const Mat<eT>&)$/;"	f	struct:partial_unwrap_check_default
partial_unwrap_check_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_default$/;"	s
partial_unwrap_check_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check_fixed(const T1& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check_fixed
partial_unwrap_check_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_fixed$/;"	s
partial_unwrap_check_htrans2_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check_htrans2_default(const Op<T1, op_htrans2>& A, const Mat<eT>&)$/;"	f	struct:partial_unwrap_check_htrans2_default
partial_unwrap_check_htrans2_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_htrans2_default$/;"	s
partial_unwrap_check_htrans2_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check_htrans2_fixed(const Op<T1, op_htrans2>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check_htrans2_fixed
partial_unwrap_check_htrans2_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_htrans2_fixed$/;"	s
partial_unwrap_check_htrans2_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_htrans2_redirect {};$/;"	s
partial_unwrap_check_htrans2_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_htrans2_redirect<T1, false> { typedef partial_unwrap_check_htrans2_default<T1> result; };$/;"	s
partial_unwrap_check_htrans2_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_htrans2_redirect<T1, true>  { typedef partial_unwrap_check_htrans2_fixed<T1>   result; };$/;"	s
partial_unwrap_check_htrans_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check_htrans_default(const Op<T1, op_htrans>& A, const Mat<eT>&)$/;"	f	struct:partial_unwrap_check_htrans_default
partial_unwrap_check_htrans_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_htrans_default$/;"	s
partial_unwrap_check_htrans_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check_htrans_fixed(const Op<T1, op_htrans>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check_htrans_fixed
partial_unwrap_check_htrans_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_htrans_fixed$/;"	s
partial_unwrap_check_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_htrans_redirect {};$/;"	s
partial_unwrap_check_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_htrans_redirect<T1, false> { typedef partial_unwrap_check_htrans_default<T1> result; };$/;"	s
partial_unwrap_check_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_htrans_redirect<T1, true>  { typedef partial_unwrap_check_htrans_fixed<T1>   result; };$/;"	s
partial_unwrap_check_neg_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check_neg_default(const eOp<T1, eop_neg>& A, const Mat<eT>&)$/;"	f	struct:partial_unwrap_check_neg_default
partial_unwrap_check_neg_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_neg_default$/;"	s
partial_unwrap_check_neg_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check_neg_fixed(const eOp<T1, eop_neg>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check_neg_fixed
partial_unwrap_check_neg_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_neg_fixed$/;"	s
partial_unwrap_check_neg_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_neg_redirect {};$/;"	s
partial_unwrap_check_neg_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_neg_redirect<T1, false> { typedef partial_unwrap_check_neg_default<T1> result; };$/;"	s
partial_unwrap_check_neg_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_neg_redirect<T1, true>  { typedef partial_unwrap_check_neg_fixed<T1>   result; };$/;"	s
partial_unwrap_check_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_redirect {};$/;"	s
partial_unwrap_check_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_redirect<T1, false> { typedef partial_unwrap_check_default<T1> result; };$/;"	s
partial_unwrap_check_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_redirect<T1, true>  { typedef partial_unwrap_check_fixed<T1>   result; };$/;"	s
partial_unwrap_check_scalar_times_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check_scalar_times_default(const eOp<T1, eop_scalar_times>& A, const Mat<eT>&)$/;"	f	struct:partial_unwrap_check_scalar_times_default
partial_unwrap_check_scalar_times_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_scalar_times_default$/;"	s
partial_unwrap_check_scalar_times_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_check_scalar_times_fixed(const eOp<T1, eop_scalar_times>& A, const Mat<eT>& B)$/;"	f	struct:partial_unwrap_check_scalar_times_fixed
partial_unwrap_check_scalar_times_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_scalar_times_fixed$/;"	s
partial_unwrap_check_scalar_times_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_scalar_times_redirect {};$/;"	s
partial_unwrap_check_scalar_times_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_scalar_times_redirect<T1, false> { typedef partial_unwrap_check_scalar_times_default<T1> result; };$/;"	s
partial_unwrap_check_scalar_times_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_scalar_times_redirect<T1, true>  { typedef partial_unwrap_check_scalar_times_fixed<T1>   result; };$/;"	s
partial_unwrap_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_default(const T1& A)$/;"	f	struct:partial_unwrap_default
partial_unwrap_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_default$/;"	s
partial_unwrap_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_fixed(const T1& A)$/;"	f	struct:partial_unwrap_fixed
partial_unwrap_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_fixed$/;"	s
partial_unwrap_htrans2_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_htrans2_default(const Op<T1, op_htrans2>& A)$/;"	f	struct:partial_unwrap_htrans2_default
partial_unwrap_htrans2_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_htrans2_default$/;"	s
partial_unwrap_htrans2_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_htrans2_fixed(const Op<T1, op_htrans2>& A)$/;"	f	struct:partial_unwrap_htrans2_fixed
partial_unwrap_htrans2_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_htrans2_fixed$/;"	s
partial_unwrap_htrans2_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_htrans2_redirect {};$/;"	s
partial_unwrap_htrans2_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_htrans2_redirect<T1, false> { typedef partial_unwrap_htrans2_default<T1> result; };$/;"	s
partial_unwrap_htrans2_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_htrans2_redirect<T1, true>  { typedef partial_unwrap_htrans2_fixed<T1>   result; };$/;"	s
partial_unwrap_htrans_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_htrans_default(const Op<T1, op_htrans>& A)$/;"	f	struct:partial_unwrap_htrans_default
partial_unwrap_htrans_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_htrans_default$/;"	s
partial_unwrap_htrans_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_htrans_fixed(const Op<T1, op_htrans>& A)$/;"	f	struct:partial_unwrap_htrans_fixed
partial_unwrap_htrans_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_htrans_fixed$/;"	s
partial_unwrap_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_htrans_redirect {};$/;"	s
partial_unwrap_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_htrans_redirect<T1, false> { typedef partial_unwrap_htrans_default<T1> result; };$/;"	s
partial_unwrap_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_htrans_redirect<T1, true>  { typedef partial_unwrap_htrans_fixed<T1>   result; };$/;"	s
partial_unwrap_neg_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_neg_default(const eOp<T1, eop_neg>& A)$/;"	f	struct:partial_unwrap_neg_default
partial_unwrap_neg_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_neg_default$/;"	s
partial_unwrap_neg_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_neg_fixed(const eOp<T1, eop_neg>& A)$/;"	f	struct:partial_unwrap_neg_fixed
partial_unwrap_neg_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_neg_fixed$/;"	s
partial_unwrap_neg_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_neg_redirect {};$/;"	s
partial_unwrap_neg_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_neg_redirect<T1, false> { typedef partial_unwrap_neg_default<T1> result; };$/;"	s
partial_unwrap_neg_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_neg_redirect<T1, true>  { typedef partial_unwrap_neg_fixed<T1>   result; };$/;"	s
partial_unwrap_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_redirect {};$/;"	s
partial_unwrap_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_redirect<T1, false> { typedef partial_unwrap_default<T1> result; };$/;"	s
partial_unwrap_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_redirect<T1, true>  { typedef partial_unwrap_fixed<T1>   result; };$/;"	s
partial_unwrap_scalar_times_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_scalar_times_default(const eOp<T1, eop_scalar_times>& A)$/;"	f	struct:partial_unwrap_scalar_times_default
partial_unwrap_scalar_times_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_scalar_times_default$/;"	s
partial_unwrap_scalar_times_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  partial_unwrap_scalar_times_fixed(const eOp<T1, eop_scalar_times>& A)$/;"	f	struct:partial_unwrap_scalar_times_fixed
partial_unwrap_scalar_times_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_scalar_times_fixed$/;"	s
partial_unwrap_scalar_times_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_scalar_times_redirect {};$/;"	s
partial_unwrap_scalar_times_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_scalar_times_redirect<T1, false> { typedef partial_unwrap_scalar_times_default<T1> result; };$/;"	s
partial_unwrap_scalar_times_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_scalar_times_redirect<T1, true>  { typedef partial_unwrap_scalar_times_fixed<T1>   result; };$/;"	s
patch	lib/armadillo-9.800.2/include/armadillo_bits/arma_version.hpp	/^  static const unsigned int patch = ARMA_VERSION_PATCH;$/;"	m	struct:arma_version
pbtrf	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  pbtrf(char* uplo, blas_int* n, blas_int* kd, eT* ab, blas_int* ldab, blas_int* info)$/;"	f	namespace:lapack
performOptionalSelector	include/catch.hpp	/^inline id performOptionalSelector( id obj, SEL sel ) {$/;"	f
performOptionalSelector	lib/armadillo-9.800.2/tests/catch.hpp	/^inline id performOptionalSelector( id obj, SEL sel ) {$/;"	f
perform_op	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DenseGenMatProd_meat.hpp	/^DenseGenMatProd<eT>::perform_op(eT* x_in, eT* y_out) const$/;"	f	class:newarp::DenseGenMatProd
perform_op	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SparseGenMatProd_meat.hpp	/^SparseGenMatProd<eT>::perform_op(eT* x_in, eT* y_out) const$/;"	f	class:newarp::SparseGenMatProd
permutation	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  permutation_type permutation;$/;"	m	struct:superlu_opts
permutation_type	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  typedef enum {NATURAL, MMD_ATA, MMD_AT_PLUS_A, COLAMD} permutation_type;$/;"	t	struct:superlu_opts	typeref:enum:superlu_opts::__anon3
pgm_binary	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  pgm_binary,         \/\/!< Portable Grey Map (greyscale image)$/;"	e	enum:file_type
phi_0	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT phi_0;     \/\/!< magnetic flux quantum (in webers)$/;"	m	class:Datum
phi_0	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::phi_0     = eT(2.067833667e-15);$/;"	m	class:Datum
phi_0	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT phi_0()     { return eT(2.067833667e-15); }$/;"	f	class:Phy
phy	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^typedef Phy<double>  phy;$/;"	t
pi	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT pi;       \/\/!< ratio of any circle's circumference to its diameter$/;"	m	class:Datum
pi	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::pi        = eT(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679);$/;"	m	class:Datum
pi	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT pi()        { return eT(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679); }  \/\/ use datum::pi instead$/;"	f	class:Math
pinv	lib/armadillo-9.800.2/docs.html	/^<a name="pinv"><\/a>$/;"	a
pinv	lib/armadillo-9.800.2/include/armadillo_bits/fn_pinv.hpp	/^pinv$/;"	f
pivot_thresh	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  double           pivot_thresh;$/;"	m	struct:superlu_opts
pluralise	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct pluralise {$/;"	s	namespace:Catch
plus_inplace	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::plus_inplace(Mat<eT>& out, const diagview<eT>& in)$/;"	f	class:diagview
plus_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::plus_inplace(Cube<eT>& out, const subview_cube<eT>& in)$/;"	f	class:subview_cube
plus_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::plus_inplace(Mat<eT>& out, const subview_cube<eT>& in)$/;"	f	class:subview_cube
plus_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::plus_inplace(Cube<eT>& out, const subview_cube_slices& in)$/;"	f	class:subview_cube_slices
plus_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::plus_inplace(Mat<eT>& out, const subview_elem1& in)$/;"	f	class:subview_elem1
plus_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::plus_inplace(Mat<eT>& out, const subview_elem2& in)$/;"	f	class:subview_elem2
plus_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::plus_inplace(Mat<eT>& out, const subview<eT>& in)$/;"	f	class:subview
pnm_skip_comments	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::pnm_skip_comments(std::istream& f)$/;"	f	class:diskio
pocon	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  pocon(char* uplo, blas_int* n, const eT* a, blas_int* lda, const eT* anorm, eT* rcond, eT* work, blas_int* iwork, blas_int* info)$/;"	f	namespace:lapack
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  typedef typename get_pod_type<eT>::result pod_type;$/;"	t	class:Col
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  typedef typename get_pod_type<eT>::result pod_type;$/;"	t	class:Col::fixed
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/CubeToMatOp_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:CubeToMatOp
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  typedef typename get_pod_type<eT>::result  pod_type; \/\/!< if eT is std::complex<T>, pod_type is T; otherwise pod_type is eT$/;"	t	class:Cube
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:GenCube
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Gen_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:Gen
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/GlueCube_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:GlueCube
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Glue_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:Glue
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  typedef typename get_pod_type<eT>::result  pod_type;  \/\/!< if eT is std::complex<T>, pod_type is T; otherwise pod_type is eT$/;"	t	class:MapMat
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  typedef typename get_pod_type<eT>::result  pod_type;  \/\/!< if eT is std::complex<T>, pod_type is T; otherwise pod_type is eT$/;"	t	class:Mat
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  typedef typename get_pod_type<eT>::result pod_type;$/;"	t	class:Mat::fixed
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:OpCube
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Op_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:Op
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef T                         pod_type;$/;"	t	class:Proxy
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename Proxy_sv_row_ht::pod_type    pod_type;$/;"	t	class:Proxy
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename Proxy_xtrans::pod_type        pod_type;$/;"	t	class:Proxy
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename get_pod_type<eT>::result pod_type;$/;"	t	class:Proxy
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename get_pod_type<eT>::result pod_type;$/;"	t	struct:Proxy_subview_row_htrans_cx
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename get_pod_type<eT>::result pod_type;$/;"	t	struct:Proxy_subview_row_htrans_non_cx
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result         pod_type;$/;"	t	class:Proxy
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:Proxy
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:Proxy_diagvec_expr
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:Proxy_diagvec_mat
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:Proxy_vectorise_col_expr
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:Proxy_vectorise_col_mat
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	struct:Proxy_fixed
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	struct:Proxy_xtrans_default
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	struct:Proxy_xtrans_vector
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename get_pod_type<out_eT>::result pod_type;$/;"	t	class:Proxy
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:ProxyCube
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef typename get_pod_type<out_eT>::result pod_type;$/;"	t	class:ProxyCube
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  typedef typename get_pod_type<eT>::result pod_type;$/;"	t	class:Row
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  typedef typename get_pod_type<eT>::result pod_type;$/;"	t	class:Row::fixed
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_bones.hpp	/^  typedef typename get_pod_type<eT>::result pod_type;$/;"	t	class:SpCol
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/SpGlue_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:SpGlue
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  typedef typename get_pod_type<eT>::result  pod_type;  \/\/!< if eT is std::complex<T>, pod_type is T; otherwise pod_type is eT$/;"	t	class:SpMat
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:SpOp
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef typename get_pod_type<elem_type>::result     pod_type;$/;"	t	class:SpProxy
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:SpProxy
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_bones.hpp	/^  typedef typename get_pod_type<eT>::result pod_type;$/;"	t	class:SpRow
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:SpSubview
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/SpToDOp_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:SpToDOp
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:diagmat_proxy
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:diagmat_proxy_check
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:diagmat_proxy_check_default
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:diagmat_proxy_check_fixed
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:diagmat_proxy_default
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:diagmat_proxy_fixed
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/diagview_bones.hpp	/^  typedef typename get_pod_type<eT>::result pod_type;$/;"	t	class:diagview
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:eGlueCube
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:eGlue
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:eOpCube
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:eOp
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/mtGlueCube_bones.hpp	/^  typedef typename get_pod_type<out_eT>::result pod_type;$/;"	t	class:mtGlueCube
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/mtGlue_bones.hpp	/^  typedef typename get_pod_type<out_eT>::result pod_type;$/;"	t	class:mtGlue
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_bones.hpp	/^  typedef typename get_pod_type<out_eT>::result pod_type;$/;"	t	class:mtOpCube
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_bones.hpp	/^  typedef typename get_pod_type<out_eT>::result pod_type;$/;"	t	class:mtOp
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/mtSpGlue_bones.hpp	/^  typedef typename get_pod_type<out_eT>::result pod_type;$/;"	t	class:mtSpGlue
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_bones.hpp	/^  typedef typename get_pod_type<out_eT>::result pod_type;$/;"	t	class:mtSpOp
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_bones.hpp	/^  typedef typename get_pod_type<eT>::result pod_type;$/;"	t	class:spdiagview
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:subview
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:subview_col
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:subview_row
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:subview_row_htrans
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:subview_row_strans
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:subview_cube
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:subview_cube_slices
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:subview_elem1
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:subview_elem2
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:xtrans_mat
pod_type	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_bones.hpp	/^  typedef typename get_pod_type<elem_type>::result pod_type;$/;"	t	class:xvec_htrans
podarray	lib/armadillo-9.800.2/include/armadillo_bits/podarray_bones.hpp	/^class podarray$/;"	c
podarray	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::podarray()$/;"	f	class:podarray
podarray	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::podarray(const eT* X, const uword new_n_elem)$/;"	f	class:podarray
podarray	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::podarray(const podarray& x)$/;"	f	class:podarray
podarray	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::podarray(const uword new_n_elem)$/;"	f	class:podarray
podarray_prealloc_n_elem	lib/armadillo-9.800.2/include/armadillo_bits/podarray_bones.hpp	/^struct podarray_prealloc_n_elem$/;"	s
pointer	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef const eT*                       pointer;$/;"	t	class:Mat::const_row_col_iterator
pointer	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef const eT*                       pointer;$/;"	t	class:Mat::const_row_iterator
pointer	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef eT*                             pointer;$/;"	t	class:Mat::row_col_iterator
pointer	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef eT*                             pointer;$/;"	t	class:Mat::row_iterator
pointer	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    typedef const SpValProxy<SpMat<eT> >*  pointer;$/;"	t	class:SpMat::iterator
pointer	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    typedef const SpValProxy<SpMat<eT> >*  pointer;$/;"	t	class:SpMat::row_iterator
pointer	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    typedef const eT*                       pointer;$/;"	t	class:SpMat::iterator_base
pointer	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    typedef const SpValProxy<SpSubview<eT> >* pointer;$/;"	t	class:SpSubview::iterator
pointer	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    typedef const SpValProxy<SpSubview<eT> >* pointer;$/;"	t	class:SpSubview::row_iterator
pointer	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    typedef const eT*                       pointer;$/;"	t	class:SpSubview::iterator_base
pointer	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef const eT*                 pointer;$/;"	t	class:subview::const_iterator
pointer	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef const eT*                 pointer;$/;"	t	class:subview::const_row_iterator
pointer	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef eT*                       pointer;$/;"	t	class:subview::iterator
pointer	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef eT*                       pointer;$/;"	t	class:subview::row_iterator
pointer	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    typedef const eT*                 pointer;$/;"	t	class:subview_cube::const_iterator
pointer	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    typedef eT*                       pointer;$/;"	t	class:subview_cube::iterator
polyfit	lib/armadillo-9.800.2/docs.html	/^<a name="polyfit"><\/a>$/;"	a
polyfit	lib/armadillo-9.800.2/include/armadillo_bits/fn_polyfit.hpp	/^polyfit(Mat<typename T1::elem_type>& out, const Base<typename T1::elem_type, T1>& X, const Base<typename T1::elem_type, T2>& Y, const uword N)$/;"	f
polyfit	lib/armadillo-9.800.2/include/armadillo_bits/fn_polyfit.hpp	/^polyfit(const Base<typename T1::elem_type, T1>& X, const Base<typename T1::elem_type, T2>& Y, const uword N)$/;"	f
polyval	lib/armadillo-9.800.2/docs.html	/^<a name="polyval"><\/a>$/;"	a
polyval	lib/armadillo-9.800.2/include/armadillo_bits/fn_polyval.hpp	/^polyval(const Base<typename T1::elem_type, T1>& P, const T2& X)$/;"	f
pos	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    arma_inline uword pos() const { return internal_pos;                 }$/;"	f	class:SpMat::iterator_base
pos	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    arma_inline uword pos() const { return internal_pos; }$/;"	f	class:SpSubview::iterator_base
pos	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_bones.hpp	/^  struct pos$/;"	s	class:auxlib
pos	lib/armadillo-9.800.2/include/armadillo_bits/mul_gemv.hpp	/^  struct pos$/;"	s	class:gemv_emul_tinysq
pos	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^  struct pos$/;"	s	class:op_strans
pos	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^  struct pos$/;"	s	class:op_strans2
posix	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool posix = false;$/;"	m	struct:arma_config
posix	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool posix = true;$/;"	m	struct:arma_config
posix_time1	lib/armadillo-9.800.2/include/armadillo_bits/wall_clock_bones.hpp	/^    struct timeval posix_time1;$/;"	m	class:wall_clock	typeref:struct:wall_clock::timeval
posix_time2	lib/armadillo-9.800.2/include/armadillo_bits/wall_clock_bones.hpp	/^    struct timeval posix_time2;$/;"	m	class:wall_clock	typeref:struct:wall_clock::timeval
postfix_mm	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube_aux::postfix_mm(Cube< std::complex<T> >& x)$/;"	f	class:Cube_aux
postfix_mm	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube_aux::postfix_mm(Cube<eT>& x)$/;"	f	class:Cube_aux
postfix_mm	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat_aux::postfix_mm(Mat< std::complex<T> >& x)$/;"	f	class:Mat_aux
postfix_mm	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat_aux::postfix_mm(Mat<eT>& x)$/;"	f	class:Mat_aux
postfix_pp	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube_aux::postfix_pp(Cube< std::complex<T> >& x)$/;"	f	class:Cube_aux
postfix_pp	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube_aux::postfix_pp(Cube<eT>& x)$/;"	f	class:Cube_aux
postfix_pp	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat_aux::postfix_pp(Mat< std::complex<T> >& x)$/;"	f	class:Mat_aux
postfix_pp	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat_aux::postfix_pp(Mat<eT>& x)$/;"	f	class:Mat_aux
posv	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  posv(char* uplo, blas_int* n, blas_int* nrhs, eT* a, blas_int* lda, eT* b, blas_int* ldb, blas_int* info)$/;"	f	namespace:lapack
posvx	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  posvx(char* fact, char* uplo, blas_int* n, blas_int* nrhs, eT* a, blas_int* lda, eT* af, blas_int* ldaf, char* equed, eT* s, eT* b, blas_int* ldb, eT* x, blas_int* ldx, eT* rcond, eT* ferr, eT* berr, eT* work, blas_int* iwork, blas_int* info)$/;"	f	namespace:lapack
potrf	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  potrf(char* uplo, blas_int* n, eT* a, blas_int* lda, blas_int* info)$/;"	f	namespace:lapack
potri	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  potri(char* uplo, blas_int* n, eT* a, blas_int* lda, blas_int* info)$/;"	f	namespace:lapack
potrs	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  potrs(char* uplo, blas_int* n, const blas_int* nrhs, eT* a, blas_int* lda, eT* b, blas_int* ldb, blas_int* info)$/;"	f	namespace:lapack
pow	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename T1, typename T2> arma_inline static typename   arma_integral_only<T1>::result pow (const T1 base, const T2 exponent) { return T1( std::pow( double(base), double(exponent) ) ); }$/;"	f	class:eop_aux
pow	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename T1, typename T2> arma_inline static typename arma_real_or_cx_only<T1>::result pow (const T1 base, const T2 exponent) { return std::pow(base, exponent);                         }$/;"	f	class:eop_aux
pow	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^pow(const Base<typename T1::elem_type,T1>& A, const typename T1::elem_type exponent)$/;"	f
pow	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^pow(const Base<typename T1::elem_type,T1>& A, const typename T1::elem_type::value_type exponent)$/;"	f
pow	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^pow(const BaseCube<typename T1::elem_type,T1>& A, const typename T1::elem_type exponent)$/;"	f
pow	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^pow(const BaseCube<typename T1::elem_type,T1>& A, const typename T1::elem_type::value_type exponent)$/;"	f
ppm_binary	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  ppm_binary,         \/\/!< Portable Pixel Map (colour image), used by the field and cube classes$/;"	e	enum:file_type
prec	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_bones.hpp	/^  const eT            prec;     \/\/ Approximately zero$/;"	m	class:newarp::DoubleShiftQR
precision	include/catch.hpp	/^        static int precision;$/;"	m	struct:Catch::StringMaker
prefix_mm	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube_aux::prefix_mm(Cube< std::complex<T> >& x)$/;"	f	class:Cube_aux
prefix_mm	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube_aux::prefix_mm(Cube<eT>& x)$/;"	f	class:Cube_aux
prefix_mm	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat_aux::prefix_mm(Mat< std::complex<T> >& x)$/;"	f	class:Mat_aux
prefix_mm	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat_aux::prefix_mm(Mat<eT>& x)$/;"	f	class:Mat_aux
prefix_pp	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube_aux::prefix_pp(Cube< std::complex<T> >& x)$/;"	f	class:Cube_aux
prefix_pp	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube_aux::prefix_pp(Cube<eT>& x)$/;"	f	class:Cube_aux
prefix_pp	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat_aux::prefix_pp(Mat< std::complex<T> >& x)$/;"	f	class:Mat_aux
prefix_pp	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat_aux::prefix_pp(Mat<eT>& x)$/;"	f	class:Mat_aux
princomp	lib/armadillo-9.800.2/docs.html	/^<a name="princomp"><\/a>$/;"	a
princomp	lib/armadillo-9.800.2/include/armadillo_bits/fn_princomp.hpp	/^princomp$/;"	f
print	lib/armadillo-9.800.2/docs.html	/^<a name="print"><\/a>$/;"	a
print	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube<elem_type,derived>::print(const std::string extra_text) const$/;"	f	class:BaseCube
print	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube<elem_type,derived>::print(std::ostream& user_stream, const std::string extra_text) const$/;"	f	class:BaseCube
print	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::print(const std::string extra_text) const$/;"	f	class:Base
print	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::print(std::ostream& user_stream, const std::string extra_text) const$/;"	f	class:Base
print	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::print(const std::string& extra_text) const$/;"	f	class:MapMat
print	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::print(const std::string extra_text) const$/;"	f	class:SpBase
print	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::print(std::ostream& user_stream, const std::string extra_text) const$/;"	f	class:SpBase
print	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::print(std::ostream& o, const Cube<eT>& x, const bool modify)$/;"	f	class:arma_ostream
print	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::print(std::ostream& o, const Mat<eT>& m, const bool modify)$/;"	f	class:arma_ostream
print	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::print(std::ostream& o, const SizeCube& S)$/;"	f	class:arma_ostream
print	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::print(std::ostream& o, const SizeMat& S)$/;"	f	class:arma_ostream
print	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::print(std::ostream& o, const SpMat<eT>& m, const bool modify)$/;"	f	class:arma_ostream
print	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::print(std::ostream& o, const field<oT>& x)$/;"	f	class:arma_ostream
print	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::print(std::ostream& o, const subview_field<oT>& x)$/;"	f	class:arma_ostream
print	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::print(const std::string extra_text) const$/;"	f	class:field
print	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::print(std::ostream& user_stream, const std::string extra_text) const$/;"	f	class:field
print	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::print(const std::string extra_text) const$/;"	f	class:subview_field
print	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::print(std::ostream& user_stream, const std::string extra_text) const$/;"	f	class:subview_field
print_dense	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type, derived>::print_dense(const std::string extra_text) const$/;"	f	class:SpBase
print_dense	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type, derived>::print_dense(std::ostream& user_stream, const std::string extra_text) const$/;"	f	class:SpBase
print_dense	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::print_dense(std::ostream& o, const SpMat<eT>& m, const bool modify)$/;"	f	class:arma_ostream
print_elem	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::print_elem(std::ostream& o, const eT& x, const bool modify)$/;"	f	class:arma_ostream
print_elem	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::print_elem(std::ostream& o, const std::complex<T>& x, const bool modify)$/;"	f	class:arma_ostream
print_elem_zero	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream::print_elem_zero(std::ostream& o, const bool modify)$/;"	f	class:arma_ostream
priv	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^namespace priv$/;"	n
priv	lib/armadillo-9.800.2/include/armadillo_bits/fn_dot.hpp	/^namespace priv$/;"	n
priv	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_meat.hpp	/^namespace priv$/;"	n
prob_dist	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^static const gmm_dist_prob prob_dist;$/;"	v
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_abs              >::process(const eT val, const eT  ) { return eop_aux::arma_abs(val);   }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_acos             >::process(const eT val, const eT  ) { return eop_aux::acos(val);       }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_acosh            >::process(const eT val, const eT  ) { return eop_aux::acosh(val);      }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_arg              >::process(const eT val, const eT  ) { return arma_arg<eT>::eval(val);  }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_asin             >::process(const eT val, const eT  ) { return eop_aux::asin(val);       }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_asinh            >::process(const eT val, const eT  ) { return eop_aux::asinh(val);      }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_atan             >::process(const eT val, const eT  ) { return eop_aux::atan(val);       }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_atanh            >::process(const eT val, const eT  ) { return eop_aux::atanh(val);      }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_ceil             >::process(const eT val, const eT  ) { return eop_aux::ceil(val);       }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_conj             >::process(const eT val, const eT  ) { return eop_aux::conj(val);       }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_cos              >::process(const eT val, const eT  ) { return eop_aux::cos(val);        }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_cosh             >::process(const eT val, const eT  ) { return eop_aux::cosh(val);       }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_eps              >::process(const eT val, const eT  ) { return eop_aux::direct_eps(val); }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_erf              >::process(const eT val, const eT  ) { return eop_aux::erf(val);        }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_erfc             >::process(const eT val, const eT  ) { return eop_aux::erfc(val);       }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_exp              >::process(const eT val, const eT  ) { return eop_aux::exp(val);        }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_exp10            >::process(const eT val, const eT  ) { return eop_aux::exp10(val);      }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_exp2             >::process(const eT val, const eT  ) { return eop_aux::exp2(val);       }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_expm1            >::process(const eT val, const eT  ) { return eop_aux::expm1(val);      }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_floor            >::process(const eT val, const eT  ) { return eop_aux::floor(val);      }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_lgamma           >::process(const eT val, const eT  ) { return eop_aux::lgamma(val);     }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_log              >::process(const eT val, const eT  ) { return eop_aux::log(val);        }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_log10            >::process(const eT val, const eT  ) { return eop_aux::log10(val);      }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_log1p            >::process(const eT val, const eT  ) { return eop_aux::log1p(val);      }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_log2             >::process(const eT val, const eT  ) { return eop_aux::log2(val);       }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_neg              >::process(const eT val, const eT  ) { return eop_aux::neg(val);        }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_pow              >::process(const eT val, const eT k) { return eop_aux::pow(val, k);     }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_round            >::process(const eT val, const eT  ) { return eop_aux::round(val);      }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_scalar_div_post  >::process(const eT val, const eT k) { return val \/ k;                  }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_scalar_div_pre   >::process(const eT val, const eT k) { return k \/ val;                  }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_scalar_minus_post>::process(const eT val, const eT k) { return val - k;                  }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_scalar_minus_pre >::process(const eT val, const eT k) { return k - val;                  }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_scalar_plus      >::process(const eT val, const eT k) { return val + k;                  }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_scalar_times     >::process(const eT val, const eT k) { return val * k;                  }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_sign             >::process(const eT val, const eT  ) { return arma_sign(val);           }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_sin              >::process(const eT val, const eT  ) { return eop_aux::sin(val);        }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_sinc             >::process(const eT val, const eT  ) { return arma_sinc(val);           }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_sinh             >::process(const eT val, const eT  ) { return eop_aux::sinh(val);       }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_sqrt             >::process(const eT val, const eT  ) { return eop_aux::sqrt(val);       }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_square           >::process(const eT val, const eT  ) { return val*val;                  }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_tan              >::process(const eT val, const eT  ) { return eop_aux::tan(val);        }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_tanh             >::process(const eT val, const eT  ) { return eop_aux::tanh(val);       }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_trunc            >::process(const eT val, const eT  ) { return eop_aux::trunc(val);      }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_trunc_exp        >::process(const eT val, const eT  ) { return    arma::trunc_exp(val);  }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_trunc_log        >::process(const eT val, const eT  ) { return    arma::trunc_log(val);  }$/;"	f	class:eop_core
process	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_meat.hpp	/^eop_core<eop_type>::process(const eT, const eT)$/;"	f	class:eop_core
prod	lib/armadillo-9.800.2/docs.html	/^<a name="prod"><\/a>$/;"	a
prod	lib/armadillo-9.800.2/include/armadillo_bits/fn_prod.hpp	/^prod(const T& x)$/;"	f
prod	lib/armadillo-9.800.2/include/armadillo_bits/fn_prod.hpp	/^prod(const T1& X)$/;"	f
prod	lib/armadillo-9.800.2/include/armadillo_bits/fn_prod.hpp	/^prod(const T1& X, const uword dim)$/;"	f
prod	lib/armadillo-9.800.2/include/armadillo_bits/op_prod_meat.hpp	/^op_prod::prod(const Base<typename T1::elem_type,T1>& X)$/;"	f	class:op_prod
prod	lib/armadillo-9.800.2/include/armadillo_bits/op_prod_meat.hpp	/^op_prod::prod(const subview<eT>& X)$/;"	f	class:op_prod
product	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::product(const eT* src, const uword n_elem)$/;"	f	class:arrayops
promote_type	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^struct promote_type$/;"	s
proxy1_type	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_bones.hpp	/^  typedef          Proxy<T1>                       proxy1_type;$/;"	t	class:eGlue
proxy2_type	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_bones.hpp	/^  typedef          Proxy<T2>                       proxy2_type;$/;"	t	class:eGlue
proxy_type	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^  typedef          Proxy<T1>                       proxy_type;$/;"	t	class:eOp
ptr_cast	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^ptr_cast(blas_int (*function)(const T*, const T*, const T*))$/;"	f	namespace:qz_helper
ptr_cast	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^ptr_cast(blas_int (*function)(const std::complex<T>*, const std::complex<T>*))$/;"	f	namespace:qz_helper
qnxnto	build/CMakeFiles/3.13.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qr	lib/armadillo-9.800.2/docs.html	/^<a name="qr"><\/a>$/;"	a
qr	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::qr(Mat<eT>& Q, Mat<eT>& R, const Base<eT,T1>& X)$/;"	f	class:auxlib
qr	lib/armadillo-9.800.2/include/armadillo_bits/fn_qr.hpp	/^qr$/;"	f
qr_econ	lib/armadillo-9.800.2/docs.html	/^<a name="qr_econ"><\/a>$/;"	a
qr_econ	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::qr_econ(Mat<eT>& Q, Mat<eT>& R, const Base<eT,T1>& X)$/;"	f	class:auxlib
qr_econ	lib/armadillo-9.800.2/include/armadillo_bits/fn_qr.hpp	/^qr_econ$/;"	f
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const Col<eT>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const CubeToMatOp<T1, op_vectorise_cube_col>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const Mat<eT>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const Op<Col<eT>, op_htrans>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const Op<Col<eT>, op_strans>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const Op<Row<eT>, op_htrans>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const Op<Row<eT>, op_strans>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const Op<T1, op_vectorise_col>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const Op<subview_col<eT>, op_htrans>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const Op<subview_col<eT>, op_strans>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const Row<eT>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const SpToDOp<T1, op_nonzeros_spmat>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const T1& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const mtGlue<out_eT, T1, T2, glue_type>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const mtOp<out_eT, T1, op_type>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const subview<eT>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const subview_col<eT>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap(const subview_row<eT>& A)$/;"	f	struct:quasi_unwrap
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap : public quasi_unwrap_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< Col<eT> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< CubeToMatOp<T1, op_vectorise_cube_col> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< Mat<eT> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< Op<Col<eT>, op_htrans> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< Op<Col<eT>, op_strans> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< Op<Row<eT>, op_htrans> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< Op<Row<eT>, op_strans> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< Op<T1, op_vectorise_col> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< Op<subview_col<eT>, op_htrans> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< Op<subview_col<eT>, op_strans> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< Row<eT> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< SpToDOp<T1, op_nonzeros_spmat> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< mtGlue<out_eT, T1, T2, glue_type> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< mtOp<out_eT, T1, op_type> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< subview<eT> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< subview_col<eT> >$/;"	s
quasi_unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap< subview_row<eT> >$/;"	s
quasi_unwrap_Col_htrans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  inline quasi_unwrap_Col_htrans(const T1&) {}$/;"	f	struct:quasi_unwrap_Col_htrans
quasi_unwrap_Col_htrans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap_Col_htrans(const Op<Col<eT>, op_htrans>& A)$/;"	f	struct:quasi_unwrap_Col_htrans
quasi_unwrap_Col_htrans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_Col_htrans$/;"	s
quasi_unwrap_Col_htrans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_Col_htrans< Op<Col<eT>, op_htrans> >$/;"	s
quasi_unwrap_Col_htrans_extra	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename quasi_unwrap_Col_htrans_redirect< Op<Col<eT>, op_htrans>, is_cx<eT>::value >::result quasi_unwrap_Col_htrans_extra;$/;"	t	struct:quasi_unwrap
quasi_unwrap_Col_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_Col_htrans_redirect {};$/;"	s
quasi_unwrap_Col_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_Col_htrans_redirect<T1, false> { typedef quasi_unwrap_Col_htrans<T1> result; };$/;"	s
quasi_unwrap_Col_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_Col_htrans_redirect<T1, true>  { typedef quasi_unwrap_default<T1>    result; };$/;"	s
quasi_unwrap_Row_htrans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  inline quasi_unwrap_Row_htrans(const T1&) {}$/;"	f	struct:quasi_unwrap_Row_htrans
quasi_unwrap_Row_htrans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap_Row_htrans(const Op<Row<eT>, op_htrans>& A)$/;"	f	struct:quasi_unwrap_Row_htrans
quasi_unwrap_Row_htrans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_Row_htrans$/;"	s
quasi_unwrap_Row_htrans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_Row_htrans< Op<Row<eT>, op_htrans> >$/;"	s
quasi_unwrap_Row_htrans_extra	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename quasi_unwrap_Row_htrans_redirect< Op<Row<eT>, op_htrans>, is_cx<eT>::value >::result quasi_unwrap_Row_htrans_extra;$/;"	t	struct:quasi_unwrap
quasi_unwrap_Row_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_Row_htrans_redirect {};$/;"	s
quasi_unwrap_Row_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_Row_htrans_redirect<T1, false> { typedef quasi_unwrap_Row_htrans<T1> result; };$/;"	s
quasi_unwrap_Row_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_Row_htrans_redirect<T1, true>  { typedef quasi_unwrap_default<T1>    result; };$/;"	s
quasi_unwrap_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap_default(const T1& A)$/;"	f	struct:quasi_unwrap_default
quasi_unwrap_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_default$/;"	s
quasi_unwrap_extra	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename quasi_unwrap_redirect<T1, is_Mat_fixed<T1>::value >::result quasi_unwrap_extra;$/;"	t	struct:quasi_unwrap
quasi_unwrap_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap_fixed(const T1& A)$/;"	f	struct:quasi_unwrap_fixed
quasi_unwrap_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_fixed$/;"	s
quasi_unwrap_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_redirect {};$/;"	s
quasi_unwrap_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_redirect<T1, false> { typedef quasi_unwrap_default<T1> result; };$/;"	s
quasi_unwrap_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_redirect<T1, true>  { typedef quasi_unwrap_fixed<T1>   result; };$/;"	s
quasi_unwrap_subview_col_htrans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  inline quasi_unwrap_subview_col_htrans(const T1&) {}$/;"	f	struct:quasi_unwrap_subview_col_htrans
quasi_unwrap_subview_col_htrans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  quasi_unwrap_subview_col_htrans(const Op<subview_col<eT>, op_htrans>& A)$/;"	f	struct:quasi_unwrap_subview_col_htrans
quasi_unwrap_subview_col_htrans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_subview_col_htrans$/;"	s
quasi_unwrap_subview_col_htrans	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_subview_col_htrans< Op<subview_col<eT>, op_htrans> >$/;"	s
quasi_unwrap_subview_col_htrans_extra	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef typename quasi_unwrap_subview_col_htrans_redirect< Op<subview_col<eT>, op_htrans>, is_cx<eT>::value >::result quasi_unwrap_subview_col_htrans_extra;$/;"	t	struct:quasi_unwrap
quasi_unwrap_subview_col_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_subview_col_htrans_redirect {};$/;"	s
quasi_unwrap_subview_col_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_subview_col_htrans_redirect<T1, false> { typedef quasi_unwrap_subview_col_htrans<T1> result; };$/;"	s
quasi_unwrap_subview_col_htrans_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_subview_col_htrans_redirect<T1, true>  { typedef quasi_unwrap_default<T1>            result; };$/;"	s
quiet_load	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::quiet_load(const hdf5_name& spec, const file_type type)$/;"	f	class:Cube
quiet_load	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::quiet_load(const std::string name, const file_type type)$/;"	f	class:Cube
quiet_load	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::quiet_load(std::istream& is, const file_type type)$/;"	f	class:Cube
quiet_load	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::quiet_load(const hdf5_name& spec, const file_type type)$/;"	f	class:Mat
quiet_load	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::quiet_load(const std::string name, const file_type type)$/;"	f	class:Mat
quiet_load	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::quiet_load(std::istream& is, const file_type type)$/;"	f	class:Mat
quiet_load	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::quiet_load(const std::string name, const file_type type)$/;"	f	class:SpMat
quiet_load	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::quiet_load(std::istream& is, const file_type type)$/;"	f	class:SpMat
quiet_load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::quiet_load(const std::string name, const file_type type)$/;"	f	class:field
quiet_load	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::quiet_load(std::istream& is, const file_type type)$/;"	f	class:field
quiet_save	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::quiet_save(const hdf5_name& spec, const file_type type) const$/;"	f	class:Cube
quiet_save	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::quiet_save(const std::string name, const file_type type) const$/;"	f	class:Cube
quiet_save	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::quiet_save(std::ostream& os, const file_type type) const$/;"	f	class:Cube
quiet_save	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::quiet_save(const hdf5_name& spec, const file_type type) const$/;"	f	class:Mat
quiet_save	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::quiet_save(const std::string name, const file_type type) const$/;"	f	class:Mat
quiet_save	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::quiet_save(std::ostream& os, const file_type type) const$/;"	f	class:Mat
quiet_save	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::quiet_save(const std::string name, const file_type type) const$/;"	f	class:SpMat
quiet_save	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::quiet_save(std::ostream& os, const file_type type) const$/;"	f	class:SpMat
quiet_save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::quiet_save(const std::string name, const file_type type) const$/;"	f	class:field
quiet_save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::quiet_save(std::ostream& os, const file_type type) const$/;"	f	class:field
qz	lib/armadillo-9.800.2/docs.html	/^<a name="qz"><\/a>$/;"	a
qz	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::qz(Mat< std::complex<T> >& A, Mat< std::complex<T> >& B, Mat< std::complex<T> >& vsl, Mat< std::complex<T> >& vsr, const Base< std::complex<T>, T1 >& X_expr, const Base< std::complex<T>, T2 >& Y_expr, const char mode)$/;"	f	class:auxlib
qz	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::qz(Mat<T>& A, Mat<T>& B, Mat<T>& vsl, Mat<T>& vsr, const Base<T,T1>& X_expr, const Base<T,T2>& Y_expr, const char mode)$/;"	f	class:auxlib
qz	lib/armadillo-9.800.2/include/armadillo_bits/fn_qz.hpp	/^qz$/;"	f
qz_helper	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_bones.hpp	/^namespace qz_helper$/;"	n
qz_helper	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^namespace qz_helper$/;"	n
r_cov	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  arma_aligned Mat<eT>      r_cov;$/;"	m	class:running_stat_vec
r_cov_dummy	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  arma_aligned Mat<eT>      r_cov_dummy;$/;"	m	class:running_stat_vec
r_mean	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^  arma_aligned eT    r_mean;$/;"	m	class:gmm_priv::running_mean_scalar
r_mean	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_bones.hpp	/^  arma_aligned eT r_mean;$/;"	m	class:running_stat
r_mean	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  arma_aligned return_type1 r_mean;$/;"	m	class:running_stat_vec
r_var	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_bones.hpp	/^  arma_aligned  T r_var;$/;"	m	class:running_stat
r_var	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  arma_aligned return_type2 r_var;$/;"	m	class:running_stat_vec
r_var_dummy	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  arma_aligned return_type2 r_var_dummy;$/;"	m	class:running_stat_vec
radix	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  podarray<uword>   radix;$/;"	m	class:fft_engine
randg	lib/armadillo-9.800.2/docs.html	/^<a name="randg"><\/a>$/;"	a
randg	lib/armadillo-9.800.2/include/armadillo_bits/fn_randg.hpp	/^randg(const SizeCube& s, const distr_param& param = distr_param())$/;"	f
randg	lib/armadillo-9.800.2/include/armadillo_bits/fn_randg.hpp	/^randg(const SizeCube& s, const distr_param& param = distr_param(), const typename arma_Cube_only<cube_type>::result* junk = 0)$/;"	f
randg	lib/armadillo-9.800.2/include/armadillo_bits/fn_randg.hpp	/^randg(const SizeMat& s, const distr_param& param = distr_param())$/;"	f
randg	lib/armadillo-9.800.2/include/armadillo_bits/fn_randg.hpp	/^randg(const SizeMat& s, const distr_param& param = distr_param(), const typename arma_Mat_Col_Row_only<obj_type>::result* junk = 0)$/;"	f
randg	lib/armadillo-9.800.2/include/armadillo_bits/fn_randg.hpp	/^randg(const distr_param& param = distr_param())$/;"	f
randg	lib/armadillo-9.800.2/include/armadillo_bits/fn_randg.hpp	/^randg(const uword n_elem, const distr_param& param = distr_param())$/;"	f
randg	lib/armadillo-9.800.2/include/armadillo_bits/fn_randg.hpp	/^randg(const uword n_elem, const distr_param& param = distr_param(), const arma_empty_class junk1 = arma_empty_class(), const typename arma_Mat_Col_Row_only<obj_type>::result* junk2 = 0)$/;"	f
randg	lib/armadillo-9.800.2/include/armadillo_bits/fn_randg.hpp	/^randg(const uword n_rows, const uword n_cols, const distr_param& param = distr_param())$/;"	f
randg	lib/armadillo-9.800.2/include/armadillo_bits/fn_randg.hpp	/^randg(const uword n_rows, const uword n_cols, const distr_param& param = distr_param(), const typename arma_Mat_Col_Row_only<obj_type>::result* junk = 0)$/;"	f
randg	lib/armadillo-9.800.2/include/armadillo_bits/fn_randg.hpp	/^randg(const uword n_rows, const uword n_cols, const uword n_slices, const distr_param& param = distr_param())$/;"	f
randg	lib/armadillo-9.800.2/include/armadillo_bits/fn_randg.hpp	/^randg(const uword n_rows, const uword n_cols, const uword n_slices, const distr_param& param = distr_param(), const typename arma_Cube_only<cube_type>::result* junk = 0)$/;"	f
randg_fill	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^arma_rng_cxx11::randg_fill(eT* mem, const uword N, const double a, const double b)$/;"	f	class:arma_rng_cxx11
randg_fill_simple	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^arma_rng_cxx11::randg_fill_simple(eT* mem, const uword N, const double a, const double b)$/;"	f	class:arma_rng_cxx11
randi	lib/armadillo-9.800.2/docs.html	/^<a name="randi"><\/a>$/;"	a
randi	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^struct arma_rng::randi$/;"	s	class:arma_rng
randi	lib/armadillo-9.800.2/include/armadillo_bits/fn_randi.hpp	/^randi()$/;"	f
randi	lib/armadillo-9.800.2/include/armadillo_bits/fn_randi.hpp	/^randi(const SizeCube& s, const distr_param& param = distr_param())$/;"	f
randi	lib/armadillo-9.800.2/include/armadillo_bits/fn_randi.hpp	/^randi(const SizeCube& s, const distr_param& param = distr_param(), const typename arma_Cube_only<cube_type>::result* junk = 0)$/;"	f
randi	lib/armadillo-9.800.2/include/armadillo_bits/fn_randi.hpp	/^randi(const SizeMat& s, const distr_param& param = distr_param())$/;"	f
randi	lib/armadillo-9.800.2/include/armadillo_bits/fn_randi.hpp	/^randi(const SizeMat& s, const distr_param& param = distr_param(), const typename arma_Mat_Col_Row_only<obj_type>::result* junk = 0)$/;"	f
randi	lib/armadillo-9.800.2/include/armadillo_bits/fn_randi.hpp	/^randi(const distr_param& param)$/;"	f
randi	lib/armadillo-9.800.2/include/armadillo_bits/fn_randi.hpp	/^randi(const uword n_elem, const distr_param& param = distr_param())$/;"	f
randi	lib/armadillo-9.800.2/include/armadillo_bits/fn_randi.hpp	/^randi(const uword n_elem, const distr_param& param = distr_param(), const arma_empty_class junk1 = arma_empty_class(), const typename arma_Mat_Col_Row_only<obj_type>::result* junk2 = 0)$/;"	f
randi	lib/armadillo-9.800.2/include/armadillo_bits/fn_randi.hpp	/^randi(const uword n_rows, const uword n_cols, const distr_param& param = distr_param())$/;"	f
randi	lib/armadillo-9.800.2/include/armadillo_bits/fn_randi.hpp	/^randi(const uword n_rows, const uword n_cols, const distr_param& param = distr_param(), const typename arma_Mat_Col_Row_only<obj_type>::result* junk = 0)$/;"	f
randi	lib/armadillo-9.800.2/include/armadillo_bits/fn_randi.hpp	/^randi(const uword n_rows, const uword n_cols, const uword n_slices, const distr_param& param = distr_param())$/;"	f
randi	lib/armadillo-9.800.2/include/armadillo_bits/fn_randi.hpp	/^randi(const uword n_rows, const uword n_cols, const uword n_slices, const distr_param& param = distr_param(), const typename arma_Cube_only<cube_type>::result* junk = 0)$/;"	f
randi_fill	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^arma_rng_cxx11::randi_fill(eT* mem, const uword N, const int a, const int b)$/;"	f	class:arma_rng_cxx11
randi_fill	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx98.hpp	/^arma_rng_cxx98::randi_fill(eT* mem, const uword N, const int a, const int b)$/;"	f	class:arma_rng_cxx98
randi_max_val	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^arma_rng_cxx11::randi_max_val()$/;"	f	class:arma_rng_cxx11
randi_max_val	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx98.hpp	/^arma_rng_cxx98::randi_max_val()$/;"	f	class:arma_rng_cxx98
randi_val	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^arma_rng_cxx11::randi_val()$/;"	f	class:arma_rng_cxx11
randi_val	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx98.hpp	/^arma_rng_cxx98::randi_val()$/;"	f	class:arma_rng_cxx98
randn	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::randn()$/;"	f	class:Cube
randn	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::randn(const SizeCube& s)$/;"	f	class:Cube
randn	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::randn(const uword in_rows, const uword in_cols, const uword in_slices)$/;"	f	class:Cube
randn	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::randn()$/;"	f	class:Mat
randn	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::randn(const SizeMat& s)$/;"	f	class:Mat
randn	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::randn(const uword in_elem)$/;"	f	class:Mat
randn	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::randn(const uword in_rows, const uword in_cols)$/;"	f	class:Mat
randn	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  static const fill_class<fill_randn> randn;$/;"	m	namespace:fill
randn	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^struct arma_rng::randn$/;"	s	class:arma_rng
randn	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^struct arma_rng::randn< std::complex<T> >$/;"	s	class:arma_rng
randn	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::randn()$/;"	f	class:diagview
randn	lib/armadillo-9.800.2/include/armadillo_bits/fn_randn.hpp	/^randn()$/;"	f
randn	lib/armadillo-9.800.2/include/armadillo_bits/fn_randn.hpp	/^randn(const SizeCube& s)$/;"	f
randn	lib/armadillo-9.800.2/include/armadillo_bits/fn_randn.hpp	/^randn(const SizeCube& s, const typename arma_Cube_only<cube_type>::result* junk = 0)$/;"	f
randn	lib/armadillo-9.800.2/include/armadillo_bits/fn_randn.hpp	/^randn(const SizeMat& s)$/;"	f
randn	lib/armadillo-9.800.2/include/armadillo_bits/fn_randn.hpp	/^randn(const SizeMat& s, const typename arma_Mat_Col_Row_only<obj_type>::result* junk = 0)$/;"	f
randn	lib/armadillo-9.800.2/include/armadillo_bits/fn_randn.hpp	/^randn(const uword n_elem)$/;"	f
randn	lib/armadillo-9.800.2/include/armadillo_bits/fn_randn.hpp	/^randn(const uword n_elem, const arma_empty_class junk1 = arma_empty_class(), const typename arma_Mat_Col_Row_only<obj_type>::result* junk2 = 0)$/;"	f
randn	lib/armadillo-9.800.2/include/armadillo_bits/fn_randn.hpp	/^randn(const uword n_rows, const uword n_cols)$/;"	f
randn	lib/armadillo-9.800.2/include/armadillo_bits/fn_randn.hpp	/^randn(const uword n_rows, const uword n_cols, const typename arma_Mat_Col_Row_only<obj_type>::result* junk = 0)$/;"	f
randn	lib/armadillo-9.800.2/include/armadillo_bits/fn_randn.hpp	/^randn(const uword n_rows, const uword n_cols, const uword n_slices)$/;"	f
randn	lib/armadillo-9.800.2/include/armadillo_bits/fn_randn.hpp	/^randn(const uword n_rows, const uword n_cols, const uword n_slices, const typename arma_Cube_only<cube_type>::result* junk = 0)$/;"	f
randn	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::randn()$/;"	f	class:spdiagview
randn	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::randn()$/;"	f	class:subview_cube
randn	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::randn()$/;"	f	class:subview_cube_slices
randn	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::randn()$/;"	f	class:subview_elem1
randn	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::randn()$/;"	f	class:subview
randn_dual_val	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^arma_rng_cxx11::randn_dual_val(eT& out1, eT& out2)$/;"	f	class:arma_rng_cxx11
randn_dual_val	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx98.hpp	/^arma_rng_cxx98::randn_dual_val(eT& out1, eT& out2)$/;"	f	class:arma_rng_cxx98
randn_val	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^arma_rng_cxx11::randn_val()$/;"	f	class:arma_rng_cxx11
randn_val	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx98.hpp	/^arma_rng_cxx98::randn_val()$/;"	f	class:arma_rng_cxx98
random_spread	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^static const gmm_seed_random_spread random_spread;$/;"	v
random_subset	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^static const gmm_seed_random_subset random_subset;$/;"	v
randperm	lib/armadillo-9.800.2/docs.html	/^<a name="randperm"><\/a>$/;"	a
randperm	lib/armadillo-9.800.2/include/armadillo_bits/fn_randperm.hpp	/^randperm(const uword N)$/;"	f
randperm	lib/armadillo-9.800.2/include/armadillo_bits/fn_randperm.hpp	/^randperm(const uword N, const uword M)$/;"	f
randu	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::randu()$/;"	f	class:Cube
randu	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::randu(const SizeCube& s)$/;"	f	class:Cube
randu	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::randu(const uword in_rows, const uword in_cols, const uword in_slices)$/;"	f	class:Cube
randu	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::randu()$/;"	f	class:Mat
randu	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::randu(const SizeMat& s)$/;"	f	class:Mat
randu	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::randu(const uword in_elem)$/;"	f	class:Mat
randu	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::randu(const uword in_rows, const uword in_cols)$/;"	f	class:Mat
randu	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  static const fill_class<fill_randu> randu;$/;"	m	namespace:fill
randu	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^struct arma_rng::randu$/;"	s	class:arma_rng
randu	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^struct arma_rng::randu< std::complex<T> >$/;"	s	class:arma_rng
randu	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::randu()$/;"	f	class:diagview
randu	lib/armadillo-9.800.2/include/armadillo_bits/fn_randu.hpp	/^randu()$/;"	f
randu	lib/armadillo-9.800.2/include/armadillo_bits/fn_randu.hpp	/^randu(const SizeCube& s)$/;"	f
randu	lib/armadillo-9.800.2/include/armadillo_bits/fn_randu.hpp	/^randu(const SizeCube& s, const typename arma_Cube_only<cube_type>::result* junk = 0)$/;"	f
randu	lib/armadillo-9.800.2/include/armadillo_bits/fn_randu.hpp	/^randu(const SizeMat& s)$/;"	f
randu	lib/armadillo-9.800.2/include/armadillo_bits/fn_randu.hpp	/^randu(const SizeMat& s, const typename arma_Mat_Col_Row_only<obj_type>::result* junk = 0)$/;"	f
randu	lib/armadillo-9.800.2/include/armadillo_bits/fn_randu.hpp	/^randu(const uword n_elem)$/;"	f
randu	lib/armadillo-9.800.2/include/armadillo_bits/fn_randu.hpp	/^randu(const uword n_elem, const arma_empty_class junk1 = arma_empty_class(), const typename arma_Mat_Col_Row_only<obj_type>::result* junk2 = 0)$/;"	f
randu	lib/armadillo-9.800.2/include/armadillo_bits/fn_randu.hpp	/^randu(const uword n_rows, const uword n_cols)$/;"	f
randu	lib/armadillo-9.800.2/include/armadillo_bits/fn_randu.hpp	/^randu(const uword n_rows, const uword n_cols, const typename arma_Mat_Col_Row_only<obj_type>::result* junk = 0)$/;"	f
randu	lib/armadillo-9.800.2/include/armadillo_bits/fn_randu.hpp	/^randu(const uword n_rows, const uword n_cols, const uword n_slices)$/;"	f
randu	lib/armadillo-9.800.2/include/armadillo_bits/fn_randu.hpp	/^randu(const uword n_rows, const uword n_cols, const uword n_slices, const typename arma_Cube_only<cube_type>::result* junk = 0)$/;"	f
randu	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::randu()$/;"	f	class:spdiagview
randu	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::randu()$/;"	f	class:subview_cube
randu	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::randu()$/;"	f	class:subview_cube_slices
randu	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::randu()$/;"	f	class:subview_elem1
randu	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::randu()$/;"	f	class:subview
randu_randn_member	lib/armadillo-9.800.2/docs.html	/^<a name="randu_randn_member"><\/a>$/;"	a
randu_randn_standalone	lib/armadillo-9.800.2/docs.html	/^<a name="randu_randn_standalone"><\/a>$/;"	a
randu_val	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^arma_rng_cxx11::randu_val()$/;"	f	class:arma_rng_cxx11
randu_val	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx98.hpp	/^arma_rng_cxx98::randu_val()$/;"	f	class:arma_rng_cxx98
range	lib/armadillo-9.800.2/include/armadillo_bits/fn_range.hpp	/^range(const T1& X)$/;"	f
range	lib/armadillo-9.800.2/include/armadillo_bits/fn_range.hpp	/^range(const T1& X, const uword dim)$/;"	f
range	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat<eT>::range() const$/;"	f	class:running_stat
range	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::range() const$/;"	f	class:running_stat_vec
rangeToString	include/catch.hpp	/^        std::string rangeToString(InputIterator first, InputIterator last) {$/;"	f	namespace:Catch::Detail
rank	lib/armadillo-9.800.2/docs.html	/^<a name="rank"><\/a>$/;"	a
rank	lib/armadillo-9.800.2/include/armadillo_bits/fn_rank.hpp	/^rank$/;"	f
rawMemoryToString	include/catch.hpp	/^        std::string rawMemoryToString( const T& object ) {$/;"	f	namespace:Catch::Detail
rawMemoryToString	lib/armadillo-9.800.2/tests/catch.hpp	/^    std::string rawMemoryToString( const T& object ) {$/;"	f	namespace:Catch::Detail
raw_ascii	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  raw_ascii,          \/\/!< ASCII format (text), without any other information.$/;"	e	enum:file_type
raw_binary	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  raw_binary,         \/\/!< raw binary format, without any other information.$/;"	e	enum:file_type
raw_hist	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::raw_hist(const Base<eT,T1>& expr, const gmm_dist_mode& dist_mode) const$/;"	f	class:gmm_priv::gmm_diag
raw_hist	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::raw_hist(const Base<eT,T1>& expr, const gmm_dist_mode& dist_mode) const$/;"	f	class:gmm_priv::gmm_full
raw_print	lib/armadillo-9.800.2/docs.html	/^<a name="raw_print"><\/a>$/;"	a
raw_print	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube<elem_type,derived>::raw_print(const std::string extra_text) const$/;"	f	class:BaseCube
raw_print	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_meat.hpp	/^BaseCube<elem_type,derived>::raw_print(std::ostream& user_stream, const std::string extra_text) const$/;"	f	class:BaseCube
raw_print	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::raw_print(const std::string extra_text) const$/;"	f	class:Base
raw_print	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base<elem_type,derived>::raw_print(std::ostream& user_stream, const std::string extra_text) const$/;"	f	class:Base
raw_print	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::raw_print(const std::string extra_text) const$/;"	f	class:SpBase
raw_print	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::raw_print(std::ostream& user_stream, const std::string extra_text) const$/;"	f	class:SpBase
raw_print_dense	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type, derived>::raw_print_dense(const std::string extra_text) const$/;"	f	class:SpBase
raw_print_dense	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type, derived>::raw_print_dense(std::ostream& user_stream, const std::string extra_text) const$/;"	f	class:SpBase
rcond	lib/armadillo-9.800.2/docs.html	/^<a name="rcond"><\/a>$/;"	a
rcond	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::rcond(Mat< std::complex<T> >& A)$/;"	f	class:auxlib
rcond	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::rcond(Mat<eT>& A)$/;"	f	class:auxlib
rcond	lib/armadillo-9.800.2/include/armadillo_bits/fn_cond.hpp	/^rcond(const Base<typename T1::elem_type, T1>& X)$/;"	f
rcond	lib/armadillo-9.800.2/include/armadillo_bits/op_cond_meat.hpp	/^op_cond::rcond(const Base<typename T1::elem_type, T1>& X)$/;"	f	class:op_cond
rcond_sympd	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::rcond_sympd(Mat< std::complex<T> >& A, bool& calc_ok)$/;"	f	class:auxlib
rcond_sympd	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::rcond_sympd(Mat<eT>& A, bool& calc_ok)$/;"	f	class:auxlib
rcond_trimat	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::rcond_trimat(const Mat< std::complex<T> >& A, const uword layout)$/;"	f	class:auxlib
rcond_trimat	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::rcond_trimat(const Mat<eT>& A, const uword layout)$/;"	f	class:auxlib
real	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat_val<eT>::real() const$/;"	f	class:MapMat_val
real	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::real() const$/;"	f	class:SpMat_MapMat_val
real	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_meat.hpp	/^SpValProxy<T1>::real() const$/;"	f	class:SpValProxy
real	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^real(const BaseCube<std::complex<typename T1::pod_type>, T1>& X)$/;"	f
real	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^real(const BaseCube<typename T1::pod_type, T1>& X)$/;"	f
real	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^real(const SpBase<std::complex<typename T1::pod_type>,T1>& A)$/;"	f
real	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^real(const SpBase<typename T1::pod_type,T1>& A)$/;"	f
real	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^real(const T1& X)$/;"	f
real	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^  eT real;$/;"	m	struct:hdf5_misc::hdf5_complex_t
really_do_conj	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_bones.hpp	/^  static const bool really_do_conj = (do_conj && is_cx<eT>::yes);$/;"	m	class:xtrans_mat
reconstructExpression	lib/armadillo-9.800.2/tests/catch.hpp	/^        std::string const& reconstructExpression() const {$/;"	f	class:Catch::AssertionResultData::std
reconstructedExpression	lib/armadillo-9.800.2/tests/catch.hpp	/^        mutable std::string reconstructedExpression;$/;"	m	struct:Catch::AssertionResultData
ref_nr	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_bones.hpp	/^  Col<unsigned short> ref_nr;   \/\/ How many rows does each reflector affects$/;"	m	class:newarp::DoubleShiftQR
ref_u	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_bones.hpp	/^  Mat<eT>             ref_u;    \/\/ Householder reflectors$/;"	m	class:newarp::DoubleShiftQR
reference	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef const eT&                       reference;$/;"	t	class:Mat::const_row_col_iterator
reference	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef const eT&                       reference;$/;"	t	class:Mat::const_row_iterator
reference	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef eT&                             reference;$/;"	t	class:Mat::row_col_iterator
reference	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef eT&                             reference;$/;"	t	class:Mat::row_iterator
reference	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    typedef const SpValProxy<SpMat<eT> >&  reference;$/;"	t	class:SpMat::iterator
reference	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    typedef const SpValProxy<SpMat<eT> >&  reference;$/;"	t	class:SpMat::row_iterator
reference	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    typedef const eT&                       reference;$/;"	t	class:SpMat::iterator_base
reference	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    typedef const SpValProxy<SpSubview<eT> >& reference;$/;"	t	class:SpSubview::iterator
reference	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    typedef const SpValProxy<SpSubview<eT> >& reference;$/;"	t	class:SpSubview::row_iterator
reference	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    typedef const eT&                       reference;$/;"	t	class:SpSubview::iterator_base
reference	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef const eT&                 reference;$/;"	t	class:subview::const_iterator
reference	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef const eT&                 reference;$/;"	t	class:subview::const_row_iterator
reference	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef eT&                       reference;$/;"	t	class:subview::iterator
reference	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef eT&                       reference;$/;"	t	class:subview::row_iterator
reference	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    typedef const eT&                 reference;$/;"	t	class:subview_cube::const_iterator
reference	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    typedef eT&                       reference;$/;"	t	class:subview_cube::iterator
refine	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  refine_type      refine;$/;"	m	struct:superlu_opts
refine	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const opts_refine       refine;$/;"	m	namespace:solve_opts
refine_type	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  typedef enum {REF_NONE, REF_SINGLE, REF_DOUBLE, REF_EXTRA} refine_type;$/;"	t	struct:superlu_opts	typeref:enum:superlu_opts::__anon4
registerEnum	include/catch.hpp	/^        Detail::EnumInfo const& registerEnum( StringRef enumName, StringRef allEnums, std::initializer_list<E> values ) {$/;"	f	class:Catch::IMutableEnumValuesRegistry::Detail
regspace	lib/armadillo-9.800.2/docs.html	/^<a name="regspace"><\/a>$/;"	a
regspace	lib/armadillo-9.800.2/include/armadillo_bits/fn_regspace.hpp	/^regspace$/;"	f
regspace	lib/armadillo-9.800.2/include/armadillo_bits/fn_regspace.hpp	/^regspace(const double start, const double delta, const double end)$/;"	f
regspace	lib/armadillo-9.800.2/include/armadillo_bits/fn_regspace.hpp	/^regspace(const double start, const double end)$/;"	f
release	lib/armadillo-9.800.2/include/armadillo_bits/memory.hpp	/^memory::release(eT* mem)$/;"	f	class:memory
release	lib/armadillo-9.800.2/tests/catch.hpp	/^        virtual void release() const {$/;"	f	struct:Catch::SharedImpl
removeConst	lib/armadillo-9.800.2/tests/catch.hpp	/^    T& removeConst(T const &t) { return const_cast<T&>(t); }$/;"	f	namespace:Catch::Internal
removeConst	lib/armadillo-9.800.2/tests/catch.hpp	/^    inline std::nullptr_t removeConst(std::nullptr_t) { return nullptr; }$/;"	f	namespace:Catch::Internal
remove_zeros	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::remove_zeros()$/;"	f	class:SpMat
repelem	lib/armadillo-9.800.2/docs.html	/^<a name="repelem"><\/a>$/;"	a
repelem	lib/armadillo-9.800.2/include/armadillo_bits/fn_repelem.hpp	/^repelem(const SpBase<typename T1::elem_type,T1>& A, const uword r, const uword c)$/;"	f
repelem	lib/armadillo-9.800.2/include/armadillo_bits/fn_repelem.hpp	/^repelem(const T1& A, const uword r, const uword c)$/;"	f
replace	lib/armadillo-9.800.2/docs.html	/^<a name="replace"><\/a>$/;"	a
replace	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::replace(const eT old_val, const eT new_val)$/;"	f	class:Cube
replace	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::replace(const eT old_val, const eT new_val)$/;"	f	class:Mat
replace	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::replace(const eT old_val, const eT new_val)$/;"	f	class:SpMat
replace	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::replace(const eT old_val, const eT new_val)$/;"	f	class:SpSubview
replace	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  static const opts_replace replace;$/;"	m	namespace:hdf5_opts
replace	lib/armadillo-9.800.2/include/armadillo_bits/arrayops_meat.hpp	/^arrayops::replace(eT* mem, const uword n_elem, const eT old_val, const eT new_val)$/;"	f	class:arrayops
replace	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::replace(const eT old_val, const eT new_val)$/;"	f	class:diagview
replace	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::replace(const eT old_val, const eT new_val)$/;"	f	class:subview_cube
replace	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::replace(const eT old_val, const eT new_val)$/;"	f	class:subview_elem1
replace	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::replace(const eT old_val, const eT new_val)$/;"	f	class:subview
repmat	lib/armadillo-9.800.2/docs.html	/^<a name="repmat"><\/a>$/;"	a
repmat	lib/armadillo-9.800.2/include/armadillo_bits/fn_repmat.hpp	/^repmat(const SpBase<typename T1::elem_type,T1>& A, const uword r, const uword c)$/;"	f
repmat	lib/armadillo-9.800.2/include/armadillo_bits/fn_repmat.hpp	/^repmat(const T1& A, const uword r, const uword c)$/;"	f
reserve	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::reserve(const uword in_rows, const uword in_cols, const uword new_n_nonzero)$/;"	f	class:SpMat
reset	lib/armadillo-9.800.2/docs.html	/^<a name="reset"><\/a>$/;"	a
reset	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::reset()$/;"	f	class:Cube
reset	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::reset()$/;"	f	class:MapMat
reset	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::reset()$/;"	f	class:Mat
reset	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::reset()$/;"	f	class:SpMat
reset	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::reset()$/;"	f	class:field
reset	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::reset()$/;"	f	class:gmm_priv::gmm_diag
reset	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::reset(const uword in_n_dims, const uword in_n_gaus)$/;"	f	class:gmm_priv::gmm_diag
reset	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::reset()$/;"	f	class:gmm_priv::gmm_full
reset	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::reset(const uword in_n_dims, const uword in_n_gaus)$/;"	f	class:gmm_priv::gmm_full
reset	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_meat.hpp	/^running_mean_scalar<eT>::reset()$/;"	f	class:gmm_priv::running_mean_scalar
reset	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::reset()$/;"	f	class:podarray
reset	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^arma_counter<eT>::reset()$/;"	f	class:arma_counter
reset	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat<eT>::reset()$/;"	f	class:running_stat
reset	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::reset()$/;"	f	class:running_stat_vec
reset	lib/armadillo-9.800.2/tests/catch.hpp	/^        void reset() {$/;"	f	class:Catch::Ptr
reset_objects	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::reset_objects()$/;"	f	class:field
reset_objects	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::reset_objects(field< Col<eT> >& x)$/;"	f	class:field_aux
reset_objects	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::reset_objects(field< Cube<eT> >& x)$/;"	f	class:field_aux
reset_objects	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::reset_objects(field< Mat<eT> >& x)$/;"	f	class:field_aux
reset_objects	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::reset_objects(field< Row<eT> >& x)$/;"	f	class:field_aux
reset_objects	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::reset_objects(field< std::string >& x)$/;"	f	class:field_aux
reset_objects	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::reset_objects(field<oT>& x)$/;"	f	class:field_aux
reshape	lib/armadillo-9.800.2/docs.html	/^<a name="reshape"><\/a>$/;"	a
reshape	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::reshape(const SizeCube& s)$/;"	f	class:Cube
reshape	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::reshape(const uword in_rows, const uword in_cols, const uword in_slices)$/;"	f	class:Cube
reshape	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::reshape(const uword in_rows, const uword in_cols, const uword in_slices, const uword dim)$/;"	f	class:Cube
reshape	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::reshape(const SizeMat& s)$/;"	f	class:Mat
reshape	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::reshape(const uword in_rows, const uword in_cols)$/;"	f	class:Mat
reshape	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::reshape(const uword in_rows, const uword in_cols, const uword dim)$/;"	f	class:Mat
reshape	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::reshape(const SizeMat& s)$/;"	f	class:SpMat
reshape	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::reshape(const uword in_rows, const uword in_cols)$/;"	f	class:SpMat
reshape	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::reshape(const uword in_rows, const uword in_cols, const uword dim)$/;"	f	class:SpMat
reshape	lib/armadillo-9.800.2/include/armadillo_bits/fn_reshape.hpp	/^reshape(const Base<typename T1::elem_type,T1>& X, const uword in_n_rows, const uword in_n_cols, const uword dim)  \/\/!< NOTE: don't use this form: it will be removed$/;"	f
reshape	lib/armadillo-9.800.2/include/armadillo_bits/fn_reshape.hpp	/^reshape(const BaseCube<typename T1::elem_type,T1>& X, const SizeCube& s)$/;"	f
reshape	lib/armadillo-9.800.2/include/armadillo_bits/fn_reshape.hpp	/^reshape(const BaseCube<typename T1::elem_type,T1>& X, const SizeCube& s, const uword dim)  \/\/!< NOTE: don't use this form: it will be removed$/;"	f
reshape	lib/armadillo-9.800.2/include/armadillo_bits/fn_reshape.hpp	/^reshape(const BaseCube<typename T1::elem_type,T1>& X, const uword in_n_rows, const uword in_n_cols, const uword in_n_slices)$/;"	f
reshape	lib/armadillo-9.800.2/include/armadillo_bits/fn_reshape.hpp	/^reshape(const BaseCube<typename T1::elem_type,T1>& X, const uword in_n_rows, const uword in_n_cols, const uword in_n_slices, const uword dim)  \/\/!< NOTE: don't use this form: it will be removed$/;"	f
reshape	lib/armadillo-9.800.2/include/armadillo_bits/fn_reshape.hpp	/^reshape(const SpBase<typename T1::elem_type, T1>& X, const SizeMat& s)$/;"	f
reshape	lib/armadillo-9.800.2/include/armadillo_bits/fn_reshape.hpp	/^reshape(const SpBase<typename T1::elem_type, T1>& X, const uword in_n_rows, const uword in_n_cols)$/;"	f
reshape	lib/armadillo-9.800.2/include/armadillo_bits/fn_reshape.hpp	/^reshape(const T1& X, const SizeMat& s)$/;"	f
reshape	lib/armadillo-9.800.2/include/armadillo_bits/fn_reshape.hpp	/^reshape(const T1& X, const uword in_n_rows, const uword in_n_cols)$/;"	f
reshape_helper_generic	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::reshape_helper_generic(const uword in_rows, const uword in_cols)$/;"	f	class:SpMat
reshape_helper_intovec	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::reshape_helper_intovec()$/;"	f	class:SpMat
reshape_member	lib/armadillo-9.800.2/docs.html	/^<a name="reshape_member"><\/a>$/;"	a
resize	lib/armadillo-9.800.2/docs.html	/^<a name="resize"><\/a>$/;"	a
resize	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::resize(const SizeCube& s)$/;"	f	class:Cube
resize	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::resize(const uword in_rows, const uword in_cols, const uword in_slices)$/;"	f	class:Cube
resize	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::resize(const SizeMat& s)$/;"	f	class:Mat
resize	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::resize(const uword in_elem)$/;"	f	class:Mat
resize	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::resize(const uword in_rows, const uword in_cols)$/;"	f	class:Mat
resize	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::resize(const SizeMat& s)$/;"	f	class:SpMat
resize	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::resize(const uword in_rows, const uword in_cols)$/;"	f	class:SpMat
resize	lib/armadillo-9.800.2/include/armadillo_bits/fn_resize.hpp	/^resize(const Base<typename T1::elem_type,T1>& X, const SizeMat& s)$/;"	f
resize	lib/armadillo-9.800.2/include/armadillo_bits/fn_resize.hpp	/^resize(const Base<typename T1::elem_type,T1>& X, const uword in_n_rows, const uword in_n_cols)$/;"	f
resize	lib/armadillo-9.800.2/include/armadillo_bits/fn_resize.hpp	/^resize(const BaseCube<typename T1::elem_type,T1>& X, const SizeCube& s)$/;"	f
resize	lib/armadillo-9.800.2/include/armadillo_bits/fn_resize.hpp	/^resize(const BaseCube<typename T1::elem_type,T1>& X, const uword in_n_rows, const uword in_n_cols, const uword in_n_slices)$/;"	f
resize	lib/armadillo-9.800.2/include/armadillo_bits/fn_resize.hpp	/^resize(const SpBase<typename T1::elem_type, T1>& X, const SizeMat& s)$/;"	f
resize	lib/armadillo-9.800.2/include/armadillo_bits/fn_resize.hpp	/^resize(const SpBase<typename T1::elem_type, T1>& X, const uword in_n_rows, const uword in_n_cols)$/;"	f
resize_member	lib/armadillo-9.800.2/docs.html	/^<a name="resize_member"><\/a>$/;"	a
resolves_to_colvector	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_colvector : public resolves_to_colvector_redirect<T1, is_arma_type<T1>::value>::result {};$/;"	s
resolves_to_colvector_default	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_colvector_default { static const bool value = false;      };$/;"	s
resolves_to_colvector_redirect	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_colvector_redirect {};$/;"	s
resolves_to_colvector_redirect	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_colvector_redirect<T1, false> { typedef resolves_to_colvector_default<T1> result; };$/;"	s
resolves_to_colvector_redirect	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_colvector_redirect<T1, true>  { typedef resolves_to_colvector_test<T1>    result; };$/;"	s
resolves_to_colvector_test	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_colvector_test    { static const bool value = T1::is_col; };$/;"	s
resolves_to_rowvector	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_rowvector : public resolves_to_rowvector_redirect<T1, is_arma_type<T1>::value>::result {};$/;"	s
resolves_to_rowvector_default	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_rowvector_default { static const bool value = false;      };$/;"	s
resolves_to_rowvector_redirect	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_rowvector_redirect {};$/;"	s
resolves_to_rowvector_redirect	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_rowvector_redirect<T1, false> { typedef resolves_to_rowvector_default<T1> result; };$/;"	s
resolves_to_rowvector_redirect	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_rowvector_redirect<T1, true>  { typedef resolves_to_rowvector_test<T1>    result; };$/;"	s
resolves_to_rowvector_test	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_rowvector_test    { static const bool value = T1::is_row; };$/;"	s
resolves_to_sparse_vector	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_sparse_vector : public resolves_to_vector_redirect<T1, is_arma_sparse_type<T1>::value>::result {};$/;"	s
resolves_to_vector	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_vector : public resolves_to_vector_redirect<T1, is_arma_type<T1>::value>::result {};$/;"	s
resolves_to_vector_default	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_vector_default$/;"	s
resolves_to_vector_redirect	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_vector_redirect {};$/;"	s
resolves_to_vector_redirect	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_vector_redirect<T1, false> { typedef resolves_to_vector_default<T1> result; };$/;"	s
resolves_to_vector_redirect	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_vector_redirect<T1, true>  { typedef resolves_to_vector_test<T1>    result; };$/;"	s
resolves_to_vector_test	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_vector_test$/;"	s
restart	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_meat.hpp	/^GenEigsSolver<eT, SelectionRule, OpType>::restart(uword k)$/;"	f	class:newarp::GenEigsSolver
restart	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_meat.hpp	/^SymEigsSolver<eT, SelectionRule, OpType>::restart(uword k)$/;"	f	class:newarp::SymEigsSolver
restore	lib/armadillo-9.800.2/include/armadillo_bits/arma_ostream_meat.hpp	/^arma_ostream_state::restore(std::ostream& o) const$/;"	f	class:arma_ostream_state
result	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_bones.hpp	/^struct BaseCube_eval<elem_type, derived, false> { typedef BaseCube_eval_expr<elem_type, derived> result; };$/;"	t	struct:BaseCube_eval
result	lib/armadillo-9.800.2/include/armadillo_bits/BaseCube_bones.hpp	/^struct BaseCube_eval<elem_type, derived, true>  { typedef BaseCube_eval_Cube<elem_type, derived>  result; };$/;"	t	struct:BaseCube_eval
result	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_eval<elem_type, derived, false> { typedef Base_eval_expr<elem_type, derived> result; };$/;"	t	struct:Base_eval
result	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_eval<elem_type, derived, true>  { typedef Base_eval_Mat<elem_type, derived>  result; };$/;"	t	struct:Base_eval
result	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_extra<elem_type, derived, false> { typedef Base_extra_no<elem_type, derived>  result; };$/;"	t	struct:Base_extra
result	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_extra<elem_type, derived, true>  { typedef Base_extra_yes<elem_type, derived> result; };$/;"	t	struct:Base_extra
result	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_trans<derived, false> { typedef Base_trans_default<derived> result; };$/;"	t	struct:Base_trans
result	lib/armadillo-9.800.2/include/armadillo_bits/Base_bones.hpp	/^struct Base_trans<derived, true>  { typedef Base_trans_cx<derived>      result; };$/;"	t	struct:Base_trans
result	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_diagvec_redirect< Op<T1, op_diagvec>, false> { typedef Proxy_diagvec_expr< Op<T1, op_diagvec> > result; };$/;"	t	struct:Proxy_diagvec_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_diagvec_redirect< Op<T1, op_diagvec>, true > { typedef Proxy_diagvec_mat < Op<T1, op_diagvec> > result; };$/;"	t	struct:Proxy_diagvec_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_redirect<T1, false> { typedef Proxy_default<T1> result; };$/;"	t	struct:Proxy_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_redirect<T1, true>  { typedef Proxy_fixed<T1>   result; };$/;"	t	struct:Proxy_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_subview_row_htrans_redirect<eT, false> { typedef Proxy_subview_row_htrans_non_cx<eT>  result; };$/;"	t	struct:Proxy_subview_row_htrans_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_subview_row_htrans_redirect<eT, true>  { typedef Proxy_subview_row_htrans_cx<eT>      result; };$/;"	t	struct:Proxy_subview_row_htrans_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_vectorise_col_redirect< Op<T1, op_vectorise_col>, false> { typedef Proxy_vectorise_col_expr< Op<T1, op_vectorise_col> > result; };$/;"	t	struct:Proxy_vectorise_col_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_vectorise_col_redirect< Op<T1, op_vectorise_col>, true > { typedef Proxy_vectorise_col_mat < Op<T1, op_vectorise_col> > result; };$/;"	t	struct:Proxy_vectorise_col_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_xtrans_redirect<T1, false> { typedef Proxy_xtrans_default<T1> result; };$/;"	t	struct:Proxy_xtrans_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^struct Proxy_xtrans_redirect<T1, true>  { typedef Proxy_xtrans_vector<T1>  result; };$/;"	t	struct:Proxy_xtrans_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_bones.hpp	/^struct SpBase_eval<elem_type, derived, false> { typedef SpBase_eval_expr<elem_type, derived>  result; };$/;"	t	struct:SpBase_eval
result	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_bones.hpp	/^struct SpBase_eval<elem_type, derived, true>  { typedef SpBase_eval_SpMat<elem_type, derived> result; };$/;"	t	struct:SpBase_eval
result	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  struct basic_format_only< basic_format<T1, T2> > { typedef basic_format<T1,T2> result; };$/;"	t	struct:arma_str::basic_format_only
result	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  template<>           struct char_only<char         > { typedef char        result; };$/;"	t	struct:arma_str::char_only
result	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  template<>           struct string_only<std::string> { typedef std::string result; };$/;"	t	struct:arma_str::string_only
result	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^struct diagmat_proxy_check_redirect<T1, false> { typedef diagmat_proxy_check_default<T1> result; };$/;"	t	struct:diagmat_proxy_check_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^struct diagmat_proxy_check_redirect<T1, true>  { typedef diagmat_proxy_check_fixed<T1>   result; };$/;"	t	struct:diagmat_proxy_check_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^struct diagmat_proxy_redirect<T1, false> { typedef diagmat_proxy_default<T1> result; };$/;"	t	struct:diagmat_proxy_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^struct diagmat_proxy_redirect<T1, true>  { typedef diagmat_proxy_fixed<T1>   result; };$/;"	t	struct:diagmat_proxy_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^  typedef T1 result;$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^  typedef typename is_promotable<T1,T2>::result result;$/;"	t	struct:promote_type
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double,              std::complex<float>  > : public is_promotable_ok { typedef std::complex<double> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, float > : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, s16   > : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, s32   > : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, s64   > : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, s8    > : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, slng_t> : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, u16   > : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, u32   > : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, u64   > : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, u8    > : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<double, ulng_t> : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float,               std::complex<double> > : public is_promotable_ok { typedef std::complex<double> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float,  double> : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, s16   > : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, s32   > : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, s64   > : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, s8    > : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, slng_t> : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, u16   > : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, u32   > : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, u64   > : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, u8    > : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<float, ulng_t> : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16,    double> : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16,    float> : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16, s32> : public is_promotable_ok { typedef s32 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16, s64> : public is_promotable_ok { typedef s64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16, s8 > : public is_promotable_ok { typedef s16 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16, u16> : public is_promotable_ok { typedef s16 result; };  \/\/ s32 ?$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16, u32> : public is_promotable_ok { typedef s32 result; };  \/\/ float ?$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s16, u8 > : public is_promotable_ok { typedef s16 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32,    double> : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32,    float> : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32, s16> : public is_promotable_ok { typedef s32 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32, s64> : public is_promotable_ok { typedef s64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32, s8 > : public is_promotable_ok { typedef s32 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32, u16> : public is_promotable_ok { typedef s32 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32, u32> : public is_promotable_ok { typedef s32 result; };  \/\/ float ?  $/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s32, u8 > : public is_promotable_ok { typedef s32 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64,    double> : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64,    float> : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64, s16> : public is_promotable_ok { typedef s64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64, s32> : public is_promotable_ok { typedef s64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64, s8 > : public is_promotable_ok { typedef s64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64, u16> : public is_promotable_ok { typedef s64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64, u32> : public is_promotable_ok { typedef s64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64, u64> : public is_promotable_ok { typedef s64 result; };  \/\/ float ?  $/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s64, u8 > : public is_promotable_ok { typedef s64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8 , s16> : public is_promotable_ok { typedef s16 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8 , s32> : public is_promotable_ok { typedef s32 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8 , s64> : public is_promotable_ok { typedef s64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8 , u32> : public is_promotable_ok { typedef s32 result; };  \/\/ float ?$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8,     double> : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8,     float> : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8, u16> : public is_promotable_ok { typedef s16 result; };  \/\/ s32 ?$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<s8, u8> : public is_promotable_ok { typedef s8 result; };  \/\/ s16 ?$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<slng_t, double> : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<slng_t, float> : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<std::complex<double>, float>                : public is_promotable_ok { typedef std::complex<double> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<std::complex<double>, std::complex<float> > : public is_promotable_ok { typedef std::complex<double> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<std::complex<float>,  double>               : public is_promotable_ok { typedef std::complex<double> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<std::complex<float>, std::complex<double> > : public is_promotable_ok { typedef std::complex<double> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16,    double> : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16,    float> : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16, s16> : public is_promotable_ok { typedef s16 result; };  \/\/ s32 ?$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16, s32> : public is_promotable_ok { typedef s32 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16, s64> : public is_promotable_ok { typedef s64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16, s8> : public is_promotable_ok { typedef s16 result; };  \/\/ s32 ?$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16, u32> : public is_promotable_ok { typedef u32 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16, u64> : public is_promotable_ok { typedef u64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u16, u8> : public is_promotable_ok { typedef u16 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32,    double> : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32,    float> : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32, s16> : public is_promotable_ok { typedef s32 result; };  \/\/ float ?$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32, s32> : public is_promotable_ok { typedef s32 result; };  \/\/ float ?  $/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32, s64> : public is_promotable_ok { typedef s64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32, s8 > : public is_promotable_ok { typedef s32 result; };  \/\/ float ?$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32, u16> : public is_promotable_ok { typedef u32 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32, u64> : public is_promotable_ok { typedef u64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u32, u8 > : public is_promotable_ok { typedef u32 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u64,    double> : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u64,    float> : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u64, s64> : public is_promotable_ok { typedef s64 result; };  \/\/ float ?  $/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u64, u16> : public is_promotable_ok { typedef u64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u64, u32> : public is_promotable_ok { typedef u64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u64, u8 > : public is_promotable_ok { typedef u64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8 , s16> : public is_promotable_ok { typedef s16 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8 , s32> : public is_promotable_ok { typedef s32 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8 , s64> : public is_promotable_ok { typedef s64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8 , u32> : public is_promotable_ok { typedef u32 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8,     double> : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8,     float> : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8,  u64> : public is_promotable_ok { typedef u64 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8, s8> : public is_promotable_ok { typedef s8 result; };  \/\/ s16 ?$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<u8, u16> : public is_promotable_ok { typedef u16 result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<ulng_t, double> : public is_promotable_ok { typedef double result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<> struct is_promotable<ulng_t, float> : public is_promotable_ok { typedef float result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<T,               T> : public is_promotable_ok { typedef T               result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<T, std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<s16,    std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<s32,    std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<s64,    std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<s8,     std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<slng_t, std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<std::complex<T>, T> : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<std::complex<T>, s16>    : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<std::complex<T>, s32>    : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<std::complex<T>, s8>     : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<std::complex<T>, u16>    : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<std::complex<T>, u32>    : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<std::complex<T>, u8>     : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<u16,    std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<u32,    std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<u64,    std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<u8,     std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename T> struct is_promotable<ulng_t, std::complex<T> > : public is_promotable_ok { typedef std::complex<T> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename t> struct is_promotable<std::complex<t>, s64>    : public is_promotable_ok { typedef std::complex<t> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename t> struct is_promotable<std::complex<t>, slng_t> : public is_promotable_ok { typedef std::complex<t> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename t> struct is_promotable<std::complex<t>, u64>    : public is_promotable_ok { typedef std::complex<t> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^template<typename t> struct is_promotable<std::complex<t>, ulng_t> : public is_promotable_ok { typedef std::complex<t> result; };$/;"	t	struct:is_promotable
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<      typename result_type > struct enable_if2<true, result_type> { typedef result_type result; };$/;"	t	struct:enable_if2
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<>     struct enable_if<true> { typedef int result; };$/;"	t	struct:enable_if
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_blas_type_only< cx_double > { typedef cx_double result; };$/;"	t	struct:arma_blas_type_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_blas_type_only< cx_float  > { typedef cx_float  result; };$/;"	t	struct:arma_blas_type_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_blas_type_only< double    > { typedef double    result; };$/;"	t	struct:arma_blas_type_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_blas_type_only< float     > { typedef float     result; };$/;"	t	struct:arma_blas_type_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_cx_only< cx_double > { typedef cx_double result; };$/;"	t	struct:arma_cx_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_cx_only< cx_float  > { typedef cx_float  result; };$/;"	t	struct:arma_cx_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_and   > { typedef int result; };$/;"	t	struct:arma_glue_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_eq    > { typedef int result; };$/;"	t	struct:arma_glue_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_gt    > { typedef int result; };$/;"	t	struct:arma_glue_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_gteq  > { typedef int result; };$/;"	t	struct:arma_glue_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_lt    > { typedef int result; };$/;"	t	struct:arma_glue_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_lteq  > { typedef int result; };$/;"	t	struct:arma_glue_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_noteq > { typedef int result; };$/;"	t	struct:arma_glue_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_glue_rel_only< glue_rel_or    > { typedef int result; };$/;"	t	struct:arma_glue_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< s16    > { typedef s16 result; };$/;"	t	struct:arma_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< s32    > { typedef s32 result; };$/;"	t	struct:arma_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< s64    > { typedef s64 result; };$/;"	t	struct:arma_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< s8     > { typedef s8  result; };$/;"	t	struct:arma_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< slng_t > { typedef slng_t result; };$/;"	t	struct:arma_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< u16    > { typedef u16 result; };$/;"	t	struct:arma_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< u32    > { typedef u32 result; };$/;"	t	struct:arma_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< u64    > { typedef u64 result; };$/;"	t	struct:arma_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< u8     > { typedef u8  result; };$/;"	t	struct:arma_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_integral_only< ulng_t > { typedef ulng_t result; };$/;"	t	struct:arma_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_eq        > { typedef int result; };$/;"	t	struct:arma_op_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_gt_post   > { typedef int result; };$/;"	t	struct:arma_op_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_gt_pre    > { typedef int result; };$/;"	t	struct:arma_op_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_gteq_post > { typedef int result; };$/;"	t	struct:arma_op_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_gteq_pre  > { typedef int result; };$/;"	t	struct:arma_op_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_lt_post   > { typedef int result; };$/;"	t	struct:arma_op_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_lt_pre    > { typedef int result; };$/;"	t	struct:arma_op_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_lteq_post > { typedef int result; };$/;"	t	struct:arma_op_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_lteq_pre  > { typedef int result; };$/;"	t	struct:arma_op_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_op_rel_only< op_rel_noteq     > { typedef int result; };$/;"	t	struct:arma_op_rel_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_real_only< double > { typedef double result; };$/;"	t	struct:arma_real_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_real_only< float  > { typedef float  result; };$/;"	t	struct:arma_real_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_real_or_cx_only< cx_double > { typedef cx_double result; };$/;"	t	struct:arma_real_or_cx_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_real_or_cx_only< cx_float  > { typedef cx_float  result; };$/;"	t	struct:arma_real_or_cx_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_real_or_cx_only< double    > { typedef double    result; };$/;"	t	struct:arma_real_or_cx_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_real_or_cx_only< float     > { typedef float     result; };$/;"	t	struct:arma_real_or_cx_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< cx_double > { typedef cx_double result; };$/;"	t	struct:arma_scalar_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< cx_float  > { typedef cx_float  result; };$/;"	t	struct:arma_scalar_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< double    > { typedef double    result; };$/;"	t	struct:arma_scalar_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< float     > { typedef float     result; };$/;"	t	struct:arma_scalar_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< s16       > { typedef s16       result; };$/;"	t	struct:arma_scalar_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< s32       > { typedef s32       result; };$/;"	t	struct:arma_scalar_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< s64       > { typedef s64       result; };$/;"	t	struct:arma_scalar_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< s8        > { typedef s8        result; };$/;"	t	struct:arma_scalar_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< slng_t    > { typedef slng_t    result; };$/;"	t	struct:arma_scalar_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< u16       > { typedef u16       result; };$/;"	t	struct:arma_scalar_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< u32       > { typedef u32       result; };$/;"	t	struct:arma_scalar_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< u64       > { typedef u64       result; };$/;"	t	struct:arma_scalar_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< u8        > { typedef u8        result; };$/;"	t	struct:arma_scalar_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_scalar_only< ulng_t    > { typedef ulng_t    result; };$/;"	t	struct:arma_scalar_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_integral_only< s16    > { typedef s16    result; };$/;"	t	struct:arma_signed_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_integral_only< s32    > { typedef s32    result; };$/;"	t	struct:arma_signed_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_integral_only< s64    > { typedef s64    result; };$/;"	t	struct:arma_signed_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_integral_only< s8     > { typedef s8     result; };$/;"	t	struct:arma_signed_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_integral_only< slng_t > { typedef slng_t result; };$/;"	t	struct:arma_signed_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< cx_double > { typedef cx_double result; };$/;"	t	struct:arma_signed_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< cx_float  > { typedef cx_float  result; };$/;"	t	struct:arma_signed_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< double    > { typedef double    result; };$/;"	t	struct:arma_signed_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< float     > { typedef float     result; };$/;"	t	struct:arma_signed_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< s16       > { typedef s16       result; };$/;"	t	struct:arma_signed_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< s32       > { typedef s32       result; };$/;"	t	struct:arma_signed_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< s64       > { typedef s64       result; };$/;"	t	struct:arma_signed_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< s8        > { typedef s8        result; };$/;"	t	struct:arma_signed_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_signed_only< slng_t    > { typedef slng_t    result; };$/;"	t	struct:arma_signed_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_unsigned_integral_only< u16    > { typedef u16    result; };$/;"	t	struct:arma_unsigned_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_unsigned_integral_only< u32    > { typedef u32    result; };$/;"	t	struct:arma_unsigned_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_unsigned_integral_only< u64    > { typedef u64    result; };$/;"	t	struct:arma_unsigned_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_unsigned_integral_only< u8     > { typedef u8     result; };$/;"	t	struct:arma_unsigned_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<> struct arma_unsigned_integral_only< ulng_t > { typedef ulng_t result; };$/;"	t	struct:arma_unsigned_integral_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_not_blas_type { typedef T result; };$/;"	t	struct:arma_not_blas_type
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_not_cx                    { typedef T result; };$/;"	t	struct:arma_not_cx
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename T> struct arma_not_op_rel { typedef int result; };$/;"	t	struct:arma_not_op_rel
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename eT> struct arma_Cube_only< Cube<eT> > { typedef Cube<eT> result; };$/;"	t	struct:arma_Cube_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename eT> struct arma_Mat_Col_Row_only< Col<eT> > { typedef Col<eT> result; };$/;"	t	struct:arma_Mat_Col_Row_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename eT> struct arma_Mat_Col_Row_only< Mat<eT> > { typedef Mat<eT> result; };$/;"	t	struct:arma_Mat_Col_Row_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename eT> struct arma_Mat_Col_Row_only< Row<eT> > { typedef Row<eT> result; };$/;"	t	struct:arma_Mat_Col_Row_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename eT> struct arma_SpMat_SpCol_SpRow_only< SpCol<eT> > { typedef SpCol<eT> result; };$/;"	t	struct:arma_SpMat_SpCol_SpRow_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename eT> struct arma_SpMat_SpCol_SpRow_only< SpMat<eT> > { typedef SpMat<eT> result; };$/;"	t	struct:arma_SpMat_SpCol_SpRow_only
result	lib/armadillo-9.800.2/include/armadillo_bits/restrictors.hpp	/^template<typename eT> struct arma_SpMat_SpCol_SpRow_only< SpRow<eT> > { typedef SpRow<eT> result; };$/;"	t	struct:arma_SpMat_SpCol_SpRow_only
result	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename obj_type>       struct rsv_get_elem_type_worker<obj_type, false> { typedef          obj_type            result; };$/;"	t	struct:rsv_get_elem_type_worker
result	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename obj_type>       struct rsv_get_elem_type_worker<obj_type, true>  { typedef typename obj_type::elem_type result; };$/;"	t	struct:rsv_get_elem_type_worker
result	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename obj_type>       struct rsv_get_return_type1_worker<obj_type, false> { typedef Mat<obj_type>  result; };$/;"	t	struct:rsv_get_return_type1_worker
result	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename obj_type>       struct rsv_get_return_type1_worker<obj_type, true>  { typedef obj_type       result; };$/;"	t	struct:rsv_get_return_type1_worker
result	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { typedef T1 result; };$/;"	t	struct:get_pod_type
result	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { typedef T2 result; };$/;"	t	struct:get_pod_type
result	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_colvector_redirect<T1, false> { typedef resolves_to_colvector_default<T1> result; };$/;"	t	struct:resolves_to_colvector_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_colvector_redirect<T1, true>  { typedef resolves_to_colvector_test<T1>    result; };$/;"	t	struct:resolves_to_colvector_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_rowvector_redirect<T1, false> { typedef resolves_to_rowvector_default<T1> result; };$/;"	t	struct:resolves_to_rowvector_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_rowvector_redirect<T1, true>  { typedef resolves_to_rowvector_test<T1>    result; };$/;"	t	struct:resolves_to_rowvector_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_vector_redirect<T1, false> { typedef resolves_to_vector_default<T1> result; };$/;"	t	struct:resolves_to_vector_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_vector_redirect<T1, true>  { typedef resolves_to_vector_test<T1>    result; };$/;"	t	struct:resolves_to_vector_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_htrans2_redirect<T1, false> { typedef partial_unwrap_check_htrans2_default<T1> result; };$/;"	t	struct:partial_unwrap_check_htrans2_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_htrans2_redirect<T1, true>  { typedef partial_unwrap_check_htrans2_fixed<T1>   result; };$/;"	t	struct:partial_unwrap_check_htrans2_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_htrans_redirect<T1, false> { typedef partial_unwrap_check_htrans_default<T1> result; };$/;"	t	struct:partial_unwrap_check_htrans_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_htrans_redirect<T1, true>  { typedef partial_unwrap_check_htrans_fixed<T1>   result; };$/;"	t	struct:partial_unwrap_check_htrans_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_neg_redirect<T1, false> { typedef partial_unwrap_check_neg_default<T1> result; };$/;"	t	struct:partial_unwrap_check_neg_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_neg_redirect<T1, true>  { typedef partial_unwrap_check_neg_fixed<T1>   result; };$/;"	t	struct:partial_unwrap_check_neg_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_redirect<T1, false> { typedef partial_unwrap_check_default<T1> result; };$/;"	t	struct:partial_unwrap_check_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_redirect<T1, true>  { typedef partial_unwrap_check_fixed<T1>   result; };$/;"	t	struct:partial_unwrap_check_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_scalar_times_redirect<T1, false> { typedef partial_unwrap_check_scalar_times_default<T1> result; };$/;"	t	struct:partial_unwrap_check_scalar_times_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_check_scalar_times_redirect<T1, true>  { typedef partial_unwrap_check_scalar_times_fixed<T1>   result; };$/;"	t	struct:partial_unwrap_check_scalar_times_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_htrans2_redirect<T1, false> { typedef partial_unwrap_htrans2_default<T1> result; };$/;"	t	struct:partial_unwrap_htrans2_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_htrans2_redirect<T1, true>  { typedef partial_unwrap_htrans2_fixed<T1>   result; };$/;"	t	struct:partial_unwrap_htrans2_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_htrans_redirect<T1, false> { typedef partial_unwrap_htrans_default<T1> result; };$/;"	t	struct:partial_unwrap_htrans_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_htrans_redirect<T1, true>  { typedef partial_unwrap_htrans_fixed<T1>   result; };$/;"	t	struct:partial_unwrap_htrans_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_neg_redirect<T1, false> { typedef partial_unwrap_neg_default<T1> result; };$/;"	t	struct:partial_unwrap_neg_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_neg_redirect<T1, true>  { typedef partial_unwrap_neg_fixed<T1>   result; };$/;"	t	struct:partial_unwrap_neg_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_redirect<T1, false> { typedef partial_unwrap_default<T1> result; };$/;"	t	struct:partial_unwrap_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_redirect<T1, true>  { typedef partial_unwrap_fixed<T1>   result; };$/;"	t	struct:partial_unwrap_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_scalar_times_redirect<T1, false> { typedef partial_unwrap_scalar_times_default<T1> result; };$/;"	t	struct:partial_unwrap_scalar_times_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct partial_unwrap_scalar_times_redirect<T1, true>  { typedef partial_unwrap_scalar_times_fixed<T1>   result; };$/;"	t	struct:partial_unwrap_scalar_times_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_Col_htrans_redirect<T1, false> { typedef quasi_unwrap_Col_htrans<T1> result; };$/;"	t	struct:quasi_unwrap_Col_htrans_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_Col_htrans_redirect<T1, true>  { typedef quasi_unwrap_default<T1>    result; };$/;"	t	struct:quasi_unwrap_Col_htrans_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_Row_htrans_redirect<T1, false> { typedef quasi_unwrap_Row_htrans<T1> result; };$/;"	t	struct:quasi_unwrap_Row_htrans_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_Row_htrans_redirect<T1, true>  { typedef quasi_unwrap_default<T1>    result; };$/;"	t	struct:quasi_unwrap_Row_htrans_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_redirect<T1, false> { typedef quasi_unwrap_default<T1> result; };$/;"	t	struct:quasi_unwrap_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_redirect<T1, true>  { typedef quasi_unwrap_fixed<T1>   result; };$/;"	t	struct:quasi_unwrap_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_subview_col_htrans_redirect<T1, false> { typedef quasi_unwrap_subview_col_htrans<T1> result; };$/;"	t	struct:quasi_unwrap_subview_col_htrans_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct quasi_unwrap_subview_col_htrans_redirect<T1, true>  { typedef quasi_unwrap_default<T1>            result; };$/;"	t	struct:quasi_unwrap_subview_col_htrans_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check_redirect<T1, false> { typedef unwrap_check_default<T1> result; };$/;"	t	struct:unwrap_check_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check_redirect<T1, true>  { typedef unwrap_check_fixed<T1>   result; };$/;"	t	struct:unwrap_check_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_redirect<T1, false> { typedef unwrap_default<T1> result; };$/;"	t	struct:unwrap_redirect
result	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_redirect<T1, true>  { typedef unwrap_fixed<T1>   result; };$/;"	t	struct:unwrap_redirect
resultDisposition	include/catch.hpp	/^        ResultDisposition::Flags resultDisposition;$/;"	m	struct:Catch::AssertionInfo
resultDisposition	lib/armadillo-9.800.2/tests/catch.hpp	/^        ResultDisposition::Flags resultDisposition;$/;"	m	struct:Catch::AssertionInfo
resultType	lib/armadillo-9.800.2/tests/catch.hpp	/^        ResultWas::OfType resultType;$/;"	m	struct:Catch::AssertionResultData
retrieve_ritzpair	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_meat.hpp	/^GenEigsSolver<eT, SelectionRule, OpType>::retrieve_ritzpair()$/;"	f	class:newarp::GenEigsSolver
retrieve_ritzpair	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_meat.hpp	/^SymEigsSolver<eT, SelectionRule, OpType>::retrieve_ritzpair()$/;"	f	class:newarp::SymEigsSolver
return_type1	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  typedef typename rsv_get_return_type1<obj_type    >::return_type1 return_type1;$/;"	t	class:running_stat_vec
return_type1	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename obj_type> struct rsv_get_return_type1 { typedef typename rsv_get_return_type1_worker<obj_type, is_Mat<obj_type>::value>::result return_type1; };$/;"	t	struct:rsv_get_return_type1
return_type2	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  typedef typename rsv_get_return_type2<return_type1>::return_type2 return_type2;$/;"	t	class:running_stat_vec
return_type2	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename eT>           struct rsv_get_return_type2< Col<eT> > { typedef Col<typename get_pod_type<eT>::result> return_type2; };$/;"	t	struct:rsv_get_return_type2
return_type2	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename eT>           struct rsv_get_return_type2< Mat<eT> > { typedef Mat<typename get_pod_type<eT>::result> return_type2; };$/;"	t	struct:rsv_get_return_type2
return_type2	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename eT>           struct rsv_get_return_type2< Row<eT> > { typedef Row<typename get_pod_type<eT>::result> return_type2; };$/;"	t	struct:rsv_get_return_type2
reverse	lib/armadillo-9.800.2/docs.html	/^<a name="reverse"><\/a>$/;"	a
reverse	lib/armadillo-9.800.2/include/armadillo_bits/fn_reverse.hpp	/^reverse$/;"	f
ritz_conv	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  std::vector<bool>       ritz_conv; \/\/ indicator of the convergence of ritz values$/;"	m	class:newarp::GenEigsSolver
ritz_conv	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  std::vector<bool> ritz_conv; \/\/ indicator of the convergence of ritz values$/;"	m	class:newarp::SymEigsSolver
ritz_est	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  Col< std::complex<eT> > ritz_est;  \/\/ last row of ritz_vec$/;"	m	class:newarp::GenEigsSolver
ritz_est	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  Col<eT>           ritz_est;  \/\/ last row of ritz_vec$/;"	m	class:newarp::SymEigsSolver
ritz_val	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  Col< std::complex<eT> > ritz_val;  \/\/ ritz values$/;"	m	class:newarp::GenEigsSolver
ritz_val	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  Col<eT>           ritz_val;  \/\/ ritz values$/;"	m	class:newarp::SymEigsSolver
ritz_vec	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_bones.hpp	/^  Mat< std::complex<eT> > ritz_vec;  \/\/ ritz vectors$/;"	m	class:newarp::GenEigsSolver
ritz_vec	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_bones.hpp	/^  Mat<eT>           ritz_vec;  \/\/ ritz vectors$/;"	m	class:newarp::SymEigsSolver
rng_method	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^    static const int rng_method = 0;$/;"	m	class:arma_rng
rng_method	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^    static const int rng_method = 1;$/;"	m	class:arma_rng
rng_method	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^    static const int rng_method = 2;$/;"	m	class:arma_rng
robust_mean	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::robust_mean(const eT A, const eT B)$/;"	f	class:op_mean
robust_mean	lib/armadillo-9.800.2/include/armadillo_bits/op_mean_meat.hpp	/^op_mean::robust_mean(const std::complex<T>& A, const std::complex<T>& B)$/;"	f	class:op_mean
roots	lib/armadillo-9.800.2/docs.html	/^<a name="roots"><\/a>$/;"	a
roots	lib/armadillo-9.800.2/include/armadillo_bits/fn_roots.hpp	/^roots(Mat< std::complex<typename T1::pod_type> >& out, const Base<typename T1::elem_type, T1>& X)$/;"	f
roots	lib/armadillo-9.800.2/include/armadillo_bits/fn_roots.hpp	/^roots(const Base<typename T1::elem_type, T1>& X)$/;"	f
rot_cos	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_bones.hpp	/^  Col<eT> rot_cos;$/;"	m	class:newarp::UpperHessenbergQR
rot_sin	lib/armadillo-9.800.2/include/armadillo_bits/newarp_UpperHessenbergQR_bones.hpp	/^  Col<eT> rot_sin;$/;"	m	class:newarp::UpperHessenbergQR
round	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_cx_only<eT>::result round (const eT& x) { return eT( eop_aux::round(x.real()), eop_aux::round(x.imag()) ); }$/;"	f	class:eop_aux
round	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_cx_only<eT>::result round (const eT& x) { return eT( std::round(x.real()), std::round(x.imag()) );         }$/;"	f	class:eop_aux
round	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename     arma_real_only<eT>::result round (const eT  x) { return (x >= eT(0)) ? std::floor(x+0.5) : std::ceil(x-0.5);      }$/;"	f	class:eop_aux
round	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename     arma_real_only<eT>::result round (const eT  x) { return std::round(x);                                            }$/;"	f	class:eop_aux
round	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result round (const eT  x) { return x;                                                        }$/;"	f	class:eop_aux
round	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^round(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
round	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^round(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
round	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^round(const T1& A)$/;"	f
row	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::row(const uword in_row1) const$/;"	f	class:Col
row	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::row(const uword in_row1)$/;"	f	class:Col
row	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::row(const uword in_row) const$/;"	f	class:Cube
row	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::row(const uword in_row)$/;"	f	class:Cube
row	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  arma_aligned const uword row;$/;"	m	class:SpMat_MapMat_val
row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::const_row_col_iterator::row() const$/;"	f	class:Mat::const_row_col_iterator
row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row(const uword row_num) const$/;"	f	class:Mat
row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row(const uword row_num)$/;"	f	class:Mat
row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_col_iterator::row() const$/;"	f	class:Mat::row_col_iterator
row	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    arma_inline uword row() const { return M->row_indices[internal_pos]; }$/;"	f	class:SpMat::iterator_base
row	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    arma_inline uword row() const { return internal_row; }$/;"	f	class:SpMat::const_row_iterator
row	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::row(const uword row_num) const$/;"	f	class:SpMat
row	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::row(const uword row_num)$/;"	f	class:SpMat
row	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    arma_inline uword row() const { return internal_row; }$/;"	f	class:SpSubview::const_row_iterator
row	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    arma_inline uword row() const { return iterator_base::M->m.row_indices[iterator_base::internal_pos + skip_pos] - iterator_base::M->aux_row1; }$/;"	f	class:SpSubview::const_iterator
row	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::row(const uword row_num) const$/;"	f	class:SpSubview
row	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::row(const uword row_num)$/;"	f	class:SpSubview
row	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_bones.hpp	/^  arma_aligned const uword row;$/;"	m	class:SpValProxy
row	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::row(const uword row_num) const$/;"	f	class:field
row	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::row(const uword row_num)$/;"	f	class:field
row	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::row(const uword row_num) const$/;"	f	class:subview
row	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::row(const uword row_num)$/;"	f	class:subview
row_col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  class row_col_iterator$/;"	c	class:Mat
row_col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_col_iterator::row_col_iterator()$/;"	f	class:Mat::row_col_iterator
row_col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_col_iterator::row_col_iterator(Mat<eT>& in_M, const uword in_row, const uword in_col)$/;"	f	class:Mat::row_col_iterator
row_col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_col_iterator::row_col_iterator(const row_col_iterator& in_it)$/;"	f	class:Mat::row_col_iterator
row_col_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  typedef       iterator       row_col_iterator;$/;"	t	class:SpMat
row_indices	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  arma_aligned const uword* const row_indices;$/;"	m	class:SpMat
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  typedef       eT*       row_iterator;$/;"	t	class:Col
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  class row_iterator$/;"	c	class:Mat
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_iterator::row_iterator()$/;"	f	class:Mat::row_iterator
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_iterator::row_iterator(Mat<eT>& in_M, const uword in_row)$/;"	f	class:Mat::row_iterator
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::row_iterator::row_iterator(const row_iterator& X)$/;"	f	class:Mat::row_iterator
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  typedef       eT*       row_iterator;$/;"	t	class:Row
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_bones.hpp	/^  typedef typename SpMat<eT>::iterator       row_iterator;$/;"	t	class:SpCol
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    inline row_iterator() : const_row_iterator() {}$/;"	f	class:SpMat::row_iterator
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    inline row_iterator(SpMat& in_M, uword in_row, uword in_col) : const_row_iterator(in_M, in_row, in_col) { }$/;"	f	class:SpMat::row_iterator
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    inline row_iterator(SpMat& in_M, uword initial_pos = 0) : const_row_iterator(in_M, initial_pos) { }$/;"	f	class:SpMat::row_iterator
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    inline row_iterator(const row_iterator& other) : const_row_iterator(other) { }$/;"	f	class:SpMat::row_iterator
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  class row_iterator : public const_row_iterator$/;"	c	class:SpMat
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_bones.hpp	/^  typedef typename SpMat<eT>::iterator       row_iterator;$/;"	t	class:SpRow
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    inline row_iterator(SpSubview& in_M, uword in_row, uword in_col) : const_row_iterator(in_M, in_row, in_col) { }$/;"	f	class:SpSubview::row_iterator
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    inline row_iterator(SpSubview& in_M, uword initial_pos = 0) : const_row_iterator(in_M, initial_pos) { }$/;"	f	class:SpSubview::row_iterator
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    inline row_iterator(const row_iterator& other) : const_row_iterator(other) { }$/;"	f	class:SpSubview::row_iterator
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^  class row_iterator : public const_row_iterator$/;"	c	class:SpSubview
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  class row_iterator$/;"	c	class:subview
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::row_iterator::row_iterator()$/;"	f	class:subview::row_iterator
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::row_iterator::row_iterator(const row_iterator& X)$/;"	f	class:subview::row_iterator
row_iterator	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::row_iterator::row_iterator(subview<eT>& in_sv, const uword in_row, const uword in_col)$/;"	f	class:subview::row_iterator
row_offset	lib/armadillo-9.800.2/include/armadillo_bits/diagview_bones.hpp	/^  const uword row_offset;$/;"	m	class:diagview
row_offset	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_bones.hpp	/^  const uword row_offset;$/;"	m	class:spdiagview
rows	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::rows(const span& row_span) const$/;"	f	class:Col
rows	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::rows(const span& row_span)$/;"	f	class:Col
rows	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::rows(const uword in_row1, const uword in_row2) const$/;"	f	class:Col
rows	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::rows(const uword in_row1, const uword in_row2)$/;"	f	class:Col
rows	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::rows(const uword in_row1, const uword in_row2) const$/;"	f	class:Cube
rows	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::rows(const uword in_row1, const uword in_row2)$/;"	f	class:Cube
rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::rows(const Base<uword,T1>& ri) const$/;"	f	class:Mat
rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::rows(const Base<uword,T1>& ri)$/;"	f	class:Mat
rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::rows(const span& row_span) const$/;"	f	class:Mat
rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::rows(const span& row_span)$/;"	f	class:Mat
rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::rows(const uword in_row1, const uword in_row2) const$/;"	f	class:Mat
rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::rows(const uword in_row1, const uword in_row2)$/;"	f	class:Mat
rows	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::rows(const uword in_row1, const uword in_row2) const$/;"	f	class:SpMat
rows	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::rows(const uword in_row1, const uword in_row2)$/;"	f	class:SpMat
rows	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::rows(const uword in_row1, const uword in_row2) const$/;"	f	class:SpSubview
rows	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::rows(const uword in_row1, const uword in_row2)$/;"	f	class:SpSubview
rows	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::rows(const uword in_row1, const uword in_row2) const$/;"	f	class:field
rows	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::rows(const uword in_row1, const uword in_row2)$/;"	f	class:field
rows	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::rows(const uword in_row1, const uword in_row2) const$/;"	f	class:subview
rows	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::rows(const uword in_row1, const uword in_row2)$/;"	f	class:subview
rows	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::rows(const uword in_row1, const uword in_row2) const$/;"	f	class:subview_col
rows	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::rows(const uword in_row1, const uword in_row2)$/;"	f	class:subview_col
rowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Row <double> rowvec;$/;"	t
rowvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef rowvec::fixed<2> rowvec2;$/;"	t
rowvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef rowvec::fixed<3> rowvec3;$/;"	t
rowvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef rowvec::fixed<4> rowvec4;$/;"	t
rowvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef rowvec::fixed<5> rowvec5;$/;"	t
rowvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef rowvec::fixed<6> rowvec6;$/;"	t
rowvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef rowvec::fixed<7> rowvec7;$/;"	t
rowvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef rowvec::fixed<8> rowvec8;$/;"	t
rowvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef rowvec::fixed<9> rowvec9;$/;"	t
rsv_get_elem_type	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename obj_type> struct rsv_get_elem_type { typedef typename rsv_get_elem_type_worker<obj_type, is_Mat<obj_type>::value>::result elem_type; };$/;"	s
rsv_get_elem_type_worker	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename obj_type, bool> struct rsv_get_elem_type_worker                  { };$/;"	s
rsv_get_elem_type_worker	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename obj_type>       struct rsv_get_elem_type_worker<obj_type, false> { typedef          obj_type            result; };$/;"	s
rsv_get_elem_type_worker	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename obj_type>       struct rsv_get_elem_type_worker<obj_type, true>  { typedef typename obj_type::elem_type result; };$/;"	s
rsv_get_return_type1	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename obj_type> struct rsv_get_return_type1 { typedef typename rsv_get_return_type1_worker<obj_type, is_Mat<obj_type>::value>::result return_type1; };$/;"	s
rsv_get_return_type1_worker	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename obj_type, bool> struct rsv_get_return_type1_worker                  { };$/;"	s
rsv_get_return_type1_worker	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename obj_type>       struct rsv_get_return_type1_worker<obj_type, false> { typedef Mat<obj_type>  result; };$/;"	s
rsv_get_return_type1_worker	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename obj_type>       struct rsv_get_return_type1_worker<obj_type, true>  { typedef obj_type       result; };$/;"	s
rsv_get_return_type2	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename eT>           struct rsv_get_return_type2< Col<eT> > { typedef Col<typename get_pod_type<eT>::result> return_type2; };$/;"	s
rsv_get_return_type2	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename eT>           struct rsv_get_return_type2< Mat<eT> > { typedef Mat<typename get_pod_type<eT>::result> return_type2; };$/;"	s
rsv_get_return_type2	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename eT>           struct rsv_get_return_type2< Row<eT> > { typedef Row<typename get_pod_type<eT>::result> return_type2; };$/;"	s
rsv_get_return_type2	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^template<typename return_type1> struct rsv_get_return_type2            { };$/;"	s
rudimentary_sym_check	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::rudimentary_sym_check(const Mat< std::complex<T> >& X)$/;"	f	class:auxlib
rudimentary_sym_check	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::rudimentary_sym_check(const Mat<eT>& X)$/;"	f	class:auxlib
rudimentary_sym_check	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^sp_auxlib::rudimentary_sym_check(const SpMat< std::complex<T> >& X)$/;"	f	class:sp_auxlib
rudimentary_sym_check	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^sp_auxlib::rudimentary_sym_check(const SpMat<eT>& X)$/;"	f	class:sp_auxlib
run	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  run(cx_type* Y, const cx_type* X, const uword stage = 0, const uword stride = 1)$/;"	f	class:fft_engine
run_aupd	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^sp_auxlib::run_aupd$/;"	f	class:sp_auxlib
running_mean_scalar	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^class running_mean_scalar$/;"	c	namespace:gmm_priv
running_mean_scalar	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_meat.hpp	/^running_mean_scalar<eT>::running_mean_scalar()$/;"	f	class:gmm_priv::running_mean_scalar
running_mean_scalar	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_meat.hpp	/^running_mean_scalar<eT>::running_mean_scalar(const running_mean_scalar<eT>& in)$/;"	f	class:gmm_priv::running_mean_scalar
running_stat	lib/armadillo-9.800.2/docs.html	/^<a name="running_stat"><\/a>$/;"	a
running_stat	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_bones.hpp	/^class running_stat$/;"	c
running_stat	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat<eT>::running_stat()$/;"	f	class:running_stat
running_stat_aux	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_bones.hpp	/^class running_stat_aux$/;"	c
running_stat_vec	lib/armadillo-9.800.2/docs.html	/^<a name="running_stat_vec"><\/a>$/;"	a
running_stat_vec	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^class running_stat_vec$/;"	c
running_stat_vec	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::running_stat_vec(const bool in_calc_cov)$/;"	f	class:running_stat_vec
running_stat_vec	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::running_stat_vec(const running_stat_vec<obj_type>& in_rsv)$/;"	f	class:running_stat_vec
running_stat_vec_aux	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^class running_stat_vec_aux$/;"	c
rw	lib/armadillo-9.800.2/include/armadillo_bits/access.hpp	/^  template<typename T1> arma_inline static T1&  rw (const T1& x)        { return const_cast<T1& >(x); }$/;"	f	class:access
rwp	lib/armadillo-9.800.2/include/armadillo_bits/access.hpp	/^  template<typename T1> arma_inline static T1*& rwp(const T1* const& x) { return const_cast<T1*&>(x); }$/;"	f	class:access
s	lib/armadillo-9.800.2/tests/catch.hpp	/^        static std::ostream &s;$/;"	m	struct:Catch::Detail::IsStreamInsertable
s16	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef           int16_t s16;$/;"	t
s16	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef          short    s16;$/;"	t
s32	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef           int32_t s32;$/;"	t
s32	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef          int      s32;$/;"	t
s32_colvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <s32> s32_colvec;$/;"	t
s32_cube	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Cube<s32> s32_cube;$/;"	t
s32_mat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Mat <s32> s32_mat;$/;"	t
s32_rowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Row <s32> s32_rowvec;$/;"	t
s32_vec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <s32> s32_vec;$/;"	t
s64	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^    typedef           int64_t  s64;$/;"	t
s64	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^    typedef          long      s64;$/;"	t
s64	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^    typedef          long long s64;$/;"	t
s64_colvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^  typedef Col <s64> s64_colvec;$/;"	t
s64_cube	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^  typedef Cube<s64> s64_cube;$/;"	t
s64_mat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^  typedef Mat <s64> s64_mat;$/;"	t
s64_rowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^  typedef Row <s64> s64_rowvec;$/;"	t
s64_vec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^  typedef Col <s64> s64_vec;$/;"	t
s8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^    typedef           int8_t s8;$/;"	t
s8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^    typedef          char    s8;$/;"	t
s8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^    typedef ARMA_S8_TYPE     s8;$/;"	t
s_empty	include/catch.hpp	/^        static constexpr char const* const s_empty = "";$/;"	m	class:Catch::StringRef
s_parent	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  arma_aligned  SpMat<eT>& s_parent;$/;"	m	class:SpMat_MapMat_val
safe_rename	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::safe_rename(const std::string& old_name, const std::string& new_name)$/;"	f	class:diskio
saupd	lib/armadillo-9.800.2/include/armadillo_bits/translate_arpack.hpp	/^  saupd(blas_int* ido, char* bmat, blas_int* n, char* which, blas_int* nev, eeT* tol, eT* resid, blas_int* ncv, eT* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, eT* workd, eT* workl, blas_int* lworkl, blas_int* info)$/;"	f	namespace:arpack
save	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::save(const hdf5_name& spec, const file_type type, const bool print_status) const$/;"	f	class:Cube
save	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::save(const std::string name, const file_type type, const bool print_status) const$/;"	f	class:Cube
save	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::save(std::ostream& os, const file_type type, const bool print_status) const$/;"	f	class:Cube
save	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::save(const hdf5_name& spec, const file_type type, const bool print_status) const$/;"	f	class:Mat
save	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::save(const std::string name, const file_type type, const bool print_status) const$/;"	f	class:Mat
save	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::save(std::ostream& os, const file_type type, const bool print_status) const$/;"	f	class:Mat
save	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::save(const std::string name, const file_type type, const bool print_status) const$/;"	f	class:SpMat
save	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::save(std::ostream& os, const file_type type, const bool print_status) const$/;"	f	class:SpMat
save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::save(const std::string name, const file_type type, const bool print_status) const$/;"	f	class:field
save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::save(std::ostream& os, const file_type type, const bool print_status) const$/;"	f	class:field
save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::save(const field< Col<eT> >& x, const std::string& name, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::save(const field< Col<eT> >& x, std::ostream& os, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::save(const field< Cube<eT> >& x, const std::string& name, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::save(const field< Cube<eT> >& x, std::ostream& os, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::save(const field< Mat<eT> >& x, const std::string& name, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::save(const field< Mat<eT> >& x, std::ostream& os, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::save(const field< Row<eT> >& x, const std::string& name, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::save(const field< Row<eT> >& x, std::ostream& os, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::save(const field< std::string >& x, const std::string& name, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::save(const field< std::string >& x, std::ostream& os, const file_type type, std::string& err_msg)$/;"	f	class:field_aux
save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::save(const field<oT>&, const std::string&, const file_type, std::string& err_msg)$/;"	f	class:field_aux
save	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field_aux::save(const field<oT>&, std::ostream&, const file_type, std::string& err_msg)$/;"	f	class:field_aux
save	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::save(const std::string name) const$/;"	f	class:gmm_priv::gmm_diag
save	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::save(const std::string name) const$/;"	f	class:gmm_priv::gmm_full
save_arma_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_arma_ascii(const Cube<eT>& x, const std::string& final_name)$/;"	f	class:diskio
save_arma_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_arma_ascii(const Cube<eT>& x, std::ostream& f)$/;"	f	class:diskio
save_arma_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_arma_ascii(const Mat<eT>& x, const std::string& final_name)$/;"	f	class:diskio
save_arma_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_arma_ascii(const Mat<eT>& x, std::ostream& f)$/;"	f	class:diskio
save_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_arma_binary(const Cube<eT>& x, const std::string& final_name)$/;"	f	class:diskio
save_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_arma_binary(const Cube<eT>& x, std::ostream& f)$/;"	f	class:diskio
save_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_arma_binary(const Mat<eT>& x, const std::string& final_name)$/;"	f	class:diskio
save_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_arma_binary(const Mat<eT>& x, std::ostream& f)$/;"	f	class:diskio
save_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_arma_binary(const SpMat<eT>& x, const std::string& final_name)$/;"	f	class:diskio
save_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_arma_binary(const SpMat<eT>& x, std::ostream& f)$/;"	f	class:diskio
save_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_arma_binary(const field<T1>& x, const std::string& final_name)$/;"	f	class:diskio
save_arma_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_arma_binary(const field<T1>& x, std::ostream& f)$/;"	f	class:diskio
save_coord_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_coord_ascii(const SpMat< std::complex<T> >& x, std::ostream& f)$/;"	f	class:diskio
save_coord_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_coord_ascii(const SpMat<eT>& x, const std::string& final_name)$/;"	f	class:diskio
save_coord_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_coord_ascii(const SpMat<eT>& x, std::ostream& f)$/;"	f	class:diskio
save_csv_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_csv_ascii(const Mat< std::complex<T> >& x, std::ostream& f)$/;"	f	class:diskio
save_csv_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_csv_ascii(const Mat<eT>& x, const std::string& final_name)$/;"	f	class:diskio
save_csv_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_csv_ascii(const Mat<eT>& x, std::ostream& f)$/;"	f	class:diskio
save_csv_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_csv_ascii(const SpMat< std::complex<T> >& x, std::ostream& f)$/;"	f	class:diskio
save_csv_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_csv_ascii(const SpMat<eT>& x, const std::string& final_name)$/;"	f	class:diskio
save_csv_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_csv_ascii(const SpMat<eT>& x, std::ostream& f)$/;"	f	class:diskio
save_hdf5_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_hdf5_binary(const Cube<eT>& x, const hdf5_name& spec, std::string& err_msg)$/;"	f	class:diskio
save_hdf5_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_hdf5_binary(const Mat<eT>& x, const hdf5_name& spec, std::string& err_msg)$/;"	f	class:diskio
save_load_field	lib/armadillo-9.800.2/docs.html	/^<a name="save_load_field"><\/a>$/;"	a
save_load_mat	lib/armadillo-9.800.2/docs.html	/^<a name="save_load_mat"><\/a>$/;"	a
save_pgm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_pgm_binary(const Mat< std::complex<T> >& x, const std::string& final_name)$/;"	f	class:diskio
save_pgm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_pgm_binary(const Mat< std::complex<T> >& x, std::ostream& f)$/;"	f	class:diskio
save_pgm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_pgm_binary(const Mat<eT>& x, const std::string& final_name)$/;"	f	class:diskio
save_pgm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_pgm_binary(const Mat<eT>& x, std::ostream& f)$/;"	f	class:diskio
save_ppm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_ppm_binary(const Cube<eT>& x, const std::string& final_name)$/;"	f	class:diskio
save_ppm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_ppm_binary(const Cube<eT>& x, std::ostream& f)$/;"	f	class:diskio
save_ppm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_ppm_binary(const field<T1>& x, const std::string& final_name)$/;"	f	class:diskio
save_ppm_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_ppm_binary(const field<T1>& x, std::ostream& f)$/;"	f	class:diskio
save_raw_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_raw_ascii(const Cube<eT>& x, const std::string& final_name)$/;"	f	class:diskio
save_raw_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_raw_ascii(const Cube<eT>& x, std::ostream& f)$/;"	f	class:diskio
save_raw_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_raw_ascii(const Mat<eT>& x, const std::string& final_name)$/;"	f	class:diskio
save_raw_ascii	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_raw_ascii(const Mat<eT>& x, std::ostream& f)$/;"	f	class:diskio
save_raw_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_raw_binary(const Cube<eT>& x, const std::string& final_name)$/;"	f	class:diskio
save_raw_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_raw_binary(const Cube<eT>& x, std::ostream& f)$/;"	f	class:diskio
save_raw_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_raw_binary(const Mat<eT>& x, const std::string& final_name)$/;"	f	class:diskio
save_raw_binary	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_raw_binary(const Mat<eT>& x, std::ostream& f)$/;"	f	class:diskio
save_std_string	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_std_string(const field<std::string>& x, const std::string& final_name)$/;"	f	class:diskio
save_std_string	lib/armadillo-9.800.2/include/armadillo_bits/diskio_meat.hpp	/^diskio::save_std_string(const field<std::string>& x, std::ostream& f)$/;"	f	class:diskio
schur	lib/armadillo-9.800.2/docs.html	/^<a name="schur"><\/a>$/;"	a
schur	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::schur(Mat<eT>& U, Mat<eT>& S, const Base<eT,T1>& X, const bool calc_U)$/;"	f	class:auxlib
schur	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::schur(Mat<std::complex<T> >& U, Mat<std::complex<T> >& S, const Base<std::complex<T>,T1>& X, const bool calc_U)$/;"	f	class:auxlib
schur	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::schur(Mat<std::complex<T> >& U, Mat<std::complex<T> >& S, const bool calc_U)$/;"	f	class:auxlib
schur	lib/armadillo-9.800.2/include/armadillo_bits/fn_schur.hpp	/^schur$/;"	f
schur_inplace	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::schur_inplace(Mat<eT>& out, const diagview<eT>& in)$/;"	f	class:diagview
schur_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::schur_inplace(Cube<eT>& out, const subview_cube<eT>& in)$/;"	f	class:subview_cube
schur_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::schur_inplace(Mat<eT>& out, const subview_cube<eT>& in)$/;"	f	class:subview_cube
schur_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::schur_inplace(Cube<eT>& out, const subview_cube_slices& in)$/;"	f	class:subview_cube_slices
schur_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::schur_inplace(Mat<eT>& out, const subview_elem1& in)$/;"	f	class:subview_elem1
schur_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::schur_inplace(Mat<eT>& out, const subview_elem2& in)$/;"	f	class:subview_elem2
schur_inplace	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::schur_inplace(Mat<eT>& out, const subview<eT>& in)$/;"	f	class:subview
schur_product	lib/armadillo-9.800.2/docs.html	/^      <td style="vertical-align: top;"><a name="schur_product"><\/a>Schur product: element-wise multiplication of two objects<\/td>$/;"	a
search_hdf5_file	lib/armadillo-9.800.2/include/armadillo_bits/hdf5_misc.hpp	/^search_hdf5_file$/;"	f	namespace:hdf5_misc
secondArg	lib/armadillo-9.800.2/tests/catch.hpp	/^        char const * secondArg;$/;"	m	struct:Catch::AssertionInfo
seed_type	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^    typedef arma_rng_alt::seed_type   seed_type;$/;"	t	class:arma_rng
seed_type	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^  typedef std::mt19937_64::result_type seed_type;$/;"	t	class:arma_rng_cxx11
seed_type	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx98.hpp	/^  typedef unsigned int seed_type;$/;"	t	class:arma_rng_cxx98
select_iuc	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^select_iuc(const T* x_ptr, const T* y_ptr, const T* z_ptr)$/;"	f	namespace:qz_helper
select_lhp	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^select_lhp(const T* x_ptr, const T* y_ptr, const T* z_ptr)$/;"	f	namespace:qz_helper
select_ouc	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^select_ouc(const T* x_ptr, const T* y_ptr, const T* z_ptr)$/;"	f	namespace:qz_helper
select_rhp	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^select_rhp(const T* x_ptr, const T* y_ptr, const T* z_ptr)$/;"	f	namespace:qz_helper
set	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::set(const eT in_val)$/;"	f	class:SpMat_MapMat_val
set_cerr_stream	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^set_cerr_stream(std::ostream& user_stream)$/;"	f
set_cout_stream	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^set_cout_stream(std::ostream& user_stream)$/;"	f
set_dcovs	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::set_dcovs(const Base<eT,T1>& in_dcovs_expr)$/;"	f	class:gmm_priv::gmm_diag
set_default_opts	lib/armadillo-9.800.2/include/armadillo_bits/translate_superlu.hpp	/^  set_default_opts(superlu_options_t* opts)$/;"	f	namespace:superlu
set_fcovs	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::set_fcovs(const BaseCube<eT,T1>& in_fcovs_expr)$/;"	f	class:gmm_priv::gmm_full
set_hefts	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::set_hefts(const Base<eT,T1>& in_hefts_expr)$/;"	f	class:gmm_priv::gmm_diag
set_hefts	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::set_hefts(const Base<eT,T1>& in_hefts_expr)$/;"	f	class:gmm_priv::gmm_full
set_imag	lib/armadillo-9.800.2/docs.html	/^<a name="set_imag"><\/a>$/;"	a
set_imag	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::set_imag(const BaseCube<typename Cube<eT>::pod_type,T1>& X)$/;"	f	class:Cube
set_imag	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube_aux::set_imag(Cube< std::complex<T> >& out, const BaseCube<T,T1>& X)$/;"	f	class:Cube_aux
set_imag	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube_aux::set_imag(Cube<eT>&, const BaseCube<eT,T1>&)$/;"	f	class:Cube_aux
set_imag	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::set_imag(const Base<typename Mat<eT>::pod_type,T1>& X)$/;"	f	class:Mat
set_imag	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat_aux::set_imag(Mat< std::complex<T> >& out, const Base<T,T1>& X)$/;"	f	class:Mat_aux
set_imag	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat_aux::set_imag(Mat<eT>&, const Base<eT,T1>&)$/;"	f	class:Mat_aux
set_imag	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::set_imag(const SpBase<typename SpMat<eT>::pod_type,T1>& X)$/;"	f	class:SpMat
set_imag	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat_aux::set_imag(SpMat< std::complex<T> >& out, const SpBase<T,T1>& X)$/;"	f	class:SpMat_aux
set_imag	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat_aux::set_imag(SpMat<eT>&, const SpBase<eT,T1>&)$/;"	f	class:SpMat_aux
set_means	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::set_means(const Base<eT,T1>& in_means_expr)$/;"	f	class:gmm_priv::gmm_diag
set_means	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::set_means(const Base<eT,T1>& in_means_expr)$/;"	f	class:gmm_priv::gmm_full
set_min_size	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::set_min_size(const uword min_n_elem)$/;"	f	class:podarray
set_params	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::set_params(const Base<eT,T1>& in_means_expr, const Base<eT,T2>& in_dcovs_expr, const Base<eT,T3>& in_hefts_expr)$/;"	f	class:gmm_priv::gmm_diag
set_params	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::set_params(const Base<eT,T1>& in_means_expr, const BaseCube<eT,T2>& in_fcovs_expr, const Base<eT,T3>& in_hefts_expr)$/;"	f	class:gmm_priv::gmm_full
set_real	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::set_real(const BaseCube<typename Cube<eT>::pod_type,T1>& X)$/;"	f	class:Cube
set_real	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube_aux::set_real(Cube< std::complex<T> >& out, const BaseCube<T,T1>& X)$/;"	f	class:Cube_aux
set_real	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube_aux::set_real(Cube<eT>& out, const BaseCube<eT,T1>& X)$/;"	f	class:Cube_aux
set_real	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::set_real(const Base<typename Mat<eT>::pod_type,T1>& X)$/;"	f	class:Mat
set_real	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat_aux::set_real(Mat< std::complex<T> >& out, const Base<T,T1>& X)$/;"	f	class:Mat_aux
set_real	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat_aux::set_real(Mat<eT>& out, const Base<eT,T1>& X)$/;"	f	class:Mat_aux
set_real	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::set_real(const SpBase<typename SpMat<eT>::pod_type,T1>& X)$/;"	f	class:SpMat
set_real	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat_aux::set_real(SpMat< std::complex<T> >& out, const SpBase<T,T1>& X)$/;"	f	class:SpMat_aux
set_real	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat_aux::set_real(SpMat<eT>& out, const SpBase<eT,T1>& X)$/;"	f	class:SpMat_aux
set_seed	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^arma_rng::set_seed(const arma_rng::seed_type val)$/;"	f	class:arma_rng
set_seed	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^arma_rng_cxx11::set_seed(const arma_rng_cxx11::seed_type val)$/;"	f	class:arma_rng_cxx11
set_seed	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx98.hpp	/^arma_rng_cxx98::set_seed(const arma_rng_cxx98::seed_type val)$/;"	f	class:arma_rng_cxx98
set_seed_random	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng.hpp	/^arma_rng::set_seed_random()$/;"	f	class:arma_rng
set_size	lib/armadillo-9.800.2/docs.html	/^<a name="set_size"><\/a>$/;"	a
set_size	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::set_size(const SizeCube& s)$/;"	f	class:Cube
set_size	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::set_size(const uword in_n_rows, const uword in_n_cols, const uword in_n_slices)$/;"	f	class:Cube
set_size	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::set_size(const SizeMat& s)$/;"	f	class:MapMat
set_size	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::set_size(const uword in_n_rows)$/;"	f	class:MapMat
set_size	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::set_size(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:MapMat
set_size	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::set_size(const SizeMat& s)$/;"	f	class:Mat
set_size	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::set_size(const uword in_elem)$/;"	f	class:Mat
set_size	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::set_size(const uword in_rows, const uword in_cols)$/;"	f	class:Mat
set_size	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::set_size(const SizeMat& s)$/;"	f	class:SpMat
set_size	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::set_size(const uword in_elem)$/;"	f	class:SpMat
set_size	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::set_size(const uword in_rows, const uword in_cols)$/;"	f	class:SpMat
set_size	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::set_size(const SizeCube& s)$/;"	f	class:field
set_size	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::set_size(const SizeMat& s)$/;"	f	class:field
set_size	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::set_size(const uword n_elem_in)$/;"	f	class:field
set_size	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::set_size(const uword n_rows_in, const uword n_cols_in)$/;"	f	class:field
set_size	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::set_size(const uword n_rows_in, const uword n_cols_in, const uword n_slices_in)$/;"	f	class:field
set_size	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::set_size(const uword new_n_elem)$/;"	f	class:podarray
set_stream_err1	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^set_stream_err1(std::ostream& user_stream)$/;"	f
set_stream_err2	lib/armadillo-9.800.2/include/armadillo_bits/debug.hpp	/^set_stream_err2(std::ostream& user_stream)$/;"	f
set_superlu_opts	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^  sp_auxlib::set_superlu_opts(superlu::superlu_options_t& options, const superlu_opts& user_opts)$/;"	f	class:sp_auxlib
set_val	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::set_val(const uword index, const eT& in_val)$/;"	f	class:MapMat
seupd	lib/armadillo-9.800.2/include/armadillo_bits/translate_arpack.hpp	/^  seupd(blas_int* rvec, char* howmny, blas_int* select, eT* d, eT* z, blas_int* ldz, eT* sigma, char* bmat, blas_int* n, char* which, blas_int* nev, eT* tol, eT* resid, blas_int* ncv, eT* v, blas_int* ldv, blas_int* iparam, blas_int* ipntr, eT* workd, eT* workl, blas_int* lworkl, blas_int* info)$/;"	f	namespace:arpack
shed	lib/armadillo-9.800.2/docs.html	/^<a name="shed"><\/a>$/;"	a
shed_col	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::shed_col(const uword col_num)$/;"	f	class:Cube
shed_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::shed_col(const uword col_num)$/;"	f	class:Mat
shed_col	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::shed_col(const uword col_num)$/;"	f	class:Row
shed_col	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::shed_col(const uword col_num)$/;"	f	class:SpMat
shed_col	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::shed_col(const uword col_num)$/;"	f	class:SpRow
shed_cols	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::shed_cols(const uword in_col1, const uword in_col2)$/;"	f	class:Cube
shed_cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::shed_cols(const Base<uword, T1>& indices)$/;"	f	class:Mat
shed_cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::shed_cols(const uword in_col1, const uword in_col2)$/;"	f	class:Mat
shed_cols	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::shed_cols(const Base<uword, T1>& indices)$/;"	f	class:Row
shed_cols	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::shed_cols(const uword in_col1, const uword in_col2)$/;"	f	class:Row
shed_cols	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::shed_cols(const uword in_col1, const uword in_col2)$/;"	f	class:SpMat
shed_cols	lib/armadillo-9.800.2/include/armadillo_bits/SpRow_meat.hpp	/^SpRow<eT>::shed_cols(const uword in_col1, const uword in_col2)$/;"	f	class:SpRow
shed_row	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::shed_row(const uword row_num)$/;"	f	class:Col
shed_row	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::shed_row(const uword row_num)$/;"	f	class:Cube
shed_row	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::shed_row(const uword row_num)$/;"	f	class:Mat
shed_row	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::shed_row(const uword row_num)$/;"	f	class:SpCol
shed_row	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::shed_row(const uword row_num)$/;"	f	class:SpMat
shed_rows	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::shed_rows(const Base<uword, T1>& indices)$/;"	f	class:Col
shed_rows	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::shed_rows(const uword in_row1, const uword in_row2)$/;"	f	class:Col
shed_rows	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::shed_rows(const uword in_row1, const uword in_row2)$/;"	f	class:Cube
shed_rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::shed_rows(const Base<uword, T1>& indices)$/;"	f	class:Mat
shed_rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::shed_rows(const uword in_row1, const uword in_row2)$/;"	f	class:Mat
shed_rows	lib/armadillo-9.800.2/include/armadillo_bits/SpCol_meat.hpp	/^SpCol<eT>::shed_rows(const uword in_row1, const uword in_row2)$/;"	f	class:SpCol
shed_rows	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::shed_rows(const uword in_row1, const uword in_row2)$/;"	f	class:SpMat
shed_slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::shed_slice(const uword slice_num)$/;"	f	class:Cube
shed_slices	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::shed_slices(const Base<uword, T1>& indices)$/;"	f	class:Cube
shed_slices	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::shed_slices(const uword in_slice1, const uword in_slice2)$/;"	f	class:Cube
shift	lib/armadillo-9.800.2/docs.html	/^<a name="shift"><\/a>$/;"	a
shift	lib/armadillo-9.800.2/include/armadillo_bits/fn_shift.hpp	/^shift$/;"	f
shift_s	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_bones.hpp	/^  eT                  shift_s;  \/\/ Shift constant$/;"	m	class:newarp::DoubleShiftQR
shift_t	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_bones.hpp	/^  eT                  shift_t;  \/\/ Shift constant$/;"	m	class:newarp::DoubleShiftQR
shouldContinueOnFailure	lib/armadillo-9.800.2/tests/catch.hpp	/^    inline bool shouldContinueOnFailure( int flags )    { return ( flags & ResultDisposition::ContinueOnFailure ) != 0; }$/;"	f	namespace:Catch
shouldSuppressFailure	lib/armadillo-9.800.2/tests/catch.hpp	/^    inline bool shouldSuppressFailure( int flags )      { return ( flags & ResultDisposition::SuppressFail ) != 0; }$/;"	f	namespace:Catch
shuffle	lib/armadillo-9.800.2/docs.html	/^<a name="shuffle"><\/a>$/;"	a
shuffle	lib/armadillo-9.800.2/include/armadillo_bits/fn_shuffle.hpp	/^shuffle$/;"	f
shword	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef s16 shword;$/;"	t
shword	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef s32 shword;$/;"	t
sigma	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT sigma;     \/\/!< Stefan-Boltzmann constant$/;"	m	class:Datum
sigma	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::sigma     = eT(5.670367e-8);$/;"	m	class:Datum
sigma	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT sigma()     { return eT(5.670367e-8); }$/;"	f	class:Phy
sign	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^sign(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
sign	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^sign(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
sign	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^sign(const T1& A)$/;"	f
sign	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^sign(const eT x)$/;"	f
sin	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result sin   (const eT x) { return eT( std::sin  (double(x)) ); }$/;"	f	class:eop_aux
sin	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result sin   (const eT x) { return std::sin  (x); }$/;"	f	class:eop_aux
sin	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^sin(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
sin	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^sin(const T1& A)$/;"	f
sinc	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^sinc(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
sinc	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^sinc(const T x)$/;"	f
sinc	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^sinc(const T1& A)$/;"	f
sinh	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result sinh  (const eT x) { return eT( std::sinh (double(x)) ); }$/;"	f	class:eop_aux
sinh	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result sinh  (const eT x) { return std::sinh (x); }$/;"	f	class:eop_aux
sinh	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^sinh(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
sinh	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^sinh(const T1& A)$/;"	f
size	lib/armadillo-9.800.2/docs.html	/^<a name="size"><\/a>$/;"	a
size	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::size() const$/;"	f	class:Cube
size	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::size() const$/;"	f	class:Mat
size	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::size() const$/;"	f	class:SpMat
size	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::size() const$/;"	f	class:field
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const Base<typename T1::elem_type,T1>& X)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const Base<typename T1::elem_type,T1>& X, const uword dim)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const BaseCube<typename T1::elem_type, T1>& X)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const BaseCube<typename T1::elem_type, T1>& X, const uword dim)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const Col<eT>& X)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const Cube<eT>& X)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const Mat<eT>& X)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const Row<eT>& X)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const SpBase<typename T1::elem_type,T1>& X, const uword dim)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const SpMat<eT>& X)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const field<oT>& X)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const field<oT>& X, const uword dim)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const subview_field<oT>& X)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const subview_field<oT>& X, const uword dim)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const uword n_rows, const uword n_cols)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/fn_size.hpp	/^size(const uword n_rows, const uword n_cols, const uword n_slices)$/;"	f
size	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int   size;$/;"	m	struct:arma::superlu::__anon8
size	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int   size;$/;"	m	struct:arma::superlu::e_node
size_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  typedef uword size_type;$/;"	t	class:Mat
size_type	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^  typedef uword size_type;$/;"	t	class:field
sizer	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct FalseType { char sizer[2]; };$/;"	m	struct:Catch::Detail::FalseType
sizer	lib/armadillo-9.800.2/tests/catch.hpp	/^    struct TrueType { char sizer[1]; };$/;"	m	struct:Catch::Detail::TrueType
skip_pos	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    arma_aligned uword skip_pos; \/\/ not used in row_iterator or const_row_iterator$/;"	m	class:SpSubview::const_iterator
slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::slice(const uword in_slice) const$/;"	f	class:Cube
slice	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::slice(const uword in_slice)$/;"	f	class:Cube
slice	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::slice(const uword slice_num) const$/;"	f	class:field
slice	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::slice(const uword slice_num)$/;"	f	class:field
slice_colptr	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::slice_colptr(const uword uslice, const uword col) const$/;"	f	class:Cube
slice_colptr	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::slice_colptr(const uword uslice, const uword col)$/;"	f	class:Cube
slice_colptr	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::slice_colptr(const uword in_slice, const uword in_col) const$/;"	f	class:subview_cube
slice_colptr	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::slice_colptr(const uword in_slice, const uword in_col)$/;"	f	class:subview_cube
slice_iterator	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  typedef       eT*       slice_iterator;$/;"	t	class:Cube
slice_memptr	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::slice_memptr(const uword uslice) const$/;"	f	class:Cube
slice_memptr	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::slice_memptr(const uword uslice)$/;"	f	class:Cube
slices	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::slices(const Base<uword, T1>& indices) const$/;"	f	class:Cube
slices	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::slices(const Base<uword, T1>& indices)$/;"	f	class:Cube
slices	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::slices(const uword in_slice1, const uword in_slice2) const$/;"	f	class:Cube
slices	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::slices(const uword in_slice1, const uword in_slice2)$/;"	f	class:Cube
slices	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::slices(const uword in_slice1, const uword in_slice2) const$/;"	f	class:field
slices	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::slices(const uword in_slice1, const uword in_slice2)$/;"	f	class:field
slng_t	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^typedef          long slng_t;$/;"	t
soft_reset	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::soft_reset()$/;"	f	class:Cube
soft_reset	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::soft_reset()$/;"	f	class:Mat
solve	lib/armadillo-9.800.2/docs.html	/^<a name="solve"><\/a>$/;"	a
solve	lib/armadillo-9.800.2/include/armadillo_bits/fn_solve.hpp	/^solve$/;"	f
solve_approx_fast	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_approx_fast(Mat<typename T1::elem_type>& out, Mat<typename T1::elem_type>& A, const Base<typename T1::elem_type,T1>& B_expr)$/;"	f	class:auxlib
solve_approx_svd	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_approx_svd(Mat< std::complex<typename T1::pod_type> >& out, Mat< std::complex<typename T1::pod_type> >& A, const Base<std::complex<typename T1::pod_type>,T1>& B_expr)$/;"	f	class:auxlib
solve_approx_svd	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_approx_svd(Mat<typename T1::pod_type>& out, Mat<typename T1::pod_type>& A, const Base<typename T1::pod_type,T1>& B_expr)$/;"	f	class:auxlib
solve_band_fast	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_band_fast(Mat< std::complex<typename T1::pod_type> >& out, Mat< std::complex<typename T1::pod_type> >& A, const uword KL, const uword KU, const Base< std::complex<typename T1::pod_type>,T1>& B_expr)$/;"	f	class:auxlib
solve_band_fast	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_band_fast(Mat<typename T1::pod_type>& out, Mat<typename T1::pod_type>& A, const uword KL, const uword KU, const Base<typename T1::pod_type,T1>& B_expr)$/;"	f	class:auxlib
solve_band_fast_common	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_band_fast_common(Mat<typename T1::elem_type>& out, const Mat<typename T1::elem_type>& A, const uword KL, const uword KU, const Base<typename T1::elem_type,T1>& B_expr)$/;"	f	class:auxlib
solve_band_rcond	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_band_rcond(Mat< std::complex<typename T1::pod_type> >& out, typename T1::pod_type& out_rcond, Mat< std::complex<typename T1::pod_type> >& A, const uword KL, const uword KU, const Base< std::complex<typename T1::pod_type>,T1>& B_expr, const bool allow_ugly)$/;"	f	class:auxlib
solve_band_rcond	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_band_rcond(Mat<typename T1::pod_type>& out, typename T1::pod_type& out_rcond, Mat<typename T1::pod_type>& A, const uword KL, const uword KU, const Base<typename T1::pod_type,T1>& B_expr, const bool allow_ugly)$/;"	f	class:auxlib
solve_band_rcond_common	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_band_rcond_common(Mat<typename T1::elem_type>& out, typename T1::pod_type& out_rcond, const Mat<typename T1::elem_type>& A, const uword KL, const uword KU, const Base<typename T1::elem_type,T1>& B_expr, const bool allow_ugly)$/;"	f	class:auxlib
solve_band_refine	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_band_refine(Mat< std::complex<typename T1::pod_type> >& out, typename T1::pod_type& out_rcond, Mat< std::complex<typename T1::pod_type> >& A, const uword KL, const uword KU, const Base<std::complex<typename T1::pod_type>,T1>& B_expr, const bool equilibrate, const bool allow_ugly)$/;"	f	class:auxlib
solve_band_refine	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_band_refine(Mat<typename T1::pod_type>& out, typename T1::pod_type& out_rcond, Mat<typename T1::pod_type>& A, const uword KL, const uword KU, const Base<typename T1::pod_type,T1>& B_expr, const bool equilibrate, const bool allow_ugly)$/;"	f	class:auxlib
solve_opts	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^namespace solve_opts$/;"	n
solve_square_fast	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_square_fast(Mat<typename T1::elem_type>& out, Mat<typename T1::elem_type>& A, const Base<typename T1::elem_type,T1>& B_expr)$/;"	f	class:auxlib
solve_square_rcond	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_square_rcond(Mat<typename T1::elem_type>& out, typename T1::pod_type& out_rcond, Mat<typename T1::elem_type>& A, const Base<typename T1::elem_type,T1>& B_expr, const bool allow_ugly)$/;"	f	class:auxlib
solve_square_refine	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_square_refine(Mat< std::complex<typename T1::pod_type> >& out, typename T1::pod_type& out_rcond, Mat< std::complex<typename T1::pod_type> >& A, const Base<std::complex<typename T1::pod_type>,T1>& B_expr, const bool equilibrate, const bool allow_ugly)$/;"	f	class:auxlib
solve_square_refine	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_square_refine(Mat<typename T1::pod_type>& out, typename T1::pod_type& out_rcond, Mat<typename T1::pod_type>& A, const Base<typename T1::pod_type,T1>& B_expr, const bool equilibrate, const bool allow_ugly)$/;"	f	class:auxlib
solve_square_tiny	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_square_tiny(Mat<typename T1::elem_type>& out, const Mat<typename T1::elem_type>& A, const Base<typename T1::elem_type,T1>& B_expr)$/;"	f	class:auxlib
solve_sympd_fast	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_sympd_fast(Mat<typename T1::elem_type>& out, Mat<typename T1::elem_type>& A, const Base<typename T1::elem_type,T1>& B_expr)$/;"	f	class:auxlib
solve_sympd_fast_common	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_sympd_fast_common(Mat<typename T1::elem_type>& out, Mat<typename T1::elem_type>& A, const Base<typename T1::elem_type,T1>& B_expr)$/;"	f	class:auxlib
solve_sympd_rcond	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_sympd_rcond(Mat< std::complex<typename T1::pod_type> >& out, typename T1::pod_type& out_rcond, Mat< std::complex<typename T1::pod_type> >& A, const Base< std::complex<typename T1::pod_type>,T1>& B_expr, const bool allow_ugly)$/;"	f	class:auxlib
solve_sympd_rcond	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_sympd_rcond(Mat<typename T1::pod_type>& out, typename T1::pod_type& out_rcond, Mat<typename T1::pod_type>& A, const Base<typename T1::pod_type,T1>& B_expr, const bool allow_ugly)$/;"	f	class:auxlib
solve_sympd_refine	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_sympd_refine(Mat< std::complex<typename T1::pod_type> >& out, typename T1::pod_type& out_rcond, Mat< std::complex<typename T1::pod_type> >& A, const Base<std::complex<typename T1::pod_type>,T1>& B_expr, const bool equilibrate, const bool allow_ugly)$/;"	f	class:auxlib
solve_sympd_refine	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_sympd_refine(Mat<typename T1::pod_type>& out, typename T1::pod_type& out_rcond, Mat<typename T1::pod_type>& A, const Base<typename T1::pod_type,T1>& B_expr, const bool equilibrate, const bool allow_ugly)$/;"	f	class:auxlib
solve_tridiag_fast	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_tridiag_fast(Mat< std::complex<typename T1::pod_type> >& out, Mat< std::complex<typename T1::pod_type> >& A, const Base< std::complex<typename T1::pod_type>,T1>& B_expr)$/;"	f	class:auxlib
solve_tridiag_fast	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_tridiag_fast(Mat<typename T1::pod_type>& out, Mat<typename T1::pod_type>& A, const Base<typename T1::pod_type,T1>& B_expr)$/;"	f	class:auxlib
solve_tridiag_fast_common	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_tridiag_fast_common(Mat<typename T1::elem_type>& out, const Mat<typename T1::elem_type>& A, const Base<typename T1::elem_type,T1>& B_expr)$/;"	f	class:auxlib
solve_trimat_fast	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_trimat_fast(Mat<typename T1::elem_type>& out, const Mat<typename T1::elem_type>& A, const Base<typename T1::elem_type,T1>& B_expr, const uword layout)$/;"	f	class:auxlib
solve_trimat_rcond	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::solve_trimat_rcond(Mat<typename T1::elem_type>& out, typename T1::pod_type& out_rcond, const Mat<typename T1::elem_type>& A, const Base<typename T1::elem_type,T1>& B_expr, const uword layout, const bool allow_ugly)$/;"	f	class:auxlib
sort	lib/armadillo-9.800.2/docs.html	/^<a name="sort"><\/a>$/;"	a
sort	lib/armadillo-9.800.2/include/armadillo_bits/fn_sort.hpp	/^sort$/;"	f
sort_index	lib/armadillo-9.800.2/docs.html	/^<a name="sort_index"><\/a>$/;"	a
sort_index	lib/armadillo-9.800.2/include/armadillo_bits/fn_sort_index.hpp	/^sort_index$/;"	f
sort_ritzpair	lib/armadillo-9.800.2/include/armadillo_bits/newarp_GenEigsSolver_meat.hpp	/^GenEigsSolver<eT, SelectionRule, OpType>::sort_ritzpair()$/;"	f	class:newarp::GenEigsSolver
sort_ritzpair	lib/armadillo-9.800.2/include/armadillo_bits/newarp_SymEigsSolver_meat.hpp	/^SymEigsSolver<eT, SelectionRule, OpType>::sort_ritzpair()$/;"	f	class:newarp::SymEigsSolver
sp_auxlib	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_bones.hpp	/^class sp_auxlib$/;"	c
sp_colvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <double> sp_colvec;$/;"	t
sp_cx_colvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <cx_double> sp_cx_colvec;$/;"	t
sp_cx_dcolvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <cx_double> sp_cx_dcolvec;$/;"	t
sp_cx_dmat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpMat <cx_double> sp_cx_dmat;$/;"	t
sp_cx_drowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpRow <cx_double> sp_cx_drowvec;$/;"	t
sp_cx_dvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <cx_double> sp_cx_dvec;$/;"	t
sp_cx_fcolvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <cx_float> sp_cx_fcolvec;$/;"	t
sp_cx_fmat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpMat <cx_float> sp_cx_fmat;$/;"	t
sp_cx_frowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpRow <cx_float> sp_cx_frowvec;$/;"	t
sp_cx_fvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <cx_float> sp_cx_fvec;$/;"	t
sp_cx_mat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpMat <cx_double> sp_cx_mat;$/;"	t
sp_cx_rowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpRow <cx_double> sp_cx_rowvec;$/;"	t
sp_cx_vec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <cx_double> sp_cx_vec;$/;"	t
sp_dcolvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <double> sp_dcolvec;$/;"	t
sp_dmat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpMat <double> sp_dmat;$/;"	t
sp_drowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpRow <double> sp_drowvec;$/;"	t
sp_dvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <double> sp_dvec;$/;"	t
sp_fcolvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <float> sp_fcolvec;$/;"	t
sp_fmat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpMat <float> sp_fmat;$/;"	t
sp_frowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpRow <float> sp_frowvec;$/;"	t
sp_fvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <float> sp_fvec;$/;"	t
sp_icolvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <sword> sp_icolvec;$/;"	t
sp_imat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpMat <sword> sp_imat;$/;"	t
sp_irowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpRow <sword> sp_irowvec;$/;"	t
sp_ivec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <sword> sp_ivec;$/;"	t
sp_mat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpMat <double> sp_mat;$/;"	t
sp_rowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpRow <double> sp_rowvec;$/;"	t
sp_ucolvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <uword> sp_ucolvec;$/;"	t
sp_umat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpMat <uword> sp_umat;$/;"	t
sp_urowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpRow <uword> sp_urowvec;$/;"	t
sp_uvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <uword> sp_uvec;$/;"	t
sp_vec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef SpCol <double> sp_vec;$/;"	t
span	lib/armadillo-9.800.2/include/armadillo_bits/span.hpp	/^  span()$/;"	f	class:span
span	lib/armadillo-9.800.2/include/armadillo_bits/span.hpp	/^  span(const span_alt&)$/;"	f	class:span
span	lib/armadillo-9.800.2/include/armadillo_bits/span.hpp	/^  span(const uword in_a)$/;"	f	class:span
span	lib/armadillo-9.800.2/include/armadillo_bits/span.hpp	/^  span(const uword in_a, const uword in_b)$/;"	f	class:span
span	lib/armadillo-9.800.2/include/armadillo_bits/span.hpp	/^class span : public span_base<>$/;"	c
span_alt	lib/armadillo-9.800.2/include/armadillo_bits/span.hpp	/^struct span_alt {};$/;"	s
span_base	lib/armadillo-9.800.2/include/armadillo_bits/span.hpp	/^class span_base$/;"	c
sparse_minus_dense	lib/armadillo-9.800.2/include/armadillo_bits/spglue_minus_meat.hpp	/^spglue_minus_mixed::sparse_minus_dense(Mat< typename promote_type<typename T1::elem_type, typename T2::elem_type >::result>& out, const T1& X, const T2& Y)$/;"	f	class:spglue_minus_mixed
sparse_times_dense	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_meat.hpp	/^spglue_times_misc::sparse_times_dense(Mat<typename T1::elem_type>& out, const T1& x, const T2& y)$/;"	f	class:spglue_times_misc
sparse_times_dense	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_meat.hpp	/^spglue_times_mixed::sparse_times_dense(Mat< typename promote_type<typename T1::elem_type, typename T2::elem_type>::result >& out, const T1& X, const T2& Y)$/;"	f	class:spglue_times_mixed
spdiagview	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_bones.hpp	/^class spdiagview : public SpBase<eT, spdiagview<eT> >$/;"	c
spdiagview	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::spdiagview(const SpMat<eT>& in_m, const uword in_row_offset, const uword in_col_offset, const uword in_len)$/;"	f	class:spdiagview
speye	lib/armadillo-9.800.2/docs.html	/^<a name="speye"><\/a>$/;"	a
speye	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::speye()$/;"	f	class:MapMat
speye	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::speye(const SizeMat& s)$/;"	f	class:MapMat
speye	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::speye(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:MapMat
speye	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::speye()$/;"	f	class:SpMat
speye	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::speye(const SizeMat& s)$/;"	f	class:SpMat
speye	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::speye(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:SpMat
speye	lib/armadillo-9.800.2/include/armadillo_bits/fn_speye.hpp	/^speye(const SizeMat& s)$/;"	f
speye	lib/armadillo-9.800.2/include/armadillo_bits/fn_speye.hpp	/^speye(const SizeMat& s, const typename arma_SpMat_SpCol_SpRow_only<obj_type>::result* junk = NULL)$/;"	f
speye	lib/armadillo-9.800.2/include/armadillo_bits/fn_speye.hpp	/^speye(const uword n_rows, const uword n_cols)$/;"	f
speye	lib/armadillo-9.800.2/include/armadillo_bits/fn_speye.hpp	/^speye(const uword n_rows, const uword n_cols, const typename arma_SpMat_SpCol_SpRow_only<obj_type>::result* junk = NULL)$/;"	f
spglue_elem_helper	lib/armadillo-9.800.2/include/armadillo_bits/spglue_elem_helper_bones.hpp	/^class spglue_elem_helper$/;"	c
spglue_join_cols	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_bones.hpp	/^class spglue_join_cols$/;"	c
spglue_join_rows	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_bones.hpp	/^class spglue_join_rows$/;"	c
spglue_kron	lib/armadillo-9.800.2/include/armadillo_bits/spglue_kron_bones.hpp	/^class spglue_kron$/;"	c
spglue_max	lib/armadillo-9.800.2/include/armadillo_bits/spglue_max_bones.hpp	/^class spglue_max$/;"	c
spglue_merge	lib/armadillo-9.800.2/include/armadillo_bits/spglue_merge_bones.hpp	/^class spglue_merge$/;"	c
spglue_min	lib/armadillo-9.800.2/include/armadillo_bits/spglue_min_bones.hpp	/^class spglue_min$/;"	c
spglue_minus	lib/armadillo-9.800.2/include/armadillo_bits/spglue_minus_bones.hpp	/^class spglue_minus$/;"	c
spglue_minus_mixed	lib/armadillo-9.800.2/include/armadillo_bits/spglue_minus_bones.hpp	/^class spglue_minus_mixed$/;"	c
spglue_plus	lib/armadillo-9.800.2/include/armadillo_bits/spglue_plus_bones.hpp	/^class spglue_plus$/;"	c
spglue_plus_mixed	lib/armadillo-9.800.2/include/armadillo_bits/spglue_plus_bones.hpp	/^class spglue_plus_mixed$/;"	c
spglue_rel_gt	lib/armadillo-9.800.2/include/armadillo_bits/spglue_relational_bones.hpp	/^class spglue_rel_gt$/;"	c
spglue_rel_lt	lib/armadillo-9.800.2/include/armadillo_bits/spglue_relational_bones.hpp	/^class spglue_rel_lt$/;"	c
spglue_schur	lib/armadillo-9.800.2/include/armadillo_bits/spglue_schur_bones.hpp	/^class spglue_schur$/;"	c
spglue_schur_misc	lib/armadillo-9.800.2/include/armadillo_bits/spglue_schur_bones.hpp	/^class spglue_schur_misc$/;"	c
spglue_schur_mixed	lib/armadillo-9.800.2/include/armadillo_bits/spglue_schur_bones.hpp	/^class spglue_schur_mixed$/;"	c
spglue_times	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^class spglue_times$/;"	c
spglue_times_misc	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^class spglue_times_misc$/;"	c
spglue_times_mixed	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^class spglue_times_mixed$/;"	c
spones	lib/armadillo-9.800.2/docs.html	/^<a name="spones"><\/a>$/;"	a
spones	lib/armadillo-9.800.2/include/armadillo_bits/fn_spones.hpp	/^spones(const SpBase<typename T1::elem_type, T1>& X)$/;"	f
spop_abs	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_abs$/;"	c
spop_arg	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_arg$/;"	c
spop_ceil	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_ceil$/;"	c
spop_conj	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_conj$/;"	c
spop_cx_abs	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_cx_abs$/;"	c
spop_cx_arg	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_cx_arg$/;"	c
spop_cx_scalar_times	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_cx_scalar_times$/;"	c
spop_diagmat	lib/armadillo-9.800.2/include/armadillo_bits/spop_diagmat_bones.hpp	/^class spop_diagmat$/;"	c
spop_diagmat2	lib/armadillo-9.800.2/include/armadillo_bits/spop_diagmat_bones.hpp	/^class spop_diagmat2$/;"	c
spop_diagvec	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_diagvec$/;"	c
spop_fliplr	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_fliplr$/;"	c
spop_flipud	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_flipud$/;"	c
spop_floor	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_floor$/;"	c
spop_htrans	lib/armadillo-9.800.2/include/armadillo_bits/spop_htrans_bones.hpp	/^class spop_htrans$/;"	c
spop_imag	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_imag$/;"	c
spop_max	lib/armadillo-9.800.2/include/armadillo_bits/spop_max_bones.hpp	/^class spop_max$/;"	c
spop_mean	lib/armadillo-9.800.2/include/armadillo_bits/spop_mean_bones.hpp	/^class spop_mean$/;"	c
spop_min	lib/armadillo-9.800.2/include/armadillo_bits/spop_min_bones.hpp	/^class spop_min$/;"	c
spop_normalise	lib/armadillo-9.800.2/include/armadillo_bits/spop_normalise_bones.hpp	/^class spop_normalise$/;"	c
spop_real	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_real$/;"	c
spop_repelem	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_repelem$/;"	c
spop_repmat	lib/armadillo-9.800.2/include/armadillo_bits/spop_repmat_bones.hpp	/^class spop_repmat$/;"	c
spop_reshape	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_reshape$/;"	c
spop_resize	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_resize$/;"	c
spop_reverse	lib/armadillo-9.800.2/include/armadillo_bits/spop_reverse_bones.hpp	/^class spop_reverse$/;"	c
spop_round	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_round$/;"	c
spop_scalar_times	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_scalar_times$/;"	c
spop_sign	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_sign$/;"	c
spop_sqrt	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_sqrt$/;"	c
spop_square	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_square$/;"	c
spop_strans	lib/armadillo-9.800.2/include/armadillo_bits/spop_strans_bones.hpp	/^class spop_strans$/;"	c
spop_sum	lib/armadillo-9.800.2/include/armadillo_bits/spop_sum_bones.hpp	/^class spop_sum$/;"	c
spop_symmat	lib/armadillo-9.800.2/include/armadillo_bits/spop_symmat_bones.hpp	/^class spop_symmat$/;"	c
spop_symmat_cx	lib/armadillo-9.800.2/include/armadillo_bits/spop_symmat_bones.hpp	/^class spop_symmat_cx$/;"	c
spop_trimat	lib/armadillo-9.800.2/include/armadillo_bits/spop_trimat_bones.hpp	/^class spop_trimat$/;"	c
spop_trunc	lib/armadillo-9.800.2/include/armadillo_bits/spop_misc_bones.hpp	/^class spop_trunc$/;"	c
spop_var	lib/armadillo-9.800.2/include/armadillo_bits/spop_var_bones.hpp	/^class spop_var$/;"	c
spop_vectorise_all	lib/armadillo-9.800.2/include/armadillo_bits/spop_vectorise_bones.hpp	/^class spop_vectorise_all$/;"	c
spop_vectorise_col	lib/armadillo-9.800.2/include/armadillo_bits/spop_vectorise_bones.hpp	/^class spop_vectorise_col$/;"	c
spop_vectorise_row	lib/armadillo-9.800.2/include/armadillo_bits/spop_vectorise_bones.hpp	/^class spop_vectorise_row$/;"	c
sprandn	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::sprandn(const SizeMat& s, const double density)$/;"	f	class:SpMat
sprandn	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::sprandn(const uword in_rows, const uword in_cols, const double density)$/;"	f	class:SpMat
sprandn	lib/armadillo-9.800.2/include/armadillo_bits/fn_sprandn.hpp	/^sprandn$/;"	f
sprandn	lib/armadillo-9.800.2/include/armadillo_bits/fn_sprandn.hpp	/^sprandn(const SizeMat& s, const double density)$/;"	f
sprandn	lib/armadillo-9.800.2/include/armadillo_bits/fn_sprandn.hpp	/^sprandn(const SizeMat& s, const double density, const typename arma_SpMat_SpCol_SpRow_only<obj_type>::result* junk = 0)$/;"	f
sprandn	lib/armadillo-9.800.2/include/armadillo_bits/fn_sprandn.hpp	/^sprandn(const SpBase<typename T1::elem_type, T1>& X)$/;"	f
sprandn	lib/armadillo-9.800.2/include/armadillo_bits/fn_sprandn.hpp	/^sprandn(const uword n_rows, const uword n_cols, const double density)$/;"	f
sprandu	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::sprandu(const uword in_n_rows, const uword in_n_cols, const double density)$/;"	f	class:MapMat
sprandu	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::sprandu(const SizeMat& s, const double density)$/;"	f	class:SpMat
sprandu	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::sprandu(const uword in_rows, const uword in_cols, const double density)$/;"	f	class:SpMat
sprandu	lib/armadillo-9.800.2/include/armadillo_bits/fn_sprandu.hpp	/^sprandu$/;"	f
sprandu	lib/armadillo-9.800.2/include/armadillo_bits/fn_sprandu.hpp	/^sprandu(const SizeMat& s, const double density)$/;"	f
sprandu	lib/armadillo-9.800.2/include/armadillo_bits/fn_sprandu.hpp	/^sprandu(const SizeMat& s, const double density, const typename arma_SpMat_SpCol_SpRow_only<obj_type>::result* junk = 0)$/;"	f
sprandu	lib/armadillo-9.800.2/include/armadillo_bits/fn_sprandu.hpp	/^sprandu(const SpBase<typename T1::elem_type, T1>& X)$/;"	f
sprandu	lib/armadillo-9.800.2/include/armadillo_bits/fn_sprandu.hpp	/^sprandu(const uword n_rows, const uword n_cols, const double density)$/;"	f
sprandu_sprandn	lib/armadillo-9.800.2/docs.html	/^<a name="sprandu_sprandn"><\/a>$/;"	a
spsolve	lib/armadillo-9.800.2/docs.html	/^<a name="spsolve"><\/a>$/;"	a
spsolve	lib/armadillo-9.800.2/include/armadillo_bits/fn_spsolve.hpp	/^spsolve$/;"	f
spsolve_helper	lib/armadillo-9.800.2/include/armadillo_bits/fn_spsolve.hpp	/^spsolve_helper$/;"	f
spsolve_opts_base	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  inline spsolve_opts_base(const unsigned int in_id) : id(in_id) {}$/;"	f	struct:spsolve_opts_base
spsolve_opts_base	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct spsolve_opts_base$/;"	s
spsolve_opts_none	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  inline spsolve_opts_none() : spsolve_opts_base(0) {}$/;"	f	struct:spsolve_opts_none
spsolve_opts_none	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct spsolve_opts_none : public spsolve_opts_base$/;"	s
spsolve_refine	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^sp_auxlib::spsolve_refine(Mat<typename T1::elem_type>& X, typename T1::pod_type& out_rcond, const SpBase<typename T1::elem_type, T1>& A_expr, const Base<typename T1::elem_type, T2>& B_expr, const superlu_opts& user_opts)$/;"	f	class:sp_auxlib
spsolve_simple	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^sp_auxlib::spsolve_simple(Mat<typename T1::elem_type>& X, const SpBase<typename T1::elem_type, T1>& A_expr, const Base<typename T1::elem_type, T2>& B_expr, const superlu_opts& user_opts)$/;"	f	class:sp_auxlib
sqrt	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result sqrt  (const eT x) { return eT( std::sqrt (double(x)) ); }$/;"	f	class:eop_aux
sqrt	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result sqrt  (const eT x) { return std::sqrt (x); }$/;"	f	class:eop_aux
sqrt	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^sqrt(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
sqrt	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^sqrt(const SpBase<typename T1::elem_type,T1>& A)$/;"	f
sqrt	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^sqrt(const T1& A)$/;"	f
sqrt2	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT sqrt2;    \/\/!< square root of 2$/;"	m	class:Datum
sqrt2	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::sqrt2     = eT(1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727);$/;"	m	class:Datum
sqrt2	lib/armadillo-9.800.2/include/armadillo_bits/constants_old.hpp	/^  arma_deprecated static eT sqrt2()     { return eT(1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727); }  \/\/ use datum::sqrt2 instead$/;"	f	class:Math
sqrt2pi	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^  static const eT sqrt2pi;  \/\/!< square root of 2*pi$/;"	m	class:Datum
sqrt2pi	lib/armadillo-9.800.2/include/armadillo_bits/constants.hpp	/^template<typename eT> const eT Datum<eT>::sqrt2pi   = eT(2.5066282746310005024157652848110452530069867406099383166299235763422936546078419749465958383780572661);$/;"	m	class:Datum
sqrtmat	lib/armadillo-9.800.2/docs.html	/^<a name="sqrtmat"><\/a>$/;"	a
sqrtmat	lib/armadillo-9.800.2/include/armadillo_bits/fn_sqrtmat.hpp	/^sqrtmat(Mat< std::complex<typename T1::elem_type> >& Y, const Base<typename T1::elem_type,T1>& X)$/;"	f
sqrtmat	lib/armadillo-9.800.2/include/armadillo_bits/fn_sqrtmat.hpp	/^sqrtmat(Mat<typename T1::elem_type>& Y, const Base<typename T1::elem_type,T1>& X)$/;"	f
sqrtmat	lib/armadillo-9.800.2/include/armadillo_bits/fn_sqrtmat.hpp	/^sqrtmat(const Base<typename T1::elem_type,T1>& X)$/;"	f
sqrtmat_sympd	lib/armadillo-9.800.2/docs.html	/^<a name="sqrtmat_sympd"><\/a>$/;"	a
sqrtmat_sympd	lib/armadillo-9.800.2/include/armadillo_bits/fn_sqrtmat.hpp	/^sqrtmat_sympd(Mat<typename T1::elem_type>& Y, const Base<typename T1::elem_type,T1>& X)$/;"	f
sqrtmat_sympd	lib/armadillo-9.800.2/include/armadillo_bits/fn_sqrtmat.hpp	/^sqrtmat_sympd(const Base<typename T1::elem_type,T1>& X)$/;"	f
square	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^square(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
square	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^square(const SpBase<typename T1::elem_type,T1>& A)$/;"	f
square	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^square(const T1& A)$/;"	f
src	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  const Col<eT>&        src;$/;"	m	class:Proxy
src	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  const Row<eT>&        src;$/;"	m	class:Proxy
src	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  const subview_col<eT>& src;$/;"	m	class:Proxy
st	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base_trans_cx<derived>::st() const$/;"	f	class:Base_trans_cx
st	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base_trans_default<derived>::st() const$/;"	f	class:Base_trans_default
st	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::st() const$/;"	f	class:Col::fixed
st	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::st() const$/;"	f	class:Col
st	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::st() const$/;"	f	class:Mat::fixed
st	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::st() const$/;"	f	class:Row::fixed
st	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::st() const$/;"	f	class:Row
st	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::st() const$/;"	f	class:SpBase
st	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::st() const$/;"	f	class:diagview
st	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::st() const$/;"	f	class:subview_elem1
st	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::st() const$/;"	f	class:subview_col
st	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::st() const$/;"	f	class:subview_row
stable_sort_index	lib/armadillo-9.800.2/include/armadillo_bits/fn_sort_index.hpp	/^stable_sort_index$/;"	f
stack	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    LU_stack_t stack;$/;"	m	struct:arma::superlu::__anon9
state	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^                int  state;$/;"	m	struct:state_type
state	lib/armadillo-9.800.2/include/armadillo_bits/distr_param.hpp	/^  uword state;$/;"	m	class:distr_param
state_type	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  arma_inline state_type() : state(int(0)) {}$/;"	f	struct:state_type
state_type	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct state_type$/;"	s
static_spread	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^static const gmm_seed_static_spread static_spread;$/;"	v
static_subset	lib/armadillo-9.800.2/include/armadillo_bits/gmm_misc_bones.hpp	/^static const gmm_seed_static_subset static_subset;$/;"	v
stats_fns	lib/armadillo-9.800.2/docs.html	/^<a name="stats_fns"><\/a>$/;"	a
stddev	lib/armadillo-9.800.2/include/armadillo_bits/fn_stddev.hpp	/^stddev(const T&)$/;"	f
stddev	lib/armadillo-9.800.2/include/armadillo_bits/fn_stddev.hpp	/^stddev(const T1& X, const uword norm_type = 0)$/;"	f
stddev	lib/armadillo-9.800.2/include/armadillo_bits/fn_stddev.hpp	/^stddev(const T1& X, const uword norm_type, const uword dim)$/;"	f
stddev	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat<eT>::stddev(const uword norm_type) const$/;"	f	class:running_stat
stddev	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::stddev(const uword norm_type) const$/;"	f	class:running_stat_vec
steal_mem	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::steal_mem(Cube<eT>& x)$/;"	f	class:Cube
steal_mem	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::steal_mem(Mat<eT>& x)$/;"	f	class:Mat
steal_mem	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::steal_mem(SpMat<eT>& x)$/;"	f	class:SpMat
steal_mem_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::steal_mem_col(Mat<eT>& x, const uword max_n_rows)$/;"	f	class:Mat
steal_mem_simple	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::steal_mem_simple(SpMat<eT>& x)$/;"	f	class:SpMat
stedc	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  stedc(char* compz, blas_int* n, eT* d, eT* e, eT* z, blas_int* ldz, eT* work, blas_int* lwork, blas_int* iwork, blas_int* liwork, blas_int* info)$/;"	f	namespace:lapack
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef          Mat<out_eT>                  stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef          Op<T1, op_vectorise_col>        stored_type;$/;"	t	class:Proxy_vectorise_col_expr
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef       eOp< Op<T1, op_htrans>, eop_scalar_times>  stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef Col<eT>                                  stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef Gen<T1, gen_type>                        stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef Mat<eT>                                  stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef Mat<elem_type>                           stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef Mat<elem_type>                           stored_type;$/;"	t	class:Proxy_diagvec_expr
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef Mat<elem_type>                           stored_type;$/;"	t	class:Proxy_vectorise_col_mat
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef Mat<elem_type>                           stored_type;$/;"	t	struct:Proxy_xtrans_vector
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef Row<eT>                                  stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef T1                                       stored_type;$/;"	t	struct:Proxy_fixed
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef diagview<eT>                             stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef diagview<elem_type>                      stored_type;$/;"	t	class:Proxy_diagvec_mat
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef eGlue<T1, T2, eglue_type>                stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef eOp<T1, eop_type>                        stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef subview<eT>                              stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef subview_col<eT>                          stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef subview_elem1<eT,T1>                     stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef subview_row<eT>                          stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef subview_row_htrans<eT>                   stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef subview_row_htrans<eT>            stored_type;$/;"	t	struct:Proxy_subview_row_htrans_cx
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef subview_row_strans<eT>                   stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef subview_row_strans<eT>            stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef subview_row_strans<eT>            stored_type;$/;"	t	struct:Proxy_subview_row_htrans_non_cx
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename Proxy_sv_row_ht::stored_type stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef typename Proxy_xtrans::stored_type     stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef xtrans_mat<elem_type,false>              stored_type;$/;"	t	struct:Proxy_xtrans_default
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef xtrans_mat<elem_type,true>               stored_type;$/;"	t	struct:Proxy_xtrans_default
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  typedef xvec_htrans<eT>           stored_type;$/;"	t	class:Proxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef          Cube<out_eT>                 stored_type;$/;"	t	class:ProxyCube
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef Cube<eT>                                 stored_type;$/;"	t	class:ProxyCube
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef Cube<elem_type>                          stored_type;$/;"	t	class:ProxyCube
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef GenCube<eT, gen_type>                    stored_type;$/;"	t	class:ProxyCube
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef eGlueCube<T1, T2, eglue_type>            stored_type;$/;"	t	class:ProxyCube
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef eOpCube<T1, eop_type>                    stored_type;$/;"	t	class:ProxyCube
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  typedef subview_cube<eT>                         stored_type;$/;"	t	class:ProxyCube
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef SpCol<eT>                                stored_type;$/;"	t	class:SpProxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef SpMat<eT>                                stored_type;$/;"	t	class:SpProxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef SpMat<out_eT>                            stored_type;$/;"	t	class:SpProxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef SpRow<eT>                                stored_type;$/;"	t	class:SpProxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  typedef SpSubview<eT>                                stored_type;$/;"	t	class:SpProxy
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  typedef T1 stored_type;$/;"	t	struct:strip_diagmat
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  typedef T1 stored_type;$/;"	t	struct:strip_inv
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  typedef T1 stored_type;$/;"	t	struct:strip_trimat
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Col<eT> stored_type;$/;"	t	struct:partial_unwrap
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Col<eT> stored_type;$/;"	t	struct:partial_unwrap_check
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Col<eT> stored_type;$/;"	t	struct:unwrap
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Col<eT> stored_type;$/;"	t	struct:unwrap_check
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT>                stored_type;$/;"	t	struct:partial_unwrap_check_default
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT>                stored_type;$/;"	t	struct:partial_unwrap_check_htrans2_default
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT>                stored_type;$/;"	t	struct:partial_unwrap_check_htrans_default
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT>                stored_type;$/;"	t	struct:partial_unwrap_check_neg_default
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT>                stored_type;$/;"	t	struct:partial_unwrap_check_scalar_times_default
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT>                stored_type;$/;"	t	struct:partial_unwrap_default
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT>                stored_type;$/;"	t	struct:partial_unwrap_htrans2_default
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT>                stored_type;$/;"	t	struct:partial_unwrap_htrans_default
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT>                stored_type;$/;"	t	struct:partial_unwrap_neg_default
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT>                stored_type;$/;"	t	struct:partial_unwrap_scalar_times_default
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT>                stored_type;$/;"	t	struct:unwrap_check_default
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT>                stored_type;$/;"	t	struct:unwrap_default
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT> stored_type;$/;"	t	struct:partial_unwrap
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT> stored_type;$/;"	t	struct:partial_unwrap_check
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT> stored_type;$/;"	t	struct:unwrap
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<eT> stored_type;$/;"	t	struct:unwrap_check
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Mat<out_eT> stored_type;$/;"	t	struct:unwrap
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Row<eT> stored_type;$/;"	t	struct:partial_unwrap
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Row<eT> stored_type;$/;"	t	struct:partial_unwrap_check
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Row<eT> stored_type;$/;"	t	struct:unwrap
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef Row<eT> stored_type;$/;"	t	struct:unwrap_check
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef T1                     stored_type;$/;"	t	struct:partial_unwrap_check_fixed
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef T1                     stored_type;$/;"	t	struct:partial_unwrap_check_htrans2_fixed
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef T1                     stored_type;$/;"	t	struct:partial_unwrap_check_htrans_fixed
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef T1                     stored_type;$/;"	t	struct:partial_unwrap_check_neg_fixed
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef T1                     stored_type;$/;"	t	struct:partial_unwrap_check_scalar_times_fixed
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef T1                     stored_type;$/;"	t	struct:partial_unwrap_fixed
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef T1                     stored_type;$/;"	t	struct:partial_unwrap_htrans2_fixed
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef T1                     stored_type;$/;"	t	struct:partial_unwrap_htrans_fixed
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef T1                     stored_type;$/;"	t	struct:partial_unwrap_neg_fixed
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef T1                     stored_type;$/;"	t	struct:partial_unwrap_scalar_times_fixed
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef T1                     stored_type;$/;"	t	struct:unwrap_check_fixed
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  typedef T1 stored_type;$/;"	t	struct:unwrap_fixed
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  typedef SpCol<eT> stored_type;$/;"	t	struct:unwrap_spmat
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  typedef SpMat<eT> stored_type;$/;"	t	struct:unwrap_spmat
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  typedef SpMat<out_eT> stored_type;$/;"	t	struct:unwrap_spmat
stored_type	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  typedef SpRow<eT> stored_type;$/;"	t	struct:unwrap_spmat
str	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  str(const basic_format< basic_format< basic_format< basic_format< basic_format< basic_format< format, T2>, T3>, T4>, T5>, T6>, T7>& X)$/;"	f	namespace:arma_str
str	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  str(const basic_format< basic_format< basic_format< basic_format< basic_format< format, T2>, T3>, T4>, T5>, T6>& X)$/;"	f	namespace:arma_str
str	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  str(const basic_format< basic_format< basic_format< basic_format< format, T2>, T3>, T4>, T5>& X)$/;"	f	namespace:arma_str
str	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  str(const basic_format< basic_format< basic_format< format, T2>, T3>, T4>& X)$/;"	f	namespace:arma_str
str	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  str(const basic_format< basic_format< format, T2>, T3>& X)$/;"	f	namespace:arma_str
str	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  str(const basic_format< format, T2>& X)$/;"	f	namespace:arma_str
str	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  str(const basic_format<T1,T2>& X)$/;"	f	namespace:arma_str
str_wrapper	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  str_wrapper(const T1& x, const typename basic_format_only<T1>::result* junk = 0)$/;"	f	namespace:arma_str
str_wrapper	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  str_wrapper(const T1& x, const typename string_only<T1>::result* junk = 0)$/;"	f	namespace:arma_str
str_wrapper	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  str_wrapper(const T1* x, const typename char_only<T1>::result* junk = 0)$/;"	f	namespace:arma_str
strans	lib/armadillo-9.800.2/include/armadillo_bits/fn_strans.hpp	/^strans$/;"	f
stream	lib/armadillo-9.800.2/tests/catch.hpp	/^        CopyableStream &stream()$/;"	f	class:Catch::ResultBuilder
string	include/catch.hpp	/^        auto str() const -> std::string;$/;"	m	class:Catch::ReusableStringStream::std
string	include/catch.hpp	/^    auto operator += ( std::string& lhs, StringRef const& sr ) -> std::string&;$/;"	m	class:Catch::std
string_only	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  template<>           struct string_only<std::string> { typedef std::string result; };$/;"	s	namespace:arma_str
string_only	lib/armadillo-9.800.2/include/armadillo_bits/arma_str.hpp	/^  template<typename T> struct string_only              { };$/;"	s	namespace:arma_str
stringify	include/catch.hpp	/^        inline std::string stringify( NSString* nsstring ) {$/;"	f	namespace:Catch::Detail
stringify	include/catch.hpp	/^        std::string stringify(const T& e) {$/;"	f	namespace:Catch::Detail
strip_diagmat	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  strip_diagmat(const Op<T1, op_diagmat>& X)$/;"	f	struct:strip_diagmat
strip_diagmat	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  strip_diagmat(const T1& X)$/;"	f	struct:strip_diagmat
strip_diagmat	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^struct strip_diagmat$/;"	s
strip_diagmat	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^struct strip_diagmat< Op<T1, op_diagmat> >$/;"	s
strip_inv	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  strip_inv(const Op<T1, op_inv>& X)$/;"	f	struct:strip_inv
strip_inv	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  strip_inv(const Op<T1, op_inv_sympd>& X)$/;"	f	struct:strip_inv
strip_inv	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  strip_inv(const T1& X)$/;"	f	struct:strip_inv
strip_inv	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^struct strip_inv$/;"	s
strip_inv	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^struct strip_inv< Op<T1, op_inv> >$/;"	s
strip_inv	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^struct strip_inv< Op<T1, op_inv_sympd> >$/;"	s
strip_trimat	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  strip_trimat(const Op<T1, op_trimat>& X)$/;"	f	struct:strip_trimat
strip_trimat	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^  strip_trimat(const T1& X)$/;"	f	struct:strip_trimat
strip_trimat	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^struct strip_trimat$/;"	s
strip_trimat	lib/armadillo-9.800.2/include/armadillo_bits/strip.hpp	/^struct strip_trimat< Op<T1, op_trimat> >$/;"	s
sub	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^SpMat_MapMat_val<eT>::sub(const eT in_val)$/;"	f	class:SpMat_MapMat_val
sub2ind	lib/armadillo-9.800.2/docs.html	/^<a name="sub2ind"><\/a>$/;"	a
sub2ind	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^sub2ind(const SizeCube& s, const Base<uword,T1>& subscripts)$/;"	f
sub2ind	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^sub2ind(const SizeCube& s, const uword row, const uword col, const uword slice)$/;"	f
sub2ind	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^sub2ind(const SizeMat& s, const Base<uword,T1>& subscripts)$/;"	f
sub2ind	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^sub2ind(const SizeMat& s, const uword row, const uword col)$/;"	f
sub_diag	lib/armadillo-9.800.2/include/armadillo_bits/newarp_TridiagEigen_bones.hpp	/^  Col<eT>  sub_diag;   \/\/ Sub-diagonal elements of the matrix$/;"	m	class:newarp::TridiagEigen
subcube	lib/armadillo-9.800.2/docs.html	/^<a name="subcube"><\/a>$/;"	a
subcube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::subcube(const span& row_span, const span& col_span, const span& slice_span) const$/;"	f	class:Cube
subcube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::subcube(const span& row_span, const span& col_span, const span& slice_span)$/;"	f	class:Cube
subcube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::subcube(const uword in_row1, const uword in_col1, const uword in_slice1, const SizeCube& s) const$/;"	f	class:Cube
subcube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::subcube(const uword in_row1, const uword in_col1, const uword in_slice1, const SizeCube& s)$/;"	f	class:Cube
subcube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::subcube(const uword in_row1, const uword in_col1, const uword in_slice1, const uword in_row2, const uword in_col2, const uword in_slice2) const$/;"	f	class:Cube
subcube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::subcube(const uword in_row1, const uword in_col1, const uword in_slice1, const uword in_row2, const uword in_col2, const uword in_slice2)$/;"	f	class:Cube
subfield	lib/armadillo-9.800.2/docs.html	/^<a name="subfield"><\/a>$/;"	a
subfield	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::subfield(const span& row_span, const span& col_span) const$/;"	f	class:field
subfield	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::subfield(const span& row_span, const span& col_span)$/;"	f	class:field
subfield	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::subfield(const span& row_span, const span& col_span, const span& slice_span) const$/;"	f	class:field
subfield	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::subfield(const span& row_span, const span& col_span, const span& slice_span)$/;"	f	class:field
subfield	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::subfield(const uword in_row1, const uword in_col1, const SizeMat& s) const$/;"	f	class:field
subfield	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::subfield(const uword in_row1, const uword in_col1, const SizeMat& s)$/;"	f	class:field
subfield	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::subfield(const uword in_row1, const uword in_col1, const uword in_row2, const uword in_col2) const$/;"	f	class:field
subfield	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::subfield(const uword in_row1, const uword in_col1, const uword in_row2, const uword in_col2)$/;"	f	class:field
subfield	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::subfield(const uword in_row1, const uword in_col1, const uword in_slice1, const SizeCube& s) const$/;"	f	class:field
subfield	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::subfield(const uword in_row1, const uword in_col1, const uword in_slice1, const SizeCube& s)$/;"	f	class:field
subfield	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::subfield(const uword in_row1, const uword in_col1, const uword in_slice1, const uword in_row2, const uword in_col2, const uword in_slice2) const$/;"	f	class:field
subfield	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::subfield(const uword in_row1, const uword in_col1, const uword in_slice1, const uword in_row2, const uword in_col2, const uword in_slice2)$/;"	f	class:field
submat	lib/armadillo-9.800.2/docs.html	/^<a name="submat"><\/a>$/;"	a
submat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::submat(const Base<uword,T1>& ri, const Base<uword,T2>& ci) const$/;"	f	class:Mat
submat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::submat(const Base<uword,T1>& ri, const Base<uword,T2>& ci)$/;"	f	class:Mat
submat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::submat(const span& row_span, const span& col_span) const$/;"	f	class:Mat
submat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::submat(const span& row_span, const span& col_span)$/;"	f	class:Mat
submat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::submat(const uword in_row1, const uword in_col1, const SizeMat& s) const$/;"	f	class:Mat
submat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::submat(const uword in_row1, const uword in_col1, const SizeMat& s)$/;"	f	class:Mat
submat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::submat(const uword in_row1, const uword in_col1, const uword in_row2, const uword in_col2) const$/;"	f	class:Mat
submat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::submat(const uword in_row1, const uword in_col1, const uword in_row2, const uword in_col2)$/;"	f	class:Mat
submat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::submat(const span& row_span, const span& col_span) const$/;"	f	class:SpMat
submat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::submat(const span& row_span, const span& col_span)$/;"	f	class:SpMat
submat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::submat(const uword in_row1, const uword in_col1, const SizeMat& s) const$/;"	f	class:SpMat
submat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::submat(const uword in_row1, const uword in_col1, const SizeMat& s)$/;"	f	class:SpMat
submat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::submat(const uword in_row1, const uword in_col1, const uword in_row2, const uword in_col2) const$/;"	f	class:SpMat
submat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::submat(const uword in_row1, const uword in_col1, const uword in_row2, const uword in_col2)$/;"	f	class:SpMat
submat	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::submat(const span& row_span, const span& col_span) const$/;"	f	class:SpSubview
submat	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::submat(const span& row_span, const span& col_span)$/;"	f	class:SpSubview
submat	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::submat(const uword in_row1, const uword in_col1, const uword in_row2, const uword in_col2) const$/;"	f	class:SpSubview
submat	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::submat(const uword in_row1, const uword in_col1, const uword in_row2, const uword in_col2)$/;"	f	class:SpSubview
submat	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::submat(const span& row_span, const span& col_span) const$/;"	f	class:subview
submat	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::submat(const span& row_span, const span& col_span)$/;"	f	class:subview
submat	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::submat(const uword in_row1, const uword in_col1, const uword in_row2, const uword in_col2) const$/;"	f	class:subview
submat	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::submat(const uword in_row1, const uword in_col1, const uword in_row2, const uword in_col2)$/;"	f	class:subview
subvec	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::subvec(const span& row_span) const$/;"	f	class:Col
subvec	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::subvec(const span& row_span)$/;"	f	class:Col
subvec	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::subvec(const uword in_row1, const uword in_row2) const$/;"	f	class:Col
subvec	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::subvec(const uword in_row1, const uword in_row2)$/;"	f	class:Col
subvec	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::subvec(const uword start_row, const SizeMat& s) const$/;"	f	class:Col
subvec	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::subvec(const uword start_row, const SizeMat& s)$/;"	f	class:Col
subvec	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::subvec(const span& col_span) const$/;"	f	class:Row
subvec	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::subvec(const span& col_span)$/;"	f	class:Row
subvec	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::subvec(const uword in_col1, const uword in_col2) const$/;"	f	class:Row
subvec	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::subvec(const uword in_col1, const uword in_col2)$/;"	f	class:Row
subvec	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::subvec(const uword start_col, const SizeMat& s) const$/;"	f	class:Row
subvec	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::subvec(const uword start_col, const SizeMat& s)$/;"	f	class:Row
subvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::subvec(const uword in_row1, const uword in_row2) const$/;"	f	class:subview_col
subvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::subvec(const uword in_row1, const uword in_row2)$/;"	f	class:subview_col
subvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::subvec(const uword start_row, const SizeMat& s) const$/;"	f	class:subview_col
subvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::subvec(const uword start_row, const SizeMat& s)$/;"	f	class:subview_col
subvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::subvec(const uword in_col1, const uword in_col2) const$/;"	f	class:subview_row
subvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::subvec(const uword in_col1, const uword in_col2)$/;"	f	class:subview_row
subvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::subvec(const uword start_col, const SizeMat& s) const$/;"	f	class:subview_row
subvec	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::subvec(const uword start_col, const SizeMat& s)$/;"	f	class:subview_row
subview	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^class subview : public Base<eT, subview<eT> >$/;"	c
subview	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::subview(const Mat<eT>& in_m, const uword in_row1, const uword in_col1, const uword in_n_rows, const uword in_n_cols)$/;"	f	class:subview
subview_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^class subview_col : public subview<eT>$/;"	c
subview_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::subview_col(const Mat<eT>& in_m, const uword in_col)$/;"	f	class:subview_col
subview_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::subview_col(const Mat<eT>& in_m, const uword in_col, const uword in_row1, const uword in_n_rows)$/;"	f	class:subview_col
subview_cube	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^class subview_cube : public BaseCube<eT, subview_cube<eT> >$/;"	c
subview_cube	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::subview_cube$/;"	f	class:subview_cube
subview_cube_each1	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_bones.hpp	/^class subview_cube_each1 : public subview_cube_each_common<eT>$/;"	c
subview_cube_each1	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each1<eT>::subview_cube_each1(const Cube<eT>& in_p)$/;"	f	class:subview_cube_each1
subview_cube_each1_aux	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_bones.hpp	/^class subview_cube_each1_aux$/;"	c
subview_cube_each2	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_bones.hpp	/^class subview_cube_each2 : public subview_cube_each_common<eT>$/;"	c
subview_cube_each2	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each2<eT,TB>::subview_cube_each2(const Cube<eT>& in_p, const Base<uword, TB>& in_indices)$/;"	f	class:subview_cube_each2
subview_cube_each2_aux	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_bones.hpp	/^class subview_cube_each2_aux$/;"	c
subview_cube_each_common	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_bones.hpp	/^class subview_cube_each_common$/;"	c
subview_cube_each_common	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each_common<eT>::subview_cube_each_common(const Cube<eT>& in_p)$/;"	f	class:subview_cube_each_common
subview_cube_slices	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_bones.hpp	/^class subview_cube_slices : public BaseCube<eT, subview_cube_slices<eT,T1> >$/;"	c
subview_cube_slices	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::subview_cube_slices$/;"	f	class:subview_cube_slices
subview_each1	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_bones.hpp	/^class subview_each1 : public subview_each_common<parent, mode>$/;"	c
subview_each1	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each1<parent,mode>::subview_each1(const parent& in_P)$/;"	f	class:subview_each1
subview_each1_aux	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_bones.hpp	/^class subview_each1_aux$/;"	c
subview_each2	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_bones.hpp	/^class subview_each2 : public subview_each_common<parent, mode>$/;"	c
subview_each2	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each2<parent,mode,TB>::subview_each2(const parent& in_P, const Base<uword, TB>& in_indices)$/;"	f	class:subview_each2
subview_each2_aux	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_bones.hpp	/^class subview_each2_aux$/;"	c
subview_each_common	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_bones.hpp	/^class subview_each_common$/;"	c
subview_each_common	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each_common<parent,mode>::subview_each_common(const parent& in_P)$/;"	f	class:subview_each_common
subview_elem1	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_bones.hpp	/^class subview_elem1 : public Base<eT, subview_elem1<eT,T1> >$/;"	c
subview_elem1	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::subview_elem1(const Cube<eT>& in_q, const Base<uword,T1>& in_a)$/;"	f	class:subview_elem1
subview_elem1	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::subview_elem1(const Mat<eT>& in_m, const Base<uword,T1>& in_a)$/;"	f	class:subview_elem1
subview_elem2	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_bones.hpp	/^class subview_elem2 : public Base<eT, subview_elem2<eT,T1,T2> >$/;"	c
subview_elem2	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::subview_elem2$/;"	f	class:subview_elem2
subview_field	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_bones.hpp	/^class subview_field$/;"	c
subview_field	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::subview_field$/;"	f	class:subview_field
subview_merge	lib/armadillo-9.800.2/include/armadillo_bits/spglue_merge_meat.hpp	/^spglue_merge::subview_merge(SpSubview<eT>& sv, const Mat<eT>& B)$/;"	f	class:spglue_merge
subview_merge	lib/armadillo-9.800.2/include/armadillo_bits/spglue_merge_meat.hpp	/^spglue_merge::subview_merge(SpSubview<eT>& sv, const SpMat<eT>& B)$/;"	f	class:spglue_merge
subview_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^class subview_row : public subview<eT>$/;"	c
subview_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::subview_row(const Mat<eT>& in_m, const uword in_row)$/;"	f	class:subview_row
subview_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::subview_row(const Mat<eT>& in_m, const uword in_row, const uword in_col1, const uword in_n_cols)$/;"	f	class:subview_row
subview_row_htrans	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^class subview_row_htrans : public Base<eT, subview_row_htrans<eT> >$/;"	c
subview_row_htrans	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row_htrans<eT>::subview_row_htrans(const subview_row<eT>& in_sv_row)$/;"	f	class:subview_row_htrans
subview_row_strans	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^class subview_row_strans : public Base<eT, subview_row_strans<eT> >$/;"	c
subview_row_strans	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row_strans<eT>::subview_row_strans(const subview_row<eT>& in_sv_row)$/;"	f	class:subview_row_strans
sum	lib/armadillo-9.800.2/docs.html	/^<a name="sum"><\/a>$/;"	a
sum	lib/armadillo-9.800.2/include/armadillo_bits/fn_sum.hpp	/^sum$/;"	f
sum	lib/armadillo-9.800.2/include/armadillo_bits/fn_sum.hpp	/^sum(const T& x)$/;"	f
sum	lib/armadillo-9.800.2/include/armadillo_bits/fn_sum.hpp	/^sum(const T1& X)$/;"	f
sum	lib/armadillo-9.800.2/include/armadillo_bits/fn_sum.hpp	/^sum(const T1& X, const uword dim)$/;"	f
sum	lib/armadillo-9.800.2/include/armadillo_bits/fn_sum.hpp	/^sum(const T1& x)$/;"	f
sum	lib/armadillo-9.800.2/include/armadillo_bits/fn_sum.hpp	/^sum(const T1& x, const uword dim)$/;"	f
sum_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::sum_log_p(const Base<eT,T1>& expr) const$/;"	f	class:gmm_priv::gmm_diag
sum_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::sum_log_p(const Base<eT,T1>& expr, const uword gaus_id) const$/;"	f	class:gmm_priv::gmm_diag
sum_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::sum_log_p(const Base<eT,T1>& expr) const$/;"	f	class:gmm_priv::gmm_full
sum_log_p	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::sum_log_p(const Base<eT,T1>& expr, const uword gaus_id) const$/;"	f	class:gmm_priv::gmm_full
superlu	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool superlu = false;$/;"	m	struct:arma_config
superlu	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool superlu = true;$/;"	m	struct:arma_config
superlu	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^namespace superlu$/;"	n	namespace:arma
superlu	lib/armadillo-9.800.2/include/armadillo_bits/translate_superlu.hpp	/^namespace superlu$/;"	n
superlu_options_t	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    } superlu_options_t;$/;"	t	namespace:arma::superlu	typeref:struct:arma::superlu::__anon6
superlu_opts	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  inline superlu_opts()$/;"	f	struct:superlu_opts
superlu_opts	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct superlu_opts : public spsolve_opts_base$/;"	s
supno	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int*       supno;   $/;"	m	struct:arma::superlu::__anon9
sv	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const subview<eT>& sv;$/;"	m	struct:partial_unwrap
sv	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const subview<eT>& sv;$/;"	m	struct:quasi_unwrap
sv_parent	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_bones.hpp	/^  arma_aligned SpSubview<eT>& sv_parent;$/;"	m	class:SpSubview_MapMat_val
sv_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  arma_aligned const subview_row<eT>& sv_row;$/;"	m	class:subview_row_htrans
sv_row	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^  arma_aligned const subview_row<eT>& sv_row;$/;"	m	class:subview_row_strans
svd	lib/armadillo-9.800.2/docs.html	/^<a name="svd"><\/a>$/;"	a
svd	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd(Col<T>& S, const Base<std::complex<T>, T1>& X)$/;"	f	class:auxlib
svd	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd(Col<T>& S, const Base<std::complex<T>, T1>& X, uword& X_n_rows, uword& X_n_cols)$/;"	f	class:auxlib
svd	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd(Col<eT>& S, const Base<eT,T1>& X)$/;"	f	class:auxlib
svd	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd(Col<eT>& S, const Base<eT,T1>& X, uword& X_n_rows, uword& X_n_cols)$/;"	f	class:auxlib
svd	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd(Mat< std::complex<T> >& U, Col<T>& S, Mat< std::complex<T> >& V, const Base< std::complex<T>, T1>& X)$/;"	f	class:auxlib
svd	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd(Mat<eT>& U, Col<eT>& S, Mat<eT>& V, const Base<eT,T1>& X)$/;"	f	class:auxlib
svd	lib/armadillo-9.800.2/include/armadillo_bits/fn_svd.hpp	/^svd$/;"	f
svd_dc	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd_dc(Col<T>& S, const Base<std::complex<T>, T1>& X)$/;"	f	class:auxlib
svd_dc	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd_dc(Col<T>& S, const Base<std::complex<T>, T1>& X, uword& X_n_rows, uword& X_n_cols)$/;"	f	class:auxlib
svd_dc	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd_dc(Col<eT>& S, const Base<eT,T1>& X)$/;"	f	class:auxlib
svd_dc	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd_dc(Col<eT>& S, const Base<eT,T1>& X, uword& X_n_rows, uword& X_n_cols)$/;"	f	class:auxlib
svd_dc	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd_dc(Mat< std::complex<T> >& U, Col<T>& S, Mat< std::complex<T> >& V, const Base< std::complex<T>, T1>& X)$/;"	f	class:auxlib
svd_dc	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd_dc(Mat<eT>& U, Col<eT>& S, Mat<eT>& V, const Base<eT,T1>& X)$/;"	f	class:auxlib
svd_dc_econ	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd_dc_econ(Mat< std::complex<T> >& U, Col<T>& S, Mat< std::complex<T> >& V, const Base< std::complex<T>, T1>& X)$/;"	f	class:auxlib
svd_dc_econ	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd_dc_econ(Mat<eT>& U, Col<eT>& S, Mat<eT>& V, const Base<eT,T1>& X)$/;"	f	class:auxlib
svd_econ	lib/armadillo-9.800.2/docs.html	/^<a name="svd_econ"><\/a>$/;"	a
svd_econ	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd_econ(Mat< std::complex<T> >& U, Col<T>& S, Mat< std::complex<T> >& V, const Base< std::complex<T>, T1>& X, const char mode)$/;"	f	class:auxlib
svd_econ	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::svd_econ(Mat<eT>& U, Col<eT>& S, Mat<eT>& V, const Base<eT,T1>& X, const char mode)$/;"	f	class:auxlib
svd_econ	lib/armadillo-9.800.2/include/armadillo_bits/fn_svd.hpp	/^svd_econ$/;"	f
svds	lib/armadillo-9.800.2/docs.html	/^<a name="svds"><\/a>$/;"	a
svds	lib/armadillo-9.800.2/include/armadillo_bits/fn_svds.hpp	/^svds$/;"	f
svds_helper	lib/armadillo-9.800.2/include/armadillo_bits/fn_svds.hpp	/^svds_helper$/;"	f
swap	lib/armadillo-9.800.2/docs.html	/^<a name="swap"><\/a>$/;"	a
swap	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::swap(Cube<eT>& B)$/;"	f	class:Cube
swap	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::swap(Mat<eT>& B)$/;"	f	class:Mat
swap	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^swap(Cube<eT>& A, Cube<eT>& B)$/;"	f
swap	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^swap(Mat<eT>& A, Mat<eT>& B)$/;"	f
swap	lib/armadillo-9.800.2/tests/catch.hpp	/^        void swap( Ptr& other ) { std::swap( m_p, other.m_p ); }$/;"	f	class:Catch::Ptr
swap_cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::swap_cols(const uword in_colA, const uword in_colB)$/;"	f	class:Mat
swap_cols	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::swap_cols(const uword in_col1, const uword in_col2)$/;"	f	class:SpMat
swap_cols	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::swap_cols(const uword in_col1, const uword in_col2)$/;"	f	class:SpSubview
swap_cols	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::swap_cols(const uword in_col1, const uword in_col2)$/;"	f	class:subview
swap_rows	lib/armadillo-9.800.2/docs.html	/^<a name="swap_rows"><\/a>$/;"	a
swap_rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::swap_rows(const uword in_row1, const uword in_row2)$/;"	f	class:Mat
swap_rows	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::swap_rows(const uword in_row1, const uword in_row2)$/;"	f	class:SpMat
swap_rows	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::swap_rows(const uword in_row1, const uword in_row2)$/;"	f	class:SpSubview
swap_rows	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::swap_rows(const uword in_row1, const uword in_row2)$/;"	f	class:subview
sword	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef s32 sword;$/;"	t
sword	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef s64 sword;$/;"	t
syev	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  syev(char* jobz, char* uplo, blas_int* n, eT* a, blas_int* lda, eT* w,  eT* work, blas_int* lwork, blas_int* info)$/;"	f	namespace:lapack
syevd	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  syevd(char* jobz, char* uplo, blas_int* n, eT* a, blas_int* lda, eT* w,  eT* work, blas_int* lwork, blas_int* iwork, blas_int* liwork, blas_int* info)$/;"	f	namespace:lapack
syl	lib/armadillo-9.800.2/docs.html	/^<a name="syl"><\/a>$/;"	a
syl	lib/armadillo-9.800.2/include/armadillo_bits/auxlib_meat.hpp	/^auxlib::syl(Mat<eT>& X, const Mat<eT>& A, const Mat<eT>& B, const Mat<eT>& C)$/;"	f	class:auxlib
syl	lib/armadillo-9.800.2/include/armadillo_bits/fn_syl_lyap.hpp	/^syl$/;"	f
symmat	lib/armadillo-9.800.2/docs.html	/^<a name="symmat"><\/a>$/;"	a
symmat_merge	lib/armadillo-9.800.2/include/armadillo_bits/spglue_merge_meat.hpp	/^spglue_merge::symmat_merge(SpMat<eT>& out, const SpMat<eT>& A, const SpMat<eT>& B)$/;"	f	class:spglue_merge
symmatl	lib/armadillo-9.800.2/include/armadillo_bits/fn_symmat.hpp	/^symmatl(const Base<typename T1::elem_type,T1>& X, const bool do_conj = false)$/;"	f
symmatl	lib/armadillo-9.800.2/include/armadillo_bits/fn_symmat.hpp	/^symmatl(const Base<typename T1::elem_type,T1>& X, const bool do_conj = true)$/;"	f
symmatl	lib/armadillo-9.800.2/include/armadillo_bits/fn_symmat.hpp	/^symmatl(const SpBase<typename T1::elem_type,T1>& X, const bool do_conj = false)$/;"	f
symmatl	lib/armadillo-9.800.2/include/armadillo_bits/fn_symmat.hpp	/^symmatl(const SpBase<typename T1::elem_type,T1>& X, const bool do_conj = true)$/;"	f
symmatu	lib/armadillo-9.800.2/include/armadillo_bits/fn_symmat.hpp	/^symmatu(const Base<typename T1::elem_type,T1>& X, const bool do_conj = false)$/;"	f
symmatu	lib/armadillo-9.800.2/include/armadillo_bits/fn_symmat.hpp	/^symmatu(const Base<typename T1::elem_type,T1>& X, const bool do_conj = true)$/;"	f
symmatu	lib/armadillo-9.800.2/include/armadillo_bits/fn_symmat.hpp	/^symmatu(const SpBase<typename T1::elem_type,T1>& X, const bool do_conj = false)$/;"	f
symmatu	lib/armadillo-9.800.2/include/armadillo_bits/fn_symmat.hpp	/^symmatu(const SpBase<typename T1::elem_type,T1>& X, const bool do_conj = true)$/;"	f
symmetric	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  bool             symmetric;$/;"	m	struct:superlu_opts
sympd	lib/armadillo-9.800.2/include/armadillo_bits/fn_misc.hpp	/^sympd(const Base<typename T1::elem_type,T1>& X)$/;"	f
sympd_helper	lib/armadillo-9.800.2/include/armadillo_bits/sympd_helper.hpp	/^namespace sympd_helper$/;"	n
sync	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::sync() const$/;"	f	class:SpMat
sync_cache	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::sync_cache() const$/;"	f	class:SpMat
sync_cache_simple	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::sync_cache_simple() const$/;"	f	class:SpMat
sync_csc	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::sync_csc() const$/;"	f	class:SpMat
sync_csc_simple	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::sync_csc_simple() const$/;"	f	class:SpMat
sync_state	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  arma_aligned mutable state_type sync_state;$/;"	m	class:SpMat
syntax	lib/armadillo-9.800.2/docs.html	/^<a name="syntax"><\/a>$/;"	a
syrk	lib/armadillo-9.800.2/include/armadillo_bits/mul_syrk.hpp	/^class syrk$/;"	c
syrk	lib/armadillo-9.800.2/include/armadillo_bits/translate_blas.hpp	/^  syrk(const char* uplo, const char* transA, const blas_int* n, const blas_int* k, const eT* alpha, const eT* A, const blas_int* ldA, const eT* beta, eT* C, const blas_int* ldC)$/;"	f	namespace:blas
syrk_emul	lib/armadillo-9.800.2/include/armadillo_bits/mul_syrk.hpp	/^class syrk_emul$/;"	c
syrk_helper	lib/armadillo-9.800.2/include/armadillo_bits/mul_syrk.hpp	/^class syrk_helper$/;"	c
syrk_vec	lib/armadillo-9.800.2/include/armadillo_bits/mul_syrk.hpp	/^class syrk_vec$/;"	c
t	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base_trans_cx<derived>::t() const$/;"	f	class:Base_trans_cx
t	lib/armadillo-9.800.2/include/armadillo_bits/Base_meat.hpp	/^Base_trans_default<derived>::t() const$/;"	f	class:Base_trans_default
t	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::t() const$/;"	f	class:Col::fixed
t	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::t() const$/;"	f	class:Col
t	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::t() const$/;"	f	class:Mat::fixed
t	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::t() const$/;"	f	class:Row::fixed
t	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::t() const$/;"	f	class:Row
t	lib/armadillo-9.800.2/include/armadillo_bits/SpBase_meat.hpp	/^SpBase<elem_type,derived>::t() const$/;"	f	class:SpBase
t	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::t() const$/;"	f	class:diagview
t	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::t() const$/;"	f	class:subview_elem1
t	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::t() const$/;"	f	class:subview_col
t	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::t() const$/;"	f	class:subview_row
t	lib/armadillo-9.800.2/tests/catch.hpp	/^        static T  const&t;$/;"	m	struct:Catch::Detail::IsStreamInsertable
t_st_members	lib/armadillo-9.800.2/docs.html	/^<a name="t_st_members"><\/a>$/;"	a
tags	include/catch.hpp	/^    StringRef tags;$/;"	m	struct:Catch::NameAndTags
tail	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::tail(const uword N) const$/;"	f	class:Col
tail	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::tail(const uword N)$/;"	f	class:Col
tail	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::tail(const uword N) const$/;"	f	class:Row
tail	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::tail(const uword N)$/;"	f	class:Row
tail	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::tail(const uword N) const$/;"	f	class:subview_col
tail	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::tail(const uword N)$/;"	f	class:subview_col
tail	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::tail(const uword N) const$/;"	f	class:subview_row
tail	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_row<eT>::tail(const uword N)$/;"	f	class:subview_row
tail_cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::tail_cols(const uword N) const$/;"	f	class:Mat
tail_cols	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::tail_cols(const uword N)$/;"	f	class:Mat
tail_cols	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::tail_cols(const uword N) const$/;"	f	class:Row
tail_cols	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::tail_cols(const uword N)$/;"	f	class:Row
tail_cols	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::tail_cols(const uword N) const$/;"	f	class:SpMat
tail_cols	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::tail_cols(const uword N)$/;"	f	class:SpMat
tail_rows	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::tail_rows(const uword N) const$/;"	f	class:Col
tail_rows	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::tail_rows(const uword N)$/;"	f	class:Col
tail_rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::tail_rows(const uword N) const$/;"	f	class:Mat
tail_rows	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::tail_rows(const uword N)$/;"	f	class:Mat
tail_rows	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::tail_rows(const uword N) const$/;"	f	class:SpMat
tail_rows	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::tail_rows(const uword N)$/;"	f	class:SpMat
tail_slices	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::tail_slices(const uword N) const$/;"	f	class:Cube
tail_slices	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::tail_slices(const uword N)$/;"	f	class:Cube
tan	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result tan   (const eT x) { return eT( std::tan  (double(x)) ); }$/;"	f	class:eop_aux
tan	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result tan   (const eT x) { return std::tan  (x); }$/;"	f	class:eop_aux
tan	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^tan(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
tan	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^tan(const T1& A)$/;"	f
tanh	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result tanh  (const eT x) { return eT( std::tanh (double(x)) ); }$/;"	f	class:eop_aux
tanh	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_real_or_cx_only<eT>::result tanh  (const eT x) { return std::tanh (x); }$/;"	f	class:eop_aux
tanh	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^tanh(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
tanh	lib/armadillo-9.800.2/include/armadillo_bits/fn_trig.hpp	/^tanh(const T1& A)$/;"	f
text	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_bones.hpp	/^  inline static const char* text() { return "addition"; }$/;"	f	class:eglue_plus
text	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_bones.hpp	/^  inline static const char* text() { return "element-wise division"; }$/;"	f	class:eglue_div
text	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_bones.hpp	/^  inline static const char* text() { return "element-wise multiplication"; }$/;"	f	class:eglue_schur
text	lib/armadillo-9.800.2/include/armadillo_bits/eglue_core_bones.hpp	/^  inline static const char* text() { return "subtraction"; }$/;"	f	class:eglue_minus
tic	lib/armadillo-9.800.2/include/armadillo_bits/wall_clock_meat.hpp	/^wall_clock::tic()$/;"	f	class:wall_clock
time1	lib/armadillo-9.800.2/include/armadillo_bits/wall_clock_bones.hpp	/^    std::clock_t time1;$/;"	m	class:wall_clock
tmp1	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  arma_aligned Mat<eT> tmp1;$/;"	m	class:running_stat_vec
tmp2	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_bones.hpp	/^  arma_aligned Mat<eT> tmp2;$/;"	m	class:running_stat_vec
tmp_array	lib/armadillo-9.800.2/include/armadillo_bits/fft_engine.hpp	/^  podarray<cx_type> tmp_array;$/;"	m	class:fft_engine
tmp_imag	lib/armadillo-9.800.2/include/armadillo_bits/access.hpp	/^  template<typename  T> arma_inline static const  T tmp_imag(const std::complex<T>& X) { return X.imag(); }$/;"	f	class:access
tmp_imag	lib/armadillo-9.800.2/include/armadillo_bits/access.hpp	/^  template<typename eT> arma_inline static const eT tmp_imag(const eT                ) { return eT(0);    }$/;"	f	class:access
tmp_real	lib/armadillo-9.800.2/include/armadillo_bits/access.hpp	/^  template<typename  T> arma_inline static const   T tmp_real(const std::complex<T>& X) { return X.real(); }$/;"	f	class:access
tmp_real	lib/armadillo-9.800.2/include/armadillo_bits/access.hpp	/^  template<typename eT> arma_inline static const eT& tmp_real(const eT&              X) { return X;        }$/;"	f	class:access
tmp_real	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  inline static const  T  tmp_real(const std::complex<T>& X) { return X.real(); }$/;"	f	namespace:atlas
tmp_real	lib/armadillo-9.800.2/include/armadillo_bits/translate_atlas.hpp	/^  inline static const eT& tmp_real(const eT& X)              { return X; }$/;"	f	namespace:atlas
toString	lib/armadillo-9.800.2/tests/catch.hpp	/^            std::string toString() const {$/;"	f	class:Catch::Matchers::Impl::MatcherUntypedBase
toString	lib/armadillo-9.800.2/tests/catch.hpp	/^std::string toString( std::vector<T,Allocator> const& v ) {$/;"	f	namespace:Catch
toc	lib/armadillo-9.800.2/include/armadillo_bits/wall_clock_meat.hpp	/^wall_clock::toc()$/;"	f	class:wall_clock
toeplitz	lib/armadillo-9.800.2/docs.html	/^<a name="toeplitz"><\/a>$/;"	a
toeplitz	lib/armadillo-9.800.2/include/armadillo_bits/fn_toeplitz.hpp	/^toeplitz(const Base<typename T1::elem_type,T1>& X)$/;"	f
toeplitz	lib/armadillo-9.800.2/include/armadillo_bits/fn_toeplitz.hpp	/^toeplitz(const Base<typename T1::elem_type,T1>& X, const Base<typename T1::elem_type,T2>& Y)$/;"	f
top	lib/armadillo-9.800.2/docs.html	/^<a name="top"><\/a>$/;"	a
top1	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int   top1;$/;"	m	struct:arma::superlu::__anon8
top2	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int   top2;$/;"	m	struct:arma::superlu::__anon8
total_needed	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    float total_needed;$/;"	m	struct:arma::superlu::__anon7
trace	lib/armadillo-9.800.2/docs.html	/^<a name="trace"><\/a>$/;"	a
trace	lib/armadillo-9.800.2/include/armadillo_bits/fn_trace.hpp	/^trace(const Base<typename T1::elem_type, T1>& X)$/;"	f
trace	lib/armadillo-9.800.2/include/armadillo_bits/fn_trace.hpp	/^trace(const Glue<T1, T2, glue_times>& X)$/;"	f
trace	lib/armadillo-9.800.2/include/armadillo_bits/fn_trace.hpp	/^trace(const Op<T1, op_diagmat>& X)$/;"	f
trace	lib/armadillo-9.800.2/include/armadillo_bits/fn_trace.hpp	/^trace(const SpBase<typename T1::elem_type,T1>& expr)$/;"	f
trace	lib/armadillo-9.800.2/include/armadillo_bits/fn_trace.hpp	/^trace(const SpGlue<SpOp<T1, spop_htrans>, T2, spglue_times>& expr)$/;"	f
trace	lib/armadillo-9.800.2/include/armadillo_bits/fn_trace.hpp	/^trace(const SpGlue<T1, T2, spglue_minus>& expr)$/;"	f
trace	lib/armadillo-9.800.2/include/armadillo_bits/fn_trace.hpp	/^trace(const SpGlue<T1, T2, spglue_plus>& expr)$/;"	f
trace	lib/armadillo-9.800.2/include/armadillo_bits/fn_trace.hpp	/^trace(const SpGlue<T1, T2, spglue_schur>& expr)$/;"	f
trace	lib/armadillo-9.800.2/include/armadillo_bits/fn_trace.hpp	/^trace(const SpGlue<T1, T2, spglue_times>& expr)$/;"	f
traits	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct traits$/;"	s	struct:traits_glue_default
traits	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct traits$/;"	s	struct:traits_glue_or
traits	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct traits$/;"	s	struct:traits_op_col
traits	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct traits$/;"	s	struct:traits_op_default
traits	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct traits$/;"	s	struct:traits_op_passthru
traits	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct traits$/;"	s	struct:traits_op_row
traits	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  struct traits$/;"	s	struct:traits_op_xvec
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_affmul_bones.hpp	/^  struct traits$/;"	s	class:glue_affmul
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_conv_bones.hpp	/^  struct traits$/;"	s	class:glue_conv
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_cor_bones.hpp	/^  struct traits$/;"	s	class:glue_cor
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_cov_bones.hpp	/^  struct traits$/;"	s	class:glue_cov
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_cross_bones.hpp	/^  struct traits$/;"	s	class:glue_cross
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_hist_bones.hpp	/^  struct traits$/;"	s	class:glue_hist_default
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_histc_bones.hpp	/^  struct traits$/;"	s	class:glue_histc_default
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_intersect_bones.hpp	/^  struct traits$/;"	s	class:glue_intersect
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_bones.hpp	/^  struct traits$/;"	s	class:glue_join_cols
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_join_bones.hpp	/^  struct traits$/;"	s	class:glue_join_rows
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_kron_bones.hpp	/^  struct traits$/;"	s	class:glue_kron
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_mixed_bones.hpp	/^  struct traits$/;"	s	class:glue_mixed_times
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_mvnrnd_bones.hpp	/^  struct traits$/;"	s	class:glue_mvnrnd_vec
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyfit_bones.hpp	/^  struct traits$/;"	s	class:glue_polyfit
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_polyval_bones.hpp	/^  struct traits$/;"	s	class:glue_polyval
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct traits$/;"	s	class:glue_solve_gen
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct traits$/;"	s	class:glue_solve_tri
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  struct traits$/;"	s	class:glue_solve_tri_default
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^  struct traits$/;"	s	class:glue_times
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_times_bones.hpp	/^  struct traits$/;"	s	class:glue_times_diag
traits	lib/armadillo-9.800.2/include/armadillo_bits/glue_trapz_bones.hpp	/^  struct traits$/;"	s	class:glue_trapz
traits	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_bones.hpp	/^  struct traits$/;"	s	class:op_htrans
traits	lib/armadillo-9.800.2/include/armadillo_bits/op_htrans_bones.hpp	/^  struct traits$/;"	s	class:op_htrans2
traits	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^  struct traits$/;"	s	class:op_strans
traits	lib/armadillo-9.800.2/include/armadillo_bits/op_strans_bones.hpp	/^  struct traits$/;"	s	class:op_strans2
traits	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_bones.hpp	/^  struct traits$/;"	s	class:spglue_join_cols
traits	lib/armadillo-9.800.2/include/armadillo_bits/spglue_join_bones.hpp	/^  struct traits$/;"	s	class:spglue_join_rows
traits	lib/armadillo-9.800.2/include/armadillo_bits/spglue_kron_bones.hpp	/^  struct traits$/;"	s	class:spglue_kron
traits	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^  struct traits$/;"	s	class:spglue_times
traits	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^  struct traits$/;"	s	class:spglue_times_misc
traits	lib/armadillo-9.800.2/include/armadillo_bits/spglue_times_bones.hpp	/^  struct traits$/;"	s	class:spglue_times_mixed
traits	lib/armadillo-9.800.2/include/armadillo_bits/spop_htrans_bones.hpp	/^  struct traits$/;"	s	class:spop_htrans
traits	lib/armadillo-9.800.2/include/armadillo_bits/spop_strans_bones.hpp	/^  struct traits$/;"	s	class:spop_strans
traits_glue_default	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct traits_glue_default$/;"	s
traits_glue_or	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct traits_glue_or$/;"	s
traits_op_col	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct traits_op_col$/;"	s
traits_op_default	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct traits_op_default$/;"	s
traits_op_passthru	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct traits_op_passthru$/;"	s
traits_op_row	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct traits_op_row$/;"	s
traits_op_xvec	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^struct traits_op_xvec$/;"	s
trans	lib/armadillo-9.800.2/docs.html	/^<a name="trans"><\/a>$/;"	a
trans	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  static const opts_trans   trans;$/;"	m	namespace:hdf5_opts
trans	lib/armadillo-9.800.2/include/armadillo_bits/fn_trans.hpp	/^trans$/;"	f
transform	lib/armadillo-9.800.2/docs.html	/^<a name="transform"><\/a>$/;"	a
transform	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::transform(functor F)$/;"	f	class:Cube
transform	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::transform(functor F)$/;"	f	class:Mat
transform	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::transform(functor F)$/;"	f	class:SpMat
transform	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::transform(functor F)$/;"	f	class:SpSubview
transform	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::transform(functor F)$/;"	f	class:subview_cube
transform	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::transform(functor F)$/;"	f	class:subview
trapz	lib/armadillo-9.800.2/docs.html	/^<a name="trapz"><\/a>$/;"	a
trapz	lib/armadillo-9.800.2/include/armadillo_bits/fn_trapz.hpp	/^trapz$/;"	f
trcon	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  trcon(char* norm, char* uplo, char* diag, blas_int* n, const eT* a, blas_int* lda, eT* rcond, eT* work, blas_int* iwork, blas_int* info)$/;"	f	namespace:lapack
trevc	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  trevc(char* side, char* howmny, blas_int* select, blas_int* n, eT* t, blas_int* ldt, eT* vl, blas_int* ldvl, eT* vr, blas_int* ldvr, blas_int* mm, blas_int* m, eT* work, blas_int* info)$/;"	f	namespace:lapack
trig_fns	lib/armadillo-9.800.2/docs.html	/^<a name="trig_fns"><\/a>$/;"	a
tril	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const opts_tril         tril;$/;"	m	namespace:solve_opts
trimat	lib/armadillo-9.800.2/docs.html	/^<a name="trimat"><\/a>$/;"	a
trimat_helper	lib/armadillo-9.800.2/include/armadillo_bits/trimat_helper.hpp	/^namespace trimat_helper$/;"	n
trimatl	lib/armadillo-9.800.2/include/armadillo_bits/fn_trimat.hpp	/^trimatl(const Base<typename T1::elem_type,T1>& X)$/;"	f
trimatl	lib/armadillo-9.800.2/include/armadillo_bits/fn_trimat.hpp	/^trimatl(const Base<typename T1::elem_type,T1>& X, const sword k)$/;"	f
trimatl	lib/armadillo-9.800.2/include/armadillo_bits/fn_trimat.hpp	/^trimatl(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
trimatu	lib/armadillo-9.800.2/include/armadillo_bits/fn_trimat.hpp	/^trimatu(const Base<typename T1::elem_type,T1>& X)$/;"	f
trimatu	lib/armadillo-9.800.2/include/armadillo_bits/fn_trimat.hpp	/^trimatu(const Base<typename T1::elem_type,T1>& X, const sword k)$/;"	f
trimatu	lib/armadillo-9.800.2/include/armadillo_bits/fn_trimat.hpp	/^trimatu(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
triu	lib/armadillo-9.800.2/include/armadillo_bits/glue_solve_bones.hpp	/^  static const opts_triu         triu;$/;"	m	namespace:solve_opts
trsyl	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  trsyl(char* transa, char* transb, blas_int* isgn, blas_int* m, blas_int* n, const eT* a, blas_int* lda, const eT* b, blas_int* ldb, eT* c, blas_int* ldc, eT* scale, blas_int* info)$/;"	f	namespace:lapack
trtri	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  trtri(char* uplo, char* diag, blas_int* n, eT* a, blas_int* lda, blas_int* info)$/;"	f	namespace:lapack
trtrs	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  trtrs(char* uplo, char* trans, char* diag, blas_int* n, blas_int* nrhs, const eT* a, blas_int* lda, eT* b, blas_int* ldb, blas_int* info)$/;"	f	namespace:lapack
trueValue	lib/armadillo-9.800.2/tests/catch.hpp	/^        void trueValue() const {}$/;"	f	class:Catch::SafeBool
true_given	include/catch.hpp	/^template <typename> struct true_given : std::true_type {};$/;"	s	namespace:Catch
trunc	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_cx_only<eT>::result trunc (const eT& x) { return eT( eop_aux::trunc(x.real()), eop_aux::trunc(x.imag()) ); }$/;"	f	class:eop_aux
trunc	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename       arma_cx_only<eT>::result trunc (const eT& x) { return eT( std::trunc(x.real()), std::trunc(x.imag()) );         }$/;"	f	class:eop_aux
trunc	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename     arma_real_only<eT>::result trunc (const eT  x) { return (x >= eT(0)) ? std::floor(x) : std::ceil(x);              }$/;"	f	class:eop_aux
trunc	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename     arma_real_only<eT>::result trunc (const eT  x) { return std::trunc(x);                                            }$/;"	f	class:eop_aux
trunc	lib/armadillo-9.800.2/include/armadillo_bits/eop_aux.hpp	/^  template<typename eT> arma_inline static typename arma_integral_only<eT>::result trunc (const eT  x) { return x;                                                        }$/;"	f	class:eop_aux
trunc	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^trunc(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
trunc	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^trunc(const SpBase<typename T1::elem_type,T1>& X)$/;"	f
trunc	lib/armadillo-9.800.2/include/armadillo_bits/fn_elem.hpp	/^trunc(const T1& A)$/;"	f
trunc_exp	lib/armadillo-9.800.2/include/armadillo_bits/fn_trunc_exp.hpp	/^trunc_exp(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
trunc_exp	lib/armadillo-9.800.2/include/armadillo_bits/fn_trunc_exp.hpp	/^trunc_exp(const T1& A)$/;"	f
trunc_exp	lib/armadillo-9.800.2/include/armadillo_bits/fn_trunc_exp.hpp	/^trunc_exp(const eT x)$/;"	f
trunc_exp	lib/armadillo-9.800.2/include/armadillo_bits/fn_trunc_exp.hpp	/^trunc_exp(const std::complex<T>& x)$/;"	f
trunc_log	lib/armadillo-9.800.2/include/armadillo_bits/fn_trunc_log.hpp	/^trunc_log(const BaseCube<typename T1::elem_type,T1>& A)$/;"	f
trunc_log	lib/armadillo-9.800.2/include/armadillo_bits/fn_trunc_log.hpp	/^trunc_log(const T1& A)$/;"	f
trunc_log	lib/armadillo-9.800.2/include/armadillo_bits/fn_trunc_log.hpp	/^trunc_log(const eT x)$/;"	f
trunc_log	lib/armadillo-9.800.2/include/armadillo_bits/fn_trunc_log.hpp	/^trunc_log(const std::complex<T>& x)$/;"	f
try_add_value_csc	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::try_add_value_csc(const uword in_row, const uword in_col, const eT in_val)$/;"	f	class:SpMat
try_div_value_csc	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::try_div_value_csc(const uword in_row, const uword in_col, const eT in_val)$/;"	f	class:SpMat
try_mul_value_csc	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::try_mul_value_csc(const uword in_row, const uword in_col, const eT in_val)$/;"	f	class:SpMat
try_set_value_csc	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::try_set_value_csc(const uword in_row, const uword in_col, const eT in_val)$/;"	f	class:SpMat
try_sub_value_csc	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::try_sub_value_csc(const uword in_row, const uword in_col, const eT in_val)$/;"	f	class:SpMat
tube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::tube(const span& row_span, const span& col_span) const$/;"	f	class:Cube
tube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::tube(const span& row_span, const span& col_span)$/;"	f	class:Cube
tube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::tube(const uword in_row1, const uword in_col1) const$/;"	f	class:Cube
tube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::tube(const uword in_row1, const uword in_col1)$/;"	f	class:Cube
tube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::tube(const uword in_row1, const uword in_col1, const SizeMat& s) const$/;"	f	class:Cube
tube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::tube(const uword in_row1, const uword in_col1, const SizeMat& s)$/;"	f	class:Cube
tube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::tube(const uword in_row1, const uword in_col1, const uword in_row2, const uword in_col2) const$/;"	f	class:Cube
tube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::tube(const uword in_row1, const uword in_col1, const uword in_row2, const uword in_col2)$/;"	f	class:Cube
u16	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef          uint16_t u16;$/;"	t
u16	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef unsigned short    u16;$/;"	t
u32	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef          uint32_t u32;$/;"	t
u32	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef unsigned int      u32;$/;"	t
u32_colvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <u32> u32_colvec;$/;"	t
u32_cube	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Cube<u32> u32_cube;$/;"	t
u32_mat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Mat <u32> u32_mat;$/;"	t
u32_rowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Row <u32> u32_rowvec;$/;"	t
u32_vec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <u32> u32_vec;$/;"	t
u64	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^    typedef          uint64_t  u64;$/;"	t
u64	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^    typedef unsigned long      u64;$/;"	t
u64	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^    typedef unsigned long long u64;$/;"	t
u64_colvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^  typedef Col <u64> u64_colvec;$/;"	t
u64_cube	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^  typedef Cube<u64> u64_cube;$/;"	t
u64_mat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^  typedef Mat <u64> u64_mat;$/;"	t
u64_rowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^  typedef Row <u64> u64_rowvec;$/;"	t
u64_vec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^  typedef Col <u64> u64_vec;$/;"	t
u8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^    typedef          uint8_t u8;$/;"	t
u8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^    typedef ARMA_U8_TYPE     u8;$/;"	t
u8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^    typedef unsigned char    u8;$/;"	t
u_distr	lib/armadillo-9.800.2/include/armadillo_bits/arma_rng_cxx11.hpp	/^  arma_aligned std::uniform_real_distribution<double> u_distr;   \/\/ by default uses [0,1) interval$/;"	m	class:arma_rng_cxx11
uchar_colvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <unsigned char> uchar_colvec;$/;"	t
uchar_cube	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Cube<unsigned char> uchar_cube;$/;"	t
uchar_mat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Mat <unsigned char> uchar_mat;$/;"	t
uchar_rowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Row <unsigned char> uchar_rowvec;$/;"	t
uchar_vec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <unsigned char> uchar_vec;$/;"	t
ucol	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    void*      ucol;$/;"	m	struct:arma::superlu::__anon9
ucolvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <uword> ucolvec;$/;"	t
ucolvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ucolvec::fixed<2> ucolvec2;$/;"	t
ucolvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ucolvec::fixed<3> ucolvec3;$/;"	t
ucolvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ucolvec::fixed<4> ucolvec4;$/;"	t
ucolvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ucolvec::fixed<5> ucolvec5;$/;"	t
ucolvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ucolvec::fixed<6> ucolvec6;$/;"	t
ucolvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ucolvec::fixed<7> ucolvec7;$/;"	t
ucolvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ucolvec::fixed<8> ucolvec8;$/;"	t
ucolvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef ucolvec::fixed<9> ucolvec9;$/;"	t
ucube	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Cube<uword> ucube;$/;"	t
uhword	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef u16 uhword;$/;"	t
uhword	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef u32 uhword;$/;"	t
ulng_t	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^typedef unsigned long ulng_t;$/;"	t
umat	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Mat <uword> umat;$/;"	t
umat22	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef umat::fixed<2,2> umat22;$/;"	t
umat33	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef umat::fixed<3,3> umat33;$/;"	t
umat44	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef umat::fixed<4,4> umat44;$/;"	t
umat55	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef umat::fixed<5,5> umat55;$/;"	t
umat66	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef umat::fixed<6,6> umat66;$/;"	t
umat77	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef umat::fixed<7,7> umat77;$/;"	t
umat88	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef umat::fixed<8,8> umat88;$/;"	t
umat99	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef umat::fixed<9,9> umat99;$/;"	t
uncompress	lib/armadillo-9.800.2/include/armadillo_bits/band_helper.hpp	/^uncompress(Mat<eT>& A, const Mat<eT>& AB, const uword KL, const uword KU, const bool use_offset)$/;"	f	namespace:band_helper
ungqr	lib/armadillo-9.800.2/include/armadillo_bits/translate_lapack.hpp	/^  ungqr(blas_int* m, blas_int* n, blas_int* k, eT* a, blas_int* lda, eT* tau, eT* work, blas_int* lwork, blas_int* info)$/;"	f	namespace:lapack
unique	lib/armadillo-9.800.2/docs.html	/^<a name="unique"><\/a>$/;"	a
unique	lib/armadillo-9.800.2/include/armadillo_bits/fn_unique.hpp	/^unique(const T1& A)$/;"	f
unsafe_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::unsafe_col(const uword col_num) const$/;"	f	class:Mat
unsafe_col	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::unsafe_col(const uword col_num)$/;"	f	class:Mat
unsafe_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::unsafe_col(const uword col_num) const$/;"	f	class:subview
unsafe_col	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::unsafe_col(const uword col_num)$/;"	f	class:subview
unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap(const Col<eT>& A)$/;"	f	struct:unwrap
unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap(const Mat<eT>& A)$/;"	f	struct:unwrap
unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap(const Row<eT>& A)$/;"	f	struct:unwrap
unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap(const T1& A)$/;"	f	struct:unwrap
unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap(const mtGlue<out_eT, T1, T2, glue_type>& A)$/;"	f	struct:unwrap
unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap(const mtOp<out_eT, T1, op_type>& A)$/;"	f	struct:unwrap
unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap : public unwrap_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	s
unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap< Col<eT> >$/;"	s
unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap< Mat<eT> >$/;"	s
unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap< Row<eT> >$/;"	s
unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap< mtGlue<out_eT, T1, T2, glue_type> >$/;"	s
unwrap	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap< mtOp<out_eT, T1, op_type> >$/;"	s
unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  inline unwrap_check(const T1& A, const Mat<typename T1::elem_type>& B)$/;"	f	struct:unwrap_check
unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  inline unwrap_check(const T1& A, const bool is_alias)$/;"	f	struct:unwrap_check
unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check(const Col<eT>& A, const Mat<eT>& B)$/;"	f	struct:unwrap_check
unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check(const Col<eT>& A, const bool is_alias)$/;"	f	struct:unwrap_check
unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check(const Mat<eT>& A, const Mat<eT>& B)$/;"	f	struct:unwrap_check
unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check(const Mat<eT>& A, const bool is_alias)$/;"	f	struct:unwrap_check
unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check(const Row<eT>& A, const Mat<eT>& B)$/;"	f	struct:unwrap_check
unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check(const Row<eT>& A, const bool is_alias)$/;"	f	struct:unwrap_check
unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check : public unwrap_check_redirect<T1, is_Mat_fixed<T1>::value >::result$/;"	s
unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check< Col<eT> >$/;"	s
unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check< Mat<eT> >$/;"	s
unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check< Row<eT> >$/;"	s
unwrap_check_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check_default(const T1& A, const Mat<eT>&)$/;"	f	struct:unwrap_check_default
unwrap_check_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check_default(const T1& A, const bool)$/;"	f	struct:unwrap_check_default
unwrap_check_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check_default$/;"	s
unwrap_check_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check_fixed(const T1& A, const Mat<eT>& B)$/;"	f	struct:unwrap_check_fixed
unwrap_check_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check_fixed(const T1& A, const bool is_alias)$/;"	f	struct:unwrap_check_fixed
unwrap_check_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check_fixed$/;"	s
unwrap_check_mixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check_mixed(const Col<eT1>& A, const Mat<eT2>& B)$/;"	f	struct:unwrap_check_mixed
unwrap_check_mixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check_mixed(const Col<eT1>& A, const bool is_alias)$/;"	f	struct:unwrap_check_mixed
unwrap_check_mixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check_mixed(const Mat<eT1>& A, const Mat<eT2>& B)$/;"	f	struct:unwrap_check_mixed
unwrap_check_mixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check_mixed(const Mat<eT1>& A, const bool is_alias)$/;"	f	struct:unwrap_check_mixed
unwrap_check_mixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check_mixed(const Row<eT1>& A, const Mat<eT2>& B)$/;"	f	struct:unwrap_check_mixed
unwrap_check_mixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check_mixed(const Row<eT1>& A, const bool is_alias)$/;"	f	struct:unwrap_check_mixed
unwrap_check_mixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check_mixed(const T1& A, const Mat<eT2>&)$/;"	f	struct:unwrap_check_mixed
unwrap_check_mixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_check_mixed(const T1& A, const bool)$/;"	f	struct:unwrap_check_mixed
unwrap_check_mixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check_mixed$/;"	s
unwrap_check_mixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check_mixed< Col<eT1> >$/;"	s
unwrap_check_mixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check_mixed< Mat<eT1> >$/;"	s
unwrap_check_mixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check_mixed< Row<eT1> >$/;"	s
unwrap_check_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check_redirect {};$/;"	s
unwrap_check_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check_redirect<T1, false> { typedef unwrap_check_default<T1> result; };$/;"	s
unwrap_check_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_check_redirect<T1, true>  { typedef unwrap_check_fixed<T1>   result; };$/;"	s
unwrap_cube	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^  unwrap_cube(const Cube<eT>& A)$/;"	f	struct:unwrap_cube
unwrap_cube	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^  unwrap_cube(const T1& A)$/;"	f	struct:unwrap_cube
unwrap_cube	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^struct unwrap_cube$/;"	s
unwrap_cube	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^struct unwrap_cube< Cube<eT> >$/;"	s
unwrap_cube_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^  unwrap_cube_check(const Cube<eT>& A, const Cube<eT>& B)$/;"	f	struct:unwrap_cube_check
unwrap_cube_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^  unwrap_cube_check(const T1& A, const Cube<eT>&)$/;"	f	struct:unwrap_cube_check
unwrap_cube_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^struct unwrap_cube_check$/;"	s
unwrap_cube_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^struct unwrap_cube_check< Cube<eT> >$/;"	s
unwrap_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_default(const T1& A)$/;"	f	struct:unwrap_default
unwrap_default	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_default$/;"	s
unwrap_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  unwrap_fixed(const T1& A)$/;"	f	struct:unwrap_fixed
unwrap_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_fixed$/;"	s
unwrap_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_redirect {};$/;"	s
unwrap_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_redirect<T1, false> { typedef unwrap_default<T1> result; };$/;"	s
unwrap_redirect	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^struct unwrap_redirect<T1, true>  { typedef unwrap_fixed<T1>   result; };$/;"	s
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  unwrap_spmat(const SpCol<eT>& A)$/;"	f	struct:unwrap_spmat
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  unwrap_spmat(const SpGlue<T1, T2, spglue_type>& A)$/;"	f	struct:unwrap_spmat
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  unwrap_spmat(const SpMat<eT>& A)$/;"	f	struct:unwrap_spmat
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  unwrap_spmat(const SpOp<T1, spop_type>& A)$/;"	f	struct:unwrap_spmat
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  unwrap_spmat(const SpRow<eT>& A)$/;"	f	struct:unwrap_spmat
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  unwrap_spmat(const T1& A)$/;"	f	struct:unwrap_spmat
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  unwrap_spmat(const mtSpGlue<out_eT, T1, T2, spglue_type>& A)$/;"	f	struct:unwrap_spmat
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^  unwrap_spmat(const mtSpOp<out_eT, T1, spop_type>& A)$/;"	f	struct:unwrap_spmat
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^struct unwrap_spmat$/;"	s
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^struct unwrap_spmat< SpCol<eT> >$/;"	s
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^struct unwrap_spmat< SpGlue<T1, T2, spglue_type> >$/;"	s
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^struct unwrap_spmat< SpMat<eT> >$/;"	s
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^struct unwrap_spmat< SpOp<T1, spop_type> >$/;"	s
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^struct unwrap_spmat< SpRow<eT> >$/;"	s
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^struct unwrap_spmat< mtSpGlue<out_eT, T1, T2, spglue_type> >$/;"	s
unwrap_spmat	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_spmat.hpp	/^struct unwrap_spmat< mtSpOp<out_eT, T1, spop_type> >$/;"	s
update_block	lib/armadillo-9.800.2/include/armadillo_bits/newarp_DoubleShiftQR_meat.hpp	/^DoubleShiftQR<eT>::update_block(uword il, uword iu)$/;"	f	class:newarp::DoubleShiftQR
update_stats	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat_aux::update_stats(running_stat<eT>& x, const eT sample, const typename arma_not_cx<eT>::result* junk)$/;"	f	class:running_stat_aux
update_stats	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat_aux::update_stats(running_stat<eT>& x, const eT& sample, const typename arma_cx_only<eT>::result* junk)$/;"	f	class:running_stat_aux
update_stats	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat_aux::update_stats(running_stat<eT>& x, const std::complex<eT>& sample, const typename arma_not_cx<eT>::result* junk)$/;"	f	class:running_stat_aux
update_stats	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat_aux::update_stats(running_stat<eT>& x, const typename eT::value_type sample, const typename arma_cx_only<eT>::result* junk)$/;"	f	class:running_stat_aux
update_stats	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec_aux::update_stats$/;"	f	class:running_stat_vec_aux
upgrade_val	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^struct upgrade_val$/;"	s
upgrade_val	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^struct upgrade_val< T1, std::complex<T> >$/;"	s
upgrade_val	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^struct upgrade_val< double, std::complex<float> >$/;"	s
upgrade_val	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^struct upgrade_val< float, std::complex<double> >$/;"	s
upgrade_val	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^struct upgrade_val< std::complex<T>, T2 >$/;"	s
upgrade_val	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^struct upgrade_val< std::complex<double>, float >$/;"	s
upgrade_val	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^struct upgrade_val< std::complex<double>, std::complex<float> >$/;"	s
upgrade_val	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^struct upgrade_val< std::complex<float>, double >$/;"	s
upgrade_val	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^struct upgrade_val< std::complex<float>, std::complex<double> >$/;"	s
upgrade_val	lib/armadillo-9.800.2/include/armadillo_bits/upgrade_val.hpp	/^struct upgrade_val<T,T>$/;"	s
urowvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Row <uword> urowvec;$/;"	t
urowvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef urowvec::fixed<2> urowvec2;$/;"	t
urowvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef urowvec::fixed<3> urowvec3;$/;"	t
urowvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef urowvec::fixed<4> urowvec4;$/;"	t
urowvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef urowvec::fixed<5> urowvec5;$/;"	t
urowvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef urowvec::fixed<6> urowvec6;$/;"	t
urowvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef urowvec::fixed<7> urowvec7;$/;"	t
urowvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef urowvec::fixed<8> urowvec8;$/;"	t
urowvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef urowvec::fixed<9> urowvec9;$/;"	t
use_at	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_bones.hpp	/^  static const bool use_at    = false;$/;"	m	class:GenCube
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Gen_bones.hpp	/^  static const bool use_at    = (is_same_type<gen_type, gen_eye>::value);$/;"	m	class:Gen
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = Gen<T1, gen_type>::use_at;$/;"	m	class:Proxy
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = Proxy_sv_row_ht::use_at;$/;"	m	class:Proxy
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = Proxy_xtrans::use_at;$/;"	m	class:Proxy
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = eGlue<T1, T2, eglue_type>::use_at;$/;"	m	class:Proxy
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = eOp< Op<T1, op_htrans>, eop_scalar_times>::use_at;$/;"	m	class:Proxy
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = eOp<T1, eop_type>::use_at;$/;"	m	class:Proxy
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = false;$/;"	m	class:Proxy
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = false;$/;"	m	class:Proxy_diagvec_expr
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = false;$/;"	m	class:Proxy_diagvec_mat
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = false;$/;"	m	class:Proxy_vectorise_col_expr
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = false;$/;"	m	class:Proxy_vectorise_col_mat
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = false;$/;"	m	struct:Proxy_fixed
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = false;$/;"	m	struct:Proxy_subview_row_htrans_cx
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = false;$/;"	m	struct:Proxy_subview_row_htrans_non_cx
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = false;$/;"	m	struct:Proxy_xtrans_vector
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = true;$/;"	m	class:Proxy
use_at	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_at      = true;$/;"	m	struct:Proxy_xtrans_default
use_at	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  static const bool use_at      = eGlueCube<T1, T2, eglue_type>::use_at;$/;"	m	class:ProxyCube
use_at	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  static const bool use_at      = eOpCube<T1, eop_type>::use_at;$/;"	m	class:ProxyCube
use_at	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  static const bool use_at      = false;$/;"	m	class:ProxyCube
use_at	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  static const bool use_at      = true;$/;"	m	class:ProxyCube
use_at	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_bones.hpp	/^  static const bool use_at      = (ProxyCube<T1>::use_at      || ProxyCube<T2>::use_at     );$/;"	m	class:eGlueCube
use_at	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_bones.hpp	/^  static const bool use_at      = (Proxy<T1>::use_at      || Proxy<T2>::use_at     );$/;"	m	class:eGlue
use_at	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_bones.hpp	/^  static const bool use_at      = ProxyCube<T1>::use_at;$/;"	m	class:eOpCube
use_at	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^  static const bool use_at      = Proxy<T1>::use_at;$/;"	m	class:eOp
use_extra	lib/armadillo-9.800.2/include/armadillo_bits/Col_bones.hpp	/^  static const bool use_extra = (fixed_n_elem > arma_config::mat_prealloc);$/;"	m	class:Col::fixed
use_extra	lib/armadillo-9.800.2/include/armadillo_bits/Cube_bones.hpp	/^  static const bool use_extra = (fixed_n_elem > Cube_prealloc::mem_n_elem);$/;"	m	class:Cube::fixed
use_extra	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  static const bool  use_extra    = (fixed_n_elem > arma_config::mat_prealloc);$/;"	m	class:Mat::fixed
use_extra	lib/armadillo-9.800.2/include/armadillo_bits/Row_bones.hpp	/^  static const bool use_extra = (fixed_n_elem > arma_config::mat_prealloc);$/;"	m	class:Row::fixed
use_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool use_iterator   = false;$/;"	m	class:SpProxy
use_iterator	lib/armadillo-9.800.2/include/armadillo_bits/SpProxy.hpp	/^  static const bool use_iterator   = true;$/;"	m	class:SpProxy
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = Proxy<T1>::use_mp;$/;"	m	class:Proxy_vectorise_col_expr
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = Proxy_sv_row_ht::use_mp;$/;"	m	class:Proxy
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = Proxy_xtrans::use_mp;$/;"	m	class:Proxy
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = eGlue<T1, T2, eglue_type>::use_mp;$/;"	m	class:Proxy
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = eOp< Op<T1, op_htrans>, eop_scalar_times>::use_mp;$/;"	m	class:Proxy
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = eOp<T1, eop_type>::use_mp;$/;"	m	class:Proxy
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = false;$/;"	m	class:Proxy
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = false;$/;"	m	class:Proxy_diagvec_expr
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = false;$/;"	m	class:Proxy_diagvec_mat
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = false;$/;"	m	class:Proxy_vectorise_col_mat
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = false;$/;"	m	struct:Proxy_fixed
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = false;$/;"	m	struct:Proxy_subview_row_htrans_cx
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = false;$/;"	m	struct:Proxy_subview_row_htrans_non_cx
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = false;$/;"	m	struct:Proxy_xtrans_default
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/Proxy.hpp	/^  static const bool use_mp      = false;$/;"	m	struct:Proxy_xtrans_vector
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  static const bool use_mp      = eGlueCube<T1, T2, eglue_type>::use_mp;$/;"	m	class:ProxyCube
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  static const bool use_mp      = eOpCube<T1, eop_type>::use_mp;$/;"	m	class:ProxyCube
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/ProxyCube.hpp	/^  static const bool use_mp      = false;$/;"	m	class:ProxyCube
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_bones.hpp	/^  static const bool use_mp      = (ProxyCube<T1>::use_mp      || ProxyCube<T2>::use_mp     );$/;"	m	class:eGlueCube
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_bones.hpp	/^  static const bool use_mp      = (Proxy<T1>::use_mp      || Proxy<T2>::use_mp     );$/;"	m	class:eGlue
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_bones.hpp	/^  static const bool use_mp      = ProxyCube<T1>::use_mp || eop_type::use_mp;$/;"	m	class:eOpCube
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/eOp_bones.hpp	/^  static const bool use_mp      = Proxy<T1>::use_mp || eop_type::use_mp;$/;"	m	class:eOp
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^struct eop_use_mp_false { static const bool use_mp = false; };$/;"	m	struct:eop_use_mp_false
use_mp	lib/armadillo-9.800.2/include/armadillo_bits/eop_core_bones.hpp	/^struct eop_use_mp_true  { static const bool use_mp = true;  };$/;"	m	struct:eop_use_mp_true
used	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int   used;$/;"	m	struct:arma::superlu::__anon8
usub	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int*       usub;$/;"	m	struct:arma::superlu::__anon9
utime	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    double* utime;$/;"	m	struct:arma::superlu::__anon5
uvec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <uword> uvec;$/;"	t
uvec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef uvec::fixed<2> uvec2;$/;"	t
uvec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef uvec::fixed<3> uvec3;$/;"	t
uvec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef uvec::fixed<4> uvec4;$/;"	t
uvec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef uvec::fixed<5> uvec5;$/;"	t
uvec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef uvec::fixed<6> uvec6;$/;"	t
uvec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef uvec::fixed<7> uvec7;$/;"	t
uvec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef uvec::fixed<8> uvec8;$/;"	t
uvec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef uvec::fixed<9> uvec9;$/;"	t
uword	lib/armadillo-9.800.2/docs.html	/^<a name="uword"><\/a>$/;"	a
uword	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef u32 uword;$/;"	t
uword	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^  typedef u64 uword;$/;"	t
v	src/GreensTensor/GreensTensor.h	/^    double v, za;$/;"	m	class:GreensTensor
val	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^  static const uword val = 16;$/;"	m	struct:field_prealloc_n_elem
val	lib/armadillo-9.800.2/include/armadillo_bits/op_find_unique_bones.hpp	/^  eT    val;$/;"	m	struct:arma_find_unique_packet
val	lib/armadillo-9.800.2/include/armadillo_bits/op_median_bones.hpp	/^  T     val;$/;"	m	struct:arma_cx_median_packet
val	lib/armadillo-9.800.2/include/armadillo_bits/op_sort_index_bones.hpp	/^  eT    val;$/;"	m	struct:arma_sort_index_packet
val	lib/armadillo-9.800.2/include/armadillo_bits/podarray_bones.hpp	/^  static const uword val = 16;$/;"	m	struct:podarray_prealloc_n_elem
val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const eT       val;$/;"	m	struct:partial_unwrap
val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const eT       val;$/;"	m	struct:partial_unwrap_check
val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const eT      val;$/;"	m	struct:partial_unwrap
val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const eT      val;$/;"	m	struct:partial_unwrap_check
val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const eT      val;$/;"	m	struct:partial_unwrap_check_htrans2_default
val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const eT      val;$/;"	m	struct:partial_unwrap_check_scalar_times_default
val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const eT      val;$/;"	m	struct:partial_unwrap_htrans2_default
val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const eT      val;$/;"	m	struct:partial_unwrap_scalar_times_default
val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const eT  val;$/;"	m	struct:partial_unwrap_check_htrans2_fixed
val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const eT  val;$/;"	m	struct:partial_unwrap_check_scalar_times_fixed
val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const eT  val;$/;"	m	struct:partial_unwrap_htrans2_fixed
val	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  const eT  val;$/;"	m	struct:partial_unwrap_scalar_times_fixed
val_ptr	lib/armadillo-9.800.2/include/armadillo_bits/SpValProxy_bones.hpp	/^  arma_aligned eT* val_ptr;$/;"	m	class:SpValProxy
valid	lib/armadillo-9.800.2/include/armadillo_bits/wall_clock_bones.hpp	/^  bool valid;$/;"	m	class:wall_clock
value	include/catch.hpp	/^            static const bool value = decltype(test<std::ostream, const T&>(0))::value;$/;"	m	class:Catch::Detail::IsStreamInsertable
value	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^  static const bool value = false;$/;"	m	struct:is_promotable
value	lib/armadillo-9.800.2/include/armadillo_bits/promote_type.hpp	/^  static const bool value = true;$/;"	m	struct:is_promotable_ok
value	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^arma_counter<eT>::value() const$/;"	f	class:arma_counter
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^    { static const bool value = false; };$/;"	m	struct:is_s64
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^    { static const bool value = false; };$/;"	m	struct:is_u64
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^    { static const bool value = true; };$/;"	m	struct:is_s64
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^    { static const bool value = true; };$/;"	m	struct:is_u64
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value =  (T1::is_col || T1::is_row || T1::is_xvec);$/;"	m	struct:resolves_to_vector_test
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = ( sizeof(check<T>(0)) == sizeof(yes) );$/;"	m	struct:has_nested_glue_traits
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = ( sizeof(check<T>(0)) == sizeof(yes) );$/;"	m	struct:has_nested_op_traits
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = ( sizeof(check<T>(0)) == sizeof(yes) );$/;"	m	struct:is_Col_fixed_only
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = ( sizeof(check<T>(0)) == sizeof(yes) );$/;"	m	struct:is_Mat_fixed_only
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = ( sizeof(check<T>(0)) == sizeof(yes) );$/;"	m	struct:is_Row_fixed_only
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = \\$/;"	m	struct:is_supported_blas_type
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = \\$/;"	m	struct:is_supported_elem_type
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = false;$/;"	m	struct:is_cx
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = false;$/;"	m	struct:is_cx_double
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = false;$/;"	m	struct:is_cx_float
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = false;$/;"	m	struct:is_non_integral
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = false;$/;"	m	struct:is_same_type
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = false;$/;"	m	struct:resolves_to_vector_default
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = is_arma_type2<const T1>::value;$/;"	m	struct:is_arma_type
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = true;$/;"	m	struct:is_cx
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = true;$/;"	m	struct:is_cx_double
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = true;$/;"	m	struct:is_cx_float
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = true;$/;"	m	struct:is_same_type
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value = true;$/;"	m	struct:is_signed
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value$/;"	m	struct:is_arma_cube_type
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value$/;"	m	struct:is_arma_sparse_type
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool value$/;"	m	struct:is_arma_type2
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = ( is_Mat_fixed_only<T>::value || is_Row_fixed_only<T>::value || is_Col_fixed_only<T>::value ); };$/;"	m	struct:is_Mat
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = ( is_Mat_fixed_only<T>::value || is_Row_fixed_only<T>::value || is_Col_fixed_only<T>::value ); };$/;"	m	struct:is_Mat_fixed
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = (resolves_to_colvector<T1>::value && resolves_to_rowvector<T2>::value); };$/;"	m	struct:is_outer_product
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = (sizeof(slng_t) == 4); };$/;"	m	struct:is_slng_t_32
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = (sizeof(slng_t) == 8); };$/;"	m	struct:is_slng_t_64
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = (sizeof(ulng_t) == 4); };$/;"	m	struct:is_ulng_t_32
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = (sizeof(ulng_t) == 8); };$/;"	m	struct:is_ulng_t_64
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:has_op_inv
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:has_op_inv_sympd
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_Cube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_CubeToMatOp
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_Gen
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_GenCube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_Glue
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_GlueCube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_Mat_trans
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_Op
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_OpCube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_SpCol
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_SpGlue
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_SpMat
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_SpOp
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_SpRow
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_SpSubview
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_SpToDOp
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_diagview
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_double
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_eGlue
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_eGlueCube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_eOp
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_eOpCube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_float
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_glue_times_diag
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_mtGlue
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_mtGlueCube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_mtOp
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_mtOpCube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_mtSpGlue
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_mtSpOp
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_op_diagmat
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_outer_product
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_real
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_s16
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_s32
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_s8
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_slng_t
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_slng_t_32
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_slng_t_64
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_spdiagview
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_subview
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_subview_col
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_subview_cube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_subview_cube_slices
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_subview_elem1
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_subview_elem2
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_subview_row
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_sword
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_u16
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_u32
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_u8
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_ulng_t
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_ulng_t_32
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_ulng_t_64
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = false; };$/;"	m	struct:is_uword
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = is_Col_fixed_only<T>::value; };$/;"	m	struct:is_Col
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = is_Mat<T1>::value; };$/;"	m	struct:is_Mat_trans
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = is_Mat_fixed_only<T>::value; };$/;"	m	struct:is_Mat_only
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = is_Row_fixed_only<T>::value; };$/;"	m	struct:is_Row
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true;  };$/;"	m	struct:has_op_inv
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true;  };$/;"	m	struct:has_op_inv_sympd
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_Col
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_Cube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_CubeToMatOp
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_Gen
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_GenCube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_Glue
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_GlueCube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_Mat
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_Mat_only
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_Op
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_OpCube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_Row
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_SpCol
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_SpGlue
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_SpMat
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_SpOp
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_SpRow
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_SpSubview
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_SpToDOp
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_diagview
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_double
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_eGlue
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_eGlueCube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_eOp
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_eOpCube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_float
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_glue_times_diag
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_mtGlue
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_mtGlueCube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_mtOp
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_mtOpCube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_mtSpGlue
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_mtSpOp
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_op_diagmat
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_real
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_s16
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_s32
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_s8
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_slng_t
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_spdiagview
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_subview
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_subview_col
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_subview_cube
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_subview_cube_slices
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_subview_elem1
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_subview_elem2
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_subview_row
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_sword
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_u16
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_u32
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_u8
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_ulng_t
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  { static const bool value = true; };$/;"	m	struct:is_uword
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_colvector_default { static const bool value = false;      };$/;"	m	struct:resolves_to_colvector_default
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_colvector_test    { static const bool value = T1::is_col; };$/;"	m	struct:resolves_to_colvector_test
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_rowvector_default { static const bool value = false;      };$/;"	m	struct:resolves_to_rowvector_default
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^struct resolves_to_rowvector_test    { static const bool value = T1::is_row; };$/;"	m	struct:resolves_to_rowvector_test
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_non_integral<              double  > { static const bool value = true; };$/;"	m	struct:is_non_integral
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_non_integral<              float   > { static const bool value = true; };$/;"	m	struct:is_non_integral
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_non_integral< std::complex<double> > { static const bool value = true; };$/;"	m	struct:is_non_integral
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_non_integral< std::complex<float>  > { static const bool value = true; };$/;"	m	struct:is_non_integral
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_signed<u16>    { static const bool value = false; };$/;"	m	struct:is_signed
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_signed<u32>    { static const bool value = false; };$/;"	m	struct:is_signed
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_signed<u64>    { static const bool value = false; };$/;"	m	struct:is_signed
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_signed<u8>     { static const bool value = false; };$/;"	m	struct:is_signed
value	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^template<> struct is_signed<ulng_t> { static const bool value = false; };$/;"	m	struct:is_signed
value	lib/armadillo-9.800.2/tests/catch.hpp	/^        enum { value = sizeof( testStreamable(s << t) ) == sizeof( TrueType ) };$/;"	e	enum:Catch::Detail::IsStreamInsertable::__anon10
value	lib/armadillo-9.800.2/tests/catch.hpp	/^        static const bool value = decltype(test<std::ostream,const T&>(0))::value;$/;"	m	class:Catch::Detail::IsStreamInsertable
value_minus_1	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^arma_counter<eT>::value_minus_1() const$/;"	f	class:arma_counter
value_plus_1	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^arma_counter<eT>::value_plus_1() const$/;"	f	class:arma_counter
value_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef eT                              value_type;$/;"	t	class:Mat::const_row_col_iterator
value_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef eT                              value_type;$/;"	t	class:Mat::const_row_iterator
value_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef eT                              value_type;$/;"	t	class:Mat::row_col_iterator
value_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^    typedef eT                              value_type;$/;"	t	class:Mat::row_iterator
value_type	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  typedef eT    value_type;$/;"	t	class:Mat
value_type	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    typedef SpValProxy<SpMat<eT> >         value_type;$/;"	t	class:SpMat::iterator
value_type	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    typedef SpValProxy<SpMat<eT> >         value_type;$/;"	t	class:SpMat::row_iterator
value_type	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^    typedef eT                              value_type;$/;"	t	class:SpMat::iterator_base
value_type	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    typedef SpValProxy<SpSubview<eT> >        value_type;$/;"	t	class:SpSubview::iterator
value_type	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    typedef SpValProxy<SpSubview<eT> >        value_type;$/;"	t	class:SpSubview::row_iterator
value_type	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_bones.hpp	/^    typedef eT                              value_type;$/;"	t	class:SpSubview::iterator_base
value_type	lib/armadillo-9.800.2/include/armadillo_bits/field_bones.hpp	/^  typedef oT    value_type;$/;"	t	class:field
value_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef eT                        value_type;$/;"	t	class:subview::const_iterator
value_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef eT                        value_type;$/;"	t	class:subview::const_row_iterator
value_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef eT                        value_type;$/;"	t	class:subview::iterator
value_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_bones.hpp	/^    typedef eT                        value_type;$/;"	t	class:subview::row_iterator
value_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    typedef eT                        value_type;$/;"	t	class:subview_cube::const_iterator
value_type	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_bones.hpp	/^    typedef eT                        value_type;$/;"	t	class:subview_cube::iterator
values	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  arma_aligned const eT* const values;$/;"	m	class:SpMat
var	lib/armadillo-9.800.2/include/armadillo_bits/fn_var.hpp	/^var(const T&)$/;"	f
var	lib/armadillo-9.800.2/include/armadillo_bits/fn_var.hpp	/^var(const T1& X, const uword norm_type = 0)$/;"	f
var	lib/armadillo-9.800.2/include/armadillo_bits/fn_var.hpp	/^var(const T1& X, const uword norm_type, const uword dim)$/;"	f
var	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat<eT>::var(const uword norm_type) const$/;"	f	class:running_stat
var	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::var(const uword norm_type)$/;"	f	class:running_stat_vec
var_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_var_meat.hpp	/^op_var::var_vec(const Base<typename T1::elem_type, T1>& X, const uword norm_type)$/;"	f	class:op_var
var_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_var_meat.hpp	/^op_var::var_vec(const subview_col<eT>& X, const uword norm_type)$/;"	f	class:op_var
var_vec	lib/armadillo-9.800.2/include/armadillo_bits/op_var_meat.hpp	/^op_var::var_vec(const subview_row<eT>& X, const uword norm_type)$/;"	f	class:op_var
var_vec	lib/armadillo-9.800.2/include/armadillo_bits/spop_var_meat.hpp	/^spop_var::var_vec$/;"	f	class:spop_var
vec	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat.hpp	/^typedef Col <double> vec;$/;"	t
vec2	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef vec::fixed<2> vec2;$/;"	t
vec3	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef vec::fixed<3> vec3;$/;"	t
vec4	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef vec::fixed<4> vec4;$/;"	t
vec5	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef vec::fixed<5> vec5;$/;"	t
vec6	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef vec::fixed<6> vec6;$/;"	t
vec7	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef vec::fixed<7> vec7;$/;"	t
vec8	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef vec::fixed<8> vec8;$/;"	t
vec9	lib/armadillo-9.800.2/include/armadillo_bits/typedef_mat_fixed.hpp	/^typedef vec::fixed<9> vec9;$/;"	t
vec_norm_1	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::vec_norm_1(const Proxy<T1>& P, const typename arma_cx_only<typename T1::elem_type>::result* junk)$/;"	f	class:op_norm
vec_norm_1	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::vec_norm_1(const Proxy<T1>& P, const typename arma_not_cx<typename T1::elem_type>::result* junk)$/;"	f	class:op_norm
vec_norm_1_direct_mem	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::vec_norm_1_direct_mem(const uword N, const eT* A)$/;"	f	class:op_norm
vec_norm_1_direct_std	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::vec_norm_1_direct_std(const Mat<eT>& X)$/;"	f	class:op_norm
vec_norm_2	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::vec_norm_2(const Proxy<T1>& P, const typename arma_cx_only<typename T1::elem_type>::result* junk)$/;"	f	class:op_norm
vec_norm_2	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::vec_norm_2(const Proxy<T1>& P, const typename arma_not_cx<typename T1::elem_type>::result* junk)$/;"	f	class:op_norm
vec_norm_2_direct_mem	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::vec_norm_2_direct_mem(const uword N, const eT* A)$/;"	f	class:op_norm
vec_norm_2_direct_robust	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::vec_norm_2_direct_robust(const Mat<eT>& X)$/;"	f	class:op_norm
vec_norm_2_direct_std	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::vec_norm_2_direct_std(const Mat<eT>& X)$/;"	f	class:op_norm
vec_norm_k	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::vec_norm_k(const Proxy<T1>& P, const int k)$/;"	f	class:op_norm
vec_norm_max	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::vec_norm_max(const Proxy<T1>& P)$/;"	f	class:op_norm
vec_norm_min	lib/armadillo-9.800.2/include/armadillo_bits/op_norm_meat.hpp	/^op_norm::vec_norm_min(const Proxy<T1>& P)$/;"	f	class:op_norm
vec_state	lib/armadillo-9.800.2/include/armadillo_bits/Mat_bones.hpp	/^  const uhword vec_state; \/\/!< 0: matrix layout; 1: column vector layout; 2: row vector layout$/;"	m	class:Mat
vec_state	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_bones.hpp	/^  const uword vec_state; \/\/!< 0: matrix; 1: column vector; 2: row vector$/;"	m	class:SpMat
vector_max	lib/armadillo-9.800.2/include/armadillo_bits/spop_max_meat.hpp	/^spop_max::vector_max$/;"	f	class:spop_max
vector_min	lib/armadillo-9.800.2/include/armadillo_bits/spop_min_meat.hpp	/^spop_min::vector_min$/;"	f	class:spop_min
vector_range	lib/armadillo-9.800.2/include/armadillo_bits/op_range_meat.hpp	/^op_range::vector_range(const T1& expr)$/;"	f	class:op_range
vectorise	lib/armadillo-9.800.2/docs.html	/^<a name="vectorise"><\/a>$/;"	a
vectorise	lib/armadillo-9.800.2/include/armadillo_bits/fn_vectorise.hpp	/^vectorise(const BaseCube<typename T1::elem_type, T1>& X)$/;"	f
vectorise	lib/armadillo-9.800.2/include/armadillo_bits/fn_vectorise.hpp	/^vectorise(const T1& X)$/;"	f
vectorise	lib/armadillo-9.800.2/include/armadillo_bits/fn_vectorise.hpp	/^vectorise(const T1& X, const uword dim)$/;"	f
version_24	lib/armadillo-9.800.2/docs.html	/^<a name="version_24"><\/a>$/;"	a
version_30	lib/armadillo-9.800.2/docs.html	/^<a name="version_30"><\/a>$/;"	a
version_32	lib/armadillo-9.800.2/docs.html	/^<a name="version_32"><\/a>$/;"	a
version_34	lib/armadillo-9.800.2/docs.html	/^<a name="version_34"><\/a>$/;"	a
version_36	lib/armadillo-9.800.2/docs.html	/^<a name="version_36"><\/a>$/;"	a
version_3800	lib/armadillo-9.800.2/docs.html	/^<a name="version_3800"><\/a>$/;"	a
version_3810	lib/armadillo-9.800.2/docs.html	/^<a name="version_3810"><\/a>$/;"	a
version_3820	lib/armadillo-9.800.2/docs.html	/^<a name="version_3820"><\/a>$/;"	a
version_3900	lib/armadillo-9.800.2/docs.html	/^<a name="version_3900"><\/a>$/;"	a
version_3910	lib/armadillo-9.800.2/docs.html	/^<a name="version_3910"><\/a>$/;"	a
version_3920	lib/armadillo-9.800.2/docs.html	/^<a name="version_3920"><\/a>$/;"	a
version_3930	lib/armadillo-9.800.2/docs.html	/^<a name="version_3930"><\/a>$/;"	a
version_4000	lib/armadillo-9.800.2/docs.html	/^<a name="version_4000"><\/a>$/;"	a
version_4100	lib/armadillo-9.800.2/docs.html	/^<a name="version_4100"><\/a>$/;"	a
version_4200	lib/armadillo-9.800.2/docs.html	/^<a name="version_4200"><\/a>$/;"	a
version_4300	lib/armadillo-9.800.2/docs.html	/^<a name="version_4300"><\/a>$/;"	a
version_4320	lib/armadillo-9.800.2/docs.html	/^<a name="version_4320"><\/a>$/;"	a
version_4400	lib/armadillo-9.800.2/docs.html	/^<a name="version_4400"><\/a>$/;"	a
version_4450	lib/armadillo-9.800.2/docs.html	/^<a name="version_4450"><\/a>$/;"	a
version_4500	lib/armadillo-9.800.2/docs.html	/^<a name="version_4500"><\/a>$/;"	a
version_4550	lib/armadillo-9.800.2/docs.html	/^<a name="version_4550"><\/a>$/;"	a
version_4600	lib/armadillo-9.800.2/docs.html	/^<a name="version_4600"><\/a>$/;"	a
version_4650	lib/armadillo-9.800.2/docs.html	/^<a name="version_4650"><\/a>$/;"	a
version_5000	lib/armadillo-9.800.2/docs.html	/^<a name="version_5000"><\/a>$/;"	a
version_5100	lib/armadillo-9.800.2/docs.html	/^<a name="version_5100"><\/a>$/;"	a
version_5200	lib/armadillo-9.800.2/docs.html	/^<a name="version_5200"><\/a>$/;"	a
version_5300	lib/armadillo-9.800.2/docs.html	/^<a name="version_5300"><\/a>$/;"	a
version_5400	lib/armadillo-9.800.2/docs.html	/^<a name="version_5400"><\/a>$/;"	a
version_5500	lib/armadillo-9.800.2/docs.html	/^<a name="version_5500"><\/a>$/;"	a
version_5600	lib/armadillo-9.800.2/docs.html	/^<a name="version_5600"><\/a>$/;"	a
version_6100	lib/armadillo-9.800.2/docs.html	/^<a name="version_6100"><\/a>$/;"	a
version_6200	lib/armadillo-9.800.2/docs.html	/^<a name="version_6200"><\/a>$/;"	a
version_6300	lib/armadillo-9.800.2/docs.html	/^<a name="version_6300"><\/a>$/;"	a
version_6400	lib/armadillo-9.800.2/docs.html	/^<a name="version_6400"><\/a>$/;"	a
version_6500	lib/armadillo-9.800.2/docs.html	/^<a name="version_6500"><\/a>$/;"	a
version_6600	lib/armadillo-9.800.2/docs.html	/^<a name="version_6600"><\/a>$/;"	a
version_6700	lib/armadillo-9.800.2/docs.html	/^<a name="version_6700"><\/a>$/;"	a
version_7100	lib/armadillo-9.800.2/docs.html	/^<a name="version_7100"><\/a>$/;"	a
version_7200	lib/armadillo-9.800.2/docs.html	/^<a name="version_7200"><\/a>$/;"	a
version_7300	lib/armadillo-9.800.2/docs.html	/^<a name="version_7300"><\/a>$/;"	a
version_7400	lib/armadillo-9.800.2/docs.html	/^<a name="version_7400"><\/a>$/;"	a
version_7500	lib/armadillo-9.800.2/docs.html	/^<a name="version_7500"><\/a>$/;"	a
version_7600	lib/armadillo-9.800.2/docs.html	/^<a name="version_7600"><\/a>$/;"	a
version_7700	lib/armadillo-9.800.2/docs.html	/^<a name="version_7700"><\/a>$/;"	a
version_7800	lib/armadillo-9.800.2/docs.html	/^<a name="version_7800"><\/a>$/;"	a
version_7900	lib/armadillo-9.800.2/docs.html	/^<a name="version_7900"><\/a>$/;"	a
version_7950	lib/armadillo-9.800.2/docs.html	/^<a name="version_7950"><\/a>$/;"	a
version_7960	lib/armadillo-9.800.2/docs.html	/^<a name="version_7960"><\/a>$/;"	a
version_8100	lib/armadillo-9.800.2/docs.html	/^<a name="version_8100"><\/a>$/;"	a
version_8200	lib/armadillo-9.800.2/docs.html	/^<a name="version_8200"><\/a>$/;"	a
version_8300	lib/armadillo-9.800.2/docs.html	/^<a name="version_8300"><\/a>$/;"	a
version_8400	lib/armadillo-9.800.2/docs.html	/^<a name="version_8400"><\/a>$/;"	a
version_8500	lib/armadillo-9.800.2/docs.html	/^<a name="version_8500"><\/a>$/;"	a
version_8600	lib/armadillo-9.800.2/docs.html	/^<a name="version_8600"><\/a>$/;"	a
version_9100	lib/armadillo-9.800.2/docs.html	/^<a name="version_9100"><\/a>$/;"	a
version_9200	lib/armadillo-9.800.2/docs.html	/^<a name="version_9200"><\/a>$/;"	a
version_9300	lib/armadillo-9.800.2/docs.html	/^<a name="version_9300"><\/a>$/;"	a
version_9400	lib/armadillo-9.800.2/docs.html	/^<a name="version_9400"><\/a>$/;"	a
version_9500	lib/armadillo-9.800.2/docs.html	/^<a name="version_9500"><\/a>$/;"	a
version_9600	lib/armadillo-9.800.2/docs.html	/^<a name="version_9600"><\/a>$/;"	a
version_9700	lib/armadillo-9.800.2/docs.html	/^<a name="version_9700"><\/a>$/;"	a
version_9800	lib/armadillo-9.800.2/docs.html	/^<a name="version_9800"><\/a>$/;"	a
void_ptr	lib/armadillo-9.800.2/include/armadillo_bits/typedef_elem.hpp	/^typedef void* void_ptr;$/;"	t
wall_clock	lib/armadillo-9.800.2/docs.html	/^<a name="wall_clock"><\/a>$/;"	a
wall_clock	lib/armadillo-9.800.2/include/armadillo_bits/wall_clock_bones.hpp	/^class wall_clock$/;"	c
wall_clock	lib/armadillo-9.800.2/include/armadillo_bits/wall_clock_meat.hpp	/^wall_clock::wall_clock()$/;"	f	class:wall_clock
whole	lib/armadillo-9.800.2/include/armadillo_bits/span.hpp	/^  bool  whole;$/;"	m	class:span
wishrnd	lib/armadillo-9.800.2/docs.html	/^<a name="wishrnd"><\/a>$/;"	a
wishrnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_wishrnd.hpp	/^wishrnd(Mat<typename T1::elem_type>& W, const Base<typename T1::elem_type, T1>& S, typename T1::elem_type df)$/;"	f
wishrnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_wishrnd.hpp	/^wishrnd(Mat<typename T1::elem_type>& W, const Base<typename T1::elem_type, T1>& S, typename T1::elem_type df, const Base<typename T1::elem_type, T2>& D)$/;"	f
wishrnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_wishrnd.hpp	/^wishrnd(const Base<typename T1::elem_type, T1>& S, typename T1::elem_type df)$/;"	f
wishrnd	lib/armadillo-9.800.2/include/armadillo_bits/fn_wishrnd.hpp	/^wishrnd(const Base<typename T1::elem_type, T1>& S, typename T1::elem_type df, const Base<typename T1::elem_type, T2>& D)$/;"	f
wrap_to_supermatrix	lib/armadillo-9.800.2/include/armadillo_bits/sp_auxlib_meat.hpp	/^  sp_auxlib::wrap_to_supermatrix(superlu::SuperMatrix& out, const Mat<eT>& A)$/;"	f	class:sp_auxlib
wrapper	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool wrapper = false;$/;"	m	struct:arma_config
wrapper	lib/armadillo-9.800.2/include/armadillo_bits/arma_config.hpp	/^    static const bool wrapper = true;$/;"	m	struct:arma_config
wrapper_Destroy_CompCol_Matrix	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_Destroy_CompCol_Matrix(superlu::SuperMatrix* a)$/;"	f
wrapper_Destroy_SuperMatrix_Store	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_Destroy_SuperMatrix_Store(superlu::SuperMatrix* a)$/;"	f
wrapper_Destroy_SuperNode_Matrix	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_Destroy_SuperNode_Matrix(superlu::SuperMatrix* a)$/;"	f
wrapper_StatFree	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_StatFree(superlu::SuperLUStat_t* a)$/;"	f
wrapper_StatInit	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_StatInit(superlu::SuperLUStat_t* a)$/;"	f
wrapper_cblas_cdotu_sub	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cblas_cdotu_sub(const int N, const void *X, const int incX, const void *Y, const int incY, void *dotu)$/;"	f
wrapper_cblas_cgemm	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cblas_cgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_TRANSPOSE TransB,$/;"	f
wrapper_cblas_cgemv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cblas_cgemv(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA, const int M, const int N, const void *alpha,$/;"	f
wrapper_cblas_cherk	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cblas_cherk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans,$/;"	f
wrapper_cblas_dasum	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    double wrapper_cblas_dasum(const int N, const double *X, const int incX)$/;"	f
wrapper_cblas_ddot	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    double wrapper_cblas_ddot(const int N, const double *X, const int incX, const double *Y, const int incY)$/;"	f
wrapper_cblas_dgemm	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cblas_dgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_TRANSPOSE TransB,$/;"	f
wrapper_cblas_dgemv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cblas_dgemv(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA, const int M, const int N, const double alpha,$/;"	f
wrapper_cblas_dnrm2	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    double wrapper_cblas_dnrm2(const int N, const double *X, const int incX)$/;"	f
wrapper_cblas_dsyrk	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cblas_dsyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans,$/;"	f
wrapper_cblas_sasum	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    float wrapper_cblas_sasum(const int N, const float  *X, const int incX)$/;"	f
wrapper_cblas_sdot	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    float wrapper_cblas_sdot(const int N, const float  *X, const int incX, const float  *Y, const int incY)$/;"	f
wrapper_cblas_sgemm	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cblas_sgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_TRANSPOSE TransB,$/;"	f
wrapper_cblas_sgemv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cblas_sgemv(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA, const int M, const int N, const float alpha,$/;"	f
wrapper_cblas_snrm2	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    float wrapper_cblas_snrm2(const int N, const float  *X, const int incX)$/;"	f
wrapper_cblas_ssyrk	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cblas_ssyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans,$/;"	f
wrapper_cblas_zdotu_sub	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cblas_zdotu_sub(const int N, const void *X, const int incX, const void *Y, const int incY, void *dotu)$/;"	f
wrapper_cblas_zgemm	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cblas_zgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_TRANSPOSE TransB,$/;"	f
wrapper_cblas_zgemv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cblas_zgemv(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA, const int M, const int N, const void *alpha,$/;"	f
wrapper_cblas_zherk	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cblas_zherk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans,$/;"	f
wrapper_cgssv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cgssv(superlu::superlu_options_t* a, superlu::SuperMatrix* b, int* c, int* d, superlu::SuperMatrix* e, superlu::SuperMatrix* f, superlu::SuperMatrix* g, superlu::SuperLUStat_t* h, int* i)$/;"	f
wrapper_cgssvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_cgssvx(superlu::superlu_options_t* a, superlu::SuperMatrix* b, int* c, int* d, int* e, char* f,  float* g,  float* h, superlu::SuperMatrix* i, superlu::SuperMatrix* j, void* k, int l, superlu::SuperMatrix* m, superlu::SuperMatrix* n,  float* o,  float* p,  float* q,  float* r, superlu::GlobalLU_t* s, superlu::mem_usage_t* t, superlu::SuperLUStat_t* u, int* v)$/;"	f
wrapper_clapack_cgesv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_cgesv(const enum CBLAS_ORDER Order, const int N, const int NRHS, void   *A, const int lda, int *ipiv, void   *B, const int ldb)$/;"	f
wrapper_clapack_cgetrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_cgetrf(const enum CBLAS_ORDER Order, const int M, const int N, void   *A, const int lda, int *ipiv)$/;"	f
wrapper_clapack_cgetri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_cgetri(const enum CBLAS_ORDER Order, const int N, void   *A, const int lda, const int *ipiv)$/;"	f
wrapper_clapack_cposv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_cposv(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N, const int NRHS,   void *A, const int lda,   void *B, const int ldb)$/;"	f
wrapper_clapack_cpotrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_cpotrf(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N,   void *A, const int lda)$/;"	f
wrapper_clapack_cpotri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_cpotri(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N,   void *A, const int lda)$/;"	f
wrapper_clapack_dgesv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_dgesv(const enum CBLAS_ORDER Order, const int N, const int NRHS, double *A, const int lda, int *ipiv, double *B, const int ldb)$/;"	f
wrapper_clapack_dgetrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_dgetrf(const enum CBLAS_ORDER Order, const int M, const int N, double *A, const int lda, int *ipiv)$/;"	f
wrapper_clapack_dgetri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_dgetri(const enum CBLAS_ORDER Order, const int N, double *A, const int lda, const int *ipiv)$/;"	f
wrapper_clapack_dposv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_dposv(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N, const int NRHS, double *A, const int lda, double *B, const int ldb)$/;"	f
wrapper_clapack_dpotrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_dpotrf(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N, double *A, const int lda)$/;"	f
wrapper_clapack_dpotri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_dpotri(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N, double *A, const int lda)$/;"	f
wrapper_clapack_sgesv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_sgesv(const enum CBLAS_ORDER Order, const int N, const int NRHS, float  *A, const int lda, int *ipiv, float  *B, const int ldb)$/;"	f
wrapper_clapack_sgetrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_sgetrf(const enum CBLAS_ORDER Order, const int M, const int N, float  *A, const int lda, int *ipiv)$/;"	f
wrapper_clapack_sgetri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_sgetri(const enum CBLAS_ORDER Order, const int N, float  *A, const int lda, const int *ipiv)$/;"	f
wrapper_clapack_sposv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_sposv(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N, const int NRHS,  float *A, const int lda,  float *B, const int ldb)$/;"	f
wrapper_clapack_spotrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_spotrf(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N,  float *A, const int lda)$/;"	f
wrapper_clapack_spotri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_spotri(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N,  float *A, const int lda)$/;"	f
wrapper_clapack_zgesv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_zgesv(const enum CBLAS_ORDER Order, const int N, const int NRHS, void   *A, const int lda, int *ipiv, void   *B, const int ldb)$/;"	f
wrapper_clapack_zgetrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_zgetrf(const enum CBLAS_ORDER Order, const int M, const int N, void   *A, const int lda, int *ipiv)$/;"	f
wrapper_clapack_zgetri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_zgetri(const enum CBLAS_ORDER Order, const int N, void   *A, const int lda, const int *ipiv)$/;"	f
wrapper_clapack_zposv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_zposv(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N, const int NRHS,   void *A, const int lda,   void *B, const int ldb)$/;"	f
wrapper_clapack_zpotrf	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_zpotrf(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N,   void *A, const int lda)$/;"	f
wrapper_clapack_zpotri	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    int wrapper_clapack_zpotri(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const int N,   void *A, const int lda)$/;"	f
wrapper_dgssv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_dgssv(superlu::superlu_options_t* a, superlu::SuperMatrix* b, int* c, int* d, superlu::SuperMatrix* e, superlu::SuperMatrix* f, superlu::SuperMatrix* g, superlu::SuperLUStat_t* h, int* i)$/;"	f
wrapper_dgssvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_dgssvx(superlu::superlu_options_t* a, superlu::SuperMatrix* b, int* c, int* d, int* e, char* f, double* g, double* h, superlu::SuperMatrix* i, superlu::SuperMatrix* j, void* k, int l, superlu::SuperMatrix* m, superlu::SuperMatrix* n, double* o, double* p, double* q, double* r, superlu::GlobalLU_t* s, superlu::mem_usage_t* t, superlu::SuperLUStat_t* u, int* v)$/;"	f
wrapper_set_default_options	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_set_default_options(superlu::superlu_options_t* a)$/;"	f
wrapper_sgssv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_sgssv(superlu::superlu_options_t* a, superlu::SuperMatrix* b, int* c, int* d, superlu::SuperMatrix* e, superlu::SuperMatrix* f, superlu::SuperMatrix* g, superlu::SuperLUStat_t* h, int* i)$/;"	f
wrapper_sgssvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_sgssvx(superlu::superlu_options_t* a, superlu::SuperMatrix* b, int* c, int* d, int* e, char* f,  float* g,  float* h, superlu::SuperMatrix* i, superlu::SuperMatrix* j, void* k, int l, superlu::SuperMatrix* m, superlu::SuperMatrix* n,  float* o,  float* p,  float* q,  float* r, superlu::GlobalLU_t* s, superlu::mem_usage_t* t, superlu::SuperLUStat_t* u, int* v)$/;"	f
wrapper_superlu_free	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_superlu_free(void* a)$/;"	f
wrapper_superlu_malloc	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void* wrapper_superlu_malloc(size_t a)$/;"	f
wrapper_zgssv	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_zgssv(superlu::superlu_options_t* a, superlu::SuperMatrix* b, int* c, int* d, superlu::SuperMatrix* e, superlu::SuperMatrix* f, superlu::SuperMatrix* g, superlu::SuperLUStat_t* h, int* i)$/;"	f
wrapper_zgssvx	lib/armadillo-9.800.2/src/wrapper1.cpp	/^    void wrapper_zgssvx(superlu::superlu_options_t* a, superlu::SuperMatrix* b, int* c, int* d, int* e, char* f, double* g, double* h, superlu::SuperMatrix* i, superlu::SuperMatrix* j, void* k, int l, superlu::SuperMatrix* m, superlu::SuperMatrix* n, double* o, double* p, double* q, double* r, superlu::GlobalLU_t* s, superlu::mem_usage_t* t, superlu::SuperLUStat_t* u, int* v)$/;"	f
writeToStream	include/catch.hpp	/^        void writeToStream( std::ostream &os ) const {$/;"	f	struct:Catch::Parser
xlsub	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int*       xlsub;$/;"	m	struct:arma::superlu::__anon9
xlusup	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int*       xlusup;$/;"	m	struct:arma::superlu::__anon9
xsup	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int*       xsup;$/;"	m	struct:arma::superlu::__anon9
xtrans_mat	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_bones.hpp	/^class xtrans_mat : public Base<eT, xtrans_mat<eT, do_conj> >$/;"	c
xtrans_mat	lib/armadillo-9.800.2/include/armadillo_bits/xtrans_mat_meat.hpp	/^xtrans_mat<eT,do_conj>::xtrans_mat(const Mat<eT>& in_X)$/;"	f	class:xtrans_mat
xusub	lib/armadillo-9.800.2/include/armadillo_bits/include_superlu.hpp	/^    int*       xusub;$/;"	m	struct:arma::superlu::__anon9
xvec_htrans	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_bones.hpp	/^class xvec_htrans : public Base<eT, xvec_htrans<eT> >$/;"	c
xvec_htrans	lib/armadillo-9.800.2/include/armadillo_bits/xvec_htrans_meat.hpp	/^xvec_htrans<eT>::xvec_htrans(const eT* const in_mem, const uword in_n_rows, const uword in_n_cols)$/;"	f	class:xvec_htrans
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool yes   =  (T1::is_col || T1::is_row || T1::is_xvec);$/;"	m	struct:resolves_to_vector_test
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool yes   = false;$/;"	m	struct:is_cx
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool yes   = false;$/;"	m	struct:is_cx_double
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool yes   = false;$/;"	m	struct:is_cx_float
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool yes   = false;$/;"	m	struct:is_same_type
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool yes   = false;$/;"	m	struct:resolves_to_vector_default
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool yes   = true;$/;"	m	struct:is_cx
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool yes   = true;$/;"	m	struct:is_cx_double
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool yes   = true;$/;"	m	struct:is_cx_float
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  static const bool yes   = true;$/;"	m	struct:is_same_type
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  typedef char yes[1];$/;"	t	struct:has_nested_glue_traits
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  typedef char yes[1];$/;"	t	struct:has_nested_op_traits
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  typedef char yes[1];$/;"	t	struct:is_Col_fixed_only
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  typedef char yes[1];$/;"	t	struct:is_Mat_fixed_only
yes	lib/armadillo-9.800.2/include/armadillo_bits/traits.hpp	/^  typedef char yes[1];$/;"	t	struct:is_Row_fixed_only
za	src/GreensTensor/GreensTensor.h	/^    double v, za;$/;"	m	class:GreensTensor
zeros	lib/armadillo-9.800.2/include/armadillo_bits/Col_meat.hpp	/^Col<eT>::fixed<fixed_n_elem>::zeros()$/;"	f	class:Col::fixed
zeros	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::zeros()$/;"	f	class:Cube
zeros	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::zeros(const SizeCube& s)$/;"	f	class:Cube
zeros	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::zeros(const uword in_rows, const uword in_cols, const uword in_slices)$/;"	f	class:Cube
zeros	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::zeros()$/;"	f	class:MapMat
zeros	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::zeros(const SizeMat& s)$/;"	f	class:MapMat
zeros	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::zeros(const uword in_n_rows)$/;"	f	class:MapMat
zeros	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::zeros(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:MapMat
zeros	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::fixed<fixed_n_rows, fixed_n_cols>::zeros()$/;"	f	class:Mat::fixed
zeros	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::zeros()$/;"	f	class:Mat
zeros	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::zeros(const SizeMat& s)$/;"	f	class:Mat
zeros	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::zeros(const uword in_elem)$/;"	f	class:Mat
zeros	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::zeros(const uword in_n_rows, const uword in_n_cols)$/;"	f	class:Mat
zeros	lib/armadillo-9.800.2/include/armadillo_bits/Row_meat.hpp	/^Row<eT>::fixed<fixed_n_elem>::zeros()$/;"	f	class:Row::fixed
zeros	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::zeros()$/;"	f	class:SpMat
zeros	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::zeros(const SizeMat& s)$/;"	f	class:SpMat
zeros	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::zeros(const uword in_elem)$/;"	f	class:SpMat
zeros	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::zeros(const uword in_rows, const uword in_cols)$/;"	f	class:SpMat
zeros	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::zeros()$/;"	f	class:SpSubview
zeros	lib/armadillo-9.800.2/include/armadillo_bits/arma_forward.hpp	/^  static const fill_class<fill_zeros> zeros;$/;"	m	namespace:fill
zeros	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::zeros()$/;"	f	class:diagview
zeros	lib/armadillo-9.800.2/include/armadillo_bits/fn_zeros.hpp	/^zeros(const SizeCube& s)$/;"	f
zeros	lib/armadillo-9.800.2/include/armadillo_bits/fn_zeros.hpp	/^zeros(const SizeCube& s, const typename arma_Cube_only<cube_type>::result* junk = 0)$/;"	f
zeros	lib/armadillo-9.800.2/include/armadillo_bits/fn_zeros.hpp	/^zeros(const SizeMat& s)$/;"	f
zeros	lib/armadillo-9.800.2/include/armadillo_bits/fn_zeros.hpp	/^zeros(const SizeMat& s, const typename arma_Mat_Col_Row_only<obj_type>::result* junk = 0)$/;"	f
zeros	lib/armadillo-9.800.2/include/armadillo_bits/fn_zeros.hpp	/^zeros(const SizeMat& s, const typename arma_SpMat_SpCol_SpRow_only<sp_obj_type>::result* junk = 0)$/;"	f
zeros	lib/armadillo-9.800.2/include/armadillo_bits/fn_zeros.hpp	/^zeros(const uword n_elem)$/;"	f
zeros	lib/armadillo-9.800.2/include/armadillo_bits/fn_zeros.hpp	/^zeros(const uword n_elem, const arma_empty_class junk1 = arma_empty_class(), const typename arma_Mat_Col_Row_only<obj_type>::result* junk2 = 0)$/;"	f
zeros	lib/armadillo-9.800.2/include/armadillo_bits/fn_zeros.hpp	/^zeros(const uword n_rows, const uword n_cols)$/;"	f
zeros	lib/armadillo-9.800.2/include/armadillo_bits/fn_zeros.hpp	/^zeros(const uword n_rows, const uword n_cols, const typename arma_Mat_Col_Row_only<obj_type>::result* junk = 0)$/;"	f
zeros	lib/armadillo-9.800.2/include/armadillo_bits/fn_zeros.hpp	/^zeros(const uword n_rows, const uword n_cols, const typename arma_SpMat_SpCol_SpRow_only<sp_obj_type>::result* junk = 0)$/;"	f
zeros	lib/armadillo-9.800.2/include/armadillo_bits/fn_zeros.hpp	/^zeros(const uword n_rows, const uword n_cols, const uword n_slices)$/;"	f
zeros	lib/armadillo-9.800.2/include/armadillo_bits/fn_zeros.hpp	/^zeros(const uword n_rows, const uword n_cols, const uword n_slices, const typename arma_Cube_only<cube_type>::result* junk = 0)$/;"	f
zeros	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::zeros()$/;"	f	class:podarray
zeros	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::zeros(const uword new_n_elem)$/;"	f	class:podarray
zeros	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::zeros()$/;"	f	class:spdiagview
zeros	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::zeros()$/;"	f	class:subview_cube
zeros	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::zeros()$/;"	f	class:subview_cube_slices
zeros	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::zeros()$/;"	f	class:subview_elem1
zeros	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::zeros()$/;"	f	class:subview_elem2
zeros	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::zeros()$/;"	f	class:subview
zeros	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview_col<eT>::zeros()$/;"	f	class:subview_col
zeros_member	lib/armadillo-9.800.2/docs.html	/^<a name="zeros_member"><\/a>$/;"	a
zeros_standalone	lib/armadillo-9.800.2/docs.html	/^<a name="zeros_standalone"><\/a>$/;"	a
~Cube	lib/armadillo-9.800.2/include/armadillo_bits/Cube_meat.hpp	/^Cube<eT>::~Cube()$/;"	f	class:Cube
~CubeToMatOp	lib/armadillo-9.800.2/include/armadillo_bits/CubeToMatOp_meat.hpp	/^CubeToMatOp<T1, op_type>::~CubeToMatOp()$/;"	f	class:CubeToMatOp
~DecomposedExpression	lib/armadillo-9.800.2/tests/catch.hpp	/^        virtual ~DecomposedExpression() {}$/;"	f	struct:Catch::DecomposedExpression
~Gen	lib/armadillo-9.800.2/include/armadillo_bits/Gen_meat.hpp	/^Gen<T1, gen_type>::~Gen()$/;"	f	class:Gen
~GenCube	lib/armadillo-9.800.2/include/armadillo_bits/GenCube_meat.hpp	/^GenCube<eT, gen_type>::~GenCube()$/;"	f	class:GenCube
~Glue	lib/armadillo-9.800.2/include/armadillo_bits/Glue_meat.hpp	/^Glue<T1,T2,glue_type>::~Glue()$/;"	f	class:Glue
~GlueCube	lib/armadillo-9.800.2/include/armadillo_bits/GlueCube_meat.hpp	/^GlueCube<T1,T2,glue_type>::~GlueCube()$/;"	f	class:GlueCube
~MapMat	lib/armadillo-9.800.2/include/armadillo_bits/MapMat_meat.hpp	/^MapMat<eT>::~MapMat()$/;"	f	class:MapMat
~Mat	lib/armadillo-9.800.2/include/armadillo_bits/Mat_meat.hpp	/^Mat<eT>::~Mat()$/;"	f	class:Mat
~MethodTestCase	lib/armadillo-9.800.2/tests/catch.hpp	/^    virtual ~MethodTestCase() {}$/;"	f	class:Catch::MethodTestCase
~Op	lib/armadillo-9.800.2/include/armadillo_bits/Op_meat.hpp	/^Op<T1, op_type>::~Op()$/;"	f	class:Op
~OpCube	lib/armadillo-9.800.2/include/armadillo_bits/OpCube_meat.hpp	/^OpCube<T1, op_type>::~OpCube()$/;"	f	class:OpCube
~Ptr	lib/armadillo-9.800.2/tests/catch.hpp	/^        ~Ptr(){$/;"	f	class:Catch::Ptr
~SpGlue	lib/armadillo-9.800.2/include/armadillo_bits/SpGlue_meat.hpp	/^SpGlue<T1,T2,spglue_type>::~SpGlue()$/;"	f	class:SpGlue
~SpMat	lib/armadillo-9.800.2/include/armadillo_bits/SpMat_meat.hpp	/^SpMat<eT>::~SpMat()$/;"	f	class:SpMat
~SpOp	lib/armadillo-9.800.2/include/armadillo_bits/SpOp_meat.hpp	/^SpOp<T1, op_type>::~SpOp()$/;"	f	class:SpOp
~SpSubview	lib/armadillo-9.800.2/include/armadillo_bits/SpSubview_meat.hpp	/^SpSubview<eT>::~SpSubview()$/;"	f	class:SpSubview
~SpToDOp	lib/armadillo-9.800.2/include/armadillo_bits/SpToDOp_meat.hpp	/^SpToDOp<T1, op_type>::~SpToDOp()$/;"	f	class:SpToDOp
~arma_counter	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^arma_counter<eT>::~arma_counter()$/;"	f	class:arma_counter
~diagmat_proxy_check	lib/armadillo-9.800.2/include/armadillo_bits/diagmat_proxy.hpp	/^  inline ~diagmat_proxy_check()$/;"	f	class:diagmat_proxy_check
~diagview	lib/armadillo-9.800.2/include/armadillo_bits/diagview_meat.hpp	/^diagview<eT>::~diagview()$/;"	f	class:diagview
~eGlue	lib/armadillo-9.800.2/include/armadillo_bits/eGlue_meat.hpp	/^eGlue<T1,T2,eglue_type>::~eGlue()$/;"	f	class:eGlue
~eGlueCube	lib/armadillo-9.800.2/include/armadillo_bits/eGlueCube_meat.hpp	/^eGlueCube<T1,T2,eglue_type>::~eGlueCube()$/;"	f	class:eGlueCube
~eOp	lib/armadillo-9.800.2/include/armadillo_bits/eOp_meat.hpp	/^eOp<T1, eop_type>::~eOp()$/;"	f	class:eOp
~eOpCube	lib/armadillo-9.800.2/include/armadillo_bits/eOpCube_meat.hpp	/^eOpCube<T1, eop_type>::~eOpCube()$/;"	f	class:eOpCube
~field	lib/armadillo-9.800.2/include/armadillo_bits/field_meat.hpp	/^field<oT>::~field()$/;"	f	class:field
~field_injector	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^field_injector<T1>::~field_injector()$/;"	f	class:field_injector
~field_injector_row	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^field_injector_row<oT>::~field_injector_row()$/;"	f	class:field_injector_row
~gmm_diag	lib/armadillo-9.800.2/include/armadillo_bits/gmm_diag_meat.hpp	/^gmm_diag<eT>::~gmm_diag()$/;"	f	class:gmm_priv::gmm_diag
~gmm_full	lib/armadillo-9.800.2/include/armadillo_bits/gmm_full_meat.hpp	/^gmm_full<eT>::~gmm_full()$/;"	f	class:gmm_priv::gmm_full
~mat_injector	lib/armadillo-9.800.2/include/armadillo_bits/injector_meat.hpp	/^mat_injector<T1>::~mat_injector()$/;"	f	class:mat_injector
~mtGlue	lib/armadillo-9.800.2/include/armadillo_bits/mtGlue_meat.hpp	/^mtGlue<out_eT,T1,T2,glue_type>::~mtGlue()$/;"	f	class:mtGlue
~mtGlueCube	lib/armadillo-9.800.2/include/armadillo_bits/mtGlueCube_meat.hpp	/^mtGlueCube<out_eT,T1,T2,glue_type>::~mtGlueCube()$/;"	f	class:mtGlueCube
~mtOp	lib/armadillo-9.800.2/include/armadillo_bits/mtOp_meat.hpp	/^mtOp<out_eT, T1, op_type>::~mtOp()$/;"	f	class:mtOp
~mtOpCube	lib/armadillo-9.800.2/include/armadillo_bits/mtOpCube_meat.hpp	/^mtOpCube<out_eT, T1, op_type>::~mtOpCube()$/;"	f	class:mtOpCube
~mtSpGlue	lib/armadillo-9.800.2/include/armadillo_bits/mtSpGlue_meat.hpp	/^mtSpGlue<out_eT,T1,T2,spglue_type>::~mtSpGlue()$/;"	f	class:mtSpGlue
~mtSpOp	lib/armadillo-9.800.2/include/armadillo_bits/mtSpOp_meat.hpp	/^mtSpOp<out_eT, T1, op_type>::~mtSpOp()$/;"	f	class:mtSpOp
~op_chi2rnd_varying_df	lib/armadillo-9.800.2/include/armadillo_bits/op_chi2rnd_meat.hpp	/^op_chi2rnd_varying_df<eT>::~op_chi2rnd_varying_df()$/;"	f	class:op_chi2rnd_varying_df
~partial_unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  ~partial_unwrap_check()$/;"	f	struct:partial_unwrap_check
~partial_unwrap_check_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  ~partial_unwrap_check_fixed()$/;"	f	struct:partial_unwrap_check_fixed
~partial_unwrap_check_htrans2_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  ~partial_unwrap_check_htrans2_fixed()$/;"	f	struct:partial_unwrap_check_htrans2_fixed
~partial_unwrap_check_htrans_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  ~partial_unwrap_check_htrans_fixed()$/;"	f	struct:partial_unwrap_check_htrans_fixed
~partial_unwrap_check_neg_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  ~partial_unwrap_check_neg_fixed()$/;"	f	struct:partial_unwrap_check_neg_fixed
~partial_unwrap_check_scalar_times_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  ~partial_unwrap_check_scalar_times_fixed()$/;"	f	struct:partial_unwrap_check_scalar_times_fixed
~podarray	lib/armadillo-9.800.2/include/armadillo_bits/podarray_meat.hpp	/^podarray<eT>::~podarray()$/;"	f	class:podarray
~running_stat	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_meat.hpp	/^running_stat<eT>::~running_stat()$/;"	f	class:running_stat
~running_stat_vec	lib/armadillo-9.800.2/include/armadillo_bits/running_stat_vec_meat.hpp	/^running_stat_vec<obj_type>::~running_stat_vec()$/;"	f	class:running_stat_vec
~spdiagview	lib/armadillo-9.800.2/include/armadillo_bits/spdiagview_meat.hpp	/^spdiagview<eT>::~spdiagview()$/;"	f	class:spdiagview
~subview	lib/armadillo-9.800.2/include/armadillo_bits/subview_meat.hpp	/^subview<eT>::~subview()$/;"	f	class:subview
~subview_cube	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_meat.hpp	/^subview_cube<eT>::~subview_cube()$/;"	f	class:subview_cube
~subview_cube_each1	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each1<eT>::~subview_cube_each1()$/;"	f	class:subview_cube_each1
~subview_cube_each2	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_each_meat.hpp	/^subview_cube_each2<eT,TB>::~subview_cube_each2()$/;"	f	class:subview_cube_each2
~subview_cube_slices	lib/armadillo-9.800.2/include/armadillo_bits/subview_cube_slices_meat.hpp	/^subview_cube_slices<eT,T1>::~subview_cube_slices()$/;"	f	class:subview_cube_slices
~subview_each1	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each1<parent,mode>::~subview_each1()$/;"	f	class:subview_each1
~subview_each2	lib/armadillo-9.800.2/include/armadillo_bits/subview_each_meat.hpp	/^subview_each2<parent,mode,TB>::~subview_each2()$/;"	f	class:subview_each2
~subview_elem1	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem1_meat.hpp	/^subview_elem1<eT,T1>::~subview_elem1()$/;"	f	class:subview_elem1
~subview_elem2	lib/armadillo-9.800.2/include/armadillo_bits/subview_elem2_meat.hpp	/^subview_elem2<eT,T1,T2>::~subview_elem2()$/;"	f	class:subview_elem2
~subview_field	lib/armadillo-9.800.2/include/armadillo_bits/subview_field_meat.hpp	/^subview_field<oT>::~subview_field()$/;"	f	class:subview_field
~unwrap_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  ~unwrap_check()$/;"	f	struct:unwrap_check
~unwrap_check_fixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  ~unwrap_check_fixed()$/;"	f	struct:unwrap_check_fixed
~unwrap_check_mixed	lib/armadillo-9.800.2/include/armadillo_bits/unwrap.hpp	/^  ~unwrap_check_mixed()$/;"	f	struct:unwrap_check_mixed
~unwrap_cube_check	lib/armadillo-9.800.2/include/armadillo_bits/unwrap_cube.hpp	/^  ~unwrap_cube_check()$/;"	f	struct:unwrap_cube_check
~wall_clock	lib/armadillo-9.800.2/include/armadillo_bits/wall_clock_meat.hpp	/^wall_clock::~wall_clock()$/;"	f	class:wall_clock
